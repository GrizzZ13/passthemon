/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 186.0, "minX": 0.0, "maxY": 24158.0, "series": [{"data": [[0.0, 186.0], [0.1, 237.0], [0.2, 253.0], [0.3, 338.0], [0.4, 428.0], [0.5, 444.0], [0.6, 453.0], [0.7, 458.0], [0.8, 462.0], [0.9, 469.0], [1.0, 475.0], [1.1, 553.0], [1.2, 572.0], [1.3, 592.0], [1.4, 700.0], [1.5, 705.0], [1.6, 781.0], [1.7, 855.0], [1.8, 1001.0], [1.9, 1124.0], [2.0, 1167.0], [2.1, 1245.0], [2.2, 1294.0], [2.3, 1320.0], [2.4, 1355.0], [2.5, 1364.0], [2.6, 1564.0], [2.7, 1671.0], [2.8, 1766.0], [2.9, 1796.0], [3.0, 1885.0], [3.1, 1908.0], [3.2, 1972.0], [3.3, 2003.0], [3.4, 2137.0], [3.5, 2241.0], [3.6, 2248.0], [3.7, 2253.0], [3.8, 2391.0], [3.9, 2420.0], [4.0, 2518.0], [4.1, 2568.0], [4.2, 2645.0], [4.3, 2707.0], [4.4, 2747.0], [4.5, 2821.0], [4.6, 2826.0], [4.7, 2831.0], [4.8, 2836.0], [4.9, 2847.0], [5.0, 2857.0], [5.1, 2947.0], [5.2, 2966.0], [5.3, 3026.0], [5.4, 3038.0], [5.5, 3083.0], [5.6, 3136.0], [5.7, 3196.0], [5.8, 3272.0], [5.9, 3323.0], [6.0, 3356.0], [6.1, 3439.0], [6.2, 3491.0], [6.3, 3551.0], [6.4, 3576.0], [6.5, 3616.0], [6.6, 3646.0], [6.7, 3661.0], [6.8, 3669.0], [6.9, 3709.0], [7.0, 3759.0], [7.1, 3781.0], [7.2, 3824.0], [7.3, 3904.0], [7.4, 3939.0], [7.5, 3991.0], [7.6, 4013.0], [7.7, 4020.0], [7.8, 4025.0], [7.9, 4040.0], [8.0, 4058.0], [8.1, 4066.0], [8.2, 4068.0], [8.3, 4076.0], [8.4, 4080.0], [8.5, 4089.0], [8.6, 4090.0], [8.7, 4094.0], [8.8, 4103.0], [8.9, 4110.0], [9.0, 4119.0], [9.1, 4125.0], [9.2, 4127.0], [9.3, 4132.0], [9.4, 4135.0], [9.5, 4137.0], [9.6, 4151.0], [9.7, 4154.0], [9.8, 4157.0], [9.9, 4162.0], [10.0, 4163.0], [10.1, 4168.0], [10.2, 4174.0], [10.3, 4176.0], [10.4, 4180.0], [10.5, 4182.0], [10.6, 4186.0], [10.7, 4187.0], [10.8, 4190.0], [10.9, 4202.0], [11.0, 4213.0], [11.1, 4216.0], [11.2, 4223.0], [11.3, 4297.0], [11.4, 4309.0], [11.5, 4359.0], [11.6, 4404.0], [11.7, 4449.0], [11.8, 4503.0], [11.9, 4563.0], [12.0, 4594.0], [12.1, 4624.0], [12.2, 4669.0], [12.3, 4697.0], [12.4, 4713.0], [12.5, 4742.0], [12.6, 4749.0], [12.7, 4756.0], [12.8, 4781.0], [12.9, 4804.0], [13.0, 4821.0], [13.1, 4831.0], [13.2, 4862.0], [13.3, 4910.0], [13.4, 4946.0], [13.5, 4966.0], [13.6, 4983.0], [13.7, 4990.0], [13.8, 4993.0], [13.9, 5005.0], [14.0, 5005.0], [14.1, 5008.0], [14.2, 5010.0], [14.3, 5012.0], [14.4, 5014.0], [14.5, 5015.0], [14.6, 5017.0], [14.7, 5022.0], [14.8, 5027.0], [14.9, 5038.0], [15.0, 5048.0], [15.1, 5060.0], [15.2, 5071.0], [15.3, 5074.0], [15.4, 5080.0], [15.5, 5094.0], [15.6, 5100.0], [15.7, 5104.0], [15.8, 5114.0], [15.9, 5126.0], [16.0, 5138.0], [16.1, 5155.0], [16.2, 5160.0], [16.3, 5169.0], [16.4, 5178.0], [16.5, 5186.0], [16.6, 5199.0], [16.7, 5205.0], [16.8, 5217.0], [16.9, 5226.0], [17.0, 5235.0], [17.1, 5242.0], [17.2, 5263.0], [17.3, 5280.0], [17.4, 5291.0], [17.5, 5298.0], [17.6, 5304.0], [17.7, 5331.0], [17.8, 5387.0], [17.9, 5423.0], [18.0, 5466.0], [18.1, 5492.0], [18.2, 5527.0], [18.3, 5569.0], [18.4, 5571.0], [18.5, 5630.0], [18.6, 5657.0], [18.7, 5678.0], [18.8, 5724.0], [18.9, 5752.0], [19.0, 5778.0], [19.1, 5796.0], [19.2, 5865.0], [19.3, 5902.0], [19.4, 5914.0], [19.5, 5944.0], [19.6, 6006.0], [19.7, 6018.0], [19.8, 6027.0], [19.9, 6055.0], [20.0, 6073.0], [20.1, 6082.0], [20.2, 6088.0], [20.3, 6120.0], [20.4, 6151.0], [20.5, 6170.0], [20.6, 6206.0], [20.7, 6214.0], [20.8, 6222.0], [20.9, 6236.0], [21.0, 6276.0], [21.1, 6300.0], [21.2, 6309.0], [21.3, 6329.0], [21.4, 6334.0], [21.5, 6342.0], [21.6, 6349.0], [21.7, 6398.0], [21.8, 6413.0], [21.9, 6426.0], [22.0, 6452.0], [22.1, 6477.0], [22.2, 6490.0], [22.3, 6507.0], [22.4, 6514.0], [22.5, 6535.0], [22.6, 6551.0], [22.7, 6585.0], [22.8, 6604.0], [22.9, 6623.0], [23.0, 6634.0], [23.1, 6666.0], [23.2, 6682.0], [23.3, 6687.0], [23.4, 6701.0], [23.5, 6707.0], [23.6, 6725.0], [23.7, 6748.0], [23.8, 6762.0], [23.9, 6777.0], [24.0, 6799.0], [24.1, 6818.0], [24.2, 6844.0], [24.3, 6868.0], [24.4, 6880.0], [24.5, 6888.0], [24.6, 6900.0], [24.7, 6936.0], [24.8, 6943.0], [24.9, 6955.0], [25.0, 6979.0], [25.1, 7007.0], [25.2, 7023.0], [25.3, 7068.0], [25.4, 7079.0], [25.5, 7090.0], [25.6, 7101.0], [25.7, 7115.0], [25.8, 7139.0], [25.9, 7169.0], [26.0, 7181.0], [26.1, 7201.0], [26.2, 7218.0], [26.3, 7231.0], [26.4, 7273.0], [26.5, 7295.0], [26.6, 7302.0], [26.7, 7320.0], [26.8, 7331.0], [26.9, 7337.0], [27.0, 7352.0], [27.1, 7359.0], [27.2, 7377.0], [27.3, 7390.0], [27.4, 7407.0], [27.5, 7417.0], [27.6, 7421.0], [27.7, 7430.0], [27.8, 7433.0], [27.9, 7442.0], [28.0, 7448.0], [28.1, 7454.0], [28.2, 7461.0], [28.3, 7468.0], [28.4, 7480.0], [28.5, 7502.0], [28.6, 7509.0], [28.7, 7522.0], [28.8, 7536.0], [28.9, 7543.0], [29.0, 7561.0], [29.1, 7569.0], [29.2, 7586.0], [29.3, 7588.0], [29.4, 7600.0], [29.5, 7626.0], [29.6, 7646.0], [29.7, 7662.0], [29.8, 7673.0], [29.9, 7699.0], [30.0, 7719.0], [30.1, 7736.0], [30.2, 7758.0], [30.3, 7767.0], [30.4, 7782.0], [30.5, 7799.0], [30.6, 7818.0], [30.7, 7830.0], [30.8, 7838.0], [30.9, 7845.0], [31.0, 7858.0], [31.1, 7869.0], [31.2, 7896.0], [31.3, 7911.0], [31.4, 7927.0], [31.5, 7949.0], [31.6, 7963.0], [31.7, 7980.0], [31.8, 7990.0], [31.9, 7999.0], [32.0, 8013.0], [32.1, 8033.0], [32.2, 8043.0], [32.3, 8061.0], [32.4, 8082.0], [32.5, 8089.0], [32.6, 8105.0], [32.7, 8111.0], [32.8, 8118.0], [32.9, 8130.0], [33.0, 8136.0], [33.1, 8145.0], [33.2, 8149.0], [33.3, 8167.0], [33.4, 8172.0], [33.5, 8189.0], [33.6, 8194.0], [33.7, 8215.0], [33.8, 8222.0], [33.9, 8240.0], [34.0, 8253.0], [34.1, 8262.0], [34.2, 8284.0], [34.3, 8296.0], [34.4, 8303.0], [34.5, 8306.0], [34.6, 8320.0], [34.7, 8327.0], [34.8, 8329.0], [34.9, 8347.0], [35.0, 8359.0], [35.1, 8373.0], [35.2, 8383.0], [35.3, 8394.0], [35.4, 8401.0], [35.5, 8407.0], [35.6, 8418.0], [35.7, 8426.0], [35.8, 8433.0], [35.9, 8443.0], [36.0, 8458.0], [36.1, 8476.0], [36.2, 8495.0], [36.3, 8505.0], [36.4, 8528.0], [36.5, 8537.0], [36.6, 8542.0], [36.7, 8550.0], [36.8, 8561.0], [36.9, 8583.0], [37.0, 8607.0], [37.1, 8636.0], [37.2, 8645.0], [37.3, 8657.0], [37.4, 8661.0], [37.5, 8670.0], [37.6, 8680.0], [37.7, 8683.0], [37.8, 8690.0], [37.9, 8693.0], [38.0, 8699.0], [38.1, 8703.0], [38.2, 8708.0], [38.3, 8710.0], [38.4, 8712.0], [38.5, 8714.0], [38.6, 8715.0], [38.7, 8717.0], [38.8, 8719.0], [38.9, 8721.0], [39.0, 8724.0], [39.1, 8726.0], [39.2, 8729.0], [39.3, 8729.0], [39.4, 8735.0], [39.5, 8739.0], [39.6, 8747.0], [39.7, 8756.0], [39.8, 8762.0], [39.9, 8768.0], [40.0, 8774.0], [40.1, 8778.0], [40.2, 8783.0], [40.3, 8790.0], [40.4, 8793.0], [40.5, 8795.0], [40.6, 8808.0], [40.7, 8812.0], [40.8, 8824.0], [40.9, 8830.0], [41.0, 8833.0], [41.1, 8841.0], [41.2, 8853.0], [41.3, 8862.0], [41.4, 8865.0], [41.5, 8867.0], [41.6, 8869.0], [41.7, 8875.0], [41.8, 8877.0], [41.9, 8878.0], [42.0, 8884.0], [42.1, 8888.0], [42.2, 8891.0], [42.3, 8893.0], [42.4, 8895.0], [42.5, 8903.0], [42.6, 8909.0], [42.7, 8911.0], [42.8, 8916.0], [42.9, 8918.0], [43.0, 8924.0], [43.1, 8927.0], [43.2, 8933.0], [43.3, 8937.0], [43.4, 8940.0], [43.5, 8948.0], [43.6, 8950.0], [43.7, 8956.0], [43.8, 8960.0], [43.9, 8965.0], [44.0, 8971.0], [44.1, 8973.0], [44.2, 8975.0], [44.3, 8979.0], [44.4, 8986.0], [44.5, 8989.0], [44.6, 8993.0], [44.7, 8996.0], [44.8, 8998.0], [44.9, 9001.0], [45.0, 9003.0], [45.1, 9005.0], [45.2, 9007.0], [45.3, 9008.0], [45.4, 9012.0], [45.5, 9014.0], [45.6, 9017.0], [45.7, 9019.0], [45.8, 9019.0], [45.9, 9026.0], [46.0, 9027.0], [46.1, 9029.0], [46.2, 9031.0], [46.3, 9032.0], [46.4, 9034.0], [46.5, 9039.0], [46.6, 9042.0], [46.7, 9057.0], [46.8, 9060.0], [46.9, 9068.0], [47.0, 9070.0], [47.1, 9073.0], [47.2, 9075.0], [47.3, 9079.0], [47.4, 9083.0], [47.5, 9092.0], [47.6, 9095.0], [47.7, 9101.0], [47.8, 9105.0], [47.9, 9109.0], [48.0, 9111.0], [48.1, 9118.0], [48.2, 9123.0], [48.3, 9127.0], [48.4, 9131.0], [48.5, 9139.0], [48.6, 9144.0], [48.7, 9152.0], [48.8, 9159.0], [48.9, 9167.0], [49.0, 9171.0], [49.1, 9174.0], [49.2, 9190.0], [49.3, 9197.0], [49.4, 9215.0], [49.5, 9220.0], [49.6, 9230.0], [49.7, 9237.0], [49.8, 9248.0], [49.9, 9258.0], [50.0, 9274.0], [50.1, 9285.0], [50.2, 9293.0], [50.3, 9300.0], [50.4, 9309.0], [50.5, 9316.0], [50.6, 9320.0], [50.7, 9323.0], [50.8, 9329.0], [50.9, 9332.0], [51.0, 9352.0], [51.1, 9371.0], [51.2, 9380.0], [51.3, 9386.0], [51.4, 9400.0], [51.5, 9415.0], [51.6, 9428.0], [51.7, 9439.0], [51.8, 9449.0], [51.9, 9463.0], [52.0, 9499.0], [52.1, 9508.0], [52.2, 9517.0], [52.3, 9529.0], [52.4, 9536.0], [52.5, 9549.0], [52.6, 9553.0], [52.7, 9563.0], [52.8, 9567.0], [52.9, 9576.0], [53.0, 9581.0], [53.1, 9588.0], [53.2, 9595.0], [53.3, 9598.0], [53.4, 9603.0], [53.5, 9614.0], [53.6, 9623.0], [53.7, 9639.0], [53.8, 9648.0], [53.9, 9656.0], [54.0, 9661.0], [54.1, 9662.0], [54.2, 9664.0], [54.3, 9665.0], [54.4, 9667.0], [54.5, 9668.0], [54.6, 9672.0], [54.7, 9675.0], [54.8, 9677.0], [54.9, 9680.0], [55.0, 9682.0], [55.1, 9686.0], [55.2, 9692.0], [55.3, 9697.0], [55.4, 9699.0], [55.5, 9705.0], [55.6, 9708.0], [55.7, 9709.0], [55.8, 9713.0], [55.9, 9717.0], [56.0, 9720.0], [56.1, 9724.0], [56.2, 9727.0], [56.3, 9736.0], [56.4, 9738.0], [56.5, 9741.0], [56.6, 9746.0], [56.7, 9755.0], [56.8, 9760.0], [56.9, 9767.0], [57.0, 9780.0], [57.1, 9786.0], [57.2, 9790.0], [57.3, 9800.0], [57.4, 9813.0], [57.5, 9823.0], [57.6, 9826.0], [57.7, 9832.0], [57.8, 9836.0], [57.9, 9838.0], [58.0, 9841.0], [58.1, 9845.0], [58.2, 9847.0], [58.3, 9854.0], [58.4, 9855.0], [58.5, 9857.0], [58.6, 9860.0], [58.7, 9873.0], [58.8, 9882.0], [58.9, 9887.0], [59.0, 9890.0], [59.1, 9905.0], [59.2, 9906.0], [59.3, 9913.0], [59.4, 9919.0], [59.5, 9922.0], [59.6, 9927.0], [59.7, 9933.0], [59.8, 9938.0], [59.9, 9945.0], [60.0, 9955.0], [60.1, 9958.0], [60.2, 9962.0], [60.3, 9965.0], [60.4, 9967.0], [60.5, 9969.0], [60.6, 9975.0], [60.7, 9978.0], [60.8, 9989.0], [60.9, 10004.0], [61.0, 10012.0], [61.1, 10017.0], [61.2, 10019.0], [61.3, 10025.0], [61.4, 10028.0], [61.5, 10034.0], [61.6, 10043.0], [61.7, 10051.0], [61.8, 10054.0], [61.9, 10061.0], [62.0, 10069.0], [62.1, 10074.0], [62.2, 10084.0], [62.3, 10088.0], [62.4, 10095.0], [62.5, 10099.0], [62.6, 10105.0], [62.7, 10109.0], [62.8, 10113.0], [62.9, 10125.0], [63.0, 10128.0], [63.1, 10130.0], [63.2, 10134.0], [63.3, 10137.0], [63.4, 10139.0], [63.5, 10143.0], [63.6, 10145.0], [63.7, 10152.0], [63.8, 10159.0], [63.9, 10163.0], [64.0, 10170.0], [64.1, 10173.0], [64.2, 10181.0], [64.3, 10184.0], [64.4, 10189.0], [64.5, 10198.0], [64.6, 10203.0], [64.7, 10209.0], [64.8, 10215.0], [64.9, 10220.0], [65.0, 10237.0], [65.1, 10246.0], [65.2, 10254.0], [65.3, 10256.0], [65.4, 10263.0], [65.5, 10269.0], [65.6, 10271.0], [65.7, 10283.0], [65.8, 10297.0], [65.9, 10300.0], [66.0, 10304.0], [66.1, 10309.0], [66.2, 10316.0], [66.3, 10332.0], [66.4, 10350.0], [66.5, 10360.0], [66.6, 10367.0], [66.7, 10383.0], [66.8, 10391.0], [66.9, 10414.0], [67.0, 10424.0], [67.1, 10430.0], [67.2, 10442.0], [67.3, 10447.0], [67.4, 10457.0], [67.5, 10462.0], [67.6, 10471.0], [67.7, 10478.0], [67.8, 10482.0], [67.9, 10494.0], [68.0, 10512.0], [68.1, 10521.0], [68.2, 10540.0], [68.3, 10549.0], [68.4, 10556.0], [68.5, 10562.0], [68.6, 10564.0], [68.7, 10569.0], [68.8, 10574.0], [68.9, 10583.0], [69.0, 10590.0], [69.1, 10598.0], [69.2, 10604.0], [69.3, 10609.0], [69.4, 10616.0], [69.5, 10640.0], [69.6, 10649.0], [69.7, 10664.0], [69.8, 10673.0], [69.9, 10693.0], [70.0, 10703.0], [70.1, 10730.0], [70.2, 10751.0], [70.3, 10765.0], [70.4, 10775.0], [70.5, 10790.0], [70.6, 10798.0], [70.7, 10802.0], [70.8, 10807.0], [70.9, 10821.0], [71.0, 10825.0], [71.1, 10846.0], [71.2, 10856.0], [71.3, 10869.0], [71.4, 10889.0], [71.5, 10898.0], [71.6, 10907.0], [71.7, 10920.0], [71.8, 10936.0], [71.9, 10945.0], [72.0, 10949.0], [72.1, 10955.0], [72.2, 10959.0], [72.3, 10965.0], [72.4, 10968.0], [72.5, 10970.0], [72.6, 10972.0], [72.7, 10976.0], [72.8, 10980.0], [72.9, 10983.0], [73.0, 10985.0], [73.1, 10989.0], [73.2, 10991.0], [73.3, 10993.0], [73.4, 10995.0], [73.5, 10997.0], [73.6, 11000.0], [73.7, 11002.0], [73.8, 11004.0], [73.9, 11006.0], [74.0, 11009.0], [74.1, 11013.0], [74.2, 11020.0], [74.3, 11023.0], [74.4, 11026.0], [74.5, 11042.0], [74.6, 11055.0], [74.7, 11059.0], [74.8, 11068.0], [74.9, 11082.0], [75.0, 11090.0], [75.1, 11100.0], [75.2, 11103.0], [75.3, 11108.0], [75.4, 11126.0], [75.5, 11138.0], [75.6, 11146.0], [75.7, 11155.0], [75.8, 11168.0], [75.9, 11175.0], [76.0, 11184.0], [76.1, 11192.0], [76.2, 11196.0], [76.3, 11208.0], [76.4, 11213.0], [76.5, 11224.0], [76.6, 11251.0], [76.7, 11260.0], [76.8, 11263.0], [76.9, 11273.0], [77.0, 11278.0], [77.1, 11288.0], [77.2, 11294.0], [77.3, 11299.0], [77.4, 11302.0], [77.5, 11308.0], [77.6, 11317.0], [77.7, 11324.0], [77.8, 11329.0], [77.9, 11340.0], [78.0, 11350.0], [78.1, 11358.0], [78.2, 11377.0], [78.3, 11390.0], [78.4, 11408.0], [78.5, 11418.0], [78.6, 11430.0], [78.7, 11438.0], [78.8, 11447.0], [78.9, 11455.0], [79.0, 11462.0], [79.1, 11479.0], [79.2, 11492.0], [79.3, 11502.0], [79.4, 11510.0], [79.5, 11525.0], [79.6, 11538.0], [79.7, 11541.0], [79.8, 11543.0], [79.9, 11547.0], [80.0, 11571.0], [80.1, 11576.0], [80.2, 11589.0], [80.3, 11606.0], [80.4, 11618.0], [80.5, 11640.0], [80.6, 11652.0], [80.7, 11664.0], [80.8, 11674.0], [80.9, 11688.0], [81.0, 11694.0], [81.1, 11714.0], [81.2, 11723.0], [81.3, 11737.0], [81.4, 11752.0], [81.5, 11759.0], [81.6, 11763.0], [81.7, 11775.0], [81.8, 11782.0], [81.9, 11788.0], [82.0, 11797.0], [82.1, 11805.0], [82.2, 11816.0], [82.3, 11823.0], [82.4, 11829.0], [82.5, 11833.0], [82.6, 11850.0], [82.7, 11886.0], [82.8, 11901.0], [82.9, 11924.0], [83.0, 11931.0], [83.1, 11955.0], [83.2, 11980.0], [83.3, 11993.0], [83.4, 12008.0], [83.5, 12024.0], [83.6, 12033.0], [83.7, 12043.0], [83.8, 12070.0], [83.9, 12074.0], [84.0, 12104.0], [84.1, 12123.0], [84.2, 12143.0], [84.3, 12150.0], [84.4, 12179.0], [84.5, 12218.0], [84.6, 12256.0], [84.7, 12268.0], [84.8, 12278.0], [84.9, 12319.0], [85.0, 12344.0], [85.1, 12355.0], [85.2, 12392.0], [85.3, 12410.0], [85.4, 12456.0], [85.5, 12502.0], [85.6, 12528.0], [85.7, 12583.0], [85.8, 12644.0], [85.9, 12653.0], [86.0, 12658.0], [86.1, 12664.0], [86.2, 12666.0], [86.3, 12670.0], [86.4, 12676.0], [86.5, 12679.0], [86.6, 12684.0], [86.7, 12721.0], [86.8, 12769.0], [86.9, 12791.0], [87.0, 12799.0], [87.1, 12804.0], [87.2, 12815.0], [87.3, 12835.0], [87.4, 12858.0], [87.5, 12924.0], [87.6, 12952.0], [87.7, 12977.0], [87.8, 12990.0], [87.9, 13039.0], [88.0, 13090.0], [88.1, 13108.0], [88.2, 13111.0], [88.3, 13118.0], [88.4, 13123.0], [88.5, 13133.0], [88.6, 13139.0], [88.7, 13147.0], [88.8, 13153.0], [88.9, 13155.0], [89.0, 13157.0], [89.1, 13157.0], [89.2, 13161.0], [89.3, 13168.0], [89.4, 13173.0], [89.5, 13245.0], [89.6, 13259.0], [89.7, 13266.0], [89.8, 13279.0], [89.9, 13336.0], [90.0, 13351.0], [90.1, 13355.0], [90.2, 13356.0], [90.3, 13366.0], [90.4, 13377.0], [90.5, 13420.0], [90.6, 13471.0], [90.7, 13527.0], [90.8, 13535.0], [90.9, 13541.0], [91.0, 13551.0], [91.1, 13558.0], [91.2, 13565.0], [91.3, 13569.0], [91.4, 13574.0], [91.5, 13582.0], [91.6, 13588.0], [91.7, 13591.0], [91.8, 13597.0], [91.9, 13657.0], [92.0, 13672.0], [92.1, 13682.0], [92.2, 13690.0], [92.3, 13694.0], [92.4, 13711.0], [92.5, 13751.0], [92.6, 13760.0], [92.7, 13763.0], [92.8, 13771.0], [92.9, 13775.0], [93.0, 13777.0], [93.1, 13780.0], [93.2, 13784.0], [93.3, 13792.0], [93.4, 13802.0], [93.5, 13807.0], [93.6, 13813.0], [93.7, 13818.0], [93.8, 13852.0], [93.9, 13890.0], [94.0, 13963.0], [94.1, 14007.0], [94.2, 14049.0], [94.3, 14949.0], [94.4, 15199.0], [94.5, 15322.0], [94.6, 15325.0], [94.7, 15332.0], [94.8, 15337.0], [94.9, 15363.0], [95.0, 15370.0], [95.1, 15375.0], [95.2, 15380.0], [95.3, 15384.0], [95.4, 15392.0], [95.5, 15397.0], [95.6, 15631.0], [95.7, 15710.0], [95.8, 15870.0], [95.9, 15880.0], [96.0, 15890.0], [96.1, 15986.0], [96.2, 16331.0], [96.3, 16388.0], [96.4, 16401.0], [96.5, 16579.0], [96.6, 16644.0], [96.7, 16735.0], [96.8, 16806.0], [96.9, 16845.0], [97.0, 16890.0], [97.1, 16897.0], [97.2, 17002.0], [97.3, 17031.0], [97.4, 17105.0], [97.5, 17211.0], [97.6, 17247.0], [97.7, 17371.0], [97.8, 17580.0], [97.9, 18007.0], [98.0, 18163.0], [98.1, 18331.0], [98.2, 18355.0], [98.3, 18570.0], [98.4, 18652.0], [98.5, 18654.0], [98.6, 18659.0], [98.7, 18687.0], [98.8, 18771.0], [98.9, 18984.0], [99.0, 19563.0], [99.1, 20129.0], [99.2, 20460.0], [99.3, 20477.0], [99.4, 20497.0], [99.5, 20748.0], [99.6, 20841.0], [99.7, 20853.0], [99.8, 21002.0], [99.9, 23340.0], [100.0, 24158.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 113.0, "series": [{"data": [[100.0, 3.0], [200.0, 6.0], [300.0, 5.0], [400.0, 29.0], [500.0, 11.0], [600.0, 2.0], [700.0, 9.0], [800.0, 5.0], [900.0, 1.0], [1000.0, 5.0], [1100.0, 6.0], [1200.0, 9.0], [1300.0, 12.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 4.0], [1700.0, 8.0], [1800.0, 7.0], [1900.0, 8.0], [2000.0, 3.0], [2100.0, 4.0], [2300.0, 4.0], [2200.0, 11.0], [2400.0, 5.0], [2500.0, 8.0], [2600.0, 5.0], [2700.0, 5.0], [2800.0, 26.0], [2900.0, 6.0], [3000.0, 14.0], [3100.0, 7.0], [3200.0, 5.0], [3300.0, 6.0], [3400.0, 7.0], [3500.0, 10.0], [3700.0, 10.0], [3600.0, 17.0], [3800.0, 5.0], [3900.0, 11.0], [4000.0, 48.0], [4100.0, 86.0], [4200.0, 18.0], [4300.0, 10.0], [4500.0, 9.0], [4600.0, 13.0], [4400.0, 8.0], [4700.0, 22.0], [4800.0, 16.0], [5000.0, 69.0], [5100.0, 41.0], [4900.0, 23.0], [5200.0, 37.0], [5300.0, 11.0], [5400.0, 13.0], [5500.0, 12.0], [5600.0, 11.0], [5700.0, 18.0], [5800.0, 6.0], [6000.0, 28.0], [5900.0, 11.0], [6100.0, 13.0], [6200.0, 20.0], [6300.0, 25.0], [6400.0, 22.0], [6500.0, 21.0], [6600.0, 24.0], [6700.0, 25.0], [6800.0, 23.0], [6900.0, 19.0], [7100.0, 20.0], [7000.0, 21.0], [7200.0, 20.0], [7300.0, 31.0], [7400.0, 44.0], [7500.0, 37.0], [7600.0, 21.0], [7700.0, 24.0], [7800.0, 28.0], [7900.0, 28.0], [8000.0, 26.0], [8100.0, 44.0], [8200.0, 28.0], [8300.0, 41.0], [8400.0, 35.0], [8500.0, 28.0], [8600.0, 42.0], [8700.0, 102.0], [8800.0, 75.0], [8900.0, 96.0], [9000.0, 113.0], [9100.0, 67.0], [9200.0, 37.0], [9300.0, 45.0], [9400.0, 25.0], [9500.0, 53.0], [9600.0, 83.0], [9700.0, 75.0], [9800.0, 72.0], [9900.0, 72.0], [10100.0, 80.0], [10000.0, 66.0], [10200.0, 53.0], [10300.0, 39.0], [10400.0, 43.0], [10500.0, 48.0], [10600.0, 35.0], [10700.0, 26.0], [10800.0, 37.0], [10900.0, 81.0], [11000.0, 60.0], [11100.0, 45.0], [11200.0, 44.0], [11300.0, 43.0], [11400.0, 36.0], [11500.0, 38.0], [11600.0, 31.0], [11700.0, 40.0], [11900.0, 23.0], [11800.0, 30.0], [12000.0, 25.0], [12100.0, 18.0], [12200.0, 16.0], [12300.0, 18.0], [12400.0, 8.0], [12500.0, 9.0], [12600.0, 38.0], [12700.0, 15.0], [13100.0, 56.0], [12900.0, 19.0], [12800.0, 15.0], [13200.0, 16.0], [13300.0, 26.0], [13000.0, 6.0], [13600.0, 20.0], [13700.0, 43.0], [13500.0, 47.0], [13400.0, 6.0], [13800.0, 22.0], [14000.0, 7.0], [13900.0, 4.0], [14300.0, 1.0], [14800.0, 1.0], [14900.0, 2.0], [15100.0, 4.0], [15300.0, 44.0], [15200.0, 1.0], [15400.0, 2.0], [15600.0, 4.0], [15700.0, 3.0], [15800.0, 11.0], [16000.0, 2.0], [15900.0, 3.0], [16300.0, 7.0], [16100.0, 1.0], [17200.0, 7.0], [16500.0, 3.0], [16800.0, 15.0], [17000.0, 8.0], [16900.0, 3.0], [17300.0, 4.0], [17400.0, 2.0], [16700.0, 2.0], [16400.0, 4.0], [17100.0, 3.0], [16600.0, 6.0], [18100.0, 4.0], [17500.0, 3.0], [17600.0, 1.0], [18400.0, 2.0], [18300.0, 7.0], [18000.0, 3.0], [18500.0, 1.0], [18700.0, 4.0], [18900.0, 4.0], [18600.0, 16.0], [19100.0, 2.0], [19000.0, 1.0], [20100.0, 4.0], [19500.0, 1.0], [20400.0, 11.0], [19900.0, 1.0], [20700.0, 5.0], [20600.0, 2.0], [20900.0, 1.0], [20800.0, 6.0], [21000.0, 2.0], [22000.0, 1.0], [23300.0, 2.0], [23500.0, 2.0], [23400.0, 1.0], [23200.0, 1.0], [24100.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 24100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 43.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3896.0, "series": [{"data": [[0.0, 43.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 61.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3896.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 958.2724999999984, "minX": 1.63133316E12, "maxY": 990.634, "series": [{"data": [[1.63133316E12, 958.2724999999984]], "isOverall": false, "label": "getAllImgForThisPage", "isController": false}, {"data": [[1.63133316E12, 990.634]], "isOverall": false, "label": "getAllImgByGoodsId", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133316E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 195.0, "minX": 1.0, "maxY": 21176.5, "series": [{"data": [[2.0, 19642.0], [3.0, 19724.0], [4.0, 18574.0], [5.0, 18947.0], [6.0, 18648.0], [7.0, 18153.5], [8.0, 18064.0], [9.0, 13789.0], [10.0, 12508.0], [11.0, 18925.25], [12.0, 13107.0], [13.0, 13647.0], [14.0, 16533.0], [15.0, 12665.0], [16.0, 19059.6], [17.0, 16720.0], [18.0, 16230.5], [19.0, 15966.0], [20.0, 11688.0], [21.0, 20698.5], [22.0, 15040.0], [23.0, 16411.5], [24.0, 11503.0], [25.0, 18080.333333333332], [26.0, 16435.0], [27.0, 15803.5], [28.0, 16117.0], [29.0, 15837.0], [30.0, 16588.5], [31.0, 12123.0], [33.0, 16283.0], [32.0, 12227.0], [35.0, 12127.0], [34.0, 18387.75], [39.0, 13871.2], [38.0, 20467.5], [41.0, 16360.5], [40.0, 15428.5], [43.0, 11684.0], [42.0, 15844.5], [44.0, 16472.0], [47.0, 13911.5], [46.0, 18945.0], [49.0, 11263.0], [48.0, 12504.0], [50.0, 11898.0], [55.0, 17980.666666666668], [56.0, 11679.4], [61.0, 17599.714285714286], [60.0, 11958.0], [63.0, 12648.5], [62.0, 18012.0], [66.0, 14837.5], [65.0, 15603.5], [64.0, 16015.666666666666], [67.0, 18927.0], [71.0, 14702.5], [70.0, 15020.25], [68.0, 13867.666666666666], [74.0, 15188.0], [73.0, 14785.0], [72.0, 14798.5], [75.0, 18346.0], [79.0, 15139.5], [78.0, 15434.5], [77.0, 13751.75], [76.0, 18344.0], [83.0, 13149.666666666666], [81.0, 14979.5], [80.0, 15154.0], [82.0, 18570.0], [85.0, 13637.666666666666], [84.0, 17221.0], [91.0, 15643.666666666666], [90.0, 11611.5], [88.0, 14883.666666666666], [89.0, 17252.0], [95.0, 11845.333333333334], [92.0, 12097.0], [93.0, 17604.5], [99.0, 12143.0], [97.0, 11166.0], [96.0, 15948.75], [103.0, 11204.0], [102.0, 15897.5], [101.0, 11984.0], [100.0, 17004.0], [106.0, 12452.666666666666], [107.0, 17217.5], [105.0, 17020.333333333332], [111.0, 15833.8], [110.0, 12147.0], [108.0, 12210.0], [115.0, 12969.0], [112.0, 14297.5], [114.0, 17231.0], [113.0, 16689.0], [118.0, 11765.5], [116.0, 11308.0], [119.0, 17169.5], [117.0, 16834.5], [123.0, 12207.0], [122.0, 11203.5], [120.0, 11862.5], [127.0, 11977.0], [126.0, 14047.0], [125.0, 14280.5], [124.0, 14080.0], [132.0, 14582.0], [131.0, 13826.0], [130.0, 16132.666666666664], [129.0, 11451.0], [128.0, 11340.0], [135.0, 17081.0], [134.0, 16800.0], [143.0, 11001.5], [141.0, 14561.0], [139.0, 11010.0], [138.0, 11446.0], [137.0, 15087.0], [136.0, 11638.0], [151.0, 11685.0], [150.0, 11531.0], [149.0, 11817.0], [148.0, 12757.4], [145.0, 15722.4], [147.0, 16579.0], [146.0, 16566.0], [159.0, 15255.857142857143], [158.0, 14213.5], [155.0, 11922.0], [153.0, 12211.0], [152.0, 12363.0], [167.0, 13481.5], [166.0, 14702.5], [164.0, 11576.5], [162.0, 13297.333333333334], [160.0, 10920.0], [161.0, 15708.5], [175.0, 13617.25], [173.0, 12216.0], [172.0, 14026.0], [169.0, 13787.5], [171.0, 15223.0], [170.0, 15404.0], [168.0, 15986.0], [182.0, 11752.0], [179.0, 11057.0], [178.0, 14609.5], [177.0, 12133.5], [191.0, 14709.0], [190.0, 11484.0], [187.0, 14915.4], [186.0, 11449.6], [199.0, 13567.0], [198.0, 11117.5], [195.0, 11349.0], [194.0, 11430.666666666666], [197.0, 195.0], [207.0, 12256.0], [206.0, 11855.333333333334], [203.0, 13261.6], [202.0, 14041.666666666666], [205.0, 15369.0], [204.0, 15376.5], [201.0, 15392.0], [212.0, 14850.888888888889], [211.0, 11447.75], [221.0, 13474.5], [220.0, 11565.333333333334], [219.0, 11035.0], [216.0, 11591.5], [222.0, 15351.428571428572], [217.0, 15375.0], [231.0, 12707.666666666666], [228.0, 13513.5], [227.0, 12751.0], [226.0, 13431.0], [225.0, 13068.857142857143], [239.0, 11089.0], [238.0, 11396.0], [237.0, 11317.0], [234.0, 11284.5], [232.0, 12194.5], [236.0, 238.0], [235.0, 13893.5], [233.0, 13751.0], [246.0, 12104.0], [245.0, 11471.5], [241.0, 11225.0], [243.0, 13145.142857142857], [242.0, 13550.0], [255.0, 11318.0], [253.0, 12260.0], [252.0, 11886.999999999998], [250.0, 11146.0], [249.0, 11276.0], [248.0, 4609.0], [259.0, 11723.0], [269.0, 12943.333333333332], [268.0, 12397.25], [266.0, 12507.0], [265.0, 11505.0], [270.0, 13389.625000000002], [262.0, 12066.0], [261.0, 11307.0], [260.0, 10568.0], [258.0, 11783.0], [257.0, 11367.0], [256.0, 12130.0], [274.0, 11374.0], [285.0, 10623.0], [286.0, 12007.0], [284.0, 11335.666666666666], [282.0, 13274.0], [283.0, 13640.222222222223], [280.0, 12516.0], [279.0, 11413.5], [277.0, 10897.0], [276.0, 10985.0], [273.0, 11571.0], [272.0, 11294.333333333334], [291.0, 10978.0], [301.0, 11508.0], [300.0, 11021.0], [299.0, 11244.0], [294.0, 10963.0], [292.0, 11955.0], [289.0, 11344.0], [288.0, 13146.57142857143], [297.0, 13757.142857142857], [296.0, 13799.0], [306.0, 13233.2], [313.0, 10725.5], [318.0, 13574.454545454546], [317.0, 13797.5], [316.0, 13748.0], [307.0, 13781.0], [314.0, 12595.5], [311.0, 11213.0], [310.0, 11381.5], [309.0, 10824.0], [308.0, 11168.0], [305.0, 11210.0], [304.0, 11147.666666666666], [333.0, 11289.0], [332.0, 12569.25], [322.0, 13657.0], [331.0, 11210.666666666666], [330.0, 11453.0], [328.0, 12816.333333333334], [329.0, 13463.0], [335.0, 328.0], [334.0, 13775.5], [325.0, 10565.0], [324.0, 8398.5], [321.0, 12112.5], [320.0, 12000.42857142857], [326.0, 13562.0], [338.0, 11103.0], [349.0, 12519.75], [348.0, 11491.333333333334], [339.0, 13210.0], [345.0, 11144.5], [341.0, 10899.0], [340.0, 12107.333333333334], [337.0, 12878.4], [346.0, 6849.166666666667], [343.0, 13297.666666666666], [360.0, 12358.5], [367.0, 11255.0], [366.0, 13114.0], [364.0, 13847.5], [354.0, 13512.2], [363.0, 10442.0], [362.0, 10509.0], [361.0, 10976.666666666666], [357.0, 10760.5], [356.0, 11881.75], [353.0, 10538.0], [352.0, 10932.666666666666], [359.0, 13156.0], [358.0, 13454.0], [370.0, 11017.5], [383.0, 11289.0], [379.0, 10930.5], [377.0, 12310.25], [375.0, 12318.75], [373.0, 12082.5], [372.0, 11438.0], [368.0, 10997.0], [369.0, 13246.0], [381.0, 13263.666666666666], [380.0, 13256.0], [371.0, 13267.75], [398.0, 11315.5], [394.0, 10829.666666666666], [391.0, 10882.5], [389.0, 12124.833333333332], [386.0, 11505.75], [399.0, 13394.0], [392.0, 13356.0], [397.0, 13782.0], [396.0, 13550.5], [393.0, 13090.0], [403.0, 10373.666666666666], [415.0, 10975.0], [412.0, 11706.0], [411.0, 11192.666666666666], [408.0, 10666.0], [407.0, 10482.0], [406.0, 11263.333333333334], [400.0, 10850.5], [402.0, 13526.166666666666], [414.0, 13584.916666666668], [424.0, 12382.2], [429.0, 11354.5], [427.0, 12646.75], [426.0, 11306.0], [425.0, 10686.666666666666], [420.0, 10719.0], [419.0, 10115.0], [418.0, 10775.333333333334], [417.0, 13583.666666666666], [421.0, 13370.0], [430.0, 13356.0], [446.0, 10564.0], [447.0, 10971.0], [445.0, 12575.333333333332], [435.0, 13368.2], [432.0, 10830.0], [439.0, 13347.0], [443.0, 10843.0], [441.0, 12241.333333333334], [440.0, 10794.5], [438.0, 10907.0], [437.0, 11606.0], [436.0, 10875.0], [450.0, 12949.333333333334], [463.0, 3432.4285714285716], [461.0, 11467.666666666666], [460.0, 4888.666666666667], [451.0, 13723.0], [459.0, 8230.666666666666], [458.0, 11696.599999999999], [456.0, 10806.0], [455.0, 7997.25], [452.0, 10852.0], [453.0, 444.0], [449.0, 10183.0], [448.0, 12736.0], [466.0, 3385.1428571428573], [479.0, 11020.0], [476.0, 11953.25], [477.0, 13043.875], [467.0, 462.0], [474.0, 10461.333333333334], [471.0, 10442.0], [470.0, 10591.0], [469.0, 7561.8], [468.0, 468.0], [464.0, 5863.0], [465.0, 10914.6], [494.0, 11196.0], [495.0, 9979.0], [493.0, 11841.333333333334], [492.0, 11404.5], [491.0, 12370.166666666666], [490.0, 10851.0], [488.0, 10765.0], [487.0, 10843.5], [482.0, 10800.8], [485.0, 12512.181818181818], [509.0, 10769.666666666666], [507.0, 10612.666666666666], [505.0, 11431.0], [504.0, 11912.333333333334], [503.0, 10316.333333333334], [501.0, 12591.888888888889], [499.0, 10973.5], [508.0, 11840.333333333334], [502.0, 12821.0], [540.0, 11639.0], [542.0, 12671.0], [538.0, 10446.0], [512.0, 11018.333333333334], [514.0, 10170.0], [516.0, 11011.0], [518.0, 12307.6], [524.0, 11351.0], [522.0, 10856.0], [532.0, 10034.25], [568.0, 10426.0], [574.0, 10480.0], [560.0, 9990.0], [572.0, 12768.0], [558.0, 12666.0], [556.0, 12733.5], [546.0, 10521.0], [548.0, 7351.0], [550.0, 3081.5], [554.0, 11278.0], [564.0, 10234.0], [562.0, 10184.0], [580.0, 11491.0], [602.0, 10283.0], [594.0, 11081.5], [592.0, 10819.5], [590.0, 10622.0], [588.0, 11087.75], [578.0, 12392.666666666666], [582.0, 10820.8], [586.0, 11138.0], [634.0, 10964.142857142857], [636.0, 10797.0], [632.0, 10559.999999999998], [608.0, 10231.75], [626.0, 11042.0], [624.0, 9809.0], [622.0, 9853.0], [620.0, 10703.75], [616.0, 9790.0], [668.0, 11480.0], [670.0, 11797.0], [666.0, 11289.0], [664.0, 10693.5], [646.0, 9857.0], [642.0, 9862.0], [640.0, 10991.545454545454], [662.0, 11283.5], [660.0, 11211.0], [658.0, 10642.0], [654.0, 10073.6], [650.0, 702.4], [696.0, 10564.0], [700.0, 11428.0], [688.0, 9961.0], [698.0, 10466.0], [676.0, 10952.375], [672.0, 11100.666666666666], [682.0, 10652.0], [686.0, 11790.666666666666], [694.0, 10088.0], [692.0, 10969.666666666666], [730.0, 11144.0], [734.0, 10226.0], [720.0, 11387.25], [732.0, 9909.666666666666], [728.0, 10073.4], [710.0, 10066.5], [704.0, 11604.0], [706.0, 10086.5], [714.0, 9967.0], [712.0, 9681.5], [726.0, 9371.0], [724.0, 10658.8], [736.0, 10060.0], [760.0, 433.0], [750.0, 9899.0], [738.0, 10101.0], [740.0, 10102.0], [742.0, 9938.0], [748.0, 9690.5], [746.0, 10623.2], [744.0, 10364.25], [764.0, 10459.0], [762.0, 11302.5], [758.0, 10150.142857142857], [754.0, 9625.5], [752.0, 11299.0], [794.0, 8950.0], [782.0, 452.0], [780.0, 10305.5], [778.0, 10137.5], [776.0, 10100.666666666666], [786.0, 10374.75], [798.0, 9240.0], [796.0, 9394.0], [792.0, 9711.0], [774.0, 10034.0], [772.0, 9840.666666666666], [768.0, 10172.0], [790.0, 10058.333333333334], [788.0, 11123.0], [824.0, 9876.555555555555], [828.0, 9316.0], [806.0, 10261.0], [804.0, 10512.0], [800.0, 9135.0], [820.0, 9592.333333333334], [818.0, 9863.999999999998], [816.0, 9512.0], [814.0, 9936.0], [812.0, 9872.0], [810.0, 10119.0], [808.0, 10020.0], [858.0, 10192.0], [862.0, 569.5], [850.0, 9843.0], [860.0, 9678.833333333334], [856.0, 10367.0], [836.0, 9635.0], [834.0, 10194.0], [832.0, 10134.0], [842.0, 9138.0], [840.0, 9339.333333333334], [854.0, 9788.75], [852.0, 9730.357142857143], [890.0, 9706.42857142857], [888.0, 9529.0], [892.0, 9348.0], [864.0, 9845.0], [866.0, 9766.0], [868.0, 8793.0], [870.0, 8838.0], [876.0, 9595.0], [874.0, 9082.75], [886.0, 8857.0], [884.0, 9812.8], [882.0, 9621.0], [924.0, 9380.0], [926.0, 9662.5], [916.0, 8867.0], [914.0, 10054.5], [896.0, 9856.0], [898.0, 9973.0], [910.0, 8793.0], [904.0, 9968.833333333332], [918.0, 9682.0], [930.0, 9026.0], [952.0, 8958.0], [946.0, 9785.0], [956.0, 9237.0], [928.0, 9653.5], [942.0, 9326.0], [940.0, 9561.0], [938.0, 9319.0], [936.0, 9329.0], [944.0, 9618.0], [950.0, 9422.0], [986.0, 8497.0], [988.0, 9568.5], [984.0, 9111.0], [966.0, 9538.0], [960.0, 9387.333333333334], [982.0, 9710.5], [980.0, 9407.0], [978.0, 10131.333333333334], [990.0, 9271.0], [968.0, 9141.0], [1018.0, 9617.5], [1010.0, 8873.0], [1022.0, 9532.0], [1020.0, 9599.0], [992.0, 9001.2], [994.0, 9214.333333333334], [1016.0, 9216.0], [998.0, 9252.0], [996.0, 9623.0], [1006.0, 9139.0], [1004.0, 8864.0], [1002.0, 9425.833333333334], [1014.0, 9242.5], [1012.0, 9536.75], [1008.0, 9439.0], [1080.0, 9512.625], [1056.0, 8838.75], [1084.0, 9187.75], [1060.0, 8730.0], [1064.0, 9247.333333333334], [1076.0, 8528.0], [1072.0, 8405.0], [1028.0, 8940.0], [1052.0, 8955.6], [1024.0, 9990.0], [1044.0, 9298.0], [1048.0, 9120.0], [1040.0, 8145.0], [1092.0, 9075.0], [1104.0, 4899.25], [1108.0, 8743.2], [1112.0, 8984.0], [1136.0, 8689.0], [1100.0, 8382.0], [1096.0, 8802.875], [1088.0, 9463.0], [1116.0, 7815.0], [1140.0, 8699.0], [1120.0, 5780.333333333333], [1124.0, 8661.0], [1128.0, 8710.0], [1148.0, 9501.0], [1156.0, 9021.0], [1172.0, 5250.0], [1168.0, 8618.0], [1200.0, 8582.25], [1180.0, 8733.0], [1176.0, 9037.5], [1152.0, 8457.4], [1160.0, 7892.0], [1204.0, 8407.0], [1208.0, 8356.0], [1184.0, 8600.0], [1192.0, 9018.0], [1188.0, 9019.0], [1212.0, 8236.0], [1272.0, 8073.5], [1252.0, 8148.5], [1276.0, 8739.0], [1248.0, 8474.5], [1256.0, 8965.25], [1260.0, 8746.0], [1268.0, 8670.0], [1264.0, 8341.333333333334], [1224.0, 8930.0], [1228.0, 8918.0], [1220.0, 8941.0], [1216.0, 8736.0], [1240.0, 8604.333333333334], [1236.0, 9216.666666666666], [1232.0, 8720.0], [1292.0, 8581.5], [1320.0, 3592.3333333333335], [1324.0, 7295.0], [1328.0, 8618.0], [1284.0, 8372.0], [1304.0, 7179.0], [1300.0, 8353.0], [1296.0, 8698.0], [1332.0, 8309.3], [1336.0, 8529.0], [1312.0, 8909.0], [1316.0, 7181.0], [1340.0, 7781.0], [1404.0, 7339.5], [1400.0, 8284.0], [1376.0, 7767.0], [1380.0, 8318.5], [1384.0, 7734.0], [1388.0, 7516.25], [1396.0, 7942.0], [1392.0, 8569.0], [1356.0, 7438.5], [1352.0, 8693.5], [1348.0, 8167.6], [1372.0, 8401.0], [1368.0, 7845.5], [1360.0, 7980.5], [1468.0, 7115.0], [1440.0, 8893.0], [1444.0, 8072.666666666667], [1448.0, 7078.5], [1464.0, 8408.666666666666], [1460.0, 7800.0], [1456.0, 7186.5], [1416.0, 7375.0], [1408.0, 8240.0], [1432.0, 6501.0], [1436.0, 8886.0], [1532.0, 6330.0], [1504.0, 6969.75], [1508.0, 7269.8], [1512.0, 6589.0], [1528.0, 6584.666666666667], [1524.0, 6964.5], [1520.0, 6752.0], [1472.0, 7337.0], [1476.0, 7717.0], [1480.0, 8239.333333333334], [1484.0, 6747.666666666667], [1500.0, 7170.333333333333], [1492.0, 7851.0], [1488.0, 6764.0], [1588.0, 6204.0], [1592.0, 6354.333333333333], [1596.0, 4817.5], [1568.0, 6122.0], [1576.0, 6006.0], [1580.0, 5862.0], [1584.0, 5086.0], [1548.0, 6096.0], [1540.0, 6237.5], [1536.0, 6710.0], [1564.0, 6136.5], [1560.0, 6072.0], [1556.0, 7532.0], [1552.0, 6210.0], [1660.0, 5122.166666666666], [1636.0, 6588.0], [1632.0, 5445.555555555556], [1640.0, 5863.5], [1652.0, 6762.0], [1648.0, 6215.0], [1612.0, 6126.0], [1604.0, 6082.0], [1608.0, 5154.0], [1600.0, 5620.666666666667], [1628.0, 5657.0], [1620.0, 6245.0], [1624.0, 4991.0], [1616.0, 6024.333333333333], [1676.0, 6421.0], [1724.0, 4610.5], [1672.0, 6219.0], [1712.0, 6051.0], [1716.0, 6019.0], [1720.0, 5135.0], [1668.0, 3915.5], [1684.0, 5029.25], [1680.0, 6051.5], [1688.0, 5592.75], [1692.0, 6309.0], [1664.0, 6551.0], [1696.0, 5381.0], [1700.0, 5902.0], [1704.0, 5889.0], [1780.0, 4702.666666666667], [1784.0, 5304.0], [1788.0, 2909.0], [1760.0, 4207.0], [1772.0, 4818.666666666666], [1768.0, 4897.5], [1776.0, 4872.0], [1732.0, 5163.0], [1728.0, 5522.0], [1756.0, 4594.0], [1752.0, 4865.5], [1748.0, 4626.2], [1744.0, 4442.0], [1848.0, 4144.0], [1844.0, 4275.0], [1824.0, 3768.0], [1832.0, 3943.5], [1836.0, 4088.0], [1852.0, 3787.0], [1840.0, 4599.0], [1804.0, 5060.0], [1796.0, 4140.0], [1820.0, 3675.0], [1816.0, 4055.0], [1812.0, 4716.0], [1808.0, 4178.5], [1864.0, 4399.0], [1916.0, 2650.6], [1880.0, 3278.0], [1876.0, 3319.3333333333335], [1860.0, 3805.3333333333335], [1868.0, 3795.5], [1884.0, 3398.0], [1904.0, 3339.0], [1908.0, 3039.5], [1888.0, 2917.5], [1892.0, 2391.5], [1896.0, 2870.75], [1900.0, 2965.0], [1912.0, 2863.4], [1924.0, 2808.5555555555557], [1952.0, 2126.5], [1956.0, 1456.0], [1968.0, 1975.0], [1920.0, 2722.0], [1928.0, 2338.0], [1932.0, 1754.0], [1948.0, 1244.0], [1944.0, 1247.0], [1940.0, 1209.5], [1964.0, 1981.5], [1960.0, 1657.0], [1077.0, 8093.5], [1085.0, 9293.0], [1057.0, 9107.5], [1069.0, 9078.5], [1065.0, 9104.0], [1033.0, 9442.166666666668], [1029.0, 8118.0], [1025.0, 8895.0], [1049.0, 9057.0], [1045.0, 9045.5], [1101.0, 8885.0], [1125.0, 8898.0], [1105.0, 8636.0], [1097.0, 8986.0], [1089.0, 9095.666666666666], [1137.0, 8730.0], [1121.0, 9072.333333333334], [1129.0, 9141.25], [1133.0, 8641.5], [1145.0, 9161.75], [1141.0, 9081.5], [1181.0, 4941.5], [1169.0, 9661.0], [1173.0, 8125.0], [1177.0, 8452.0], [1201.0, 8304.5], [1153.0, 7758.0], [1157.0, 8682.333333333334], [1161.0, 8999.75], [1165.0, 8988.0], [1205.0, 8852.333333333334], [1209.0, 8432.0], [1189.0, 8951.0], [1185.0, 9026.0], [1193.0, 9065.333333333334], [1197.0, 8990.75], [1213.0, 8486.0], [1273.0, 8796.333333333334], [1265.0, 8432.5], [1249.0, 8814.0], [1257.0, 7480.0], [1253.0, 8868.5], [1261.0, 7946.0], [1277.0, 8073.0], [1269.0, 7867.333333333333], [1229.0, 8197.5], [1225.0, 8669.25], [1221.0, 8846.666666666666], [1217.0, 7568.0], [1245.0, 7665.0], [1241.0, 8415.5], [1237.0, 9295.75], [1233.0, 7824.0], [1285.0, 8788.0], [1321.0, 1001.0], [1329.0, 7741.666666666667], [1281.0, 8627.749999999998], [1289.0, 8345.75], [1309.0, 8783.5], [1305.0, 8719.333333333334], [1297.0, 8625.5], [1333.0, 7302.0], [1337.0, 8629.5], [1313.0, 8442.8], [1317.0, 8219.0], [1341.0, 8150.666666666667], [1401.0, 7990.666666666667], [1397.0, 6672.0], [1377.0, 8320.5], [1381.0, 8012.0], [1385.0, 1381.0], [1405.0, 7768.0], [1357.0, 1353.5], [1353.0, 8279.0], [1349.0, 7464.5], [1345.0, 8173.166666666666], [1373.0, 8328.5], [1369.0, 7824.0], [1365.0, 8196.0], [1457.0, 7139.0], [1421.0, 8605.444444444445], [1465.0, 8755.142857142857], [1441.0, 7103.5], [1453.0, 7190.666666666667], [1461.0, 6755.0], [1413.0, 7093.5], [1409.0, 6725.0], [1437.0, 7153.5], [1433.0, 8894.333333333334], [1429.0, 7584.5], [1425.0, 7412.333333333333], [1525.0, 6402.0], [1529.0, 6088.0], [1505.0, 7267.0], [1509.0, 6976.0], [1513.0, 6676.5], [1517.0, 6854.857142857143], [1473.0, 7350.0], [1477.0, 8720.0], [1481.0, 8503.555555555555], [1485.0, 7284.0], [1501.0, 7782.0], [1497.0, 7162.25], [1489.0, 7517.666666666667], [1589.0, 5850.5], [1573.0, 5337.666666666667], [1569.0, 7423.0], [1577.0, 6636.5], [1581.0, 6096.5], [1593.0, 6477.0], [1585.0, 6520.0], [1549.0, 6137.0], [1545.0, 6179.25], [1541.0, 6014.5], [1537.0, 6127.666666666667], [1561.0, 6463.75], [1557.0, 5569.5], [1653.0, 6433.0], [1661.0, 4992.0], [1633.0, 6891.0], [1637.0, 5819.0], [1641.0, 6785.0], [1645.0, 5783.0], [1649.0, 5611.5], [1613.0, 6747.0], [1609.0, 6393.2], [1605.0, 6386.0], [1601.0, 5581.0], [1629.0, 6140.0], [1621.0, 6306.0], [1617.0, 6084.0], [1665.0, 5011.0], [1669.0, 3668.0], [1673.0, 5217.666666666667], [1677.0, 5537.333333333333], [1713.0, 5655.0], [1717.0, 4625.0], [1681.0, 5607.0], [1685.0, 4293.0], [1689.0, 5360.5], [1693.0, 6300.0], [1697.0, 5489.0], [1701.0, 6228.0], [1705.0, 5331.0], [1709.0, 4988.8], [1725.0, 4567.5], [1789.0, 4729.5], [1761.0, 5492.0], [1769.0, 4065.0], [1765.0, 5054.0], [1773.0, 4453.5], [1785.0, 4169.5], [1781.0, 4144.666666666667], [1741.0, 4470.5], [1737.0, 4761.2], [1729.0, 5168.0], [1757.0, 4732.0], [1753.0, 4359.0], [1745.0, 4126.0], [1853.0, 4110.5], [1829.0, 4208.5], [1825.0, 4019.8], [1833.0, 4105.0], [1837.0, 3761.5], [1849.0, 4104.0], [1841.0, 4388.5], [1805.0, 3900.5], [1801.0, 4306.0], [1797.0, 4540.333333333333], [1793.0, 4076.5], [1821.0, 3951.0], [1817.0, 4499.5], [1813.0, 4840.333333333333], [1809.0, 4389.333333333333], [1857.0, 4156.5], [1881.0, 3083.0], [1877.0, 3810.0], [1885.0, 3115.0], [1861.0, 3726.5], [1865.0, 4482.5], [1869.0, 3896.0], [1905.0, 2988.0], [1909.0, 3020.0], [1889.0, 3064.5], [1893.0, 2928.6666666666665], [1897.0, 2961.0], [1901.0, 2954.5], [1917.0, 1942.0], [1969.0, 1564.0], [1953.0, 1396.0], [1957.0, 1671.0], [1961.0, 1863.0], [1921.0, 2426.0], [1925.0, 2418.5], [1933.0, 2052.5], [1949.0, 1245.0], [1941.0, 1052.0], [1937.0, 1754.0], [537.0, 10560.0], [541.0, 12285.2], [543.0, 11593.0], [539.0, 10664.0], [527.0, 11294.0], [525.0, 12807.0], [513.0, 10088.0], [515.0, 10923.0], [519.0, 11415.666666666666], [517.0, 10659.0], [523.0, 10991.0], [521.0, 10999.5], [535.0, 10966.5], [533.0, 10478.0], [529.0, 11338.0], [571.0, 12774.5], [573.0, 11175.4], [563.0, 12042.666666666666], [575.0, 12395.0], [569.0, 12365.857142857143], [559.0, 10421.75], [557.0, 12742.0], [545.0, 12370.692307692309], [549.0, 2180.333333333333], [551.0, 11224.0], [555.0, 11025.25], [567.0, 10450.0], [565.0, 10723.0], [561.0, 12495.818181818182], [603.0, 9906.0], [605.0, 10050.0], [601.0, 10172.5], [595.0, 10042.0], [593.0, 10982.8], [579.0, 10623.0], [583.0, 10795.5], [587.0, 11236.5], [585.0, 10366.5], [637.0, 10981.5], [635.0, 10393.333333333334], [639.0, 10980.0], [633.0, 10980.333333333334], [615.0, 9990.0], [613.0, 10653.4], [627.0, 9415.0], [631.0, 10966.6], [625.0, 10562.0], [623.0, 10570.0], [671.0, 9943.5], [659.0, 10395.666666666666], [669.0, 11042.0], [665.0, 11950.0], [645.0, 9786.0], [643.0, 10991.333333333334], [641.0, 10218.0], [663.0, 10770.5], [661.0, 9952.333333333334], [657.0, 10888.625], [655.0, 9590.0], [649.0, 10572.666666666666], [651.0, 702.0], [699.0, 9709.0], [691.0, 10333.5], [701.0, 9591.0], [703.0, 11680.0], [689.0, 9274.0], [697.0, 10227.666666666666], [687.0, 9887.2], [683.0, 11479.000000000002], [681.0, 9776.8], [695.0, 10521.75], [693.0, 10228.5], [733.0, 10435.75], [723.0, 10381.5], [721.0, 10034.333333333334], [735.0, 11126.0], [729.0, 10458.0], [711.0, 11592.333333333334], [709.0, 10081.75], [705.0, 9778.0], [719.0, 10098.0], [717.0, 10262.0], [715.0, 10057.0], [725.0, 9608.0], [743.0, 11308.0], [767.0, 9862.0], [763.0, 7645.75], [759.0, 5196.5], [751.0, 10316.0], [737.0, 9104.0], [739.0, 9300.0], [749.0, 10109.0], [765.0, 10569.5], [761.0, 9448.0], [755.0, 9855.0], [753.0, 9923.333333333334], [775.0, 9877.0], [795.0, 10236.6], [781.0, 9803.5], [779.0, 9611.0], [777.0, 10310.0], [799.0, 9982.0], [797.0, 9817.2], [793.0, 9164.0], [773.0, 9787.333333333334], [771.0, 10053.0], [769.0, 10531.4], [783.0, 10148.5], [787.0, 10079.57142857143], [807.0, 9693.5], [829.0, 9879.666666666668], [831.0, 9651.0], [827.0, 9809.666666666666], [805.0, 8948.0], [803.0, 9644.0], [801.0, 9985.0], [823.0, 9707.0], [809.0, 10093.999999999998], [863.0, 9262.0], [849.0, 9837.0], [861.0, 9981.333333333334], [837.0, 9724.0], [835.0, 8909.0], [843.0, 10414.0], [841.0, 9241.0], [855.0, 9532.0], [851.0, 9628.6], [889.0, 9978.0], [893.0, 8662.0], [895.0, 9264.5], [881.0, 9159.0], [879.0, 9437.4], [865.0, 9720.0], [867.0, 10059.666666666666], [869.0, 8832.0], [875.0, 9283.0], [887.0, 9596.0], [883.0, 9665.0], [925.0, 9406.0], [927.0, 9923.666666666666], [913.0, 8971.5], [915.0, 9979.6], [923.0, 8914.25], [903.0, 8790.0], [901.0, 9622.5], [899.0, 10134.5], [897.0, 9612.75], [911.0, 9600.0], [909.0, 9915.0], [907.0, 10101.0], [905.0, 9640.0], [919.0, 9321.0], [917.0, 9693.0], [931.0, 9101.0], [933.0, 5026.0], [929.0, 9391.0], [935.0, 9941.555555555555], [943.0, 9073.5], [941.0, 9719.5], [939.0, 9929.666666666666], [937.0, 10107.0], [957.0, 9382.0], [959.0, 9905.0], [945.0, 8680.0], [953.0, 9720.0], [951.0, 9366.0], [949.0, 9441.0], [947.0, 9946.0], [965.0, 9185.5], [989.0, 9447.5], [987.0, 9240.0], [967.0, 9400.0], [963.0, 9587.0], [961.0, 8306.0], [975.0, 10129.0], [983.0, 9451.25], [977.0, 8974.75], [973.0, 8758.0], [969.0, 9702.4], [971.0, 10141.0], [993.0, 9147.0], [1017.0, 8887.0], [1021.0, 8650.75], [1019.0, 9709.0], [1007.0, 9436.0], [995.0, 8719.5], [997.0, 8895.0], [1005.0, 9756.0], [1003.0, 9119.5], [1001.0, 9003.0], [1015.0, 9045.666666666666], [1013.0, 9653.125], [1023.0, 9171.5], [1082.0, 9075.5], [1078.0, 9049.5], [1062.0, 9288.4], [1066.0, 8761.0], [1070.0, 9075.0], [1086.0, 9026.25], [1074.0, 9142.5], [1038.0, 10004.333333333334], [1034.0, 9657.0], [1026.0, 9170.5], [1050.0, 9621.0], [1046.0, 9123.0], [1042.0, 8733.0], [1102.0, 9037.666666666666], [1114.0, 8683.8], [1146.0, 7887.0], [1106.0, 9038.0], [1110.0, 8837.0], [1090.0, 8738.0], [1138.0, 9142.0], [1126.0, 6461.0], [1130.0, 1167.6666666666667], [1150.0, 9380.666666666666], [1142.0, 8838.0], [1182.0, 8083.0], [1170.0, 8384.0], [1174.0, 6515.0], [1202.0, 9101.0], [1178.0, 8463.0], [1154.0, 8989.0], [1166.0, 8080.25], [1206.0, 8834.0], [1210.0, 8729.5], [1186.0, 8940.666666666666], [1190.0, 7668.0], [1194.0, 8464.5], [1198.0, 9017.0], [1278.0, 7421.333333333333], [1266.0, 8477.0], [1250.0, 8887.0], [1254.0, 7508.0], [1258.0, 8695.0], [1262.0, 8885.75], [1274.0, 8649.0], [1270.0, 8772.0], [1230.0, 8855.0], [1226.0, 8195.0], [1222.0, 8930.5], [1218.0, 8376.333333333334], [1246.0, 8215.0], [1238.0, 8937.5], [1234.0, 8232.0], [1330.0, 7556.0], [1342.0, 8116.0], [1338.0, 7519.0], [1322.0, 7740.333333333333], [1326.0, 7234.0], [1282.0, 8149.0], [1286.0, 8720.0], [1294.0, 8500.333333333334], [1306.0, 7717.0], [1302.0, 8257.75], [1298.0, 7714.0], [1334.0, 8500.666666666666], [1314.0, 8054.0], [1318.0, 8597.666666666668], [1406.0, 7424.333333333333], [1402.0, 7086.0], [1378.0, 7622.0], [1382.0, 8329.0], [1390.0, 7415.5], [1386.0, 8297.0], [1354.0, 8895.0], [1350.0, 8480.5], [1346.0, 7011.0], [1370.0, 8189.0], [1366.0, 7007.0], [1362.0, 7659.5], [1470.0, 7374.5], [1462.0, 8180.25], [1442.0, 8295.0], [1450.0, 8016.666666666667], [1446.0, 8827.5], [1454.0, 7058.0], [1466.0, 7339.0], [1422.0, 6880.0], [1418.0, 7516.0], [1414.0, 7557.0], [1410.0, 7634.0], [1438.0, 6517.0], [1430.0, 8939.333333333334], [1526.0, 6418.0], [1522.0, 7008.333333333333], [1534.0, 6687.0], [1506.0, 7214.0], [1518.0, 7730.0], [1514.0, 6564.0], [1530.0, 6474.5], [1502.0, 6374.0], [1486.0, 6955.0], [1498.0, 6618.5], [1494.0, 6345.0], [1594.0, 5667.0], [1550.0, 6379.5], [1574.0, 6718.0], [1570.0, 5958.5], [1598.0, 4826.0], [1578.0, 5142.0], [1582.0, 5583.0], [1590.0, 5826.5], [1586.0, 5065.0], [1546.0, 6727.0], [1542.0, 6227.0], [1538.0, 6142.0], [1566.0, 6687.5], [1562.0, 7231.0], [1558.0, 6293.0], [1554.0, 6370.0], [1654.0, 6631.0], [1634.0, 5768.0], [1638.0, 6797.0], [1642.0, 5379.5], [1662.0, 6540.5], [1650.0, 5987.8], [1614.0, 5014.0], [1606.0, 4748.0], [1610.0, 5042.0], [1602.0, 5645.0], [1630.0, 6666.0], [1626.0, 6035.0], [1622.0, 5024.5], [1694.0, 4887.0], [1670.0, 5678.0], [1674.0, 5729.5], [1678.0, 5242.0], [1714.0, 5107.0], [1718.0, 5658.0], [1686.0, 3331.0], [1682.0, 6342.0], [1690.0, 4964.5], [1666.0, 5460.5], [1698.0, 5498.0], [1702.0, 4848.111111111111], [1706.0, 5778.0], [1710.0, 4973.0], [1726.0, 5114.5], [1722.0, 4650.999999999999], [1790.0, 4466.0], [1762.0, 4898.625], [1770.0, 4067.0], [1774.0, 4632.0], [1786.0, 3509.3333333333335], [1782.0, 4568.0], [1778.0, 4217.4], [1742.0, 4151.0], [1738.0, 4427.0], [1730.0, 5411.5], [1758.0, 5016.0], [1754.0, 5045.333333333333], [1750.0, 4566.25], [1746.0, 5119.0], [1850.0, 3649.5], [1846.0, 3821.0], [1830.0, 4276.0], [1834.0, 4087.6666666666665], [1838.0, 3989.3333333333335], [1854.0, 4125.0], [1842.0, 3065.0], [1806.0, 4046.3333333333335], [1802.0, 4766.0], [1798.0, 3966.5], [1822.0, 4112.0], [1818.0, 4308.333333333333], [1814.0, 4135.0], [1810.0, 4693.0], [1858.0, 4215.5], [1866.0, 4168.5], [1906.0, 3286.0], [1882.0, 3433.75], [1878.0, 3901.0], [1874.0, 3667.6666666666665], [1862.0, 3188.0], [1870.0, 3610.5], [1886.0, 2983.0], [1890.0, 3080.5], [1894.0, 3136.0], [1898.0, 3048.6666666666665], [1902.0, 2831.0], [1918.0, 1983.0], [1910.0, 3030.0], [1926.0, 2202.5], [1970.0, 1784.0], [1954.0, 1805.0], [1958.0, 1624.0], [1950.0, 1228.0], [1930.0, 2382.5], [1934.0, 2423.0], [1946.0, 1890.0], [1942.0, 2020.0], [1938.0, 1358.0], [1962.0, 2003.0], [1083.0, 9083.0], [1087.0, 8572.5], [1059.0, 10049.0], [1063.0, 8624.0], [1071.0, 8745.5], [1067.0, 9082.0], [1079.0, 8697.5], [1039.0, 9130.714285714286], [1035.0, 9154.0], [1031.0, 9297.5], [1027.0, 8691.5], [1055.0, 9636.666666666666], [1047.0, 8710.5], [1043.0, 8841.0], [1099.0, 8699.0], [1107.0, 9031.0], [1111.0, 8168.0], [1103.0, 9171.0], [1095.0, 8813.5], [1091.0, 9059.0], [1119.0, 9586.6], [1139.0, 9133.0], [1123.0, 8993.5], [1127.0, 7963.0], [1131.0, 7418.6], [1135.0, 8917.5], [1147.0, 8830.0], [1151.0, 9007.0], [1143.0, 8723.5], [1159.0, 8691.5], [1211.0, 8530.0], [1171.0, 7161.5], [1179.0, 8398.5], [1203.0, 6799.5], [1183.0, 8725.0], [1155.0, 8595.5], [1163.0, 8737.0], [1167.0, 8971.0], [1207.0, 8973.0], [1215.0, 8487.25], [1187.0, 8519.0], [1191.0, 9528.0], [1199.0, 9007.0], [1195.0, 8432.0], [1267.0, 8221.5], [1251.0, 8779.0], [1259.0, 8476.0], [1263.0, 8711.0], [1271.0, 8831.5], [1231.0, 8821.25], [1227.0, 8795.666666666666], [1223.0, 8947.0], [1219.0, 8263.5], [1247.0, 8643.8], [1243.0, 8280.0], [1239.0, 8916.0], [1235.0, 7418.0], [1291.0, 8189.0], [1331.0, 1020.0], [1323.0, 7475.0], [1327.0, 8146.666666666667], [1311.0, 8075.666666666667], [1283.0, 8481.0], [1287.0, 8667.333333333334], [1295.0, 7960.0], [1307.0, 7896.0], [1303.0, 8111.0], [1299.0, 8358.75], [1335.0, 7761.0], [1343.0, 8525.0], [1315.0, 8236.0], [1319.0, 8107.0], [1339.0, 8469.666666666666], [1403.0, 7094.0], [1407.0, 8253.5], [1379.0, 6850.5], [1383.0, 8305.0], [1399.0, 8648.555555555555], [1395.0, 7575.333333333333], [1359.0, 7558.333333333333], [1355.0, 7826.333333333333], [1375.0, 8306.0], [1371.0, 7856.5], [1367.0, 8219.333333333334], [1463.0, 8407.666666666666], [1467.0, 7195.0], [1471.0, 7199.0], [1443.0, 8084.0], [1451.0, 8774.25], [1459.0, 7881.0], [1419.0, 7072.0], [1415.0, 6979.5], [1411.0, 6635.0], [1439.0, 8187.25], [1435.0, 7504.666666666667], [1431.0, 7471.0], [1427.0, 6815.0], [1523.0, 7448.0], [1535.0, 6299.333333333333], [1527.0, 6338.0], [1531.0, 6322.0], [1507.0, 7453.0], [1511.0, 7189.75], [1479.0, 7331.333333333334], [1483.0, 7689.0], [1487.0, 6567.333333333333], [1495.0, 6807.0], [1499.0, 7006.5], [1491.0, 7113.5], [1595.0, 6278.5], [1599.0, 6273.5], [1571.0, 7012.5], [1579.0, 6630.0], [1583.0, 6323.0], [1591.0, 4946.0], [1587.0, 5975.0], [1551.0, 7465.0], [1547.0, 5921.5], [1543.0, 6257.5], [1539.0, 6088.0], [1567.0, 5853.0], [1563.0, 6003.5], [1559.0, 5558.0], [1659.0, 6040.0], [1655.0, 5216.4], [1663.0, 2922.6], [1635.0, 6897.0], [1639.0, 5022.5], [1643.0, 6752.0], [1651.0, 5132.428571428572], [1615.0, 5145.0], [1607.0, 5169.0], [1611.0, 4713.0], [1603.0, 5651.5], [1631.0, 5030.0], [1627.0, 5865.0], [1623.0, 5959.333333333333], [1619.0, 5732.0], [1675.0, 5212.0], [1719.0, 5141.0], [1671.0, 5109.5], [1679.0, 5046.333333333333], [1715.0, 4634.0], [1687.0, 5715.0], [1691.0, 5483.5], [1695.0, 5293.0], [1667.0, 6518.0], [1727.0, 5123.5], [1699.0, 5466.0], [1703.0, 4584.0], [1707.0, 5206.25], [1711.0, 4698.0], [1723.0, 4915.0], [1783.0, 4568.333333333333], [1791.0, 4125.75], [1763.0, 4749.0], [1767.0, 4961.5], [1775.0, 4178.0], [1787.0, 3033.166666666667], [1743.0, 5423.0], [1735.0, 4852.2], [1759.0, 4551.0], [1755.0, 4581.0], [1751.0, 4219.5], [1747.0, 5115.0], [1855.0, 3653.0], [1851.0, 3913.0], [1827.0, 4269.25], [1831.0, 4431.0], [1835.0, 3925.0], [1839.0, 4056.0], [1847.0, 4008.5], [1843.0, 3824.0], [1807.0, 4094.0], [1803.0, 3958.6666666666665], [1799.0, 3809.0], [1795.0, 4321.8], [1823.0, 4852.0], [1819.0, 4362.5], [1815.0, 4334.0], [1811.0, 4378.666666666667], [1859.0, 4127.0], [1863.0, 4020.0], [1883.0, 2425.75], [1879.0, 3418.0], [1875.0, 3726.0], [1887.0, 3642.5], [1867.0, 3349.5], [1871.0, 3389.5], [1907.0, 2947.0], [1919.0, 2720.0], [1891.0, 3038.0], [1895.0, 3439.0], [1899.0, 2676.5], [1903.0, 3088.0], [1915.0, 2429.0], [1911.0, 2568.0], [1971.0, 1782.0], [1955.0, 1796.0], [1923.0, 2687.0], [1927.0, 2518.0], [1931.0, 2160.5], [1935.0, 2420.0], [1947.0, 1885.0], [1967.0, 1973.3333333333333], [1959.0, 1660.0], [1.0, 21176.5]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[974.4532499999997, 9131.281250000004]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1971.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 31395.133333333335, "minX": 1.63133316E12, "maxY": 2459605.316666667, "series": [{"data": [[1.63133316E12, 2459605.316666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63133316E12, 31395.133333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133316E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9131.281250000004, "minX": 1.63133316E12, "maxY": 9131.281250000004, "series": [{"data": [[1.63133316E12, 9131.281250000004]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133316E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3973.3267499999984, "minX": 1.63133316E12, "maxY": 3973.3267499999984, "series": [{"data": [[1.63133316E12, 3973.3267499999984]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133316E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1800.7817500000035, "minX": 1.63133316E12, "maxY": 1800.7817500000035, "series": [{"data": [[1.63133316E12, 1800.7817500000035]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133316E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 186.0, "minX": 1.63133316E12, "maxY": 24158.0, "series": [{"data": [[1.63133316E12, 24158.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63133316E12, 13351.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63133316E12, 19935.239999999918]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63133316E12, 15370.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63133316E12, 186.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63133316E12, 9273.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133316E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 433.0, "minX": 1.0, "maxY": 23392.0, "series": [{"data": [[2.0, 16025.5], [35.0, 2720.0], [34.0, 2839.0], [37.0, 16114.0], [46.0, 3588.5], [47.0, 3456.5], [49.0, 5114.0], [54.0, 15372.5], [64.0, 12045.0], [5.0, 433.0], [86.0, 4557.0], [99.0, 5407.0], [6.0, 23392.0], [111.0, 11245.0], [113.0, 6535.0], [158.0, 8402.0], [157.0, 11399.0], [10.0, 13763.5], [214.0, 8897.0], [216.0, 7298.5], [231.0, 4991.0], [15.0, 1572.0], [259.0, 8254.0], [266.0, 13468.0], [1.0, 23118.5], [284.0, 9219.5], [18.0, 20492.5], [338.0, 10259.5], [21.0, 18655.0], [372.0, 10303.5], [23.0, 18346.0], [24.0, 2381.0], [26.0, 4139.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 372.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 181.5, "minX": 1.0, "maxY": 6141.5, "series": [{"data": [[2.0, 4464.5], [35.0, 1605.0], [34.0, 337.5], [37.0, 4495.0], [46.0, 2163.5], [47.0, 443.5], [49.0, 2201.0], [54.0, 4664.0], [64.0, 6141.5], [5.0, 432.0], [86.0, 2415.0], [99.0, 2973.0], [6.0, 6122.5], [111.0, 3213.0], [113.0, 2981.0], [158.0, 3256.0], [157.0, 5354.0], [10.0, 4513.0], [214.0, 5875.5], [216.0, 3623.5], [231.0, 2389.0], [15.0, 181.5], [259.0, 4255.0], [266.0, 5419.5], [1.0, 5789.0], [284.0, 4110.5], [18.0, 4551.0], [338.0, 4455.5], [21.0, 5497.0], [372.0, 5716.0], [23.0, 5633.0], [24.0, 862.5], [26.0, 1848.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 372.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 66.66666666666667, "minX": 1.63133316E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63133316E12, 66.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133316E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 66.66666666666667, "minX": 1.63133316E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63133316E12, 66.66666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133316E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 66.66666666666667, "minX": 1.63133316E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63133316E12, 66.66666666666667]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133316E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 66.66666666666667, "minX": 1.63133316E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63133316E12, 66.66666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133316E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

