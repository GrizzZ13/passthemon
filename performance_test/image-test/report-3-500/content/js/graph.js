/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 54.0, "minX": 0.0, "maxY": 21398.0, "series": [{"data": [[0.0, 54.0], [0.1, 62.0], [0.2, 63.0], [0.3, 63.0], [0.4, 69.0], [0.5, 77.0], [0.6, 84.0], [0.7, 101.0], [0.8, 111.0], [0.9, 113.0], [1.0, 117.0], [1.1, 117.0], [1.2, 122.0], [1.3, 127.0], [1.4, 127.0], [1.5, 128.0], [1.6, 129.0], [1.7, 129.0], [1.8, 130.0], [1.9, 130.0], [2.0, 131.0], [2.1, 135.0], [2.2, 136.0], [2.3, 136.0], [2.4, 138.0], [2.5, 138.0], [2.6, 138.0], [2.7, 138.0], [2.8, 138.0], [2.9, 139.0], [3.0, 147.0], [3.1, 149.0], [3.2, 150.0], [3.3, 152.0], [3.4, 152.0], [3.5, 152.0], [3.6, 154.0], [3.7, 154.0], [3.8, 155.0], [3.9, 158.0], [4.0, 158.0], [4.1, 159.0], [4.2, 159.0], [4.3, 162.0], [4.4, 162.0], [4.5, 166.0], [4.6, 167.0], [4.7, 176.0], [4.8, 183.0], [4.9, 184.0], [5.0, 190.0], [5.1, 190.0], [5.2, 197.0], [5.3, 201.0], [5.4, 204.0], [5.5, 206.0], [5.6, 208.0], [5.7, 210.0], [5.8, 214.0], [5.9, 220.0], [6.0, 226.0], [6.1, 226.0], [6.2, 226.0], [6.3, 227.0], [6.4, 229.0], [6.5, 230.0], [6.6, 231.0], [6.7, 231.0], [6.8, 236.0], [6.9, 237.0], [7.0, 237.0], [7.1, 237.0], [7.2, 240.0], [7.3, 243.0], [7.4, 244.0], [7.5, 249.0], [7.6, 251.0], [7.7, 251.0], [7.8, 254.0], [7.9, 255.0], [8.0, 260.0], [8.1, 260.0], [8.2, 263.0], [8.3, 266.0], [8.4, 269.0], [8.5, 270.0], [8.6, 271.0], [8.7, 272.0], [8.8, 272.0], [8.9, 272.0], [9.0, 282.0], [9.1, 288.0], [9.2, 289.0], [9.3, 290.0], [9.4, 290.0], [9.5, 295.0], [9.6, 295.0], [9.7, 296.0], [9.8, 306.0], [9.9, 306.0], [10.0, 314.0], [10.1, 316.0], [10.2, 316.0], [10.3, 318.0], [10.4, 318.0], [10.5, 318.0], [10.6, 319.0], [10.7, 321.0], [10.8, 322.0], [10.9, 323.0], [11.0, 323.0], [11.1, 325.0], [11.2, 326.0], [11.3, 326.0], [11.4, 327.0], [11.5, 327.0], [11.6, 332.0], [11.7, 334.0], [11.8, 334.0], [11.9, 335.0], [12.0, 338.0], [12.1, 339.0], [12.2, 341.0], [12.3, 343.0], [12.4, 343.0], [12.5, 346.0], [12.6, 348.0], [12.7, 351.0], [12.8, 354.0], [12.9, 355.0], [13.0, 357.0], [13.1, 357.0], [13.2, 361.0], [13.3, 363.0], [13.4, 364.0], [13.5, 364.0], [13.6, 365.0], [13.7, 365.0], [13.8, 365.0], [13.9, 366.0], [14.0, 366.0], [14.1, 366.0], [14.2, 368.0], [14.3, 369.0], [14.4, 371.0], [14.5, 373.0], [14.6, 374.0], [14.7, 375.0], [14.8, 375.0], [14.9, 377.0], [15.0, 378.0], [15.1, 378.0], [15.2, 378.0], [15.3, 379.0], [15.4, 380.0], [15.5, 380.0], [15.6, 380.0], [15.7, 383.0], [15.8, 384.0], [15.9, 385.0], [16.0, 386.0], [16.1, 386.0], [16.2, 387.0], [16.3, 387.0], [16.4, 387.0], [16.5, 388.0], [16.6, 389.0], [16.7, 389.0], [16.8, 389.0], [16.9, 390.0], [17.0, 392.0], [17.1, 397.0], [17.2, 397.0], [17.3, 398.0], [17.4, 400.0], [17.5, 401.0], [17.6, 401.0], [17.7, 402.0], [17.8, 402.0], [17.9, 402.0], [18.0, 402.0], [18.1, 404.0], [18.2, 405.0], [18.3, 406.0], [18.4, 407.0], [18.5, 410.0], [18.6, 412.0], [18.7, 412.0], [18.8, 413.0], [18.9, 413.0], [19.0, 413.0], [19.1, 414.0], [19.2, 415.0], [19.3, 415.0], [19.4, 416.0], [19.5, 417.0], [19.6, 419.0], [19.7, 420.0], [19.8, 420.0], [19.9, 420.0], [20.0, 423.0], [20.1, 423.0], [20.2, 423.0], [20.3, 424.0], [20.4, 424.0], [20.5, 424.0], [20.6, 424.0], [20.7, 425.0], [20.8, 425.0], [20.9, 426.0], [21.0, 427.0], [21.1, 427.0], [21.2, 428.0], [21.3, 428.0], [21.4, 428.0], [21.5, 429.0], [21.6, 430.0], [21.7, 431.0], [21.8, 432.0], [21.9, 432.0], [22.0, 432.0], [22.1, 432.0], [22.2, 432.0], [22.3, 433.0], [22.4, 434.0], [22.5, 434.0], [22.6, 434.0], [22.7, 434.0], [22.8, 434.0], [22.9, 435.0], [23.0, 435.0], [23.1, 435.0], [23.2, 435.0], [23.3, 436.0], [23.4, 437.0], [23.5, 439.0], [23.6, 439.0], [23.7, 439.0], [23.8, 442.0], [23.9, 442.0], [24.0, 442.0], [24.1, 442.0], [24.2, 442.0], [24.3, 443.0], [24.4, 443.0], [24.5, 443.0], [24.6, 445.0], [24.7, 445.0], [24.8, 446.0], [24.9, 446.0], [25.0, 446.0], [25.1, 446.0], [25.2, 447.0], [25.3, 449.0], [25.4, 449.0], [25.5, 450.0], [25.6, 452.0], [25.7, 452.0], [25.8, 452.0], [25.9, 452.0], [26.0, 452.0], [26.1, 452.0], [26.2, 452.0], [26.3, 453.0], [26.4, 454.0], [26.5, 454.0], [26.6, 455.0], [26.7, 455.0], [26.8, 455.0], [26.9, 457.0], [27.0, 457.0], [27.1, 457.0], [27.2, 458.0], [27.3, 458.0], [27.4, 458.0], [27.5, 458.0], [27.6, 459.0], [27.7, 459.0], [27.8, 459.0], [27.9, 459.0], [28.0, 459.0], [28.1, 459.0], [28.2, 459.0], [28.3, 460.0], [28.4, 460.0], [28.5, 460.0], [28.6, 461.0], [28.7, 461.0], [28.8, 461.0], [28.9, 461.0], [29.0, 461.0], [29.1, 462.0], [29.2, 462.0], [29.3, 463.0], [29.4, 463.0], [29.5, 463.0], [29.6, 464.0], [29.7, 464.0], [29.8, 465.0], [29.9, 465.0], [30.0, 466.0], [30.1, 466.0], [30.2, 466.0], [30.3, 467.0], [30.4, 467.0], [30.5, 467.0], [30.6, 468.0], [30.7, 468.0], [30.8, 469.0], [30.9, 469.0], [31.0, 470.0], [31.1, 473.0], [31.2, 473.0], [31.3, 474.0], [31.4, 474.0], [31.5, 474.0], [31.6, 475.0], [31.7, 475.0], [31.8, 475.0], [31.9, 476.0], [32.0, 478.0], [32.1, 478.0], [32.2, 480.0], [32.3, 480.0], [32.4, 480.0], [32.5, 480.0], [32.6, 480.0], [32.7, 481.0], [32.8, 481.0], [32.9, 482.0], [33.0, 484.0], [33.1, 485.0], [33.2, 486.0], [33.3, 488.0], [33.4, 488.0], [33.5, 489.0], [33.6, 493.0], [33.7, 494.0], [33.8, 495.0], [33.9, 498.0], [34.0, 499.0], [34.1, 502.0], [34.2, 506.0], [34.3, 507.0], [34.4, 507.0], [34.5, 512.0], [34.6, 514.0], [34.7, 515.0], [34.8, 516.0], [34.9, 518.0], [35.0, 520.0], [35.1, 520.0], [35.2, 522.0], [35.3, 526.0], [35.4, 531.0], [35.5, 532.0], [35.6, 535.0], [35.7, 536.0], [35.8, 538.0], [35.9, 545.0], [36.0, 545.0], [36.1, 548.0], [36.2, 549.0], [36.3, 552.0], [36.4, 553.0], [36.5, 555.0], [36.6, 556.0], [36.7, 568.0], [36.8, 577.0], [36.9, 577.0], [37.0, 577.0], [37.1, 580.0], [37.2, 591.0], [37.3, 595.0], [37.4, 600.0], [37.5, 612.0], [37.6, 614.0], [37.7, 623.0], [37.8, 623.0], [37.9, 626.0], [38.0, 630.0], [38.1, 637.0], [38.2, 649.0], [38.3, 656.0], [38.4, 660.0], [38.5, 662.0], [38.6, 663.0], [38.7, 664.0], [38.8, 665.0], [38.9, 666.0], [39.0, 668.0], [39.1, 669.0], [39.2, 672.0], [39.3, 674.0], [39.4, 675.0], [39.5, 675.0], [39.6, 678.0], [39.7, 679.0], [39.8, 679.0], [39.9, 680.0], [40.0, 680.0], [40.1, 680.0], [40.2, 682.0], [40.3, 682.0], [40.4, 688.0], [40.5, 689.0], [40.6, 692.0], [40.7, 693.0], [40.8, 693.0], [40.9, 695.0], [41.0, 696.0], [41.1, 698.0], [41.2, 698.0], [41.3, 700.0], [41.4, 701.0], [41.5, 704.0], [41.6, 705.0], [41.7, 710.0], [41.8, 716.0], [41.9, 716.0], [42.0, 720.0], [42.1, 723.0], [42.2, 724.0], [42.3, 724.0], [42.4, 726.0], [42.5, 730.0], [42.6, 732.0], [42.7, 736.0], [42.8, 737.0], [42.9, 739.0], [43.0, 743.0], [43.1, 745.0], [43.2, 749.0], [43.3, 752.0], [43.4, 758.0], [43.5, 762.0], [43.6, 764.0], [43.7, 767.0], [43.8, 769.0], [43.9, 773.0], [44.0, 777.0], [44.1, 780.0], [44.2, 783.0], [44.3, 786.0], [44.4, 791.0], [44.5, 791.0], [44.6, 794.0], [44.7, 798.0], [44.8, 800.0], [44.9, 807.0], [45.0, 814.0], [45.1, 821.0], [45.2, 821.0], [45.3, 823.0], [45.4, 832.0], [45.5, 862.0], [45.6, 864.0], [45.7, 866.0], [45.8, 885.0], [45.9, 891.0], [46.0, 899.0], [46.1, 914.0], [46.2, 918.0], [46.3, 932.0], [46.4, 937.0], [46.5, 939.0], [46.6, 940.0], [46.7, 954.0], [46.8, 960.0], [46.9, 964.0], [47.0, 976.0], [47.1, 979.0], [47.2, 981.0], [47.3, 987.0], [47.4, 995.0], [47.5, 1002.0], [47.6, 1015.0], [47.7, 1023.0], [47.8, 1026.0], [47.9, 1027.0], [48.0, 1032.0], [48.1, 1042.0], [48.2, 1043.0], [48.3, 1052.0], [48.4, 1054.0], [48.5, 1060.0], [48.6, 1069.0], [48.7, 1070.0], [48.8, 1075.0], [48.9, 1080.0], [49.0, 1080.0], [49.1, 1081.0], [49.2, 1089.0], [49.3, 1090.0], [49.4, 1095.0], [49.5, 1100.0], [49.6, 1106.0], [49.7, 1106.0], [49.8, 1107.0], [49.9, 1114.0], [50.0, 1127.0], [50.1, 1128.0], [50.2, 1130.0], [50.3, 1133.0], [50.4, 1139.0], [50.5, 1141.0], [50.6, 1141.0], [50.7, 1141.0], [50.8, 1148.0], [50.9, 1153.0], [51.0, 1154.0], [51.1, 1156.0], [51.2, 1157.0], [51.3, 1157.0], [51.4, 1160.0], [51.5, 1162.0], [51.6, 1162.0], [51.7, 1166.0], [51.8, 1168.0], [51.9, 1171.0], [52.0, 1171.0], [52.1, 1177.0], [52.2, 1181.0], [52.3, 1183.0], [52.4, 1191.0], [52.5, 1198.0], [52.6, 1203.0], [52.7, 1214.0], [52.8, 1221.0], [52.9, 1224.0], [53.0, 1240.0], [53.1, 1242.0], [53.2, 1252.0], [53.3, 1253.0], [53.4, 1260.0], [53.5, 1266.0], [53.6, 1266.0], [53.7, 1267.0], [53.8, 1273.0], [53.9, 1279.0], [54.0, 1281.0], [54.1, 1282.0], [54.2, 1285.0], [54.3, 1286.0], [54.4, 1287.0], [54.5, 1287.0], [54.6, 1303.0], [54.7, 1307.0], [54.8, 1308.0], [54.9, 1317.0], [55.0, 1326.0], [55.1, 1331.0], [55.2, 1336.0], [55.3, 1337.0], [55.4, 1344.0], [55.5, 1351.0], [55.6, 1368.0], [55.7, 1373.0], [55.8, 1375.0], [55.9, 1379.0], [56.0, 1381.0], [56.1, 1387.0], [56.2, 1389.0], [56.3, 1400.0], [56.4, 1414.0], [56.5, 1415.0], [56.6, 1416.0], [56.7, 1417.0], [56.8, 1418.0], [56.9, 1425.0], [57.0, 1427.0], [57.1, 1435.0], [57.2, 1466.0], [57.3, 1475.0], [57.4, 1479.0], [57.5, 1479.0], [57.6, 1483.0], [57.7, 1484.0], [57.8, 1495.0], [57.9, 1497.0], [58.0, 1498.0], [58.1, 1506.0], [58.2, 1509.0], [58.3, 1512.0], [58.4, 1524.0], [58.5, 1529.0], [58.6, 1559.0], [58.7, 1568.0], [58.8, 1571.0], [58.9, 1576.0], [59.0, 1577.0], [59.1, 1581.0], [59.2, 1581.0], [59.3, 1581.0], [59.4, 1596.0], [59.5, 1599.0], [59.6, 1607.0], [59.7, 1608.0], [59.8, 1613.0], [59.9, 1623.0], [60.0, 1633.0], [60.1, 1635.0], [60.2, 1654.0], [60.3, 1662.0], [60.4, 1666.0], [60.5, 1667.0], [60.6, 1667.0], [60.7, 1677.0], [60.8, 1680.0], [60.9, 1682.0], [61.0, 1687.0], [61.1, 1697.0], [61.2, 1714.0], [61.3, 1714.0], [61.4, 1731.0], [61.5, 1735.0], [61.6, 1739.0], [61.7, 1746.0], [61.8, 1750.0], [61.9, 1753.0], [62.0, 1753.0], [62.1, 1755.0], [62.2, 1766.0], [62.3, 1767.0], [62.4, 1769.0], [62.5, 1770.0], [62.6, 1774.0], [62.7, 1776.0], [62.8, 1787.0], [62.9, 1790.0], [63.0, 1790.0], [63.1, 1793.0], [63.2, 1796.0], [63.3, 1796.0], [63.4, 1801.0], [63.5, 1810.0], [63.6, 1830.0], [63.7, 1831.0], [63.8, 1832.0], [63.9, 1836.0], [64.0, 1845.0], [64.1, 1845.0], [64.2, 1851.0], [64.3, 1852.0], [64.4, 1855.0], [64.5, 1857.0], [64.6, 1860.0], [64.7, 1866.0], [64.8, 1880.0], [64.9, 1880.0], [65.0, 1882.0], [65.1, 1882.0], [65.2, 1889.0], [65.3, 1893.0], [65.4, 1894.0], [65.5, 1900.0], [65.6, 1902.0], [65.7, 1903.0], [65.8, 1903.0], [65.9, 1911.0], [66.0, 1915.0], [66.1, 1918.0], [66.2, 1919.0], [66.3, 1923.0], [66.4, 1923.0], [66.5, 1925.0], [66.6, 1927.0], [66.7, 1930.0], [66.8, 1932.0], [66.9, 1935.0], [67.0, 1939.0], [67.1, 1945.0], [67.2, 1945.0], [67.3, 1948.0], [67.4, 1949.0], [67.5, 1951.0], [67.6, 1953.0], [67.7, 1956.0], [67.8, 1957.0], [67.9, 1967.0], [68.0, 1967.0], [68.1, 1967.0], [68.2, 1969.0], [68.3, 1981.0], [68.4, 1983.0], [68.5, 1983.0], [68.6, 1988.0], [68.7, 1988.0], [68.8, 1989.0], [68.9, 1990.0], [69.0, 1997.0], [69.1, 1998.0], [69.2, 2002.0], [69.3, 2004.0], [69.4, 2011.0], [69.5, 2012.0], [69.6, 2013.0], [69.7, 2021.0], [69.8, 2021.0], [69.9, 2023.0], [70.0, 2025.0], [70.1, 2026.0], [70.2, 2027.0], [70.3, 2028.0], [70.4, 2031.0], [70.5, 2032.0], [70.6, 2033.0], [70.7, 2035.0], [70.8, 2037.0], [70.9, 2038.0], [71.0, 2051.0], [71.1, 2051.0], [71.2, 2054.0], [71.3, 2055.0], [71.4, 2058.0], [71.5, 2062.0], [71.6, 2064.0], [71.7, 2064.0], [71.8, 2064.0], [71.9, 2072.0], [72.0, 2074.0], [72.1, 2081.0], [72.2, 2082.0], [72.3, 2084.0], [72.4, 2087.0], [72.5, 2088.0], [72.6, 2091.0], [72.7, 2093.0], [72.8, 2097.0], [72.9, 2098.0], [73.0, 2099.0], [73.1, 2101.0], [73.2, 2104.0], [73.3, 2107.0], [73.4, 2111.0], [73.5, 2116.0], [73.6, 2118.0], [73.7, 2122.0], [73.8, 2125.0], [73.9, 2126.0], [74.0, 2128.0], [74.1, 2128.0], [74.2, 2129.0], [74.3, 2130.0], [74.4, 2132.0], [74.5, 2133.0], [74.6, 2137.0], [74.7, 2142.0], [74.8, 2147.0], [74.9, 2150.0], [75.0, 2151.0], [75.1, 2153.0], [75.2, 2153.0], [75.3, 2154.0], [75.4, 2157.0], [75.5, 2158.0], [75.6, 2161.0], [75.7, 2162.0], [75.8, 2162.0], [75.9, 2167.0], [76.0, 2169.0], [76.1, 2170.0], [76.2, 2171.0], [76.3, 2175.0], [76.4, 2177.0], [76.5, 2182.0], [76.6, 2185.0], [76.7, 2186.0], [76.8, 2186.0], [76.9, 2194.0], [77.0, 2195.0], [77.1, 2198.0], [77.2, 2199.0], [77.3, 2199.0], [77.4, 2201.0], [77.5, 2204.0], [77.6, 2216.0], [77.7, 2216.0], [77.8, 2221.0], [77.9, 2226.0], [78.0, 2243.0], [78.1, 2247.0], [78.2, 2249.0], [78.3, 2250.0], [78.4, 2254.0], [78.5, 2259.0], [78.6, 2260.0], [78.7, 2260.0], [78.8, 2260.0], [78.9, 2265.0], [79.0, 2266.0], [79.1, 2271.0], [79.2, 2274.0], [79.3, 2278.0], [79.4, 2278.0], [79.5, 2278.0], [79.6, 2280.0], [79.7, 2280.0], [79.8, 2291.0], [79.9, 2293.0], [80.0, 2294.0], [80.1, 2298.0], [80.2, 2301.0], [80.3, 2306.0], [80.4, 2308.0], [80.5, 2310.0], [80.6, 2316.0], [80.7, 2316.0], [80.8, 2320.0], [80.9, 2321.0], [81.0, 2326.0], [81.1, 2327.0], [81.2, 2330.0], [81.3, 2330.0], [81.4, 2331.0], [81.5, 2337.0], [81.6, 2338.0], [81.7, 2343.0], [81.8, 2343.0], [81.9, 2347.0], [82.0, 2353.0], [82.1, 2358.0], [82.2, 2359.0], [82.3, 2361.0], [82.4, 2361.0], [82.5, 2362.0], [82.6, 2364.0], [82.7, 2370.0], [82.8, 2372.0], [82.9, 2377.0], [83.0, 2377.0], [83.1, 2379.0], [83.2, 2382.0], [83.3, 2383.0], [83.4, 2384.0], [83.5, 2384.0], [83.6, 2384.0], [83.7, 2385.0], [83.8, 2385.0], [83.9, 2388.0], [84.0, 2390.0], [84.1, 2390.0], [84.2, 2392.0], [84.3, 2394.0], [84.4, 2394.0], [84.5, 2401.0], [84.6, 2403.0], [84.7, 2405.0], [84.8, 2407.0], [84.9, 2411.0], [85.0, 2413.0], [85.1, 2413.0], [85.2, 2414.0], [85.3, 2416.0], [85.4, 2423.0], [85.5, 2435.0], [85.6, 2435.0], [85.7, 2437.0], [85.8, 2438.0], [85.9, 2438.0], [86.0, 2441.0], [86.1, 2442.0], [86.2, 2444.0], [86.3, 2444.0], [86.4, 2445.0], [86.5, 2445.0], [86.6, 2452.0], [86.7, 2454.0], [86.8, 2457.0], [86.9, 2457.0], [87.0, 2461.0], [87.1, 2468.0], [87.2, 2483.0], [87.3, 2487.0], [87.4, 2490.0], [87.5, 2490.0], [87.6, 2492.0], [87.7, 2496.0], [87.8, 2515.0], [87.9, 2516.0], [88.0, 2517.0], [88.1, 2520.0], [88.2, 2521.0], [88.3, 2521.0], [88.4, 2532.0], [88.5, 2533.0], [88.6, 2533.0], [88.7, 2537.0], [88.8, 2537.0], [88.9, 2541.0], [89.0, 2542.0], [89.1, 2545.0], [89.2, 2547.0], [89.3, 2548.0], [89.4, 2555.0], [89.5, 2558.0], [89.6, 2559.0], [89.7, 2561.0], [89.8, 2565.0], [89.9, 2568.0], [90.0, 2569.0], [90.1, 2570.0], [90.2, 2576.0], [90.3, 2578.0], [90.4, 2584.0], [90.5, 2586.0], [90.6, 2587.0], [90.7, 2588.0], [90.8, 2590.0], [90.9, 2591.0], [91.0, 2596.0], [91.1, 2598.0], [91.2, 2601.0], [91.3, 2602.0], [91.4, 2607.0], [91.5, 2609.0], [91.6, 2609.0], [91.7, 2611.0], [91.8, 2612.0], [91.9, 2612.0], [92.0, 2614.0], [92.1, 2616.0], [92.2, 2617.0], [92.3, 2619.0], [92.4, 2620.0], [92.5, 2621.0], [92.6, 2623.0], [92.7, 2628.0], [92.8, 2630.0], [92.9, 2631.0], [93.0, 2633.0], [93.1, 2636.0], [93.2, 2637.0], [93.3, 2642.0], [93.4, 2642.0], [93.5, 2643.0], [93.6, 2649.0], [93.7, 2655.0], [93.8, 2656.0], [93.9, 2662.0], [94.0, 2662.0], [94.1, 2663.0], [94.2, 2663.0], [94.3, 2669.0], [94.4, 2670.0], [94.5, 2672.0], [94.6, 2676.0], [94.7, 2680.0], [94.8, 2686.0], [94.9, 2691.0], [95.0, 2695.0], [95.1, 2698.0], [95.2, 2699.0], [95.3, 2700.0], [95.4, 2701.0], [95.5, 2702.0], [95.6, 2703.0], [95.7, 2715.0], [95.8, 2717.0], [95.9, 2719.0], [96.0, 2727.0], [96.1, 2730.0], [96.2, 2730.0], [96.3, 2732.0], [96.4, 2733.0], [96.5, 2735.0], [96.6, 2744.0], [96.7, 2753.0], [96.8, 2754.0], [96.9, 2761.0], [97.0, 2770.0], [97.1, 2777.0], [97.2, 2778.0], [97.3, 2778.0], [97.4, 2794.0], [97.5, 2803.0], [97.6, 2807.0], [97.7, 2808.0], [97.8, 2819.0], [97.9, 2820.0], [98.0, 2830.0], [98.1, 2837.0], [98.2, 2848.0], [98.3, 2856.0], [98.4, 2858.0], [98.5, 2860.0], [98.6, 2860.0], [98.7, 2861.0], [98.8, 2863.0], [98.9, 2865.0], [99.0, 2901.0], [99.1, 2905.0], [99.2, 2909.0], [99.3, 2910.0], [99.4, 2935.0], [99.5, 2937.0], [99.6, 2946.0], [99.7, 3108.0], [99.8, 3118.0], [99.9, 21398.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 166.0, "series": [{"data": [[0.0, 7.0], [600.0, 39.0], [700.0, 35.0], [800.0, 13.0], [900.0, 14.0], [1000.0, 20.0], [1100.0, 31.0], [1200.0, 20.0], [1300.0, 17.0], [21300.0, 1.0], [1400.0, 18.0], [1500.0, 15.0], [1600.0, 16.0], [100.0, 46.0], [1700.0, 22.0], [1800.0, 21.0], [1900.0, 37.0], [2000.0, 39.0], [2100.0, 44.0], [2200.0, 28.0], [2300.0, 43.0], [2400.0, 33.0], [2500.0, 34.0], [2600.0, 41.0], [2700.0, 22.0], [2800.0, 15.0], [2900.0, 7.0], [3100.0, 2.0], [200.0, 45.0], [300.0, 76.0], [400.0, 166.0], [500.0, 33.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 419.0, "series": [{"data": [[0.0, 340.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 240.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 419.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 145.65399999999985, "minX": 1.63089624E12, "maxY": 251.2120000000002, "series": [{"data": [[1.63089624E12, 145.65399999999985]], "isOverall": false, "label": "getAllImgForThisPage", "isController": false}, {"data": [[1.63089624E12, 251.2120000000002]], "isOverall": false, "label": "getAllImgByGoodsId", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089624E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 113.0, "minX": 1.0, "maxY": 11364.5, "series": [{"data": [[2.0, 2202.5], [3.0, 2145.5], [4.0, 1911.5], [5.0, 1774.0], [6.0, 1839.0], [7.0, 1708.5], [9.0, 1826.0], [10.0, 2837.0], [11.0, 2865.0], [12.0, 1040.6666666666667], [13.0, 2701.5], [15.0, 2234.3333333333335], [16.0, 1391.0], [17.0, 696.0], [19.0, 1961.8], [20.0, 2909.0], [21.0, 1418.0], [22.0, 724.0], [23.0, 2936.0], [24.0, 1420.6666666666667], [26.0, 2086.0], [27.0, 957.0], [28.0, 2182.0], [29.0, 2794.0], [31.0, 1515.75], [33.0, 1764.0], [32.0, 2193.3333333333335], [34.0, 1772.0], [37.0, 500.8571428571429], [36.0, 1494.8], [39.0, 2131.3333333333335], [38.0, 807.0], [41.0, 1636.5], [40.0, 1837.0], [42.0, 378.0], [43.0, 675.0], [45.0, 1731.0], [44.0, 2281.5], [46.0, 1778.0], [49.0, 1982.6666666666665], [48.0, 1354.0], [51.0, 2156.0], [50.0, 780.0], [53.0, 1307.6666666666667], [55.0, 2115.6666666666665], [54.0, 1753.0], [57.0, 1814.0], [56.0, 113.0], [59.0, 1854.5], [58.0, 541.0], [61.0, 1166.6666666666667], [60.0, 1765.0], [63.0, 1166.0], [62.0, 1589.0], [67.0, 907.1818181818182], [64.0, 1706.0], [66.0, 141.0], [65.0, 399.5], [71.0, 1486.6666666666667], [70.0, 664.4], [69.0, 1541.0], [68.0, 701.0], [75.0, 635.9999999999999], [74.0, 1266.5], [73.0, 780.6666666666667], [72.0, 2715.0], [79.0, 2224.5], [76.0, 773.6], [78.0, 299.25], [77.0, 899.0], [83.0, 1602.0], [82.0, 1755.5], [80.0, 2609.0], [81.0, 614.0], [87.0, 2093.0], [85.0, 1664.5], [84.0, 1664.5], [86.0, 716.0], [91.0, 1591.0], [90.0, 1658.5], [89.0, 737.4], [88.0, 1619.5], [94.0, 1725.0], [93.0, 1859.0], [92.0, 438.3333333333333], [95.0, 630.0], [99.0, 2642.0], [98.0, 1463.25], [96.0, 1944.3333333333335], [97.0, 660.0], [103.0, 2528.5], [101.0, 1641.0], [100.0, 967.0], [102.0, 663.0], [106.0, 1532.25], [104.0, 1362.3333333333333], [107.0, 518.0], [105.0, 995.0], [109.0, 2049.5], [110.0, 412.0], [111.0, 545.0], [108.0, 716.0], [115.0, 1913.6666666666665], [113.0, 1253.6666666666667], [112.0, 2626.6666666666665], [114.0, 885.0], [119.0, 626.1666666666665], [117.0, 1238.8], [118.0, 317.4], [116.0, 375.33333333333337], [121.0, 511.79999999999995], [120.0, 1248.0], [122.0, 362.0], [123.0, 791.0], [127.0, 1512.5], [126.0, 1524.0], [125.0, 2121.8], [124.0, 412.0], [135.0, 1446.0], [134.0, 1537.5], [133.0, 1856.0], [131.0, 1467.0], [130.0, 1315.5], [129.0, 1401.0], [128.0, 1530.0], [132.0, 357.0], [143.0, 1439.0], [142.0, 1346.0], [141.0, 1080.6666666666667], [140.0, 2321.0], [139.0, 661.5], [138.0, 1541.0], [137.0, 1467.5], [136.0, 1608.0], [151.0, 1187.3333333333333], [150.0, 1336.0], [149.0, 1545.7142857142858], [148.0, 856.4], [144.0, 762.6], [159.0, 1546.5714285714284], [155.0, 2510.5], [153.0, 1036.0], [152.0, 290.5], [158.0, 459.0], [157.0, 696.0], [154.0, 306.0], [167.0, 936.3333333333333], [166.0, 688.5714285714286], [165.0, 586.2222222222222], [164.0, 760.0], [163.0, 915.4285714285714], [161.0, 1321.0], [160.0, 1493.5], [162.0, 505.5], [175.0, 2288.5], [173.0, 1059.6666666666667], [172.0, 2137.0], [171.0, 1538.0], [170.0, 770.2], [169.0, 1427.5], [168.0, 1051.3333333333333], [174.0, 482.0], [183.0, 926.7142857142857], [181.0, 747.5], [180.0, 1012.3333333333334], [179.0, 1102.0], [178.0, 1227.4], [176.0, 1443.0], [177.0, 471.75], [191.0, 1075.6666666666667], [190.0, 993.6666666666667], [189.0, 1356.0], [188.0, 1461.0], [187.0, 1664.6666666666665], [185.0, 1165.0], [186.0, 506.0], [184.0, 495.0], [199.0, 1364.25], [197.0, 1424.5], [196.0, 1616.0], [194.0, 1418.0], [193.0, 1267.0], [192.0, 1039.0], [195.0, 467.0], [206.0, 1498.0], [205.0, 740.6], [204.0, 1213.5], [203.0, 1230.0], [202.0, 1353.1666666666667], [201.0, 442.6666666666667], [207.0, 375.0], [214.0, 842.25], [213.0, 941.7142857142859], [211.0, 639.5555555555555], [210.0, 1410.0], [208.0, 2352.0], [209.0, 383.0], [215.0, 417.0], [212.0, 426.6], [223.0, 1248.75], [221.0, 1178.7142857142858], [218.0, 1164.0], [216.0, 1580.6666666666665], [222.0, 421.0], [220.0, 433.75], [219.0, 428.0], [231.0, 1144.4999999999998], [228.0, 820.1], [226.0, 1545.6666666666665], [224.0, 1389.0], [230.0, 459.0], [229.0, 491.5], [227.0, 475.25], [225.0, 404.0], [239.0, 767.6], [237.0, 863.5], [235.0, 1066.5], [233.0, 879.0], [232.0, 528.56], [234.0, 461.3333333333333], [236.0, 467.8], [238.0, 453.8], [247.0, 2411.0], [246.0, 2142.0], [245.0, 2197.3333333333335], [243.0, 932.25], [241.0, 2202.0], [240.0, 467.5], [242.0, 423.0], [255.0, 2058.0], [253.0, 2394.0], [252.0, 1967.0], [251.0, 2243.0], [250.0, 2031.0], [249.0, 2062.0], [248.0, 2384.0], [271.0, 1989.0], [269.0, 2017.0], [259.0, 2254.0], [258.0, 1948.0], [257.0, 1957.0], [256.0, 2271.0], [267.0, 2035.0], [266.0, 2150.0], [265.0, 2153.0], [264.0, 1927.0], [263.0, 2390.0], [262.0, 2098.5], [260.0, 2364.0], [286.0, 1945.0], [287.0, 2166.5], [284.0, 1830.0], [283.0, 1967.0], [282.0, 2028.0], [281.0, 2169.5], [279.0, 2149.5], [275.0, 2122.0], [274.0, 2140.5], [301.0, 2280.0], [302.0, 2099.0], [300.0, 2182.0], [290.0, 2037.3333333333333], [299.0, 1949.0], [298.0, 1967.0], [297.0, 1889.0], [295.0, 2082.0], [294.0, 1935.0], [293.0, 2158.0], [292.0, 1935.0], [319.0, 1810.0], [314.0, 2040.0], [315.0, 1915.0], [313.0, 2087.0], [311.0, 2259.0], [309.0, 2174.0], [307.0, 1911.0], [305.0, 2023.0], [304.0, 1954.0], [334.0, 2012.0], [335.0, 2021.0], [333.0, 1832.0], [332.0, 2035.0], [330.0, 1925.0], [329.0, 1880.0], [328.0, 1831.0], [327.0, 1882.0], [320.0, 2050.6], [323.0, 1893.0], [322.0, 1969.0], [326.0, 1902.0], [325.0, 2194.0], [324.0, 1894.0], [350.0, 1680.0], [349.0, 1960.6666666666667], [346.0, 2040.0], [344.0, 1677.0], [343.0, 1793.0], [342.0, 1770.0], [341.0, 2161.0], [340.0, 1846.5], [338.0, 2028.0], [336.0, 1953.0], [355.0, 2051.0], [367.0, 2074.0], [366.0, 1935.5], [364.0, 1944.0], [362.0, 1796.3333333333333], [359.0, 1666.5], [357.0, 1809.0], [354.0, 2072.0], [353.0, 1955.0], [352.0, 1735.0], [382.0, 1930.0], [383.0, 1852.0], [381.0, 1529.0], [380.0, 1783.0], [378.0, 1774.0], [377.0, 1956.0], [376.0, 1607.0], [375.0, 1983.0], [369.0, 1750.0], [368.0, 1796.0], [374.0, 2011.0], [373.0, 2027.0], [372.0, 1866.6666666666667], [398.0, 1475.0], [399.0, 1512.0], [397.0, 1577.0], [396.0, 1845.0], [395.0, 1845.0], [394.0, 1581.0], [393.0, 1744.0], [392.0, 1596.0], [391.0, 1571.0], [385.0, 1923.0], [384.0, 1623.0], [387.0, 1746.0], [386.0, 1599.0], [390.0, 1568.0], [388.0, 1903.0], [414.0, 1305.5], [412.0, 1420.5], [410.0, 1796.0], [409.0, 1755.0], [408.0, 1635.0], [407.0, 1492.5], [405.0, 1675.0], [404.0, 1559.0], [402.0, 1608.3333333333333], [419.0, 1279.0], [431.0, 1572.5], [430.0, 1418.0], [426.0, 1427.5], [424.0, 1714.0], [423.0, 1726.5], [421.0, 1480.0], [418.0, 1285.0], [417.0, 1495.0], [416.0, 1625.0], [446.0, 1181.0], [447.0, 1336.0], [445.0, 1400.0], [444.0, 1425.0], [443.0, 1308.5], [441.0, 1682.0], [440.0, 1358.5], [439.0, 1387.0], [435.0, 1521.5], [433.0, 1433.0], [437.0, 1377.0], [451.0, 1337.0], [462.0, 1282.0], [460.0, 1283.5], [458.0, 1191.0], [457.0, 1266.0], [456.0, 1171.5], [454.0, 1326.0], [453.0, 1266.0], [452.0, 1287.0], [450.0, 1633.0], [449.0, 1256.5], [479.0, 1251.25], [474.0, 1148.0], [473.0, 1026.0], [471.0, 1295.3333333333333], [467.0, 1310.0], [495.0, 1106.0], [492.0, 1171.0], [487.0, 1128.0], [485.0, 1157.0], [484.0, 1135.5], [482.0, 1277.8], [500.0, 1146.3636363636363], [496.0, 1417.0], [1.0, 11364.5]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[198.42599999999982, 1310.7619999999997]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7852.6, "minX": 1.63089624E12, "maxY": 593640.1, "series": [{"data": [[1.63089624E12, 593640.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63089624E12, 7852.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089624E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1310.7619999999997, "minX": 1.63089624E12, "maxY": 1310.7619999999997, "series": [{"data": [[1.63089624E12, 1310.7619999999997]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089624E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1032.1770000000026, "minX": 1.63089624E12, "maxY": 1032.1770000000026, "series": [{"data": [[1.63089624E12, 1032.1770000000026]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089624E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 365.41599999999954, "minX": 1.63089624E12, "maxY": 365.41599999999954, "series": [{"data": [[1.63089624E12, 365.41599999999954]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089624E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 54.0, "minX": 1.63089624E12, "maxY": 3118.0, "series": [{"data": [[1.63089624E12, 3118.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63089624E12, 2568.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63089624E12, 2865.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63089624E12, 2691.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63089624E12, 54.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63089624E12, 1127.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089624E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 351.0, "minX": 3.0, "maxY": 21398.0, "series": [{"data": [[284.0, 2000.0], [166.0, 2609.0], [49.0, 1198.0], [3.0, 1287.0], [248.0, 351.0], [250.0, 593.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[248.0, 21398.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 284.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 2201.0, "series": [{"data": [[284.0, 1572.5], [166.0, 2201.0], [49.0, 1155.0], [3.0, 567.0], [248.0, 147.0], [250.0, 422.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[248.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 284.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.63089624E12, "maxY": 16.666666666666668, "series": [{"data": [[1.63089624E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089624E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63089624E12, "maxY": 16.65, "series": [{"data": [[1.63089624E12, 16.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63089624E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089624E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63089624E12, "maxY": 16.65, "series": [{"data": [[1.63089624E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63089624E12, 16.65]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089624E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63089624E12, "maxY": 16.65, "series": [{"data": [[1.63089624E12, 16.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63089624E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089624E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

