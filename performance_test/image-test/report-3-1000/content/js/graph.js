/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 900.0, "minX": 0.0, "maxY": 10968.0, "series": [{"data": [[0.0, 900.0], [0.1, 908.0], [0.2, 1025.0], [0.3, 1213.0], [0.4, 1215.0], [0.5, 1225.0], [0.6, 1238.0], [0.7, 1722.0], [0.8, 1801.0], [0.9, 1823.0], [1.0, 1827.0], [1.1, 1829.0], [1.2, 1830.0], [1.3, 1833.0], [1.4, 1834.0], [1.5, 1836.0], [1.6, 1838.0], [1.7, 1844.0], [1.8, 1859.0], [1.9, 1865.0], [2.0, 1871.0], [2.1, 1878.0], [2.2, 1909.0], [2.3, 1920.0], [2.4, 1927.0], [2.5, 1929.0], [2.6, 1931.0], [2.7, 1932.0], [2.8, 1932.0], [2.9, 1937.0], [3.0, 1939.0], [3.1, 1940.0], [3.2, 1940.0], [3.3, 1940.0], [3.4, 1941.0], [3.5, 1942.0], [3.6, 1942.0], [3.7, 1945.0], [3.8, 1947.0], [3.9, 1949.0], [4.0, 1952.0], [4.1, 1952.0], [4.2, 1962.0], [4.3, 1967.0], [4.4, 1968.0], [4.5, 1971.0], [4.6, 1973.0], [4.7, 1975.0], [4.8, 1975.0], [4.9, 1978.0], [5.0, 1979.0], [5.1, 1979.0], [5.2, 1982.0], [5.3, 1983.0], [5.4, 1985.0], [5.5, 1988.0], [5.6, 1989.0], [5.7, 1990.0], [5.8, 1991.0], [5.9, 1995.0], [6.0, 1998.0], [6.1, 2000.0], [6.2, 2002.0], [6.3, 2003.0], [6.4, 2005.0], [6.5, 2006.0], [6.6, 2007.0], [6.7, 2009.0], [6.8, 2009.0], [6.9, 2011.0], [7.0, 2013.0], [7.1, 2016.0], [7.2, 2018.0], [7.3, 2019.0], [7.4, 2021.0], [7.5, 2021.0], [7.6, 2022.0], [7.7, 2025.0], [7.8, 2025.0], [7.9, 2027.0], [8.0, 2029.0], [8.1, 2030.0], [8.2, 2032.0], [8.3, 2032.0], [8.4, 2034.0], [8.5, 2035.0], [8.6, 2037.0], [8.7, 2038.0], [8.8, 2040.0], [8.9, 2041.0], [9.0, 2046.0], [9.1, 2048.0], [9.2, 2054.0], [9.3, 2058.0], [9.4, 2063.0], [9.5, 2065.0], [9.6, 2067.0], [9.7, 2069.0], [9.8, 2076.0], [9.9, 2078.0], [10.0, 2082.0], [10.1, 2083.0], [10.2, 2083.0], [10.3, 2090.0], [10.4, 2092.0], [10.5, 2095.0], [10.6, 2101.0], [10.7, 2103.0], [10.8, 2106.0], [10.9, 2106.0], [11.0, 2108.0], [11.1, 2108.0], [11.2, 2109.0], [11.3, 2118.0], [11.4, 2121.0], [11.5, 2127.0], [11.6, 2133.0], [11.7, 2136.0], [11.8, 2140.0], [11.9, 2144.0], [12.0, 2152.0], [12.1, 2154.0], [12.2, 2161.0], [12.3, 2163.0], [12.4, 2165.0], [12.5, 2174.0], [12.6, 2176.0], [12.7, 2181.0], [12.8, 2183.0], [12.9, 2186.0], [13.0, 2190.0], [13.1, 2192.0], [13.2, 2192.0], [13.3, 2196.0], [13.4, 2200.0], [13.5, 2204.0], [13.6, 2206.0], [13.7, 2207.0], [13.8, 2209.0], [13.9, 2213.0], [14.0, 2215.0], [14.1, 2217.0], [14.2, 2221.0], [14.3, 2223.0], [14.4, 2225.0], [14.5, 2230.0], [14.6, 2239.0], [14.7, 2247.0], [14.8, 2256.0], [14.9, 2261.0], [15.0, 2271.0], [15.1, 2277.0], [15.2, 2281.0], [15.3, 2284.0], [15.4, 2291.0], [15.5, 2292.0], [15.6, 2293.0], [15.7, 2298.0], [15.8, 2298.0], [15.9, 2301.0], [16.0, 2306.0], [16.1, 2309.0], [16.2, 2328.0], [16.3, 2334.0], [16.4, 2351.0], [16.5, 2356.0], [16.6, 2362.0], [16.7, 2364.0], [16.8, 2364.0], [16.9, 2374.0], [17.0, 2376.0], [17.1, 2380.0], [17.2, 2386.0], [17.3, 2390.0], [17.4, 2392.0], [17.5, 2396.0], [17.6, 2400.0], [17.7, 2401.0], [17.8, 2402.0], [17.9, 2403.0], [18.0, 2405.0], [18.1, 2406.0], [18.2, 2410.0], [18.3, 2413.0], [18.4, 2414.0], [18.5, 2417.0], [18.6, 2426.0], [18.7, 2428.0], [18.8, 2430.0], [18.9, 2432.0], [19.0, 2435.0], [19.1, 2440.0], [19.2, 2442.0], [19.3, 2445.0], [19.4, 2452.0], [19.5, 2456.0], [19.6, 2461.0], [19.7, 2463.0], [19.8, 2467.0], [19.9, 2473.0], [20.0, 2486.0], [20.1, 2486.0], [20.2, 2493.0], [20.3, 2497.0], [20.4, 2513.0], [20.5, 2514.0], [20.6, 2514.0], [20.7, 2519.0], [20.8, 2527.0], [20.9, 2529.0], [21.0, 2536.0], [21.1, 2540.0], [21.2, 2541.0], [21.3, 2542.0], [21.4, 2543.0], [21.5, 2544.0], [21.6, 2545.0], [21.7, 2546.0], [21.8, 2547.0], [21.9, 2551.0], [22.0, 2556.0], [22.1, 2562.0], [22.2, 2563.0], [22.3, 2565.0], [22.4, 2568.0], [22.5, 2572.0], [22.6, 2576.0], [22.7, 2581.0], [22.8, 2582.0], [22.9, 2583.0], [23.0, 2585.0], [23.1, 2588.0], [23.2, 2592.0], [23.3, 2597.0], [23.4, 2598.0], [23.5, 2600.0], [23.6, 2606.0], [23.7, 2607.0], [23.8, 2611.0], [23.9, 2613.0], [24.0, 2614.0], [24.1, 2615.0], [24.2, 2617.0], [24.3, 2618.0], [24.4, 2618.0], [24.5, 2620.0], [24.6, 2623.0], [24.7, 2624.0], [24.8, 2625.0], [24.9, 2630.0], [25.0, 2634.0], [25.1, 2637.0], [25.2, 2639.0], [25.3, 2643.0], [25.4, 2649.0], [25.5, 2650.0], [25.6, 2652.0], [25.7, 2656.0], [25.8, 2658.0], [25.9, 2662.0], [26.0, 2665.0], [26.1, 2668.0], [26.2, 2669.0], [26.3, 2670.0], [26.4, 2675.0], [26.5, 2685.0], [26.6, 2686.0], [26.7, 2687.0], [26.8, 2688.0], [26.9, 2688.0], [27.0, 2692.0], [27.1, 2695.0], [27.2, 2696.0], [27.3, 2700.0], [27.4, 2701.0], [27.5, 2704.0], [27.6, 2705.0], [27.7, 2710.0], [27.8, 2713.0], [27.9, 2715.0], [28.0, 2717.0], [28.1, 2718.0], [28.2, 2724.0], [28.3, 2727.0], [28.4, 2728.0], [28.5, 2730.0], [28.6, 2732.0], [28.7, 2734.0], [28.8, 2744.0], [28.9, 2748.0], [29.0, 2751.0], [29.1, 2754.0], [29.2, 2756.0], [29.3, 2757.0], [29.4, 2760.0], [29.5, 2761.0], [29.6, 2763.0], [29.7, 2764.0], [29.8, 2769.0], [29.9, 2771.0], [30.0, 2778.0], [30.1, 2780.0], [30.2, 2781.0], [30.3, 2785.0], [30.4, 2791.0], [30.5, 2795.0], [30.6, 2796.0], [30.7, 2797.0], [30.8, 2800.0], [30.9, 2803.0], [31.0, 2804.0], [31.1, 2810.0], [31.2, 2812.0], [31.3, 2813.0], [31.4, 2815.0], [31.5, 2816.0], [31.6, 2817.0], [31.7, 2824.0], [31.8, 2825.0], [31.9, 2828.0], [32.0, 2834.0], [32.1, 2836.0], [32.2, 2838.0], [32.3, 2839.0], [32.4, 2841.0], [32.5, 2848.0], [32.6, 2851.0], [32.7, 2856.0], [32.8, 2857.0], [32.9, 2858.0], [33.0, 2862.0], [33.1, 2867.0], [33.2, 2870.0], [33.3, 2871.0], [33.4, 2873.0], [33.5, 2878.0], [33.6, 2880.0], [33.7, 2880.0], [33.8, 2888.0], [33.9, 2897.0], [34.0, 2900.0], [34.1, 2902.0], [34.2, 2903.0], [34.3, 2904.0], [34.4, 2905.0], [34.5, 2908.0], [34.6, 2913.0], [34.7, 2914.0], [34.8, 2916.0], [34.9, 2919.0], [35.0, 2919.0], [35.1, 2922.0], [35.2, 2926.0], [35.3, 2929.0], [35.4, 2931.0], [35.5, 2932.0], [35.6, 2935.0], [35.7, 2937.0], [35.8, 2941.0], [35.9, 2948.0], [36.0, 2953.0], [36.1, 2958.0], [36.2, 2962.0], [36.3, 2964.0], [36.4, 2972.0], [36.5, 2974.0], [36.6, 2979.0], [36.7, 2980.0], [36.8, 2985.0], [36.9, 2989.0], [37.0, 2990.0], [37.1, 2993.0], [37.2, 2998.0], [37.3, 2999.0], [37.4, 2999.0], [37.5, 3000.0], [37.6, 3002.0], [37.7, 3004.0], [37.8, 3007.0], [37.9, 3009.0], [38.0, 3019.0], [38.1, 3020.0], [38.2, 3026.0], [38.3, 3028.0], [38.4, 3033.0], [38.5, 3035.0], [38.6, 3038.0], [38.7, 3042.0], [38.8, 3047.0], [38.9, 3047.0], [39.0, 3050.0], [39.1, 3052.0], [39.2, 3059.0], [39.3, 3063.0], [39.4, 3069.0], [39.5, 3070.0], [39.6, 3071.0], [39.7, 3074.0], [39.8, 3075.0], [39.9, 3081.0], [40.0, 3086.0], [40.1, 3090.0], [40.2, 3097.0], [40.3, 3098.0], [40.4, 3106.0], [40.5, 3109.0], [40.6, 3110.0], [40.7, 3111.0], [40.8, 3112.0], [40.9, 3114.0], [41.0, 3115.0], [41.1, 3120.0], [41.2, 3125.0], [41.3, 3126.0], [41.4, 3126.0], [41.5, 3138.0], [41.6, 3140.0], [41.7, 3142.0], [41.8, 3143.0], [41.9, 3146.0], [42.0, 3147.0], [42.1, 3153.0], [42.2, 3153.0], [42.3, 3157.0], [42.4, 3162.0], [42.5, 3164.0], [42.6, 3168.0], [42.7, 3170.0], [42.8, 3176.0], [42.9, 3178.0], [43.0, 3182.0], [43.1, 3182.0], [43.2, 3187.0], [43.3, 3192.0], [43.4, 3198.0], [43.5, 3201.0], [43.6, 3202.0], [43.7, 3209.0], [43.8, 3214.0], [43.9, 3216.0], [44.0, 3226.0], [44.1, 3230.0], [44.2, 3231.0], [44.3, 3236.0], [44.4, 3238.0], [44.5, 3240.0], [44.6, 3244.0], [44.7, 3245.0], [44.8, 3247.0], [44.9, 3254.0], [45.0, 3255.0], [45.1, 3256.0], [45.2, 3257.0], [45.3, 3259.0], [45.4, 3266.0], [45.5, 3270.0], [45.6, 3274.0], [45.7, 3276.0], [45.8, 3287.0], [45.9, 3293.0], [46.0, 3295.0], [46.1, 3299.0], [46.2, 3302.0], [46.3, 3310.0], [46.4, 3313.0], [46.5, 3316.0], [46.6, 3317.0], [46.7, 3318.0], [46.8, 3322.0], [46.9, 3324.0], [47.0, 3329.0], [47.1, 3330.0], [47.2, 3334.0], [47.3, 3340.0], [47.4, 3346.0], [47.5, 3348.0], [47.6, 3349.0], [47.7, 3350.0], [47.8, 3351.0], [47.9, 3355.0], [48.0, 3358.0], [48.1, 3362.0], [48.2, 3365.0], [48.3, 3369.0], [48.4, 3378.0], [48.5, 3378.0], [48.6, 3380.0], [48.7, 3386.0], [48.8, 3390.0], [48.9, 3391.0], [49.0, 3393.0], [49.1, 3395.0], [49.2, 3396.0], [49.3, 3397.0], [49.4, 3399.0], [49.5, 3401.0], [49.6, 3405.0], [49.7, 3411.0], [49.8, 3414.0], [49.9, 3415.0], [50.0, 3416.0], [50.1, 3417.0], [50.2, 3418.0], [50.3, 3418.0], [50.4, 3421.0], [50.5, 3422.0], [50.6, 3422.0], [50.7, 3425.0], [50.8, 3427.0], [50.9, 3434.0], [51.0, 3436.0], [51.1, 3437.0], [51.2, 3438.0], [51.3, 3441.0], [51.4, 3444.0], [51.5, 3446.0], [51.6, 3448.0], [51.7, 3448.0], [51.8, 3449.0], [51.9, 3450.0], [52.0, 3450.0], [52.1, 3451.0], [52.2, 3453.0], [52.3, 3454.0], [52.4, 3457.0], [52.5, 3459.0], [52.6, 3460.0], [52.7, 3464.0], [52.8, 3465.0], [52.9, 3467.0], [53.0, 3468.0], [53.1, 3473.0], [53.2, 3475.0], [53.3, 3476.0], [53.4, 3480.0], [53.5, 3480.0], [53.6, 3482.0], [53.7, 3487.0], [53.8, 3490.0], [53.9, 3497.0], [54.0, 3502.0], [54.1, 3503.0], [54.2, 3505.0], [54.3, 3510.0], [54.4, 3510.0], [54.5, 3514.0], [54.6, 3516.0], [54.7, 3522.0], [54.8, 3524.0], [54.9, 3525.0], [55.0, 3528.0], [55.1, 3528.0], [55.2, 3529.0], [55.3, 3532.0], [55.4, 3533.0], [55.5, 3534.0], [55.6, 3536.0], [55.7, 3538.0], [55.8, 3541.0], [55.9, 3542.0], [56.0, 3552.0], [56.1, 3555.0], [56.2, 3559.0], [56.3, 3562.0], [56.4, 3564.0], [56.5, 3566.0], [56.6, 3568.0], [56.7, 3569.0], [56.8, 3569.0], [56.9, 3570.0], [57.0, 3572.0], [57.1, 3573.0], [57.2, 3574.0], [57.3, 3582.0], [57.4, 3583.0], [57.5, 3586.0], [57.6, 3587.0], [57.7, 3590.0], [57.8, 3594.0], [57.9, 3595.0], [58.0, 3596.0], [58.1, 3609.0], [58.2, 3611.0], [58.3, 3615.0], [58.4, 3616.0], [58.5, 3617.0], [58.6, 3617.0], [58.7, 3620.0], [58.8, 3620.0], [58.9, 3630.0], [59.0, 3632.0], [59.1, 3637.0], [59.2, 3638.0], [59.3, 3640.0], [59.4, 3641.0], [59.5, 3642.0], [59.6, 3644.0], [59.7, 3648.0], [59.8, 3649.0], [59.9, 3652.0], [60.0, 3653.0], [60.1, 3655.0], [60.2, 3659.0], [60.3, 3661.0], [60.4, 3665.0], [60.5, 3668.0], [60.6, 3670.0], [60.7, 3673.0], [60.8, 3674.0], [60.9, 3675.0], [61.0, 3676.0], [61.1, 3680.0], [61.2, 3681.0], [61.3, 3683.0], [61.4, 3686.0], [61.5, 3688.0], [61.6, 3688.0], [61.7, 3691.0], [61.8, 3692.0], [61.9, 3698.0], [62.0, 3699.0], [62.1, 3700.0], [62.2, 3701.0], [62.3, 3703.0], [62.4, 3707.0], [62.5, 3711.0], [62.6, 3714.0], [62.7, 3716.0], [62.8, 3717.0], [62.9, 3718.0], [63.0, 3719.0], [63.1, 3726.0], [63.2, 3729.0], [63.3, 3731.0], [63.4, 3732.0], [63.5, 3734.0], [63.6, 3736.0], [63.7, 3739.0], [63.8, 3740.0], [63.9, 3741.0], [64.0, 3741.0], [64.1, 3745.0], [64.2, 3747.0], [64.3, 3748.0], [64.4, 3748.0], [64.5, 3749.0], [64.6, 3755.0], [64.7, 3757.0], [64.8, 3762.0], [64.9, 3766.0], [65.0, 3767.0], [65.1, 3770.0], [65.2, 3771.0], [65.3, 3772.0], [65.4, 3775.0], [65.5, 3777.0], [65.6, 3779.0], [65.7, 3783.0], [65.8, 3786.0], [65.9, 3787.0], [66.0, 3787.0], [66.1, 3790.0], [66.2, 3791.0], [66.3, 3792.0], [66.4, 3796.0], [66.5, 3798.0], [66.6, 3804.0], [66.7, 3805.0], [66.8, 3806.0], [66.9, 3808.0], [67.0, 3812.0], [67.1, 3813.0], [67.2, 3816.0], [67.3, 3818.0], [67.4, 3821.0], [67.5, 3821.0], [67.6, 3824.0], [67.7, 3827.0], [67.8, 3828.0], [67.9, 3829.0], [68.0, 3832.0], [68.1, 3835.0], [68.2, 3837.0], [68.3, 3838.0], [68.4, 3843.0], [68.5, 3844.0], [68.6, 3847.0], [68.7, 3849.0], [68.8, 3852.0], [68.9, 3855.0], [69.0, 3857.0], [69.1, 3858.0], [69.2, 3859.0], [69.3, 3859.0], [69.4, 3860.0], [69.5, 3862.0], [69.6, 3866.0], [69.7, 3868.0], [69.8, 3870.0], [69.9, 3872.0], [70.0, 3875.0], [70.1, 3877.0], [70.2, 3879.0], [70.3, 3879.0], [70.4, 3882.0], [70.5, 3884.0], [70.6, 3886.0], [70.7, 3888.0], [70.8, 3889.0], [70.9, 3891.0], [71.0, 3892.0], [71.1, 3894.0], [71.2, 3897.0], [71.3, 3899.0], [71.4, 3899.0], [71.5, 3900.0], [71.6, 3902.0], [71.7, 3906.0], [71.8, 3908.0], [71.9, 3910.0], [72.0, 3910.0], [72.1, 3912.0], [72.2, 3913.0], [72.3, 3913.0], [72.4, 3921.0], [72.5, 3921.0], [72.6, 3922.0], [72.7, 3924.0], [72.8, 3924.0], [72.9, 3927.0], [73.0, 3931.0], [73.1, 3931.0], [73.2, 3932.0], [73.3, 3933.0], [73.4, 3933.0], [73.5, 3934.0], [73.6, 3936.0], [73.7, 3938.0], [73.8, 3939.0], [73.9, 3940.0], [74.0, 3941.0], [74.1, 3942.0], [74.2, 3944.0], [74.3, 3946.0], [74.4, 3949.0], [74.5, 3951.0], [74.6, 3953.0], [74.7, 3956.0], [74.8, 3958.0], [74.9, 3958.0], [75.0, 3958.0], [75.1, 3961.0], [75.2, 3967.0], [75.3, 3968.0], [75.4, 3973.0], [75.5, 3979.0], [75.6, 3982.0], [75.7, 3986.0], [75.8, 3987.0], [75.9, 3990.0], [76.0, 3991.0], [76.1, 3992.0], [76.2, 3995.0], [76.3, 3996.0], [76.4, 3997.0], [76.5, 3999.0], [76.6, 4000.0], [76.7, 4002.0], [76.8, 4005.0], [76.9, 4008.0], [77.0, 4010.0], [77.1, 4014.0], [77.2, 4016.0], [77.3, 4018.0], [77.4, 4019.0], [77.5, 4023.0], [77.6, 4025.0], [77.7, 4029.0], [77.8, 4033.0], [77.9, 4036.0], [78.0, 4040.0], [78.1, 4041.0], [78.2, 4041.0], [78.3, 4044.0], [78.4, 4051.0], [78.5, 4052.0], [78.6, 4053.0], [78.7, 4053.0], [78.8, 4058.0], [78.9, 4059.0], [79.0, 4064.0], [79.1, 4067.0], [79.2, 4072.0], [79.3, 4077.0], [79.4, 4080.0], [79.5, 4080.0], [79.6, 4081.0], [79.7, 4084.0], [79.8, 4085.0], [79.9, 4087.0], [80.0, 4087.0], [80.1, 4088.0], [80.2, 4090.0], [80.3, 4091.0], [80.4, 4093.0], [80.5, 4093.0], [80.6, 4095.0], [80.7, 4096.0], [80.8, 4096.0], [80.9, 4102.0], [81.0, 4107.0], [81.1, 4107.0], [81.2, 4110.0], [81.3, 4110.0], [81.4, 4112.0], [81.5, 4113.0], [81.6, 4114.0], [81.7, 4114.0], [81.8, 4115.0], [81.9, 4118.0], [82.0, 4118.0], [82.1, 4120.0], [82.2, 4123.0], [82.3, 4123.0], [82.4, 4126.0], [82.5, 4128.0], [82.6, 4134.0], [82.7, 4136.0], [82.8, 4138.0], [82.9, 4141.0], [83.0, 4146.0], [83.1, 4148.0], [83.2, 4152.0], [83.3, 4155.0], [83.4, 4157.0], [83.5, 4159.0], [83.6, 4163.0], [83.7, 4168.0], [83.8, 4171.0], [83.9, 4172.0], [84.0, 4175.0], [84.1, 4177.0], [84.2, 4181.0], [84.3, 4183.0], [84.4, 4186.0], [84.5, 4188.0], [84.6, 4194.0], [84.7, 4199.0], [84.8, 4202.0], [84.9, 4208.0], [85.0, 4209.0], [85.1, 4210.0], [85.2, 4212.0], [85.3, 4214.0], [85.4, 4220.0], [85.5, 4223.0], [85.6, 4227.0], [85.7, 4229.0], [85.8, 4233.0], [85.9, 4236.0], [86.0, 4238.0], [86.1, 4244.0], [86.2, 4249.0], [86.3, 4253.0], [86.4, 4253.0], [86.5, 4256.0], [86.6, 4261.0], [86.7, 4264.0], [86.8, 4269.0], [86.9, 4281.0], [87.0, 4286.0], [87.1, 4291.0], [87.2, 4293.0], [87.3, 4295.0], [87.4, 4298.0], [87.5, 4298.0], [87.6, 4300.0], [87.7, 4304.0], [87.8, 4315.0], [87.9, 4317.0], [88.0, 4320.0], [88.1, 4324.0], [88.2, 4329.0], [88.3, 4334.0], [88.4, 4339.0], [88.5, 4353.0], [88.6, 4353.0], [88.7, 4356.0], [88.8, 4359.0], [88.9, 4373.0], [89.0, 4377.0], [89.1, 4390.0], [89.2, 4406.0], [89.3, 4406.0], [89.4, 4412.0], [89.5, 4415.0], [89.6, 4431.0], [89.7, 4441.0], [89.8, 4447.0], [89.9, 4451.0], [90.0, 4462.0], [90.1, 4469.0], [90.2, 4477.0], [90.3, 4499.0], [90.4, 4515.0], [90.5, 4521.0], [90.6, 4528.0], [90.7, 4542.0], [90.8, 4573.0], [90.9, 4577.0], [91.0, 4591.0], [91.1, 4592.0], [91.2, 4608.0], [91.3, 4632.0], [91.4, 4670.0], [91.5, 4692.0], [91.6, 4717.0], [91.7, 4772.0], [91.8, 4799.0], [91.9, 4810.0], [92.0, 4818.0], [92.1, 4833.0], [92.2, 4875.0], [92.3, 4894.0], [92.4, 4899.0], [92.5, 4926.0], [92.6, 4949.0], [92.7, 4973.0], [92.8, 5009.0], [92.9, 5016.0], [93.0, 5027.0], [93.1, 5056.0], [93.2, 5064.0], [93.3, 5079.0], [93.4, 5094.0], [93.5, 5115.0], [93.6, 5120.0], [93.7, 5154.0], [93.8, 5194.0], [93.9, 5197.0], [94.0, 5247.0], [94.1, 5251.0], [94.2, 5260.0], [94.3, 5277.0], [94.4, 5295.0], [94.5, 5311.0], [94.6, 5315.0], [94.7, 5342.0], [94.8, 5360.0], [94.9, 5371.0], [95.0, 5408.0], [95.1, 5426.0], [95.2, 5428.0], [95.3, 5444.0], [95.4, 5445.0], [95.5, 5449.0], [95.6, 5456.0], [95.7, 5466.0], [95.8, 5477.0], [95.9, 5491.0], [96.0, 5502.0], [96.1, 5504.0], [96.2, 5523.0], [96.3, 5543.0], [96.4, 5555.0], [96.5, 5557.0], [96.6, 5563.0], [96.7, 5573.0], [96.8, 5609.0], [96.9, 5617.0], [97.0, 5658.0], [97.1, 5680.0], [97.2, 5698.0], [97.3, 5720.0], [97.4, 5732.0], [97.5, 5740.0], [97.6, 5746.0], [97.7, 5780.0], [97.8, 5799.0], [97.9, 5874.0], [98.0, 5883.0], [98.1, 5950.0], [98.2, 5974.0], [98.3, 5994.0], [98.4, 6084.0], [98.5, 6349.0], [98.6, 6484.0], [98.7, 6508.0], [98.8, 6521.0], [98.9, 6730.0], [99.0, 6762.0], [99.1, 6984.0], [99.2, 7037.0], [99.3, 7054.0], [99.4, 7057.0], [99.5, 7070.0], [99.6, 7079.0], [99.7, 7124.0], [99.8, 7695.0], [99.9, 7709.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 103.0, "series": [{"data": [[900.0, 4.0], [1000.0, 1.0], [1200.0, 8.0], [1700.0, 1.0], [1800.0, 29.0], [1900.0, 79.0], [2000.0, 90.0], [2100.0, 55.0], [2200.0, 49.0], [2300.0, 35.0], [2400.0, 55.0], [2500.0, 63.0], [2600.0, 76.0], [2700.0, 70.0], [2800.0, 64.0], [2900.0, 70.0], [3000.0, 58.0], [3100.0, 63.0], [3200.0, 53.0], [3300.0, 66.0], [3400.0, 90.0], [3500.0, 82.0], [3600.0, 81.0], [3700.0, 90.0], [3800.0, 97.0], [3900.0, 103.0], [4000.0, 85.0], [4100.0, 78.0], [4200.0, 57.0], [4300.0, 31.0], [4400.0, 24.0], [4500.0, 17.0], [4600.0, 8.0], [4700.0, 5.0], [4800.0, 12.0], [4900.0, 6.0], [5000.0, 14.0], [5100.0, 10.0], [5200.0, 10.0], [5300.0, 11.0], [5400.0, 20.0], [5500.0, 16.0], [5600.0, 9.0], [5700.0, 12.0], [5800.0, 4.0], [6000.0, 2.0], [5900.0, 6.0], [6100.0, 1.0], [6300.0, 2.0], [6400.0, 1.0], [6500.0, 5.0], [6900.0, 1.0], [6700.0, 4.0], [7000.0, 11.0], [7100.0, 2.0], [7600.0, 1.0], [7700.0, 2.0], [10900.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1916.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 13.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1916.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 71.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.0890000000007, "minX": 1.6309044E12, "maxY": 501.15500000000014, "series": [{"data": [[1.6309044E12, 501.0890000000007]], "isOverall": false, "label": "getAllImgForThisPage", "isController": false}, {"data": [[1.6309044E12, 501.15500000000014]], "isOverall": false, "label": "getAllImgByGoodsId", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1075.8, "minX": 1.0, "maxY": 9338.5, "series": [{"data": [[2.0, 7228.5], [3.0, 7415.5], [4.0, 7101.5], [5.0, 6834.5], [6.0, 7073.0], [7.0, 6851.0], [8.0, 6418.5], [9.0, 6504.0], [10.0, 6533.5], [11.0, 7056.0], [12.0, 6692.333333333333], [13.0, 7053.0], [15.0, 6892.5], [16.0, 6336.2], [17.0, 6100.5], [18.0, 6084.0], [19.0, 5815.0], [20.0, 5799.0], [21.0, 5864.0], [22.0, 5637.0], [23.0, 5626.0], [24.0, 5713.0], [25.0, 5651.0], [26.0, 5581.0], [27.0, 5931.5], [28.0, 5517.0], [29.0, 5489.5], [30.0, 5498.5], [31.0, 5654.5], [33.0, 5371.0], [32.0, 5894.5], [35.0, 5770.0], [34.0, 5491.666666666667], [37.0, 5302.0], [36.0, 5394.0], [39.0, 5654.5], [38.0, 5801.666666666667], [41.0, 5348.5], [40.0, 5666.0], [43.0, 5502.5], [42.0, 5286.0], [45.0, 5291.666666666667], [44.0, 5612.0], [47.0, 5072.0], [46.0, 5531.5], [49.0, 5298.75], [48.0, 5277.0], [50.0, 5356.5], [51.0, 5662.0], [53.0, 5125.75], [52.0, 5543.0], [55.0, 5157.0], [54.0, 5104.0], [56.0, 5445.0], [59.0, 4906.0], [58.0, 5086.8], [61.0, 4549.0], [60.0, 5290.0], [63.0, 5148.0], [62.0, 5170.666666666667], [67.0, 4944.5], [66.0, 4932.333333333333], [64.0, 4826.0], [65.0, 5408.0], [71.0, 5043.0], [70.0, 5055.0], [69.0, 5156.5], [68.0, 5141.0], [75.0, 4591.0], [74.0, 4975.0], [73.0, 4778.666666666667], [72.0, 5278.0], [78.0, 4298.0], [77.0, 4857.5], [76.0, 4320.0], [79.0, 5252.0], [83.0, 4268.0], [82.0, 4724.666666666667], [80.0, 4520.333333333333], [81.0, 4875.0], [87.0, 4449.666666666667], [85.0, 4688.0], [84.0, 4998.333333333333], [86.0, 5155.0], [91.0, 4745.0], [90.0, 4378.333333333333], [88.0, 4829.0], [89.0, 5154.0], [94.0, 4635.0], [93.0, 4766.0], [92.0, 4794.0], [95.0, 4526.0], [99.0, 4256.0], [98.0, 4851.333333333333], [97.0, 4325.0], [96.0, 4403.0], [103.0, 4458.0], [101.0, 4209.0], [100.0, 4308.5], [102.0, 4299.0], [107.0, 4355.5], [106.0, 4762.0], [105.0, 4209.0], [104.0, 4493.333333333333], [111.0, 4278.666666666667], [110.0, 4223.0], [109.0, 4626.5], [114.0, 4544.0], [113.0, 4147.5], [112.0, 4260.0], [115.0, 3992.0], [119.0, 4577.0], [118.0, 4143.0], [117.0, 4133.0], [116.0, 4238.5], [123.0, 4140.5], [122.0, 4308.0], [121.0, 4205.0], [120.0, 4143.0], [127.0, 4355.333333333333], [126.0, 4244.0], [125.0, 4221.5], [134.0, 4274.0], [133.0, 4128.0], [131.0, 4223.5], [129.0, 4136.0], [135.0, 4085.0], [132.0, 4083.5], [130.0, 4810.0], [142.0, 4211.5], [141.0, 4173.333333333333], [139.0, 4204.5], [138.0, 4474.5], [137.0, 4226.0], [136.0, 4381.0], [143.0, 3879.0], [140.0, 4608.0], [151.0, 4108.5], [150.0, 3911.6666666666665], [149.0, 4093.5], [147.0, 4201.0], [146.0, 4109.5], [145.0, 4155.5], [144.0, 4292.0], [148.0, 4254.0], [159.0, 4073.5], [157.0, 4348.0], [156.0, 4231.0], [153.0, 4237.0], [158.0, 4576.0], [155.0, 3771.0], [154.0, 3979.0], [152.0, 3767.0], [167.0, 3974.3333333333335], [166.0, 4383.0], [165.0, 3905.3333333333335], [164.0, 4112.0], [163.0, 4299.5], [162.0, 4090.3333333333335], [161.0, 4462.0], [160.0, 4026.6666666666665], [175.0, 3890.0], [174.0, 3900.5], [173.0, 4026.0], [172.0, 3914.5], [171.0, 4023.25], [168.0, 4264.5], [170.0, 4095.0], [169.0, 3723.0], [183.0, 4114.0], [182.0, 4128.0], [181.0, 4078.0], [179.0, 4064.0], [177.0, 4044.5], [180.0, 4322.5], [178.0, 3999.0], [191.0, 4166.0], [190.0, 4105.5], [188.0, 3951.0], [186.0, 3879.0], [185.0, 4044.5], [184.0, 4066.0], [187.0, 4002.0], [197.0, 4096.0], [196.0, 4091.0], [194.0, 3993.5], [193.0, 4102.0], [192.0, 4032.0], [199.0, 4014.0], [198.0, 4034.5], [195.0, 4415.0], [207.0, 4464.0], [206.0, 4063.5], [204.0, 4061.0], [203.0, 4038.0], [202.0, 4250.0], [201.0, 4161.0], [200.0, 4015.0], [214.0, 4163.0], [211.0, 4175.0], [210.0, 4110.0], [209.0, 4053.0], [208.0, 3967.0], [223.0, 4112.75], [221.0, 3777.5], [220.0, 4008.0], [219.0, 3999.0], [218.0, 3958.1249999999995], [217.0, 4079.0], [231.0, 3890.0], [229.0, 4130.666666666667], [226.0, 4470.0], [225.0, 4182.0], [224.0, 4210.5], [230.0, 3986.0], [228.0, 3931.0], [227.0, 3884.3333333333335], [239.0, 3984.0], [238.0, 3806.0], [237.0, 3841.5], [236.0, 4007.3333333333335], [234.0, 3880.0], [233.0, 4131.0], [232.0, 4156.5], [235.0, 4415.0], [247.0, 3981.25], [244.0, 3897.0], [243.0, 4059.25], [242.0, 4128.0], [240.0, 3785.5], [246.0, 3807.0], [241.0, 4361.0], [254.0, 3858.0], [253.0, 3995.0], [252.0, 3966.0], [255.0, 3590.0], [251.0, 3760.0], [249.0, 3924.0], [248.0, 3592.0], [264.0, 3891.3333333333335], [270.0, 3941.0], [269.0, 4337.0], [271.0, 3585.5], [267.0, 3761.0], [266.0, 3955.5], [265.0, 4177.5], [262.0, 3776.0], [261.0, 3895.5], [260.0, 3907.3333333333335], [259.0, 3908.0], [256.0, 3891.0], [258.0, 3684.0], [257.0, 3585.0], [263.0, 3659.0], [286.0, 3776.6], [287.0, 3889.0], [285.0, 3786.0], [284.0, 3864.0], [283.0, 3860.0], [282.0, 3785.6666666666665], [280.0, 3739.5], [281.0, 3616.0], [279.0, 3884.5], [272.0, 3906.5], [273.0, 3758.5], [275.0, 4194.0], [274.0, 4026.0], [278.0, 4141.5], [277.0, 3902.3333333333335], [276.0, 3778.0], [301.0, 4087.0], [302.0, 3888.0], [300.0, 4272.0], [291.0, 3724.0], [290.0, 3821.0], [289.0, 4084.0], [295.0, 3485.5], [299.0, 3805.5], [298.0, 3832.5], [297.0, 3910.5], [296.0, 3845.3333333333335], [294.0, 3944.0], [293.0, 3918.3333333333335], [292.0, 3934.0], [317.0, 3842.0], [319.0, 4138.0], [316.0, 3797.0], [315.0, 3791.0], [314.0, 3916.0], [312.0, 3932.3333333333335], [310.0, 3840.25], [309.0, 3859.0], [308.0, 3436.0], [304.0, 3828.0], [311.0, 4296.0], [307.0, 4076.4285714285716], [306.0, 3779.0], [305.0, 3954.3333333333335], [334.0, 3940.6666666666665], [335.0, 3807.5], [332.0, 3854.5], [333.0, 3858.0], [323.0, 3902.5], [322.0, 3908.0], [321.0, 3783.0], [320.0, 3909.8], [331.0, 3743.0], [330.0, 3913.5], [329.0, 3844.0], [328.0, 3798.0], [327.0, 3606.0], [326.0, 4229.0], [325.0, 3734.3333333333335], [324.0, 3910.0], [339.0, 3664.5], [350.0, 3997.0], [351.0, 3873.6666666666665], [348.0, 3913.0], [349.0, 4220.0], [338.0, 3818.0], [337.0, 3836.0], [336.0, 3362.0], [347.0, 3901.5], [344.0, 3919.5], [343.0, 3772.0], [342.0, 3980.5], [341.0, 3723.0], [340.0, 3658.0], [366.0, 4097.333333333333], [367.0, 3666.0], [365.0, 3701.0], [364.0, 3919.5], [363.0, 3866.0], [362.0, 3763.5], [361.0, 3685.0], [360.0, 3882.0], [359.0, 3727.0], [354.0, 3748.0], [355.0, 3923.5], [353.0, 4007.25], [358.0, 3943.5], [356.0, 3728.6666666666665], [357.0, 4218.0], [381.0, 3703.0], [383.0, 3655.0], [382.0, 3808.0], [380.0, 3807.3333333333335], [371.0, 3891.833333333333], [368.0, 3683.0], [379.0, 3829.0], [378.0, 3591.5], [377.0, 3581.5], [376.0, 3523.5], [375.0, 3557.0], [374.0, 3630.3333333333335], [372.0, 3584.0], [373.0, 3396.0], [397.0, 3482.5], [398.0, 3473.0], [396.0, 3552.0], [395.0, 3676.0], [394.0, 3739.0], [392.0, 3725.8], [393.0, 3940.0], [399.0, 3787.0], [390.0, 4120.0], [389.0, 3641.6666666666665], [388.0, 3749.0], [387.0, 3691.714285714286], [384.0, 3688.0], [402.0, 3765.5], [414.0, 3659.5], [413.0, 3892.75], [403.0, 3451.0], [409.0, 3594.0], [411.0, 3731.0], [410.0, 3558.5], [408.0, 3620.0], [415.0, 3899.0], [407.0, 3632.5], [406.0, 3537.5], [405.0, 3732.0], [404.0, 3578.6666666666665], [401.0, 3649.3333333333335], [400.0, 3604.0], [419.0, 3687.5], [430.0, 3676.0], [431.0, 3564.5], [428.0, 3611.5], [429.0, 3961.0], [418.0, 3898.0], [417.0, 3493.5], [416.0, 3682.6666666666665], [425.0, 3868.6666666666665], [427.0, 3380.0], [426.0, 3391.0], [424.0, 3936.0], [423.0, 3650.0], [422.0, 3584.5], [421.0, 3801.5], [420.0, 3616.5], [446.0, 3244.0], [447.0, 3476.0], [445.0, 3446.0], [444.0, 3342.5], [443.0, 3415.0], [442.0, 3497.6666666666665], [441.0, 3355.0], [440.0, 3533.5], [439.0, 3630.0], [435.0, 3594.5], [434.0, 3858.0], [433.0, 3920.0], [432.0, 3688.5], [438.0, 3418.0], [437.0, 3581.5], [436.0, 3623.5], [461.0, 3383.0], [463.0, 3382.3333333333335], [462.0, 3351.0], [460.0, 3374.5], [451.0, 3557.3333333333335], [450.0, 3340.0], [449.0, 3392.0], [448.0, 3402.0], [459.0, 3467.5], [458.0, 3593.0], [457.0, 3283.0], [456.0, 3530.0], [455.0, 3289.0], [454.0, 3732.5], [453.0, 3724.3333333333335], [452.0, 3422.0], [478.0, 3396.6666666666665], [479.0, 3334.5], [476.0, 3303.75], [477.0, 3440.0], [467.0, 3649.4], [466.0, 3505.0], [464.0, 3766.0], [475.0, 3674.0], [474.0, 3675.0], [473.0, 3387.3333333333335], [472.0, 3639.0], [471.0, 3555.0], [470.0, 3546.3333333333335], [468.0, 3254.0], [469.0, 3659.5], [483.0, 3313.0], [494.0, 3471.0], [495.0, 3590.5], [493.0, 3533.5], [482.0, 3316.0], [481.0, 3386.3333333333335], [480.0, 3449.0], [491.0, 3392.0], [490.0, 3843.0], [489.0, 3507.0], [487.0, 3410.75], [486.0, 3302.0], [485.0, 3120.0], [484.0, 3562.0], [509.0, 3469.5], [510.0, 3351.0], [508.0, 3496.5], [499.0, 3408.5], [497.0, 3452.0], [498.0, 3426.0], [496.0, 3518.5], [507.0, 3273.0], [506.0, 3359.0], [504.0, 3150.6666666666665], [505.0, 3427.0], [511.0, 3405.0], [503.0, 3446.0], [502.0, 3664.5], [501.0, 3661.5], [500.0, 3611.6666666666665], [536.0, 3231.0], [540.0, 3049.3333333333335], [543.0, 3571.0], [530.0, 3451.5], [531.0, 3394.0], [528.0, 3399.5], [542.0, 3195.0], [541.0, 3365.0], [539.0, 3168.0], [538.0, 3225.0], [537.0, 3376.3333333333335], [526.0, 3199.5], [527.0, 3392.5], [512.0, 3390.0], [514.0, 3333.6666666666665], [513.0, 3443.3333333333335], [517.0, 3466.75], [515.0, 3358.0], [519.0, 3326.0], [518.0, 3500.0], [525.0, 3402.0], [524.0, 3484.0], [523.0, 3277.5], [521.0, 3311.0], [522.0, 3655.0], [520.0, 3175.5], [533.0, 3206.0], [535.0, 3641.0], [534.0, 3644.0], [532.0, 3499.0], [568.0, 3009.5], [573.0, 2956.6666666666665], [575.0, 3126.6666666666665], [574.0, 3172.0], [560.0, 3321.0], [562.0, 2982.5], [561.0, 3127.0], [572.0, 3167.0], [571.0, 2657.0], [570.0, 3081.6666666666665], [569.0, 3350.5], [557.0, 3137.0], [559.0, 2880.0], [558.0, 3458.0], [545.0, 3207.0], [546.0, 3340.0], [544.0, 3228.5], [549.0, 3299.0], [547.0, 3189.6666666666665], [551.0, 3182.0], [550.0, 3204.5], [556.0, 3508.5], [555.0, 3189.5], [554.0, 3518.6], [553.0, 3389.0], [566.0, 3173.6666666666665], [567.0, 3230.0], [565.0, 3201.0], [564.0, 3272.0], [563.0, 2868.5], [601.0, 3049.5], [605.0, 3090.0], [607.0, 3073.5], [592.0, 3266.0], [593.0, 2645.0], [595.0, 3029.3333333333335], [594.0, 2949.0], [597.0, 3230.5], [596.0, 3231.5], [604.0, 2924.0], [603.0, 3153.0], [602.0, 2886.0], [600.0, 3125.6666666666665], [583.0, 3095.6666666666665], [582.0, 3197.0], [581.0, 2878.5], [580.0, 3086.0], [579.0, 3184.5], [578.0, 3210.0], [577.0, 2993.5], [576.0, 3080.5], [591.0, 3159.0], [589.0, 3262.5], [590.0, 3475.0], [588.0, 3052.0], [587.0, 2986.0], [586.0, 3099.5], [584.0, 3072.5], [599.0, 3075.0], [598.0, 3050.0], [636.0, 2959.0], [639.0, 2873.0], [624.0, 2932.0], [625.0, 3351.0], [627.0, 2823.3333333333335], [626.0, 2839.5], [629.0, 2837.0], [628.0, 2880.0], [638.0, 2832.5], [637.0, 2848.0], [635.0, 3214.0], [634.0, 2916.0], [633.0, 3159.0], [632.0, 2977.5], [622.0, 3069.0], [608.0, 2960.75], [610.0, 3037.0], [609.0, 2998.0], [613.0, 3089.5], [611.0, 3109.75], [615.0, 3114.0], [614.0, 2730.0], [621.0, 2900.6666666666665], [619.0, 2890.5], [618.0, 3011.5], [617.0, 3024.3333333333335], [631.0, 3071.0], [630.0, 3002.0], [666.0, 2878.0], [670.0, 2907.0], [671.0, 2741.0], [656.0, 3060.5], [659.0, 2982.3333333333335], [658.0, 3170.0], [657.0, 2705.5], [661.0, 2989.5], [660.0, 2691.5], [669.0, 2976.5], [668.0, 2764.0], [667.0, 2812.6666666666665], [664.0, 2877.6666666666665], [665.0, 2781.0], [647.0, 2685.5], [646.0, 2690.0], [645.0, 2743.0], [644.0, 2733.6666666666665], [643.0, 2819.3333333333335], [641.0, 2751.5], [640.0, 2970.5], [655.0, 2942.3333333333335], [654.0, 3069.0], [653.0, 2456.0], [652.0, 2790.0], [650.0, 2864.5], [651.0, 2780.0], [649.0, 3046.5], [648.0, 2861.0], [663.0, 2835.0], [662.0, 2790.5], [697.0, 2442.0], [702.0, 2762.5], [703.0, 2616.5], [689.0, 2590.2], [688.0, 2963.0], [691.0, 2879.3333333333335], [692.0, 2390.0], [690.0, 2803.0], [701.0, 2915.0], [700.0, 2609.0], [699.0, 2779.0], [698.0, 3077.0], [696.0, 2978.5], [679.0, 2843.5], [678.0, 2613.0], [677.0, 2905.5], [676.0, 2954.5], [675.0, 2770.25], [673.0, 2799.0], [687.0, 2895.5], [684.0, 2855.5], [686.0, 2652.0], [685.0, 2734.0], [683.0, 2879.3333333333335], [682.0, 3072.0], [681.0, 2719.3333333333335], [680.0, 2702.0], [695.0, 2824.75], [693.0, 2875.6666666666665], [733.0, 2470.0], [724.0, 2579.5], [734.0, 2544.0], [720.0, 2891.0], [723.0, 2560.6666666666665], [722.0, 2793.0], [721.0, 2559.0], [731.0, 2612.0], [732.0, 2541.0], [730.0, 2639.0], [729.0, 2530.3333333333335], [728.0, 2328.0], [711.0, 2537.0], [709.0, 2560.0], [710.0, 2430.0], [708.0, 2839.6666666666665], [707.0, 2763.0], [706.0, 2915.0], [719.0, 3120.0], [705.0, 2981.0], [718.0, 2797.5], [717.0, 2756.3333333333335], [716.0, 2374.0], [715.0, 2581.0], [713.0, 2463.5], [714.0, 2386.0], [712.0, 2864.5], [727.0, 2796.5], [726.0, 2859.5], [725.0, 2946.0], [760.0, 2678.5], [754.0, 2760.0], [765.0, 2468.3333333333335], [764.0, 2824.0], [763.0, 2714.0], [762.0, 2396.0], [761.0, 2309.0], [751.0, 2835.0], [736.0, 2500.25], [738.0, 2383.0], [740.0, 2555.0], [739.0, 2514.0], [743.0, 2703.3333333333335], [742.0, 2976.0], [741.0, 2811.0], [750.0, 2491.0], [749.0, 2844.0], [748.0, 2639.0], [747.0, 2578.0], [746.0, 2440.3333333333335], [744.0, 2729.0], [745.0, 2364.0], [758.0, 2588.0], [759.0, 2294.5], [757.0, 2709.3333333333335], [755.0, 2617.5], [756.0, 2347.0], [752.0, 2732.0], [753.0, 2591.0], [766.0, 3042.0], [794.0, 2572.0], [787.0, 2582.0], [796.0, 2486.0], [797.0, 2325.0], [799.0, 2532.5], [798.0, 2223.0], [786.0, 2399.0], [785.0, 2215.0], [784.0, 2592.0], [795.0, 2513.0], [793.0, 2478.5], [792.0, 2394.3333333333335], [775.0, 2776.5], [774.0, 2705.6666666666665], [773.0, 2283.0], [772.0, 2604.6666666666665], [771.0, 2536.0], [770.0, 2421.6666666666665], [768.0, 2447.6], [769.0, 2298.0], [783.0, 2778.0], [781.0, 2538.0], [782.0, 2985.0], [780.0, 2380.5], [779.0, 2763.0], [778.0, 2900.0], [777.0, 2808.5], [776.0, 2653.5], [791.0, 2396.5], [790.0, 2740.0], [789.0, 2486.0], [788.0, 2750.0], [830.0, 2430.5], [820.0, 2579.6666666666665], [831.0, 2658.0], [816.0, 2414.6666666666665], [818.0, 2336.0], [819.0, 2720.0], [817.0, 2580.5], [829.0, 2175.0], [828.0, 2745.0], [827.0, 2386.0], [824.0, 2566.0], [807.0, 2812.0], [806.0, 3115.0], [811.0, 2427.8999999999996], [810.0, 2202.5], [808.0, 2204.0], [812.0, 2694.0], [814.0, 2764.0], [813.0, 2138.0], [800.0, 2414.0], [815.0, 2111.0], [803.0, 2259.0], [801.0, 2751.4444444444443], [805.0, 2442.3333333333335], [823.0, 2333.5], [822.0, 2202.5], [821.0, 2263.0], [858.0, 2119.0], [849.0, 2443.5], [861.0, 2466.25], [863.0, 2133.0], [862.0, 2841.0], [848.0, 2442.5], [859.0, 2496.0], [857.0, 2137.75], [856.0, 2707.0], [839.0, 2710.0], [838.0, 2413.75], [836.0, 2552.0], [835.0, 2222.0], [834.0, 2157.5], [833.0, 2542.0], [832.0, 2570.0], [847.0, 2469.5], [846.0, 2327.5], [845.0, 2157.6666666666665], [844.0, 2084.0], [843.0, 2120.0], [842.0, 2589.5], [841.0, 2574.3333333333335], [840.0, 2139.5], [854.0, 2404.5], [855.0, 2688.0], [853.0, 2408.25], [851.0, 2230.5], [850.0, 2715.0], [852.0, 2380.0], [889.0, 2729.0], [893.0, 2177.833333333333], [895.0, 2214.6666666666665], [880.0, 1998.0], [894.0, 2715.0], [891.0, 2084.5], [890.0, 2603.0], [888.0, 2254.0], [871.0, 2542.0], [870.0, 2025.0], [892.0, 2529.0], [869.0, 2013.0], [866.0, 2555.0], [868.0, 2817.0], [867.0, 2667.0], [865.0, 1967.0], [864.0, 2111.5], [886.0, 2190.0], [887.0, 1991.0], [885.0, 1999.2], [883.0, 1988.0], [884.0, 2642.5], [882.0, 1998.6666666666667], [879.0, 2342.0], [877.0, 2315.5], [876.0, 2334.0], [875.0, 2024.5], [873.0, 2260.0], [872.0, 2017.25], [926.0, 2212.0], [927.0, 2020.0], [912.0, 1968.0], [925.0, 2273.3333333333335], [924.0, 1968.3333333333333], [920.0, 2087.25], [903.0, 1865.5], [901.0, 2039.0], [922.0, 1971.0], [921.0, 2453.3333333333335], [900.0, 2020.5], [899.0, 2110.0], [896.0, 2336.0], [897.0, 2704.0], [898.0, 2190.0], [911.0, 2000.0], [909.0, 1990.5], [908.0, 2041.0], [910.0, 2065.0], [907.0, 2060.5], [904.0, 1975.0], [906.0, 1830.0], [905.0, 1954.0], [918.0, 1960.5], [917.0, 1823.0], [916.0, 2014.0], [915.0, 1979.3333333333333], [914.0, 1982.0], [913.0, 1925.8], [952.0, 2108.0], [948.0, 1979.0], [957.0, 2024.3333333333333], [958.0, 2206.3333333333335], [945.0, 2169.0], [956.0, 2186.0], [954.0, 2180.25], [955.0, 2194.0], [943.0, 1963.0], [928.0, 2138.3333333333335], [934.0, 2065.5], [933.0, 2146.0], [931.0, 2098.0], [930.0, 2025.0], [929.0, 2378.0], [942.0, 2023.0], [941.0, 1994.6666666666667], [940.0, 2044.5], [938.0, 1941.0], [939.0, 1982.0], [937.0, 1986.0], [936.0, 2056.6666666666665], [951.0, 2161.285714285714], [950.0, 1932.0], [949.0, 1978.0], [947.0, 1962.0], [946.0, 1942.6666666666667], [967.0, 2167.0], [989.0, 1945.5], [991.0, 1930.0], [977.0, 2078.0], [976.0, 2082.0], [987.0, 2000.8], [986.0, 2050.0], [985.0, 1907.0], [966.0, 1942.0], [965.0, 1952.0], [964.0, 2087.5], [963.0, 2023.0], [962.0, 2005.0], [960.0, 2011.0], [983.0, 2047.0], [982.0, 2016.75], [978.0, 2000.0], [979.0, 2068.0], [975.0, 2004.0], [974.0, 2035.3333333333333], [973.0, 1995.0], [972.0, 2026.6666666666667], [971.0, 2048.3333333333335], [968.0, 1849.0], [970.0, 2109.0], [1000.0, 1075.8], [995.0, 1419.6666666666667], [994.0, 1836.0], [993.0, 1535.5], [992.0, 1937.25], [1.0, 9338.5]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[501.12199999999973, 3398.4335000000074]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15210.616666666667, "minX": 1.6309044E12, "maxY": 1153246.15, "series": [{"data": [[1.6309044E12, 1153246.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6309044E12, 15210.616666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3398.4335000000074, "minX": 1.6309044E12, "maxY": 3398.4335000000074, "series": [{"data": [[1.6309044E12, 3398.4335000000074]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2564.1794999999997, "minX": 1.6309044E12, "maxY": 2564.1794999999997, "series": [{"data": [[1.6309044E12, 2564.1794999999997]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1875.9594999999956, "minX": 1.6309044E12, "maxY": 1875.9594999999956, "series": [{"data": [[1.6309044E12, 1875.9594999999956]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 900.0, "minX": 1.6309044E12, "maxY": 10968.0, "series": [{"data": [[1.6309044E12, 10968.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6309044E12, 4505.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6309044E12, 6762.7]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6309044E12, 5428.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6309044E12, 900.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6309044E12, 3449.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 908.0, "minX": 1.0, "maxY": 10968.0, "series": [{"data": [[2.0, 6284.0], [139.0, 2161.0], [36.0, 5879.5], [41.0, 5342.0], [3.0, 7124.0], [13.0, 1909.0], [15.0, 1238.0], [16.0, 7058.5], [1.0, 10968.0], [277.0, 3266.0], [71.0, 5247.0], [303.0, 2444.0], [5.0, 908.0], [343.0, 4067.0], [336.0, 3877.0], [399.0, 2929.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[139.0, 1831.5], [303.0, 1979.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 399.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 7043.0, "series": [{"data": [[2.0, 2777.5], [139.0, 1809.0], [36.0, 3248.0], [41.0, 3226.0], [3.0, 196.0], [13.0, 961.0], [15.0, 87.0], [16.0, 7043.0], [1.0, 2654.0], [277.0, 2906.0], [71.0, 1918.0], [303.0, 2013.0], [5.0, 899.0], [343.0, 3561.0], [336.0, 3272.0], [399.0, 2150.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[139.0, 0.0], [303.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 399.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.6309044E12, "maxY": 33.333333333333336, "series": [{"data": [[1.6309044E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1833333333333333, "minX": 1.6309044E12, "maxY": 32.15, "series": [{"data": [[1.6309044E12, 32.15]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6309044E12, 1.1833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1833333333333333, "minX": 1.6309044E12, "maxY": 32.15, "series": [{"data": [[1.6309044E12, 1.1833333333333333]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.6309044E12, 32.15]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1833333333333333, "minX": 1.6309044E12, "maxY": 32.15, "series": [{"data": [[1.6309044E12, 32.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6309044E12, 1.1833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

