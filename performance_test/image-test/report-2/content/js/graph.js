/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 69.0, "minX": 0.0, "maxY": 3387.0, "series": [{"data": [[0.0, 69.0], [0.1, 87.0], [0.2, 88.0], [0.3, 88.0], [0.4, 117.0], [0.5, 117.0], [0.6, 117.0], [0.7, 125.0], [0.8, 136.0], [0.9, 136.0], [1.0, 143.0], [1.1, 144.0], [1.2, 144.0], [1.3, 144.0], [1.4, 146.0], [1.5, 147.0], [1.6, 150.0], [1.7, 151.0], [1.8, 152.0], [1.9, 154.0], [2.0, 155.0], [2.1, 156.0], [2.2, 164.0], [2.3, 167.0], [2.4, 167.0], [2.5, 167.0], [2.6, 169.0], [2.7, 169.0], [2.8, 172.0], [2.9, 174.0], [3.0, 175.0], [3.1, 175.0], [3.2, 177.0], [3.3, 181.0], [3.4, 182.0], [3.5, 186.0], [3.6, 187.0], [3.7, 188.0], [3.8, 191.0], [3.9, 194.0], [4.0, 196.0], [4.1, 196.0], [4.2, 197.0], [4.3, 197.0], [4.4, 199.0], [4.5, 203.0], [4.6, 203.0], [4.7, 208.0], [4.8, 209.0], [4.9, 210.0], [5.0, 211.0], [5.1, 215.0], [5.2, 221.0], [5.3, 221.0], [5.4, 223.0], [5.5, 223.0], [5.6, 223.0], [5.7, 225.0], [5.8, 226.0], [5.9, 231.0], [6.0, 235.0], [6.1, 236.0], [6.2, 239.0], [6.3, 241.0], [6.4, 241.0], [6.5, 243.0], [6.6, 244.0], [6.7, 245.0], [6.8, 246.0], [6.9, 247.0], [7.0, 248.0], [7.1, 249.0], [7.2, 249.0], [7.3, 253.0], [7.4, 254.0], [7.5, 256.0], [7.6, 258.0], [7.7, 259.0], [7.8, 261.0], [7.9, 263.0], [8.0, 264.0], [8.1, 269.0], [8.2, 273.0], [8.3, 274.0], [8.4, 275.0], [8.5, 275.0], [8.6, 276.0], [8.7, 277.0], [8.8, 279.0], [8.9, 279.0], [9.0, 280.0], [9.1, 282.0], [9.2, 282.0], [9.3, 284.0], [9.4, 288.0], [9.5, 291.0], [9.6, 292.0], [9.7, 293.0], [9.8, 296.0], [9.9, 296.0], [10.0, 296.0], [10.1, 297.0], [10.2, 298.0], [10.3, 299.0], [10.4, 300.0], [10.5, 300.0], [10.6, 300.0], [10.7, 301.0], [10.8, 301.0], [10.9, 301.0], [11.0, 303.0], [11.1, 303.0], [11.2, 306.0], [11.3, 308.0], [11.4, 309.0], [11.5, 310.0], [11.6, 310.0], [11.7, 311.0], [11.8, 316.0], [11.9, 316.0], [12.0, 318.0], [12.1, 318.0], [12.2, 319.0], [12.3, 319.0], [12.4, 319.0], [12.5, 320.0], [12.6, 320.0], [12.7, 320.0], [12.8, 322.0], [12.9, 323.0], [13.0, 323.0], [13.1, 324.0], [13.2, 327.0], [13.3, 330.0], [13.4, 330.0], [13.5, 330.0], [13.6, 331.0], [13.7, 331.0], [13.8, 331.0], [13.9, 333.0], [14.0, 334.0], [14.1, 336.0], [14.2, 337.0], [14.3, 343.0], [14.4, 344.0], [14.5, 346.0], [14.6, 347.0], [14.7, 348.0], [14.8, 349.0], [14.9, 349.0], [15.0, 351.0], [15.1, 354.0], [15.2, 355.0], [15.3, 355.0], [15.4, 356.0], [15.5, 356.0], [15.6, 356.0], [15.7, 356.0], [15.8, 357.0], [15.9, 358.0], [16.0, 358.0], [16.1, 358.0], [16.2, 358.0], [16.3, 358.0], [16.4, 359.0], [16.5, 359.0], [16.6, 359.0], [16.7, 360.0], [16.8, 361.0], [16.9, 366.0], [17.0, 368.0], [17.1, 371.0], [17.2, 373.0], [17.3, 374.0], [17.4, 375.0], [17.5, 377.0], [17.6, 379.0], [17.7, 380.0], [17.8, 384.0], [17.9, 384.0], [18.0, 386.0], [18.1, 389.0], [18.2, 389.0], [18.3, 392.0], [18.4, 392.0], [18.5, 392.0], [18.6, 393.0], [18.7, 393.0], [18.8, 393.0], [18.9, 394.0], [19.0, 398.0], [19.1, 398.0], [19.2, 398.0], [19.3, 399.0], [19.4, 399.0], [19.5, 405.0], [19.6, 414.0], [19.7, 415.0], [19.8, 420.0], [19.9, 423.0], [20.0, 423.0], [20.1, 437.0], [20.2, 439.0], [20.3, 443.0], [20.4, 447.0], [20.5, 448.0], [20.6, 448.0], [20.7, 450.0], [20.8, 451.0], [20.9, 453.0], [21.0, 461.0], [21.1, 463.0], [21.2, 467.0], [21.3, 471.0], [21.4, 474.0], [21.5, 474.0], [21.6, 474.0], [21.7, 475.0], [21.8, 482.0], [21.9, 482.0], [22.0, 483.0], [22.1, 492.0], [22.2, 496.0], [22.3, 500.0], [22.4, 501.0], [22.5, 501.0], [22.6, 502.0], [22.7, 503.0], [22.8, 511.0], [22.9, 513.0], [23.0, 518.0], [23.1, 520.0], [23.2, 522.0], [23.3, 525.0], [23.4, 526.0], [23.5, 526.0], [23.6, 526.0], [23.7, 528.0], [23.8, 530.0], [23.9, 530.0], [24.0, 532.0], [24.1, 534.0], [24.2, 537.0], [24.3, 540.0], [24.4, 543.0], [24.5, 544.0], [24.6, 544.0], [24.7, 546.0], [24.8, 548.0], [24.9, 548.0], [25.0, 548.0], [25.1, 550.0], [25.2, 552.0], [25.3, 552.0], [25.4, 552.0], [25.5, 555.0], [25.6, 556.0], [25.7, 556.0], [25.8, 558.0], [25.9, 559.0], [26.0, 559.0], [26.1, 561.0], [26.2, 562.0], [26.3, 564.0], [26.4, 565.0], [26.5, 567.0], [26.6, 568.0], [26.7, 574.0], [26.8, 575.0], [26.9, 577.0], [27.0, 579.0], [27.1, 581.0], [27.2, 585.0], [27.3, 585.0], [27.4, 588.0], [27.5, 590.0], [27.6, 594.0], [27.7, 596.0], [27.8, 599.0], [27.9, 599.0], [28.0, 602.0], [28.1, 603.0], [28.2, 603.0], [28.3, 604.0], [28.4, 604.0], [28.5, 604.0], [28.6, 609.0], [28.7, 612.0], [28.8, 612.0], [28.9, 613.0], [29.0, 613.0], [29.1, 614.0], [29.2, 618.0], [29.3, 621.0], [29.4, 627.0], [29.5, 630.0], [29.6, 631.0], [29.7, 632.0], [29.8, 633.0], [29.9, 633.0], [30.0, 634.0], [30.1, 635.0], [30.2, 636.0], [30.3, 636.0], [30.4, 636.0], [30.5, 639.0], [30.6, 640.0], [30.7, 640.0], [30.8, 640.0], [30.9, 641.0], [31.0, 641.0], [31.1, 641.0], [31.2, 642.0], [31.3, 643.0], [31.4, 644.0], [31.5, 644.0], [31.6, 647.0], [31.7, 650.0], [31.8, 650.0], [31.9, 651.0], [32.0, 653.0], [32.1, 654.0], [32.2, 655.0], [32.3, 655.0], [32.4, 655.0], [32.5, 657.0], [32.6, 658.0], [32.7, 659.0], [32.8, 659.0], [32.9, 660.0], [33.0, 663.0], [33.1, 663.0], [33.2, 664.0], [33.3, 664.0], [33.4, 665.0], [33.5, 666.0], [33.6, 666.0], [33.7, 669.0], [33.8, 669.0], [33.9, 671.0], [34.0, 673.0], [34.1, 674.0], [34.2, 675.0], [34.3, 676.0], [34.4, 677.0], [34.5, 678.0], [34.6, 678.0], [34.7, 680.0], [34.8, 680.0], [34.9, 680.0], [35.0, 681.0], [35.1, 685.0], [35.2, 687.0], [35.3, 688.0], [35.4, 688.0], [35.5, 689.0], [35.6, 693.0], [35.7, 697.0], [35.8, 697.0], [35.9, 698.0], [36.0, 698.0], [36.1, 699.0], [36.2, 700.0], [36.3, 702.0], [36.4, 703.0], [36.5, 704.0], [36.6, 704.0], [36.7, 706.0], [36.8, 707.0], [36.9, 707.0], [37.0, 707.0], [37.1, 707.0], [37.2, 710.0], [37.3, 710.0], [37.4, 713.0], [37.5, 713.0], [37.6, 713.0], [37.7, 714.0], [37.8, 715.0], [37.9, 715.0], [38.0, 715.0], [38.1, 718.0], [38.2, 721.0], [38.3, 721.0], [38.4, 724.0], [38.5, 725.0], [38.6, 725.0], [38.7, 726.0], [38.8, 727.0], [38.9, 727.0], [39.0, 728.0], [39.1, 729.0], [39.2, 731.0], [39.3, 732.0], [39.4, 734.0], [39.5, 735.0], [39.6, 736.0], [39.7, 736.0], [39.8, 740.0], [39.9, 742.0], [40.0, 747.0], [40.1, 747.0], [40.2, 750.0], [40.3, 754.0], [40.4, 757.0], [40.5, 760.0], [40.6, 761.0], [40.7, 767.0], [40.8, 771.0], [40.9, 778.0], [41.0, 779.0], [41.1, 789.0], [41.2, 795.0], [41.3, 800.0], [41.4, 804.0], [41.5, 806.0], [41.6, 807.0], [41.7, 810.0], [41.8, 813.0], [41.9, 815.0], [42.0, 820.0], [42.1, 828.0], [42.2, 829.0], [42.3, 830.0], [42.4, 837.0], [42.5, 841.0], [42.6, 843.0], [42.7, 843.0], [42.8, 843.0], [42.9, 847.0], [43.0, 862.0], [43.1, 865.0], [43.2, 866.0], [43.3, 870.0], [43.4, 874.0], [43.5, 879.0], [43.6, 879.0], [43.7, 883.0], [43.8, 888.0], [43.9, 889.0], [44.0, 892.0], [44.1, 894.0], [44.2, 895.0], [44.3, 902.0], [44.4, 903.0], [44.5, 906.0], [44.6, 907.0], [44.7, 907.0], [44.8, 916.0], [44.9, 916.0], [45.0, 931.0], [45.1, 935.0], [45.2, 954.0], [45.3, 956.0], [45.4, 962.0], [45.5, 1010.0], [45.6, 1010.0], [45.7, 1016.0], [45.8, 1024.0], [45.9, 1039.0], [46.0, 1040.0], [46.1, 1053.0], [46.2, 1053.0], [46.3, 1055.0], [46.4, 1055.0], [46.5, 1065.0], [46.6, 1065.0], [46.7, 1067.0], [46.8, 1078.0], [46.9, 1086.0], [47.0, 1089.0], [47.1, 1090.0], [47.2, 1092.0], [47.3, 1092.0], [47.4, 1093.0], [47.5, 1100.0], [47.6, 1108.0], [47.7, 1110.0], [47.8, 1111.0], [47.9, 1113.0], [48.0, 1116.0], [48.1, 1120.0], [48.2, 1122.0], [48.3, 1124.0], [48.4, 1128.0], [48.5, 1128.0], [48.6, 1132.0], [48.7, 1134.0], [48.8, 1170.0], [48.9, 1176.0], [49.0, 1177.0], [49.1, 1177.0], [49.2, 1178.0], [49.3, 1182.0], [49.4, 1191.0], [49.5, 1201.0], [49.6, 1201.0], [49.7, 1203.0], [49.8, 1203.0], [49.9, 1205.0], [50.0, 1210.0], [50.1, 1216.0], [50.2, 1224.0], [50.3, 1239.0], [50.4, 1243.0], [50.5, 1249.0], [50.6, 1249.0], [50.7, 1264.0], [50.8, 1272.0], [50.9, 1277.0], [51.0, 1279.0], [51.1, 1281.0], [51.2, 1287.0], [51.3, 1289.0], [51.4, 1304.0], [51.5, 1305.0], [51.6, 1311.0], [51.7, 1315.0], [51.8, 1318.0], [51.9, 1322.0], [52.0, 1322.0], [52.1, 1323.0], [52.2, 1326.0], [52.3, 1329.0], [52.4, 1339.0], [52.5, 1339.0], [52.6, 1340.0], [52.7, 1367.0], [52.8, 1371.0], [52.9, 1371.0], [53.0, 1373.0], [53.1, 1390.0], [53.2, 1395.0], [53.3, 1404.0], [53.4, 1405.0], [53.5, 1405.0], [53.6, 1409.0], [53.7, 1411.0], [53.8, 1413.0], [53.9, 1414.0], [54.0, 1414.0], [54.1, 1415.0], [54.2, 1416.0], [54.3, 1418.0], [54.4, 1419.0], [54.5, 1421.0], [54.6, 1423.0], [54.7, 1424.0], [54.8, 1425.0], [54.9, 1431.0], [55.0, 1432.0], [55.1, 1433.0], [55.2, 1436.0], [55.3, 1442.0], [55.4, 1442.0], [55.5, 1452.0], [55.6, 1458.0], [55.7, 1459.0], [55.8, 1463.0], [55.9, 1466.0], [56.0, 1468.0], [56.1, 1469.0], [56.2, 1470.0], [56.3, 1473.0], [56.4, 1474.0], [56.5, 1477.0], [56.6, 1478.0], [56.7, 1478.0], [56.8, 1480.0], [56.9, 1484.0], [57.0, 1485.0], [57.1, 1485.0], [57.2, 1486.0], [57.3, 1487.0], [57.4, 1488.0], [57.5, 1494.0], [57.6, 1495.0], [57.7, 1496.0], [57.8, 1496.0], [57.9, 1496.0], [58.0, 1496.0], [58.1, 1497.0], [58.2, 1499.0], [58.3, 1500.0], [58.4, 1500.0], [58.5, 1503.0], [58.6, 1509.0], [58.7, 1509.0], [58.8, 1510.0], [58.9, 1510.0], [59.0, 1514.0], [59.1, 1524.0], [59.2, 1534.0], [59.3, 1538.0], [59.4, 1545.0], [59.5, 1546.0], [59.6, 1547.0], [59.7, 1548.0], [59.8, 1549.0], [59.9, 1553.0], [60.0, 1553.0], [60.1, 1557.0], [60.2, 1570.0], [60.3, 1574.0], [60.4, 1575.0], [60.5, 1580.0], [60.6, 1586.0], [60.7, 1587.0], [60.8, 1589.0], [60.9, 1598.0], [61.0, 1599.0], [61.1, 1601.0], [61.2, 1601.0], [61.3, 1601.0], [61.4, 1602.0], [61.5, 1603.0], [61.6, 1603.0], [61.7, 1604.0], [61.8, 1604.0], [61.9, 1606.0], [62.0, 1612.0], [62.1, 1615.0], [62.2, 1616.0], [62.3, 1628.0], [62.4, 1630.0], [62.5, 1631.0], [62.6, 1631.0], [62.7, 1634.0], [62.8, 1634.0], [62.9, 1636.0], [63.0, 1636.0], [63.1, 1636.0], [63.2, 1638.0], [63.3, 1639.0], [63.4, 1639.0], [63.5, 1640.0], [63.6, 1640.0], [63.7, 1640.0], [63.8, 1640.0], [63.9, 1641.0], [64.0, 1641.0], [64.1, 1643.0], [64.2, 1643.0], [64.3, 1643.0], [64.4, 1647.0], [64.5, 1651.0], [64.6, 1653.0], [64.7, 1653.0], [64.8, 1655.0], [64.9, 1655.0], [65.0, 1657.0], [65.1, 1657.0], [65.2, 1658.0], [65.3, 1658.0], [65.4, 1659.0], [65.5, 1661.0], [65.6, 1661.0], [65.7, 1661.0], [65.8, 1663.0], [65.9, 1664.0], [66.0, 1665.0], [66.1, 1666.0], [66.2, 1666.0], [66.3, 1667.0], [66.4, 1667.0], [66.5, 1668.0], [66.6, 1669.0], [66.7, 1669.0], [66.8, 1670.0], [66.9, 1673.0], [67.0, 1673.0], [67.1, 1673.0], [67.2, 1674.0], [67.3, 1674.0], [67.4, 1674.0], [67.5, 1675.0], [67.6, 1676.0], [67.7, 1677.0], [67.8, 1678.0], [67.9, 1680.0], [68.0, 1681.0], [68.1, 1681.0], [68.2, 1681.0], [68.3, 1682.0], [68.4, 1683.0], [68.5, 1684.0], [68.6, 1685.0], [68.7, 1688.0], [68.8, 1692.0], [68.9, 1693.0], [69.0, 1695.0], [69.1, 1696.0], [69.2, 1697.0], [69.3, 1700.0], [69.4, 1701.0], [69.5, 1701.0], [69.6, 1702.0], [69.7, 1704.0], [69.8, 1708.0], [69.9, 1711.0], [70.0, 1712.0], [70.1, 1713.0], [70.2, 1714.0], [70.3, 1714.0], [70.4, 1718.0], [70.5, 1720.0], [70.6, 1720.0], [70.7, 1722.0], [70.8, 1724.0], [70.9, 1729.0], [71.0, 1730.0], [71.1, 1731.0], [71.2, 1733.0], [71.3, 1734.0], [71.4, 1734.0], [71.5, 1739.0], [71.6, 1739.0], [71.7, 1744.0], [71.8, 1746.0], [71.9, 1746.0], [72.0, 1747.0], [72.1, 1747.0], [72.2, 1750.0], [72.3, 1751.0], [72.4, 1751.0], [72.5, 1752.0], [72.6, 1754.0], [72.7, 1757.0], [72.8, 1758.0], [72.9, 1761.0], [73.0, 1763.0], [73.1, 1766.0], [73.2, 1767.0], [73.3, 1767.0], [73.4, 1774.0], [73.5, 1808.0], [73.6, 1815.0], [73.7, 1817.0], [73.8, 1818.0], [73.9, 1822.0], [74.0, 1824.0], [74.1, 1825.0], [74.2, 1826.0], [74.3, 1828.0], [74.4, 1831.0], [74.5, 1832.0], [74.6, 1835.0], [74.7, 1845.0], [74.8, 1847.0], [74.9, 1850.0], [75.0, 1856.0], [75.1, 1857.0], [75.2, 1857.0], [75.3, 1858.0], [75.4, 1859.0], [75.5, 1859.0], [75.6, 1860.0], [75.7, 1864.0], [75.8, 1866.0], [75.9, 1866.0], [76.0, 1866.0], [76.1, 1867.0], [76.2, 1867.0], [76.3, 1868.0], [76.4, 1868.0], [76.5, 1869.0], [76.6, 1871.0], [76.7, 1873.0], [76.8, 1873.0], [76.9, 1875.0], [77.0, 1876.0], [77.1, 1877.0], [77.2, 1883.0], [77.3, 1883.0], [77.4, 1883.0], [77.5, 1885.0], [77.6, 1890.0], [77.7, 1890.0], [77.8, 1900.0], [77.9, 1901.0], [78.0, 1904.0], [78.1, 1906.0], [78.2, 1906.0], [78.3, 1913.0], [78.4, 1914.0], [78.5, 1914.0], [78.6, 1914.0], [78.7, 1915.0], [78.8, 1916.0], [78.9, 1922.0], [79.0, 1925.0], [79.1, 1927.0], [79.2, 1932.0], [79.3, 1933.0], [79.4, 1934.0], [79.5, 1941.0], [79.6, 1942.0], [79.7, 1963.0], [79.8, 1963.0], [79.9, 1968.0], [80.0, 1970.0], [80.1, 1974.0], [80.2, 1974.0], [80.3, 1976.0], [80.4, 1984.0], [80.5, 1996.0], [80.6, 1997.0], [80.7, 2000.0], [80.8, 2002.0], [80.9, 2002.0], [81.0, 2006.0], [81.1, 2010.0], [81.2, 2012.0], [81.3, 2012.0], [81.4, 2017.0], [81.5, 2018.0], [81.6, 2028.0], [81.7, 2030.0], [81.8, 2031.0], [81.9, 2037.0], [82.0, 2042.0], [82.1, 2042.0], [82.2, 2050.0], [82.3, 2053.0], [82.4, 2062.0], [82.5, 2063.0], [82.6, 2063.0], [82.7, 2065.0], [82.8, 2067.0], [82.9, 2072.0], [83.0, 2073.0], [83.1, 2073.0], [83.2, 2073.0], [83.3, 2074.0], [83.4, 2077.0], [83.5, 2077.0], [83.6, 2079.0], [83.7, 2083.0], [83.8, 2085.0], [83.9, 2085.0], [84.0, 2086.0], [84.1, 2089.0], [84.2, 2091.0], [84.3, 2093.0], [84.4, 2099.0], [84.5, 2100.0], [84.6, 2101.0], [84.7, 2123.0], [84.8, 2126.0], [84.9, 2126.0], [85.0, 2130.0], [85.1, 2132.0], [85.2, 2136.0], [85.3, 2136.0], [85.4, 2138.0], [85.5, 2138.0], [85.6, 2149.0], [85.7, 2153.0], [85.8, 2159.0], [85.9, 2164.0], [86.0, 2169.0], [86.1, 2172.0], [86.2, 2175.0], [86.3, 2176.0], [86.4, 2178.0], [86.5, 2181.0], [86.6, 2190.0], [86.7, 2193.0], [86.8, 2195.0], [86.9, 2197.0], [87.0, 2197.0], [87.1, 2212.0], [87.2, 2218.0], [87.3, 2222.0], [87.4, 2238.0], [87.5, 2241.0], [87.6, 2241.0], [87.7, 2243.0], [87.8, 2244.0], [87.9, 2247.0], [88.0, 2248.0], [88.1, 2249.0], [88.2, 2256.0], [88.3, 2264.0], [88.4, 2267.0], [88.5, 2270.0], [88.6, 2270.0], [88.7, 2275.0], [88.8, 2277.0], [88.9, 2277.0], [89.0, 2288.0], [89.1, 2291.0], [89.2, 2295.0], [89.3, 2300.0], [89.4, 2302.0], [89.5, 2305.0], [89.6, 2309.0], [89.7, 2324.0], [89.8, 2326.0], [89.9, 2329.0], [90.0, 2333.0], [90.1, 2353.0], [90.2, 2353.0], [90.3, 2359.0], [90.4, 2364.0], [90.5, 2379.0], [90.6, 2382.0], [90.7, 2387.0], [90.8, 2388.0], [90.9, 2393.0], [91.0, 2395.0], [91.1, 2414.0], [91.2, 2423.0], [91.3, 2427.0], [91.4, 2439.0], [91.5, 2439.0], [91.6, 2441.0], [91.7, 2441.0], [91.8, 2448.0], [91.9, 2448.0], [92.0, 2449.0], [92.1, 2451.0], [92.2, 2452.0], [92.3, 2460.0], [92.4, 2462.0], [92.5, 2464.0], [92.6, 2470.0], [92.7, 2475.0], [92.8, 2475.0], [92.9, 2477.0], [93.0, 2483.0], [93.1, 2489.0], [93.2, 2491.0], [93.3, 2491.0], [93.4, 2494.0], [93.5, 2495.0], [93.6, 2498.0], [93.7, 2499.0], [93.8, 2501.0], [93.9, 2504.0], [94.0, 2505.0], [94.1, 2519.0], [94.2, 2528.0], [94.3, 2534.0], [94.4, 2534.0], [94.5, 2559.0], [94.6, 2561.0], [94.7, 2563.0], [94.8, 2563.0], [94.9, 2567.0], [95.0, 2570.0], [95.1, 2571.0], [95.2, 2571.0], [95.3, 2577.0], [95.4, 2578.0], [95.5, 2595.0], [95.6, 2624.0], [95.7, 2627.0], [95.8, 2629.0], [95.9, 2643.0], [96.0, 2648.0], [96.1, 2676.0], [96.2, 2682.0], [96.3, 2684.0], [96.4, 2685.0], [96.5, 2701.0], [96.6, 2701.0], [96.7, 2722.0], [96.8, 2730.0], [96.9, 2731.0], [97.0, 2743.0], [97.1, 2748.0], [97.2, 2749.0], [97.3, 2758.0], [97.4, 2760.0], [97.5, 2762.0], [97.6, 2767.0], [97.7, 2770.0], [97.8, 2775.0], [97.9, 2781.0], [98.0, 2786.0], [98.1, 2826.0], [98.2, 2830.0], [98.3, 2844.0], [98.4, 2849.0], [98.5, 2853.0], [98.6, 2860.0], [98.7, 2863.0], [98.8, 2871.0], [98.9, 2878.0], [99.0, 2886.0], [99.1, 2906.0], [99.2, 2915.0], [99.3, 2918.0], [99.4, 2921.0], [99.5, 2921.0], [99.6, 2996.0], [99.7, 3024.0], [99.8, 3051.0], [99.9, 3387.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 90.0, "series": [{"data": [[0.0, 3.0], [600.0, 82.0], [700.0, 51.0], [800.0, 30.0], [900.0, 12.0], [1000.0, 20.0], [1100.0, 20.0], [1200.0, 19.0], [1300.0, 19.0], [1400.0, 50.0], [1500.0, 28.0], [100.0, 41.0], [1600.0, 82.0], [1700.0, 42.0], [1800.0, 43.0], [1900.0, 30.0], [2000.0, 38.0], [2100.0, 26.0], [2200.0, 22.0], [2300.0, 18.0], [2400.0, 27.0], [2500.0, 18.0], [2600.0, 9.0], [2700.0, 16.0], [2800.0, 10.0], [2900.0, 6.0], [3000.0, 2.0], [200.0, 60.0], [3300.0, 1.0], [300.0, 90.0], [400.0, 28.0], [500.0, 57.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 54.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 500.0, "series": [{"data": [[0.0, 54.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 175.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 271.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 500.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 244.05199999999977, "minX": 1.6306818E12, "maxY": 250.94200000000052, "series": [{"data": [[1.6306818E12, 250.94200000000052]], "isOverall": false, "label": "getAllImgForThisPage", "isController": false}, {"data": [[1.6306818E12, 244.05199999999977]], "isOverall": false, "label": "getAllImgByGoodsId", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306818E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 117.0, "minX": 1.0, "maxY": 3387.0, "series": [{"data": [[2.0, 2781.0], [3.0, 3051.0], [4.0, 2570.0], [5.0, 2624.0], [6.0, 3024.0], [7.0, 2534.0], [8.0, 2629.0], [11.0, 2585.3333333333335], [13.0, 2181.0], [14.0, 2574.0], [15.0, 2871.0], [16.0, 2519.0], [18.0, 2371.5], [20.0, 2365.5], [24.0, 2362.25], [26.0, 2505.5], [27.0, 2559.0], [28.0, 2499.0], [29.0, 2136.0], [30.0, 2126.0], [33.0, 2501.0], [32.0, 2427.0], [34.0, 2494.0], [36.0, 2698.0], [39.0, 2604.0], [41.0, 2439.0], [40.0, 2448.0], [46.0, 2629.4], [48.0, 2853.5], [51.0, 2615.0], [55.0, 2470.0], [56.0, 2735.3333333333335], [60.0, 2623.6], [63.0, 2578.0], [62.0, 2659.5], [67.0, 2826.0], [66.0, 2491.0], [65.0, 2576.5], [71.0, 2603.0], [69.0, 2006.0], [68.0, 2012.0], [75.0, 2767.0], [74.0, 2616.6666666666665], [79.0, 2441.0], [78.0, 2770.0], [77.0, 2701.0], [76.0, 2256.0], [83.0, 2366.5], [82.0, 2379.0], [80.0, 2010.0], [86.0, 2400.0], [84.0, 2000.0], [91.0, 2581.5], [89.0, 2748.0], [88.0, 2746.0], [95.0, 2722.0], [94.0, 2326.0], [93.0, 2786.0], [92.0, 2730.0], [98.0, 2324.0], [97.0, 2489.0], [96.0, 2760.0], [102.0, 2488.6666666666665], [100.0, 2295.0], [107.0, 2505.0], [106.0, 2132.0], [105.0, 2432.0], [111.0, 2244.0], [110.0, 2548.6666666666665], [115.0, 2086.0], [114.0, 2254.0], [112.0, 2275.0], [118.0, 1873.0], [117.0, 1886.5], [123.0, 2284.0], [121.0, 1860.0], [120.0, 1865.5], [127.0, 2234.5], [125.0, 2302.0], [124.0, 1866.0], [135.0, 2050.0], [133.0, 1845.0], [132.0, 2241.0], [131.0, 1854.5], [129.0, 2093.0], [128.0, 2249.0], [143.0, 2401.0], [141.0, 2571.0], [140.0, 2178.0], [139.0, 2212.0], [138.0, 2153.0], [137.0, 2193.0], [136.0, 2218.0], [151.0, 2449.0], [150.0, 2172.0], [149.0, 2034.6666666666667], [146.0, 2477.0], [145.0, 2159.0], [144.0, 1963.0], [159.0, 1906.0], [158.0, 1941.0], [157.0, 2235.6666666666665], [154.0, 2563.0], [153.0, 2270.0], [152.0, 2528.0], [167.0, 2074.2], [162.0, 2070.0], [160.0, 2091.0], [175.0, 1681.0], [172.0, 2042.0], [171.0, 2483.0], [170.0, 2018.0], [169.0, 2053.0], [168.0, 2037.0], [183.0, 1661.0], [182.0, 1842.5], [180.0, 1665.0], [178.0, 1664.0], [176.0, 1666.0], [187.0, 1643.0], [186.0, 2197.6666666666665], [199.0, 2169.0], [197.0, 2192.0], [195.0, 1637.5], [193.0, 1639.3333333333335], [206.0, 1603.5], [204.0, 2012.0], [203.0, 2382.0], [202.0, 1636.0], [201.0, 1629.5], [215.0, 1968.0], [214.0, 2333.0], [213.0, 1883.0], [212.0, 1599.0], [211.0, 1782.0], [209.0, 1600.3333333333333], [223.0, 2067.5], [221.0, 1883.0], [220.0, 1877.0], [219.0, 2111.0], [217.0, 1913.0], [216.0, 1914.0], [231.0, 1547.5], [229.0, 1823.8], [224.0, 1857.0], [239.0, 2248.0], [238.0, 1586.0], [237.0, 1763.0], [235.0, 2288.0], [234.0, 2241.0], [233.0, 1808.0], [232.0, 1976.0], [247.0, 2138.0], [246.0, 2059.0], [244.0, 1746.0], [243.0, 1844.5], [241.0, 1750.5], [253.0, 1726.0], [251.0, 1734.0], [250.0, 1744.0], [249.0, 1730.5], [266.0, 1712.0], [265.0, 1839.0], [264.0, 1714.0], [259.0, 1769.5], [257.0, 1720.0], [256.0, 1873.0], [286.0, 1911.0], [284.0, 1671.5], [280.0, 1679.5], [278.0, 1899.5], [276.0, 1770.3333333333333], [275.0, 1718.0], [274.0, 1793.5], [273.0, 2126.0], [303.0, 1688.0], [300.0, 1663.0], [299.0, 1656.0], [297.0, 1882.5], [295.0, 2055.0], [293.0, 2062.0], [292.0, 1658.0], [291.0, 1671.0], [288.0, 1684.5], [318.0, 1650.75], [314.0, 2027.5], [312.0, 1698.6666666666667], [309.0, 1553.0], [308.0, 1768.25], [307.0, 1681.0], [306.0, 1692.0], [334.0, 1604.0], [331.0, 1636.0], [329.0, 1653.0], [328.0, 1640.0], [327.0, 1636.0], [324.0, 1822.5], [322.0, 2030.5], [320.0, 1845.5], [350.0, 1744.5], [351.0, 1885.0], [348.0, 1996.0], [347.0, 1437.5], [345.0, 1539.0], [342.0, 1867.0], [339.0, 1634.0], [338.0, 1713.0], [336.0, 1735.6666666666667], [364.0, 1866.0], [363.0, 1510.0], [361.0, 1677.0], [360.0, 1822.5], [358.0, 1546.0], [357.0, 1695.6], [355.0, 1545.0], [383.0, 1739.5], [380.0, 1776.0], [376.0, 1509.0], [375.0, 1510.0], [374.0, 1486.0], [373.0, 1777.6666666666667], [371.0, 1610.25], [369.0, 1638.3333333333333], [398.0, 1555.5], [396.0, 1610.0], [394.0, 1474.0], [393.0, 1739.3333333333333], [386.0, 1648.5], [415.0, 1841.5], [413.0, 1592.6666666666667], [410.0, 1552.3333333333333], [407.0, 1604.0], [405.0, 1914.0], [404.0, 1469.0], [403.0, 1699.6], [418.0, 1452.0], [429.0, 1585.5], [427.0, 1572.5], [423.0, 1601.5], [421.0, 1859.0], [420.0, 1442.0], [419.0, 1468.0], [417.0, 1514.0], [416.0, 1478.0], [447.0, 1734.0], [446.0, 1445.5], [442.0, 1580.5], [441.0, 1824.0], [439.0, 1132.0], [438.0, 1620.0], [436.0, 1772.5], [435.0, 1588.0], [434.0, 1413.0], [462.0, 1055.0], [461.0, 1289.0], [458.0, 1100.0], [457.0, 1733.0], [456.0, 1768.5], [454.0, 1405.0], [453.0, 1405.0], [452.0, 1106.6666666666667], [449.0, 1455.0], [478.0, 1657.0], [479.0, 1524.0], [477.0, 1574.0], [476.0, 1340.0], [475.0, 1589.0], [474.0, 1482.5], [472.0, 1010.0], [471.0, 1054.0], [466.0, 1289.0], [464.0, 1661.5], [469.0, 1311.0], [468.0, 1363.5], [493.0, 1009.6666666666666], [490.0, 888.0], [489.0, 916.0], [488.0, 1429.5], [486.0, 1047.6666666666667], [483.0, 931.0], [482.0, 921.0], [480.0, 1272.0], [509.0, 1480.0], [511.0, 870.5], [508.0, 1433.0], [499.0, 1485.0], [498.0, 892.0], [497.0, 1005.25], [507.0, 962.0], [506.0, 1304.0], [505.0, 1496.0], [504.0, 1249.0], [503.0, 866.0], [502.0, 1024.0], [500.0, 1322.0], [542.0, 715.3333333333334], [543.0, 713.0], [539.0, 862.3333333333334], [536.0, 742.0], [535.0, 710.75], [532.0, 699.6], [530.0, 697.0], [525.0, 1343.0], [515.0, 1137.0], [513.0, 1152.0], [519.0, 1428.0], [517.0, 1372.5], [524.0, 1367.0], [522.0, 1373.0], [521.0, 804.0], [520.0, 1326.0], [561.0, 908.5], [573.0, 1277.0], [572.0, 651.5], [570.0, 1318.0], [569.0, 965.0], [557.0, 678.0], [546.0, 947.0], [556.0, 676.5], [555.0, 684.0], [554.0, 688.0], [553.0, 657.0], [567.0, 1287.0], [566.0, 655.5], [562.0, 687.0], [560.0, 675.0], [606.0, 1067.0], [607.0, 627.0], [605.0, 851.25], [601.0, 1053.0], [600.0, 1201.0], [580.0, 664.0], [579.0, 1080.6666666666667], [576.0, 651.0], [591.0, 603.0], [590.0, 640.0], [589.0, 658.0], [588.0, 766.2], [585.0, 644.0], [584.0, 647.0], [599.0, 638.0], [596.0, 621.0], [594.0, 630.0], [593.0, 685.5], [614.0, 953.5], [638.0, 742.7142857142857], [633.0, 747.0], [628.0, 862.6666666666666], [625.0, 1200.5], [623.0, 1134.0], [622.0, 1196.5], [620.0, 711.0], [612.0, 1110.0], [611.0, 1176.5], [609.0, 889.5], [666.0, 956.0], [657.0, 1010.0], [670.0, 1040.5], [671.0, 474.0], [656.0, 579.0], [668.0, 799.5], [665.0, 555.6666666666666], [647.0, 1078.0], [646.0, 1039.0], [645.0, 543.0], [643.0, 835.0], [641.0, 742.3333333333334], [654.0, 731.0], [653.0, 715.0], [652.0, 1128.0], [651.0, 474.0], [650.0, 636.0], [649.0, 843.0], [648.0, 771.0], [662.0, 923.5], [660.0, 837.0], [658.0, 590.0], [687.0, 573.0], [692.0, 678.0], [690.0, 393.0], [689.0, 559.0], [679.0, 754.0], [678.0, 832.0], [676.0, 874.0], [675.0, 916.0], [674.0, 681.0], [673.0, 669.0], [672.0, 666.0], [685.0, 767.0], [684.0, 772.0], [682.0, 883.0], [681.0, 907.0], [680.0, 843.0], [725.0, 789.0], [763.0, 408.6], [767.0, 522.0], [765.0, 462.0], [764.0, 381.8], [758.0, 273.0], [750.0, 437.8333333333333], [749.0, 408.4], [748.0, 451.81818181818176], [746.0, 807.0], [798.0, 399.61538461538464], [785.0, 131.5], [787.0, 386.0], [788.0, 442.0], [786.0, 412.5], [790.0, 280.0], [791.0, 281.65000000000003], [797.0, 325.75], [796.0, 410.5], [795.0, 277.8], [784.0, 505.25], [799.0, 580.3333333333334], [794.0, 318.42857142857144], [792.0, 394.8333333333333], [781.0, 829.0], [772.0, 358.0], [770.0, 513.2], [779.0, 514.0], [777.0, 359.0], [776.0, 359.0], [793.0, 274.2], [826.0, 437.0], [801.0, 426.0], [800.0, 393.3846153846154], [811.0, 620.3333333333334], [810.0, 436.0], [809.0, 408.3333333333333], [808.0, 258.0], [830.0, 593.75], [831.0, 735.0], [819.0, 417.0], [818.0, 267.5], [828.0, 247.75], [825.0, 347.0], [824.0, 392.3333333333333], [805.0, 815.0], [806.0, 530.0], [803.0, 314.0], [802.0, 549.8], [822.0, 182.0], [820.0, 659.0], [859.0, 666.0], [834.0, 357.3333333333333], [833.0, 459.5], [832.0, 293.0], [846.0, 405.3333333333333], [843.0, 262.25], [842.0, 117.0], [841.0, 240.0], [863.0, 421.0], [852.0, 311.0], [848.0, 300.0], [862.0, 485.6], [861.0, 465.3333333333333], [858.0, 219.25], [856.0, 196.5], [838.0, 167.0], [837.0, 300.0], [835.0, 187.0], [855.0, 256.3333333333333], [853.0, 384.0], [877.0, 354.0], [866.0, 266.5], [865.0, 413.75], [867.0, 277.6666666666667], [868.0, 554.75], [869.0, 479.0], [871.0, 355.0], [870.0, 555.0], [874.0, 444.0], [872.0, 292.2], [876.0, 371.0], [875.0, 640.0], [873.0, 563.7142857142857], [1.0, 3387.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[489.09799999999944, 1241.9759999999994]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 877.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6909.5, "minX": 1.6306818E12, "maxY": 299989.56666666665, "series": [{"data": [[1.6306818E12, 299989.56666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6306818E12, 6909.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306818E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1241.9759999999994, "minX": 1.6306818E12, "maxY": 1241.9759999999994, "series": [{"data": [[1.6306818E12, 1241.9759999999994]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306818E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1013.8740000000012, "minX": 1.6306818E12, "maxY": 1013.8740000000012, "series": [{"data": [[1.6306818E12, 1013.8740000000012]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306818E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 523.4910000000002, "minX": 1.6306818E12, "maxY": 523.4910000000002, "series": [{"data": [[1.6306818E12, 523.4910000000002]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306818E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 69.0, "minX": 1.6306818E12, "maxY": 3387.0, "series": [{"data": [[1.6306818E12, 3387.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6306818E12, 2560.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6306818E12, 2920.9700000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6306818E12, 2759.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6306818E12, 69.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6306818E12, 1661.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306818E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 310.5, "minX": 1.0, "maxY": 3387.0, "series": [{"data": [[1.0, 3387.0], [316.0, 907.0], [352.0, 1922.0], [104.0, 2511.5], [227.0, 355.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[316.0, 655.0], [352.0, 1668.0], [104.0, 2403.0], [227.0, 310.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 352.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 250.0, "minX": 1.0, "maxY": 2299.5, "series": [{"data": [[1.0, 2142.0], [316.0, 710.0], [352.0, 1554.0], [104.0, 1665.5], [227.0, 250.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[316.0, 654.0], [352.0, 1666.0], [104.0, 2299.5], [227.0, 310.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 352.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6306818E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6306818E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306818E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.6306818E12, "maxY": 8.333333333333334, "series": [{"data": [[1.6306818E12, 8.333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6306818E12, 8.333333333333334]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306818E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.6306818E12, "maxY": 8.333333333333334, "series": [{"data": [[1.6306818E12, 8.333333333333334]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.6306818E12, 8.333333333333334]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306818E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.6306818E12, "maxY": 8.333333333333334, "series": [{"data": [[1.6306818E12, 8.333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6306818E12, 8.333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306818E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

