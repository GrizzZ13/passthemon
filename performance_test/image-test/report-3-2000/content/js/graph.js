/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2655.0, "minX": 0.0, "maxY": 22395.0, "series": [{"data": [[0.0, 2655.0], [0.1, 2665.0], [0.2, 2675.0], [0.3, 2679.0], [0.4, 2693.0], [0.5, 2710.0], [0.6, 3017.0], [0.7, 3229.0], [0.8, 3287.0], [0.9, 3351.0], [1.0, 3357.0], [1.1, 3410.0], [1.2, 3547.0], [1.3, 3561.0], [1.4, 3574.0], [1.5, 3585.0], [1.6, 3592.0], [1.7, 3620.0], [1.8, 3624.0], [1.9, 3632.0], [2.0, 3698.0], [2.1, 3715.0], [2.2, 3773.0], [2.3, 3785.0], [2.4, 3808.0], [2.5, 3814.0], [2.6, 3825.0], [2.7, 3834.0], [2.8, 3841.0], [2.9, 3850.0], [3.0, 3875.0], [3.1, 3883.0], [3.2, 3889.0], [3.3, 3915.0], [3.4, 3977.0], [3.5, 4024.0], [3.6, 4029.0], [3.7, 4035.0], [3.8, 4044.0], [3.9, 4067.0], [4.0, 4077.0], [4.1, 4087.0], [4.2, 4102.0], [4.3, 4111.0], [4.4, 4115.0], [4.5, 4130.0], [4.6, 4137.0], [4.7, 4148.0], [4.8, 4155.0], [4.9, 4157.0], [5.0, 4175.0], [5.1, 4182.0], [5.2, 4220.0], [5.3, 4232.0], [5.4, 4239.0], [5.5, 4252.0], [5.6, 4256.0], [5.7, 4263.0], [5.8, 4274.0], [5.9, 4277.0], [6.0, 4283.0], [6.1, 4295.0], [6.2, 4305.0], [6.3, 4338.0], [6.4, 4343.0], [6.5, 4356.0], [6.6, 4373.0], [6.7, 4379.0], [6.8, 4390.0], [6.9, 4406.0], [7.0, 4414.0], [7.1, 4431.0], [7.2, 4442.0], [7.3, 4453.0], [7.4, 4462.0], [7.5, 4487.0], [7.6, 4495.0], [7.7, 4516.0], [7.8, 4534.0], [7.9, 4555.0], [8.0, 4564.0], [8.1, 4593.0], [8.2, 4604.0], [8.3, 4625.0], [8.4, 4650.0], [8.5, 4659.0], [8.6, 4667.0], [8.7, 4675.0], [8.8, 4697.0], [8.9, 4703.0], [9.0, 4718.0], [9.1, 4740.0], [9.2, 4752.0], [9.3, 4762.0], [9.4, 4773.0], [9.5, 4783.0], [9.6, 4792.0], [9.7, 4808.0], [9.8, 4814.0], [9.9, 4822.0], [10.0, 4832.0], [10.1, 4838.0], [10.2, 4848.0], [10.3, 4852.0], [10.4, 4869.0], [10.5, 4884.0], [10.6, 4894.0], [10.7, 4903.0], [10.8, 4910.0], [10.9, 4916.0], [11.0, 4922.0], [11.1, 4927.0], [11.2, 4929.0], [11.3, 4933.0], [11.4, 4936.0], [11.5, 4952.0], [11.6, 4965.0], [11.7, 4971.0], [11.8, 4984.0], [11.9, 4993.0], [12.0, 4997.0], [12.1, 5003.0], [12.2, 5012.0], [12.3, 5024.0], [12.4, 5030.0], [12.5, 5049.0], [12.6, 5063.0], [12.7, 5071.0], [12.8, 5079.0], [12.9, 5088.0], [13.0, 5096.0], [13.1, 5104.0], [13.2, 5108.0], [13.3, 5119.0], [13.4, 5121.0], [13.5, 5129.0], [13.6, 5133.0], [13.7, 5136.0], [13.8, 5141.0], [13.9, 5148.0], [14.0, 5157.0], [14.1, 5164.0], [14.2, 5174.0], [14.3, 5179.0], [14.4, 5185.0], [14.5, 5189.0], [14.6, 5193.0], [14.7, 5204.0], [14.8, 5215.0], [14.9, 5228.0], [15.0, 5234.0], [15.1, 5249.0], [15.2, 5262.0], [15.3, 5276.0], [15.4, 5282.0], [15.5, 5285.0], [15.6, 5298.0], [15.7, 5305.0], [15.8, 5314.0], [15.9, 5321.0], [16.0, 5336.0], [16.1, 5343.0], [16.2, 5352.0], [16.3, 5358.0], [16.4, 5365.0], [16.5, 5371.0], [16.6, 5380.0], [16.7, 5386.0], [16.8, 5397.0], [16.9, 5406.0], [17.0, 5420.0], [17.1, 5426.0], [17.2, 5433.0], [17.3, 5437.0], [17.4, 5440.0], [17.5, 5443.0], [17.6, 5455.0], [17.7, 5469.0], [17.8, 5472.0], [17.9, 5490.0], [18.0, 5493.0], [18.1, 5497.0], [18.2, 5510.0], [18.3, 5521.0], [18.4, 5523.0], [18.5, 5527.0], [18.6, 5535.0], [18.7, 5541.0], [18.8, 5547.0], [18.9, 5556.0], [19.0, 5567.0], [19.1, 5571.0], [19.2, 5574.0], [19.3, 5581.0], [19.4, 5587.0], [19.5, 5593.0], [19.6, 5605.0], [19.7, 5615.0], [19.8, 5625.0], [19.9, 5635.0], [20.0, 5642.0], [20.1, 5651.0], [20.2, 5655.0], [20.3, 5663.0], [20.4, 5667.0], [20.5, 5673.0], [20.6, 5680.0], [20.7, 5684.0], [20.8, 5703.0], [20.9, 5711.0], [21.0, 5718.0], [21.1, 5723.0], [21.2, 5739.0], [21.3, 5748.0], [21.4, 5750.0], [21.5, 5754.0], [21.6, 5757.0], [21.7, 5765.0], [21.8, 5785.0], [21.9, 5794.0], [22.0, 5801.0], [22.1, 5811.0], [22.2, 5821.0], [22.3, 5829.0], [22.4, 5833.0], [22.5, 5837.0], [22.6, 5853.0], [22.7, 5865.0], [22.8, 5879.0], [22.9, 5886.0], [23.0, 5888.0], [23.1, 5897.0], [23.2, 5908.0], [23.3, 5913.0], [23.4, 5920.0], [23.5, 5929.0], [23.6, 5943.0], [23.7, 5948.0], [23.8, 5956.0], [23.9, 5961.0], [24.0, 5971.0], [24.1, 5988.0], [24.2, 5994.0], [24.3, 6003.0], [24.4, 6014.0], [24.5, 6022.0], [24.6, 6027.0], [24.7, 6029.0], [24.8, 6040.0], [24.9, 6048.0], [25.0, 6054.0], [25.1, 6063.0], [25.2, 6069.0], [25.3, 6077.0], [25.4, 6084.0], [25.5, 6090.0], [25.6, 6105.0], [25.7, 6107.0], [25.8, 6109.0], [25.9, 6117.0], [26.0, 6129.0], [26.1, 6142.0], [26.2, 6155.0], [26.3, 6163.0], [26.4, 6173.0], [26.5, 6188.0], [26.6, 6199.0], [26.7, 6202.0], [26.8, 6206.0], [26.9, 6219.0], [27.0, 6223.0], [27.1, 6234.0], [27.2, 6240.0], [27.3, 6247.0], [27.4, 6254.0], [27.5, 6270.0], [27.6, 6293.0], [27.7, 6307.0], [27.8, 6321.0], [27.9, 6340.0], [28.0, 6352.0], [28.1, 6362.0], [28.2, 6371.0], [28.3, 6381.0], [28.4, 6389.0], [28.5, 6401.0], [28.6, 6415.0], [28.7, 6427.0], [28.8, 6436.0], [28.9, 6440.0], [29.0, 6450.0], [29.1, 6459.0], [29.2, 6472.0], [29.3, 6487.0], [29.4, 6492.0], [29.5, 6503.0], [29.6, 6513.0], [29.7, 6521.0], [29.8, 6526.0], [29.9, 6535.0], [30.0, 6540.0], [30.1, 6547.0], [30.2, 6552.0], [30.3, 6561.0], [30.4, 6583.0], [30.5, 6603.0], [30.6, 6607.0], [30.7, 6613.0], [30.8, 6624.0], [30.9, 6630.0], [31.0, 6638.0], [31.1, 6642.0], [31.2, 6652.0], [31.3, 6665.0], [31.4, 6683.0], [31.5, 6693.0], [31.6, 6702.0], [31.7, 6711.0], [31.8, 6712.0], [31.9, 6715.0], [32.0, 6716.0], [32.1, 6727.0], [32.2, 6735.0], [32.3, 6747.0], [32.4, 6754.0], [32.5, 6773.0], [32.6, 6779.0], [32.7, 6788.0], [32.8, 6794.0], [32.9, 6803.0], [33.0, 6807.0], [33.1, 6823.0], [33.2, 6839.0], [33.3, 6860.0], [33.4, 6871.0], [33.5, 6888.0], [33.6, 6895.0], [33.7, 6901.0], [33.8, 6910.0], [33.9, 6919.0], [34.0, 6921.0], [34.1, 6939.0], [34.2, 6950.0], [34.3, 6960.0], [34.4, 6971.0], [34.5, 6983.0], [34.6, 7002.0], [34.7, 7010.0], [34.8, 7017.0], [34.9, 7024.0], [35.0, 7038.0], [35.1, 7042.0], [35.2, 7049.0], [35.3, 7057.0], [35.4, 7063.0], [35.5, 7073.0], [35.6, 7079.0], [35.7, 7090.0], [35.8, 7101.0], [35.9, 7111.0], [36.0, 7117.0], [36.1, 7123.0], [36.2, 7132.0], [36.3, 7142.0], [36.4, 7147.0], [36.5, 7154.0], [36.6, 7165.0], [36.7, 7168.0], [36.8, 7181.0], [36.9, 7189.0], [37.0, 7200.0], [37.1, 7203.0], [37.2, 7209.0], [37.3, 7222.0], [37.4, 7226.0], [37.5, 7230.0], [37.6, 7237.0], [37.7, 7243.0], [37.8, 7245.0], [37.9, 7253.0], [38.0, 7260.0], [38.1, 7268.0], [38.2, 7279.0], [38.3, 7286.0], [38.4, 7291.0], [38.5, 7306.0], [38.6, 7310.0], [38.7, 7321.0], [38.8, 7332.0], [38.9, 7336.0], [39.0, 7349.0], [39.1, 7363.0], [39.2, 7367.0], [39.3, 7372.0], [39.4, 7378.0], [39.5, 7387.0], [39.6, 7398.0], [39.7, 7407.0], [39.8, 7415.0], [39.9, 7431.0], [40.0, 7436.0], [40.1, 7444.0], [40.2, 7452.0], [40.3, 7459.0], [40.4, 7470.0], [40.5, 7475.0], [40.6, 7483.0], [40.7, 7485.0], [40.8, 7495.0], [40.9, 7498.0], [41.0, 7509.0], [41.1, 7516.0], [41.2, 7538.0], [41.3, 7550.0], [41.4, 7555.0], [41.5, 7566.0], [41.6, 7572.0], [41.7, 7581.0], [41.8, 7590.0], [41.9, 7594.0], [42.0, 7602.0], [42.1, 7605.0], [42.2, 7614.0], [42.3, 7621.0], [42.4, 7627.0], [42.5, 7631.0], [42.6, 7638.0], [42.7, 7645.0], [42.8, 7650.0], [42.9, 7661.0], [43.0, 7673.0], [43.1, 7679.0], [43.2, 7695.0], [43.3, 7707.0], [43.4, 7716.0], [43.5, 7727.0], [43.6, 7733.0], [43.7, 7734.0], [43.8, 7742.0], [43.9, 7748.0], [44.0, 7756.0], [44.1, 7761.0], [44.2, 7775.0], [44.3, 7780.0], [44.4, 7781.0], [44.5, 7793.0], [44.6, 7802.0], [44.7, 7806.0], [44.8, 7816.0], [44.9, 7827.0], [45.0, 7839.0], [45.1, 7856.0], [45.2, 7865.0], [45.3, 7867.0], [45.4, 7877.0], [45.5, 7888.0], [45.6, 7897.0], [45.7, 7904.0], [45.8, 7922.0], [45.9, 7934.0], [46.0, 7945.0], [46.1, 7948.0], [46.2, 7963.0], [46.3, 7982.0], [46.4, 7994.0], [46.5, 8009.0], [46.6, 8018.0], [46.7, 8025.0], [46.8, 8029.0], [46.9, 8045.0], [47.0, 8062.0], [47.1, 8069.0], [47.2, 8073.0], [47.3, 8079.0], [47.4, 8088.0], [47.5, 8096.0], [47.6, 8111.0], [47.7, 8125.0], [47.8, 8138.0], [47.9, 8153.0], [48.0, 8173.0], [48.1, 8181.0], [48.2, 8191.0], [48.3, 8214.0], [48.4, 8224.0], [48.5, 8251.0], [48.6, 8259.0], [48.7, 8265.0], [48.8, 8273.0], [48.9, 8284.0], [49.0, 8298.0], [49.1, 8313.0], [49.2, 8317.0], [49.3, 8320.0], [49.4, 8329.0], [49.5, 8342.0], [49.6, 8351.0], [49.7, 8355.0], [49.8, 8367.0], [49.9, 8371.0], [50.0, 8381.0], [50.1, 8384.0], [50.2, 8391.0], [50.3, 8401.0], [50.4, 8404.0], [50.5, 8416.0], [50.6, 8419.0], [50.7, 8421.0], [50.8, 8426.0], [50.9, 8431.0], [51.0, 8437.0], [51.1, 8441.0], [51.2, 8445.0], [51.3, 8451.0], [51.4, 8455.0], [51.5, 8459.0], [51.6, 8461.0], [51.7, 8462.0], [51.8, 8466.0], [51.9, 8472.0], [52.0, 8475.0], [52.1, 8478.0], [52.2, 8484.0], [52.3, 8485.0], [52.4, 8489.0], [52.5, 8490.0], [52.6, 8494.0], [52.7, 8497.0], [52.8, 8499.0], [52.9, 8502.0], [53.0, 8506.0], [53.1, 8512.0], [53.2, 8522.0], [53.3, 8529.0], [53.4, 8536.0], [53.5, 8539.0], [53.6, 8540.0], [53.7, 8549.0], [53.8, 8553.0], [53.9, 8560.0], [54.0, 8567.0], [54.1, 8570.0], [54.2, 8575.0], [54.3, 8582.0], [54.4, 8585.0], [54.5, 8585.0], [54.6, 8588.0], [54.7, 8590.0], [54.8, 8593.0], [54.9, 8597.0], [55.0, 8600.0], [55.1, 8603.0], [55.2, 8605.0], [55.3, 8611.0], [55.4, 8617.0], [55.5, 8621.0], [55.6, 8626.0], [55.7, 8628.0], [55.8, 8632.0], [55.9, 8636.0], [56.0, 8646.0], [56.1, 8650.0], [56.2, 8655.0], [56.3, 8660.0], [56.4, 8665.0], [56.5, 8670.0], [56.6, 8675.0], [56.7, 8678.0], [56.8, 8681.0], [56.9, 8690.0], [57.0, 8695.0], [57.1, 8698.0], [57.2, 8701.0], [57.3, 8706.0], [57.4, 8711.0], [57.5, 8717.0], [57.6, 8719.0], [57.7, 8731.0], [57.8, 8734.0], [57.9, 8743.0], [58.0, 8747.0], [58.1, 8757.0], [58.2, 8762.0], [58.3, 8768.0], [58.4, 8776.0], [58.5, 8777.0], [58.6, 8782.0], [58.7, 8787.0], [58.8, 8789.0], [58.9, 8795.0], [59.0, 8803.0], [59.1, 8822.0], [59.2, 8828.0], [59.3, 8837.0], [59.4, 8852.0], [59.5, 8853.0], [59.6, 8863.0], [59.7, 8870.0], [59.8, 8876.0], [59.9, 8886.0], [60.0, 8889.0], [60.1, 8901.0], [60.2, 8921.0], [60.3, 8926.0], [60.4, 8938.0], [60.5, 8955.0], [60.6, 8966.0], [60.7, 8976.0], [60.8, 8995.0], [60.9, 9010.0], [61.0, 9027.0], [61.1, 9042.0], [61.2, 9048.0], [61.3, 9055.0], [61.4, 9060.0], [61.5, 9070.0], [61.6, 9084.0], [61.7, 9091.0], [61.8, 9101.0], [61.9, 9111.0], [62.0, 9115.0], [62.1, 9129.0], [62.2, 9137.0], [62.3, 9148.0], [62.4, 9152.0], [62.5, 9164.0], [62.6, 9175.0], [62.7, 9182.0], [62.8, 9210.0], [62.9, 9213.0], [63.0, 9222.0], [63.1, 9231.0], [63.2, 9246.0], [63.3, 9254.0], [63.4, 9257.0], [63.5, 9272.0], [63.6, 9276.0], [63.7, 9280.0], [63.8, 9282.0], [63.9, 9290.0], [64.0, 9306.0], [64.1, 9315.0], [64.2, 9318.0], [64.3, 9333.0], [64.4, 9342.0], [64.5, 9352.0], [64.6, 9358.0], [64.7, 9363.0], [64.8, 9370.0], [64.9, 9380.0], [65.0, 9387.0], [65.1, 9389.0], [65.2, 9400.0], [65.3, 9414.0], [65.4, 9415.0], [65.5, 9422.0], [65.6, 9427.0], [65.7, 9435.0], [65.8, 9451.0], [65.9, 9457.0], [66.0, 9460.0], [66.1, 9463.0], [66.2, 9475.0], [66.3, 9487.0], [66.4, 9490.0], [66.5, 9502.0], [66.6, 9506.0], [66.7, 9512.0], [66.8, 9518.0], [66.9, 9523.0], [67.0, 9526.0], [67.1, 9528.0], [67.2, 9535.0], [67.3, 9539.0], [67.4, 9544.0], [67.5, 9559.0], [67.6, 9567.0], [67.7, 9580.0], [67.8, 9586.0], [67.9, 9592.0], [68.0, 9601.0], [68.1, 9612.0], [68.2, 9614.0], [68.3, 9620.0], [68.4, 9631.0], [68.5, 9634.0], [68.6, 9645.0], [68.7, 9650.0], [68.8, 9656.0], [68.9, 9668.0], [69.0, 9671.0], [69.1, 9676.0], [69.2, 9680.0], [69.3, 9690.0], [69.4, 9694.0], [69.5, 9696.0], [69.6, 9704.0], [69.7, 9719.0], [69.8, 9721.0], [69.9, 9729.0], [70.0, 9737.0], [70.1, 9746.0], [70.2, 9751.0], [70.3, 9758.0], [70.4, 9761.0], [70.5, 9771.0], [70.6, 9777.0], [70.7, 9799.0], [70.8, 9807.0], [70.9, 9829.0], [71.0, 9843.0], [71.1, 9847.0], [71.2, 9855.0], [71.3, 9862.0], [71.4, 9877.0], [71.5, 9886.0], [71.6, 9899.0], [71.7, 9903.0], [71.8, 9913.0], [71.9, 9932.0], [72.0, 9939.0], [72.1, 9947.0], [72.2, 9961.0], [72.3, 9963.0], [72.4, 9975.0], [72.5, 9981.0], [72.6, 9988.0], [72.7, 9993.0], [72.8, 10003.0], [72.9, 10016.0], [73.0, 10018.0], [73.1, 10025.0], [73.2, 10037.0], [73.3, 10042.0], [73.4, 10047.0], [73.5, 10069.0], [73.6, 10076.0], [73.7, 10080.0], [73.8, 10088.0], [73.9, 10097.0], [74.0, 10101.0], [74.1, 10112.0], [74.2, 10130.0], [74.3, 10146.0], [74.4, 10156.0], [74.5, 10162.0], [74.6, 10168.0], [74.7, 10180.0], [74.8, 10183.0], [74.9, 10192.0], [75.0, 10196.0], [75.1, 10202.0], [75.2, 10212.0], [75.3, 10221.0], [75.4, 10231.0], [75.5, 10240.0], [75.6, 10249.0], [75.7, 10258.0], [75.8, 10267.0], [75.9, 10273.0], [76.0, 10281.0], [76.1, 10296.0], [76.2, 10302.0], [76.3, 10311.0], [76.4, 10322.0], [76.5, 10327.0], [76.6, 10336.0], [76.7, 10342.0], [76.8, 10345.0], [76.9, 10358.0], [77.0, 10359.0], [77.1, 10375.0], [77.2, 10379.0], [77.3, 10383.0], [77.4, 10391.0], [77.5, 10399.0], [77.6, 10402.0], [77.7, 10405.0], [77.8, 10411.0], [77.9, 10419.0], [78.0, 10426.0], [78.1, 10433.0], [78.2, 10441.0], [78.3, 10449.0], [78.4, 10453.0], [78.5, 10477.0], [78.6, 10482.0], [78.7, 10484.0], [78.8, 10487.0], [78.9, 10498.0], [79.0, 10509.0], [79.1, 10513.0], [79.2, 10524.0], [79.3, 10534.0], [79.4, 10540.0], [79.5, 10543.0], [79.6, 10548.0], [79.7, 10554.0], [79.8, 10560.0], [79.9, 10563.0], [80.0, 10577.0], [80.1, 10586.0], [80.2, 10590.0], [80.3, 10594.0], [80.4, 10603.0], [80.5, 10607.0], [80.6, 10610.0], [80.7, 10613.0], [80.8, 10625.0], [80.9, 10630.0], [81.0, 10633.0], [81.1, 10639.0], [81.2, 10644.0], [81.3, 10651.0], [81.4, 10657.0], [81.5, 10668.0], [81.6, 10673.0], [81.7, 10682.0], [81.8, 10687.0], [81.9, 10692.0], [82.0, 10699.0], [82.1, 10703.0], [82.2, 10705.0], [82.3, 10709.0], [82.4, 10719.0], [82.5, 10727.0], [82.6, 10730.0], [82.7, 10740.0], [82.8, 10741.0], [82.9, 10746.0], [83.0, 10757.0], [83.1, 10781.0], [83.2, 10785.0], [83.3, 10798.0], [83.4, 10801.0], [83.5, 10806.0], [83.6, 10809.0], [83.7, 10814.0], [83.8, 10817.0], [83.9, 10823.0], [84.0, 10829.0], [84.1, 10831.0], [84.2, 10837.0], [84.3, 10844.0], [84.4, 10849.0], [84.5, 10854.0], [84.6, 10861.0], [84.7, 10870.0], [84.8, 10879.0], [84.9, 10885.0], [85.0, 10898.0], [85.1, 10906.0], [85.2, 10911.0], [85.3, 10919.0], [85.4, 10924.0], [85.5, 10928.0], [85.6, 10945.0], [85.7, 10954.0], [85.8, 10957.0], [85.9, 10971.0], [86.0, 10978.0], [86.1, 10991.0], [86.2, 10994.0], [86.3, 11008.0], [86.4, 11017.0], [86.5, 11025.0], [86.6, 11031.0], [86.7, 11040.0], [86.8, 11047.0], [86.9, 11057.0], [87.0, 11067.0], [87.1, 11074.0], [87.2, 11080.0], [87.3, 11090.0], [87.4, 11094.0], [87.5, 11098.0], [87.6, 11102.0], [87.7, 11107.0], [87.8, 11111.0], [87.9, 11118.0], [88.0, 11124.0], [88.1, 11131.0], [88.2, 11144.0], [88.3, 11156.0], [88.4, 11161.0], [88.5, 11165.0], [88.6, 11175.0], [88.7, 11188.0], [88.8, 11204.0], [88.9, 11213.0], [89.0, 11230.0], [89.1, 11236.0], [89.2, 11242.0], [89.3, 11253.0], [89.4, 11265.0], [89.5, 11272.0], [89.6, 11283.0], [89.7, 11295.0], [89.8, 11306.0], [89.9, 11316.0], [90.0, 11325.0], [90.1, 11346.0], [90.2, 11366.0], [90.3, 11371.0], [90.4, 11375.0], [90.5, 11387.0], [90.6, 11418.0], [90.7, 11449.0], [90.8, 11461.0], [90.9, 11473.0], [91.0, 11479.0], [91.1, 11490.0], [91.2, 11507.0], [91.3, 11513.0], [91.4, 11524.0], [91.5, 11532.0], [91.6, 11540.0], [91.7, 11547.0], [91.8, 11553.0], [91.9, 11562.0], [92.0, 11576.0], [92.1, 11584.0], [92.2, 11591.0], [92.3, 11600.0], [92.4, 11611.0], [92.5, 11624.0], [92.6, 11634.0], [92.7, 11639.0], [92.8, 11651.0], [92.9, 11661.0], [93.0, 11662.0], [93.1, 11686.0], [93.2, 11693.0], [93.3, 11725.0], [93.4, 11732.0], [93.5, 11750.0], [93.6, 11768.0], [93.7, 11779.0], [93.8, 11809.0], [93.9, 11824.0], [94.0, 11850.0], [94.1, 11862.0], [94.2, 11870.0], [94.3, 11880.0], [94.4, 11904.0], [94.5, 11919.0], [94.6, 11945.0], [94.7, 11952.0], [94.8, 11986.0], [94.9, 12022.0], [95.0, 12064.0], [95.1, 12127.0], [95.2, 12212.0], [95.3, 12266.0], [95.4, 12674.0], [95.5, 12984.0], [95.6, 13165.0], [95.7, 13650.0], [95.8, 13730.0], [95.9, 14314.0], [96.0, 14590.0], [96.1, 14834.0], [96.2, 14990.0], [96.3, 15098.0], [96.4, 15103.0], [96.5, 15105.0], [96.6, 15109.0], [96.7, 15120.0], [96.8, 15132.0], [96.9, 15166.0], [97.0, 15310.0], [97.1, 15994.0], [97.2, 16064.0], [97.3, 16095.0], [97.4, 16132.0], [97.5, 16181.0], [97.6, 16231.0], [97.7, 16248.0], [97.8, 16259.0], [97.9, 16294.0], [98.0, 16332.0], [98.1, 16342.0], [98.2, 16353.0], [98.3, 16367.0], [98.4, 16379.0], [98.5, 16395.0], [98.6, 16408.0], [98.7, 16437.0], [98.8, 16446.0], [98.9, 16474.0], [99.0, 16494.0], [99.1, 16517.0], [99.2, 16629.0], [99.3, 16737.0], [99.4, 17078.0], [99.5, 17689.0], [99.6, 17711.0], [99.7, 18063.0], [99.8, 18500.0], [99.9, 19302.0], [100.0, 22395.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2600.0, "maxY": 101.0, "series": [{"data": [[2600.0, 19.0], [2700.0, 3.0], [2900.0, 1.0], [3000.0, 1.0], [3200.0, 9.0], [3300.0, 11.0], [3400.0, 3.0], [3500.0, 18.0], [3600.0, 16.0], [3700.0, 13.0], [3800.0, 36.0], [3900.0, 7.0], [4000.0, 30.0], [4100.0, 37.0], [4300.0, 27.0], [4200.0, 42.0], [4400.0, 31.0], [4500.0, 21.0], [4600.0, 28.0], [4700.0, 32.0], [4800.0, 42.0], [5100.0, 62.0], [4900.0, 55.0], [5000.0, 41.0], [5200.0, 39.0], [5300.0, 49.0], [5400.0, 51.0], [5600.0, 50.0], [5500.0, 57.0], [5700.0, 49.0], [5800.0, 47.0], [5900.0, 44.0], [6000.0, 52.0], [6100.0, 43.0], [6200.0, 40.0], [6300.0, 34.0], [6600.0, 45.0], [6400.0, 39.0], [6500.0, 40.0], [6700.0, 52.0], [6900.0, 37.0], [6800.0, 31.0], [7000.0, 47.0], [7100.0, 49.0], [7300.0, 47.0], [7200.0, 58.0], [7400.0, 53.0], [7600.0, 50.0], [7500.0, 42.0], [7700.0, 53.0], [7800.0, 43.0], [7900.0, 32.0], [8000.0, 45.0], [8100.0, 27.0], [8300.0, 51.0], [8400.0, 101.0], [8500.0, 86.0], [8600.0, 88.0], [8700.0, 71.0], [8200.0, 31.0], [8800.0, 45.0], [8900.0, 31.0], [9200.0, 46.0], [9100.0, 40.0], [9000.0, 38.0], [9300.0, 50.0], [9400.0, 52.0], [9600.0, 62.0], [9700.0, 48.0], [9500.0, 59.0], [9800.0, 37.0], [9900.0, 43.0], [10000.0, 50.0], [10100.0, 44.0], [10200.0, 44.0], [10300.0, 55.0], [10400.0, 55.0], [10500.0, 57.0], [10600.0, 66.0], [10700.0, 54.0], [10800.0, 68.0], [11000.0, 53.0], [10900.0, 46.0], [11100.0, 49.0], [11200.0, 39.0], [11300.0, 33.0], [11600.0, 38.0], [11500.0, 46.0], [11400.0, 23.0], [11700.0, 20.0], [11800.0, 25.0], [11900.0, 18.0], [12000.0, 11.0], [12100.0, 4.0], [12200.0, 5.0], [12400.0, 1.0], [12300.0, 1.0], [12600.0, 1.0], [12500.0, 1.0], [12800.0, 2.0], [13000.0, 1.0], [12900.0, 2.0], [13200.0, 1.0], [13100.0, 4.0], [13700.0, 2.0], [13600.0, 5.0], [13900.0, 1.0], [14300.0, 1.0], [14100.0, 1.0], [14400.0, 2.0], [14500.0, 2.0], [14800.0, 6.0], [14600.0, 1.0], [15200.0, 3.0], [15000.0, 6.0], [15100.0, 22.0], [15300.0, 2.0], [14900.0, 1.0], [15400.0, 1.0], [16300.0, 25.0], [16000.0, 8.0], [15900.0, 2.0], [16100.0, 10.0], [16200.0, 14.0], [16500.0, 7.0], [16400.0, 19.0], [16700.0, 4.0], [16600.0, 2.0], [16900.0, 1.0], [17200.0, 1.0], [17000.0, 1.0], [16800.0, 1.0], [17600.0, 5.0], [17800.0, 1.0], [17700.0, 4.0], [18000.0, 1.0], [18100.0, 2.0], [18300.0, 1.0], [18500.0, 2.0], [19300.0, 1.0], [19400.0, 1.0], [18600.0, 1.0], [19000.0, 1.0], [19700.0, 1.0], [22300.0, 1.0], [21900.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 71.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3929.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3929.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 71.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.63090254E12, "maxY": 1006.2652652652625, "series": [{"data": [[1.6309026E12, 1.5], [1.63090254E12, 1006.2652652652625]], "isOverall": false, "label": "getAllImgForThisPage", "isController": false}, {"data": [[1.63090254E12, 1001.6580000000002]], "isOverall": false, "label": "getAllImgByGoodsId", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309026E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2680.6, "minX": 1.0, "maxY": 20499.5, "series": [{"data": [[2.0, 20499.5], [3.0, 18812.5], [4.0, 18223.0], [5.0, 18952.5], [6.0, 16975.5], [7.0, 17350.5], [8.0, 16893.5], [9.0, 16602.5], [10.0, 16434.0], [11.0, 16983.5], [12.0, 16419.5], [13.0, 15129.0], [14.0, 15108.0], [15.0, 17616.0], [16.0, 15121.5], [17.0, 17193.6], [18.0, 16399.0], [19.0, 16358.0], [20.0, 15706.333333333334], [21.0, 16105.0], [22.0, 16201.0], [23.0, 16052.0], [24.0, 15703.0], [25.0, 15776.5], [26.0, 15109.0], [27.0, 15108.0], [28.0, 16103.5], [29.0, 15777.0], [31.0, 15802.25], [33.0, 16066.0], [32.0, 15104.0], [35.0, 15779.0], [34.0, 15804.0], [37.0, 15739.0], [36.0, 15915.5], [39.0, 16395.0], [38.0, 15601.5], [41.0, 16412.5], [40.0, 14819.0], [43.0, 15848.333333333334], [42.0, 14831.333333333334], [45.0, 14220.5], [44.0, 15415.0], [47.0, 15265.0], [46.0, 14484.0], [48.0, 16310.0], [51.0, 14000.8], [50.0, 16368.0], [53.0, 15598.0], [52.0, 12232.0], [55.0, 15210.5], [54.0, 15003.0], [57.0, 14159.0], [56.0, 14758.5], [59.0, 16435.0], [58.0, 16399.0], [61.0, 14814.0], [60.0, 13981.5], [63.0, 14621.0], [62.0, 13677.0], [67.0, 14377.0], [66.0, 14446.0], [65.0, 14599.0], [64.0, 14017.0], [70.0, 14190.0], [69.0, 14174.5], [68.0, 14202.5], [71.0, 12129.0], [75.0, 14009.0], [74.0, 13665.0], [73.0, 12586.0], [72.0, 14555.333333333334], [79.0, 13105.5], [77.0, 13553.5], [76.0, 13030.0], [83.0, 14423.666666666666], [81.0, 14616.666666666666], [82.0, 10755.0], [80.0, 11854.0], [87.0, 13974.75], [85.0, 13222.5], [84.0, 13394.5], [90.0, 16311.333333333334], [91.0, 10900.666666666666], [88.0, 11572.0], [95.0, 12497.0], [94.0, 16178.0], [93.0, 16238.0], [92.0, 14421.333333333334], [99.0, 15994.0], [98.0, 13896.166666666666], [103.0, 16438.0], [102.0, 14188.5], [101.0, 14177.0], [100.0, 10509.5], [107.0, 12887.5], [106.0, 16064.0], [105.0, 16085.0], [104.0, 16438.0], [111.0, 14307.0], [110.0, 10607.75], [109.0, 11217.0], [115.0, 14000.0], [114.0, 13912.0], [113.0, 12542.333333333334], [112.0, 16517.0], [119.0, 12588.5], [118.0, 13466.0], [117.0, 11680.5], [116.0, 13188.0], [123.0, 12804.0], [122.0, 12628.5], [121.0, 11880.666666666666], [120.0, 14572.0], [127.0, 11636.0], [126.0, 11205.5], [125.0, 12164.333333333334], [124.0, 13079.0], [135.0, 11146.0], [134.0, 11140.5], [133.0, 11829.0], [132.0, 10902.0], [131.0, 11883.0], [130.0, 11646.0], [129.0, 11809.0], [128.0, 12063.666666666666], [142.0, 11126.5], [141.0, 11160.0], [140.0, 11583.0], [139.0, 11353.0], [137.0, 11516.333333333334], [136.0, 11444.5], [143.0, 11882.0], [151.0, 11134.0], [150.0, 11449.5], [149.0, 11706.8], [146.0, 10433.0], [145.0, 11806.0], [144.0, 11090.0], [147.0, 10871.666666666666], [159.0, 10991.0], [158.0, 10617.5], [157.0, 11768.666666666666], [155.0, 10614.0], [154.0, 11453.25], [153.0, 11693.0], [156.0, 10742.0], [152.0, 10543.0], [167.0, 10938.5], [165.0, 10954.0], [164.0, 10322.5], [163.0, 11527.0], [160.0, 9944.0], [166.0, 10773.0], [161.0, 10236.666666666666], [175.0, 11756.5], [174.0, 11319.0], [173.0, 11481.0], [172.0, 11633.0], [171.0, 10509.666666666666], [170.0, 10540.0], [169.0, 10915.75], [168.0, 11750.0], [183.0, 11262.0], [182.0, 11787.5], [181.0, 11827.666666666666], [179.0, 11855.0], [178.0, 11218.0], [176.0, 11683.5], [180.0, 10516.0], [177.0, 10017.0], [190.0, 11170.0], [189.0, 11854.666666666666], [188.0, 11198.5], [186.0, 11591.0], [185.0, 11880.0], [184.0, 11496.0], [187.0, 11230.0], [199.0, 11339.0], [198.0, 11687.0], [197.0, 11171.0], [196.0, 11811.5], [195.0, 11188.25], [193.0, 10424.5], [192.0, 11098.75], [205.0, 10114.0], [204.0, 11198.4], [201.0, 10540.5], [200.0, 10885.5], [206.0, 9485.5], [203.0, 9458.0], [215.0, 10902.5], [213.0, 11019.166666666668], [210.0, 11296.333333333334], [209.0, 11661.0], [208.0, 11219.8], [223.0, 11750.0], [222.0, 11477.0], [221.0, 10726.75], [219.0, 9591.5], [218.0, 11159.0], [216.0, 10712.5], [230.0, 11551.0], [229.0, 10632.75], [227.0, 11093.0], [226.0, 11516.0], [224.0, 10982.75], [231.0, 11102.5], [228.0, 9901.0], [225.0, 10402.0], [239.0, 11599.0], [238.0, 10951.0], [237.0, 10705.5], [236.0, 11545.0], [235.0, 10891.0], [234.0, 11376.0], [233.0, 11119.0], [232.0, 11146.0], [247.0, 10526.0], [246.0, 11205.333333333334], [244.0, 11301.0], [243.0, 11398.5], [241.0, 11805.5], [242.0, 11513.0], [240.0, 10762.0], [255.0, 11044.0], [253.0, 10848.6], [252.0, 11131.0], [251.0, 11098.0], [250.0, 10338.0], [249.0, 11566.0], [248.0, 11023.2], [254.0, 11779.0], [259.0, 11293.0], [269.0, 11148.0], [270.0, 11011.25], [271.0, 11067.0], [268.0, 9459.0], [267.0, 10647.666666666666], [266.0, 10969.4], [264.0, 10263.0], [262.0, 11094.0], [261.0, 11136.0], [258.0, 10853.5], [257.0, 11448.0], [256.0, 11114.0], [263.0, 10359.0], [285.0, 11221.5], [284.0, 11007.0], [275.0, 11368.0], [273.0, 11279.0], [274.0, 10629.5], [272.0, 11120.666666666666], [283.0, 10865.0], [282.0, 10907.333333333334], [281.0, 10993.0], [280.0, 10736.5], [287.0, 11005.25], [278.0, 11261.5], [277.0, 10723.5], [276.0, 11061.0], [303.0, 10787.0], [301.0, 10504.0], [302.0, 10531.0], [291.0, 9768.0], [290.0, 11091.5], [289.0, 11055.333333333334], [288.0, 11061.0], [299.0, 11210.5], [298.0, 10528.4], [297.0, 9987.0], [296.0, 10919.0], [295.0, 11017.0], [294.0, 11069.5], [293.0, 9956.5], [292.0, 10938.666666666666], [318.0, 9427.0], [319.0, 9388.0], [317.0, 9800.666666666666], [316.0, 11562.0], [314.0, 8958.0], [315.0, 11132.0], [313.0, 10379.0], [312.0, 10376.0], [309.0, 10927.666666666666], [308.0, 9380.0], [307.0, 9973.5], [306.0, 11006.5], [305.0, 10114.333333333334], [304.0, 9055.0], [311.0, 11201.0], [310.0, 11120.0], [334.0, 10273.5], [335.0, 10381.0], [332.0, 9995.5], [323.0, 9313.0], [330.0, 10797.0], [331.0, 10736.666666666666], [328.0, 9612.0], [327.0, 11003.5], [326.0, 10483.833333333334], [324.0, 10383.0], [322.0, 10581.0], [321.0, 10934.625], [339.0, 10664.666666666666], [351.0, 10382.333333333334], [348.0, 10317.0], [338.0, 10022.0], [336.0, 10610.0], [347.0, 10993.5], [346.0, 9554.5], [345.0, 10610.8], [343.0, 10358.0], [342.0, 9767.0], [341.0, 11076.0], [340.0, 10824.0], [366.0, 10252.5], [367.0, 9266.0], [365.0, 10590.699999999999], [364.0, 10861.0], [355.0, 10009.5], [354.0, 10392.0], [353.0, 10915.2], [352.0, 10831.0], [362.0, 9358.0], [361.0, 10619.0], [360.0, 10937.0], [359.0, 8822.0], [358.0, 9187.0], [357.0, 9647.0], [356.0, 10958.0], [380.0, 10179.5], [382.0, 10535.333333333334], [383.0, 11135.0], [376.0, 10820.333333333334], [381.0, 9513.0], [378.0, 9733.5], [379.0, 11429.5], [377.0, 9327.5], [374.0, 9317.0], [369.0, 10092.0], [368.0, 10025.0], [375.0, 10299.0], [371.0, 10918.0], [370.0, 10754.5], [373.0, 11359.0], [372.0, 11255.5], [398.0, 10949.0], [399.0, 10912.0], [397.0, 10317.75], [387.0, 10206.0], [385.0, 10691.0], [384.0, 11316.0], [395.0, 10542.5], [394.0, 9799.666666666666], [392.0, 10767.0], [393.0, 10211.0], [391.0, 9558.5], [390.0, 10801.0], [389.0, 10803.5], [388.0, 9213.0], [414.0, 9182.0], [415.0, 9541.0], [413.0, 10452.6], [403.0, 10227.0], [402.0, 10095.333333333334], [401.0, 11184.0], [400.0, 11648.0], [411.0, 9424.0], [410.0, 9503.0], [409.0, 10749.0], [408.0, 11176.5], [407.0, 9970.5], [406.0, 9584.0], [405.0, 10261.0], [404.0, 11053.0], [419.0, 9370.0], [430.0, 9517.0], [431.0, 10743.5], [428.0, 11087.75], [427.0, 10456.0], [425.0, 10034.249999999998], [423.0, 9379.0], [421.0, 10705.0], [422.0, 11590.0], [418.0, 9935.0], [417.0, 10952.75], [446.0, 9876.0], [447.0, 10087.0], [445.0, 10705.5], [444.0, 9833.5], [443.0, 9732.666666666666], [442.0, 10919.0], [441.0, 11011.5], [440.0, 9986.0], [439.0, 10449.0], [433.0, 10493.0], [432.0, 9749.0], [435.0, 11061.666666666666], [434.0, 9152.0], [438.0, 10549.5], [436.0, 9752.0], [461.0, 10785.0], [462.0, 10723.0], [463.0, 10728.666666666666], [460.0, 9677.25], [451.0, 10896.0], [449.0, 10617.5], [448.0, 10309.333333333334], [458.0, 10026.666666666666], [457.0, 9523.0], [456.0, 9453.0], [455.0, 10198.0], [454.0, 10361.333333333334], [453.0, 10724.0], [452.0, 10343.0], [467.0, 10009.75], [477.0, 9779.5], [479.0, 10543.25], [476.0, 9786.0], [474.0, 9617.5], [471.0, 10053.75], [470.0, 9408.5], [468.0, 9766.5], [466.0, 10450.25], [464.0, 9673.5], [492.0, 10423.75], [494.0, 10477.0], [495.0, 10796.5], [488.0, 10809.0], [493.0, 10639.5], [490.0, 10456.0], [489.0, 9108.5], [487.0, 10477.0], [486.0, 10263.0], [484.0, 10812.0], [483.0, 10700.5], [482.0, 10770.333333333334], [480.0, 10076.0], [481.0, 10465.5], [509.0, 9486.75], [511.0, 9130.666666666666], [508.0, 10425.75], [504.0, 9886.0], [506.0, 11111.0], [505.0, 10908.0], [503.0, 10107.8], [496.0, 10260.5], [502.0, 10838.0], [499.0, 10396.75], [498.0, 10688.0], [497.0, 9914.0], [510.0, 8675.0], [512.0, 9616.0], [518.0, 10751.0], [536.0, 9961.857142857143], [516.0, 9173.0], [514.0, 8729.0], [530.0, 10125.857142857143], [528.0, 9680.0], [526.0, 9317.0], [524.0, 10773.5], [522.0, 9510.666666666666], [520.0, 9199.0], [570.0, 10203.0], [574.0, 9651.0], [568.0, 9212.0], [546.0, 10748.0], [566.0, 9514.0], [564.0, 9954.5], [562.0, 9968.789473684212], [572.0, 9737.0], [558.0, 10983.0], [554.0, 10990.0], [552.0, 10193.666666666666], [600.0, 10433.75], [604.0, 8791.0], [594.0, 9581.0], [592.0, 9164.0], [606.0, 10596.75], [602.0, 10004.0], [576.0, 9048.0], [578.0, 10327.0], [582.0, 10058.666666666666], [580.0, 9478.0], [590.0, 9470.0], [588.0, 8320.0], [586.0, 10009.5], [584.0, 10050.25], [598.0, 8838.0], [596.0, 9982.75], [612.0, 10157.333333333334], [632.0, 10182.0], [614.0, 9664.0], [638.0, 9823.0], [626.0, 8706.0], [624.0, 8712.0], [636.0, 10190.25], [608.0, 8484.0], [622.0, 9249.333333333334], [620.0, 10344.0], [616.0, 9650.0], [618.0, 10088.0], [630.0, 8655.0], [628.0, 9093.333333333334], [664.0, 10308.8], [670.0, 9280.0], [656.0, 10451.5], [668.0, 9737.0], [640.0, 10268.5], [642.0, 9368.0], [646.0, 10685.666666666666], [644.0, 10524.0], [650.0, 10217.0], [652.0, 10227.4], [658.0, 10511.0], [660.0, 10165.0], [698.0, 8597.0], [700.0, 9346.5], [692.0, 9992.0], [702.0, 9442.5], [688.0, 10412.0], [676.0, 8632.0], [696.0, 10913.0], [678.0, 10028.5], [674.0, 10366.5], [672.0, 8926.0], [686.0, 9444.0], [684.0, 8577.5], [682.0, 8811.0], [680.0, 8502.0], [694.0, 8775.333333333334], [690.0, 10025.0], [728.0, 10165.0], [734.0, 9552.0], [722.0, 9126.0], [732.0, 10002.0], [704.0, 9879.125], [706.0, 9511.5], [710.0, 9630.0], [718.0, 9861.0], [716.0, 9871.0], [714.0, 9863.0], [712.0, 9484.0], [726.0, 9246.0], [724.0, 9551.0], [740.0, 9168.5], [756.0, 9787.0], [752.0, 8505.0], [762.0, 8834.333333333334], [736.0, 8057.0], [742.0, 10192.4], [750.0, 8597.0], [746.0, 10057.5], [744.0, 9613.0], [758.0, 9060.0], [754.0, 9422.0], [794.0, 8874.0], [796.0, 9600.0], [784.0, 8901.0], [786.0, 7988.0], [792.0, 10066.0], [768.0, 9167.0], [772.0, 9255.0], [782.0, 7755.0], [780.0, 8529.0], [790.0, 9522.5], [788.0, 7627.0], [828.0, 7645.0], [818.0, 8240.0], [820.0, 8499.0], [830.0, 8889.0], [826.0, 8831.5], [824.0, 9721.0], [802.0, 9924.5], [800.0, 9455.0], [806.0, 8214.333333333334], [814.0, 8495.0], [810.0, 9143.0], [812.0, 8980.965517241379], [808.0, 9051.0], [822.0, 8374.0], [860.0, 8301.0], [848.0, 9878.0], [850.0, 9388.0], [852.0, 9671.0], [862.0, 7865.0], [858.0, 7604.0], [856.0, 7572.0], [834.0, 8174.0], [836.0, 8727.0], [838.0, 7480.0], [846.0, 7905.0], [844.0, 9963.0], [842.0, 8472.0], [840.0, 8387.0], [854.0, 9385.0], [888.0, 7733.0], [892.0, 9375.0], [894.0, 8778.5], [890.0, 8088.5], [868.0, 8976.5], [870.0, 7865.0], [878.0, 9841.0], [866.0, 8910.368421052632], [876.0, 9048.0], [874.0, 8148.0], [886.0, 8051.0], [880.0, 9489.0], [920.0, 8660.0], [926.0, 8061.0], [924.0, 8118.0], [912.0, 8718.0], [914.0, 8764.5], [898.0, 8921.333333333334], [896.0, 9040.5], [900.0, 8576.0], [902.0, 8451.0], [906.0, 9005.75], [904.0, 7422.0], [910.0, 9026.333333333334], [918.0, 8616.5], [916.0, 8820.0], [958.0, 7142.0], [946.0, 8404.75], [944.0, 9524.0], [956.0, 8161.0], [954.0, 7863.0], [930.0, 8636.5], [934.0, 9410.5], [936.0, 8391.0], [938.0, 8995.0], [942.0, 9170.0], [950.0, 8397.333333333334], [948.0, 9523.0], [962.0, 8503.0], [988.0, 8115.333333333334], [960.0, 9213.0], [966.0, 8604.333333333334], [984.0, 8852.0], [974.0, 8863.0], [968.0, 7847.0], [980.0, 8512.0], [982.0, 8675.0], [976.0, 7999.5], [1018.0, 7716.0], [1020.0, 8754.0], [1006.0, 7928.5], [1004.0, 8806.0], [992.0, 7847.0], [994.0, 9053.0], [998.0, 8253.2], [1002.0, 7432.0], [1000.0, 8795.0], [1014.0, 8965.0], [1010.0, 9034.0], [1008.0, 8777.0], [1022.0, 8434.0], [1076.0, 7719.5], [1060.0, 8527.5], [1064.0, 7996.0], [1068.0, 8437.5], [1080.0, 8333.666666666666], [1056.0, 8014.0], [1072.0, 8080.0], [1024.0, 7550.0], [1028.0, 7318.5], [1032.0, 8003.75], [1036.0, 8921.5], [1044.0, 8129.5], [1040.0, 8625.0], [1048.0, 7933.5], [1052.0, 7877.0], [1140.0, 7958.0], [1136.0, 7789.5], [1124.0, 8620.0], [1128.0, 8799.0], [1144.0, 8154.5], [1148.0, 8491.0], [1120.0, 8663.5], [1100.0, 7575.666666666667], [1092.0, 7911.333333333333], [1096.0, 8432.0], [1088.0, 7948.0], [1116.0, 7063.0], [1112.0, 8245.333333333334], [1108.0, 7545.25], [1104.0, 8564.0], [1208.0, 7217.5], [1212.0, 8864.0], [1184.0, 7744.0], [1188.0, 6624.0], [1196.0, 6938.5], [1192.0, 7403.0], [1204.0, 7645.666666666667], [1200.0, 7196.0], [1160.0, 6862.0], [1164.0, 7043.5], [1180.0, 7494.75], [1156.0, 8463.5], [1152.0, 8484.0], [1176.0, 7715.5], [1168.0, 7331.5], [1172.0, 6568.0], [1228.0, 7790.0], [1276.0, 7089.5], [1256.0, 6919.0], [1248.0, 7407.0], [1264.0, 6208.0], [1224.0, 7485.0], [1220.0, 7676.333333333333], [1236.0, 6698.0], [1232.0, 6291.5], [1240.0, 6496.0], [1332.0, 7009.0], [1316.0, 8506.0], [1320.0, 6691.5], [1324.0, 6085.5], [1340.0, 6428.0], [1312.0, 7287.0], [1328.0, 6969.0], [1292.0, 6807.0], [1288.0, 6876.666666666667], [1284.0, 7599.0], [1280.0, 6872.5], [1308.0, 6318.0], [1304.0, 6862.75], [1300.0, 7170.5], [1296.0, 7104.0], [1404.0, 6073.0], [1376.0, 6645.0], [1380.0, 4736.0], [1384.0, 7474.0], [1388.0, 5998.333333333333], [1400.0, 5897.0], [1396.0, 6821.0], [1392.0, 5582.5], [1344.0, 6762.333333333333], [1348.0, 7477.0], [1352.0, 6269.25], [1356.0, 5232.0], [1372.0, 6716.0], [1364.0, 7613.0], [1360.0, 7034.0], [1464.0, 6347.0], [1468.0, 5059.5], [1448.0, 6916.5], [1444.0, 7414.0], [1452.0, 5875.666666666667], [1460.0, 6430.0], [1420.0, 5748.0], [1416.0, 5522.5], [1412.0, 5601.0], [1408.0, 6572.5], [1436.0, 5439.0], [1432.0, 5424.5], [1428.0, 5697.0], [1424.0, 7056.666666666667], [1524.0, 5622.5], [1504.0, 7802.0], [1508.0, 5285.0], [1512.0, 6867.0], [1532.0, 5446.0], [1484.0, 4968.5], [1480.0, 6455.0], [1476.0, 6756.0], [1472.0, 5789.0], [1500.0, 6057.0], [1488.0, 5899.0], [1596.0, 4129.0], [1576.0, 5898.5], [1568.0, 5525.0], [1572.0, 5463.666666666667], [1580.0, 5454.0], [1592.0, 6333.0], [1588.0, 7004.0], [1536.0, 6601.8], [1540.0, 6347.0], [1544.0, 5341.0], [1548.0, 5481.0], [1584.0, 6715.0], [1564.0, 5421.0], [1560.0, 5333.5], [1632.0, 4089.0], [1644.0, 4259.0], [1640.0, 6250.0], [1636.0, 5228.0], [1660.0, 4749.0], [1656.0, 5329.0], [1652.0, 4701.0], [1648.0, 5418.5], [1612.0, 4175.0], [1608.0, 4762.25], [1604.0, 6155.0], [1600.0, 5491.5], [1628.0, 5948.0], [1624.0, 5420.0], [1620.0, 5817.333333333333], [1616.0, 5878.5], [1720.0, 4077.0], [1700.0, 4420.0], [1704.0, 4701.0], [1708.0, 5148.666666666667], [1724.0, 4734.0], [1716.0, 5793.0], [1712.0, 4444.5], [1676.0, 5470.0], [1672.0, 6733.5], [1668.0, 5091.5], [1664.0, 4355.0], [1692.0, 5605.0], [1688.0, 5351.0], [1684.0, 5161.0], [1760.0, 4445.0], [1772.0, 4494.0], [1768.0, 5436.0], [1764.0, 5510.0], [1788.0, 5276.0], [1784.0, 5015.0], [1780.0, 6117.0], [1776.0, 4723.0], [1756.0, 5440.0], [1728.0, 5542.0], [1736.0, 4633.0], [1732.0, 4485.5], [1752.0, 4570.0], [1748.0, 5835.0], [1744.0, 5117.666666666667], [1852.0, 4620.0], [1840.0, 3635.166666666667], [1824.0, 4904.5], [1828.0, 5822.0], [1832.0, 3919.75], [1836.0, 5343.0], [1844.0, 3757.6666666666665], [1792.0, 5087.333333333333], [1800.0, 4593.0], [1804.0, 5112.5], [1820.0, 4811.333333333333], [1816.0, 5246.0], [1812.0, 3888.0], [1808.0, 5357.0], [1908.0, 5691.666666666667], [1896.0, 4427.0], [1892.0, 5133.0], [1900.0, 5314.5], [1916.0, 5462.0], [1856.0, 5526.0], [1880.0, 5888.0], [1860.0, 4224.666666666667], [1868.0, 4090.0], [1904.0, 4996.0], [1872.0, 4504.0], [1876.0, 5131.333333333333], [1972.0, 3630.25], [1968.0, 5189.0], [1980.0, 4349.2], [1952.0, 4999.0], [1956.0, 4952.0], [1960.0, 3579.0], [1964.0, 4057.75], [1976.0, 2963.5], [1920.0, 4591.4], [1928.0, 5092.0], [1948.0, 3700.0], [1944.0, 5286.142857142857], [1940.0, 4887.75], [1936.0, 4920.0], [2000.0, 3450.0], [1984.0, 3833.5], [1992.0, 3633.0], [1988.0, 3616.4285714285716], [1077.0, 8727.5], [1057.0, 7723.0], [1065.0, 7898.666666666667], [1069.0, 7347.666666666667], [1085.0, 8218.0], [1081.0, 8475.0], [1073.0, 8193.0], [1025.0, 8029.0], [1029.0, 8412.0], [1037.0, 7597.0], [1049.0, 8908.0], [1041.0, 8504.0], [1045.0, 7750.0], [1145.0, 8000.5], [1149.0, 7878.0], [1121.0, 8750.0], [1125.0, 8149.0], [1129.0, 7550.0], [1133.0, 7863.5], [1141.0, 8402.0], [1137.0, 7180.333333333333], [1101.0, 7804.0], [1097.0, 7896.0], [1093.0, 8225.333333333334], [1117.0, 7451.5], [1113.0, 6611.0], [1213.0, 7260.5], [1185.0, 7453.0], [1189.0, 7200.285714285715], [1193.0, 7180.666666666667], [1197.0, 5617.0], [1209.0, 7301.0], [1205.0, 7618.666666666667], [1201.0, 7516.0], [1153.0, 8408.5], [1157.0, 7403.333333333333], [1161.0, 7943.333333333333], [1165.0, 7631.0], [1181.0, 8616.0], [1177.0, 8368.0], [1173.0, 7891.0], [1169.0, 7144.0], [1269.0, 7985.5], [1273.0, 6763.0], [1277.0, 7377.0], [1249.0, 7726.5], [1253.0, 6852.9333333333325], [1261.0, 6887.0], [1257.0, 7875.0], [1265.0, 7269.5], [1229.0, 7046.2], [1225.0, 7449.333333333333], [1221.0, 7639.0], [1241.0, 7821.0], [1245.0, 7435.0], [1217.0, 7502.5], [1233.0, 6875.0], [1341.0, 6401.0], [1317.0, 6619.666666666667], [1313.0, 7691.0], [1321.0, 6935.333333333333], [1325.0, 7122.0], [1337.0, 6894.666666666667], [1333.0, 6238.0], [1329.0, 6562.75], [1293.0, 8100.0], [1289.0, 7579.0], [1285.0, 6691.0], [1281.0, 6861.0], [1309.0, 7376.5], [1305.0, 5265.0], [1301.0, 6148.0], [1297.0, 7721.0], [1401.0, 5649.0], [1405.0, 6737.0], [1377.0, 7816.0], [1381.0, 6132.0], [1389.0, 6628.5], [1397.0, 6286.0], [1393.0, 5816.5], [1345.0, 7798.0], [1349.0, 6418.0], [1353.0, 5947.0], [1357.0, 7021.5], [1369.0, 7124.666666666667], [1365.0, 7042.0], [1361.0, 6947.0], [1469.0, 6688.0], [1449.0, 5976.0], [1453.0, 6675.0], [1441.0, 5930.0], [1465.0, 5922.0], [1461.0, 5909.5], [1457.0, 6544.0], [1421.0, 7167.0], [1417.0, 6199.0], [1413.0, 5678.0], [1409.0, 5913.5], [1437.0, 6910.0], [1433.0, 6571.666666666667], [1425.0, 5528.0], [1525.0, 6449.5], [1533.0, 6285.5], [1505.0, 6388.666666666667], [1509.0, 4908.0], [1517.0, 6158.333333333333], [1529.0, 6401.0], [1521.0, 5851.5], [1485.0, 6244.666666666667], [1481.0, 6083.000000000001], [1473.0, 6752.5], [1501.0, 6689.5], [1497.0, 5557.5], [1489.0, 4599.0], [1493.0, 5690.0], [1593.0, 6669.0], [1569.0, 6102.5], [1573.0, 6450.0], [1577.0, 5803.0], [1581.0, 5523.0], [1589.0, 5726.0], [1585.0, 5441.5], [1537.0, 6177.5], [1541.0, 5677.0], [1549.0, 6007.0], [1561.0, 5296.0], [1557.0, 6122.5], [1553.0, 5656.5], [1661.0, 5272.0], [1637.0, 5098.333333333333], [1633.0, 6270.5], [1641.0, 6368.0], [1645.0, 4402.5], [1657.0, 6732.0], [1653.0, 5121.666666666667], [1649.0, 5249.0], [1613.0, 6145.0], [1605.0, 4680.5], [1601.0, 5761.5], [1629.0, 7138.0], [1625.0, 5860.0], [1621.0, 5268.0], [1617.0, 5335.0], [1721.0, 5663.666666666667], [1717.0, 6180.0], [1725.0, 5439.0], [1697.0, 5629.0], [1701.0, 4740.0], [1709.0, 4175.0], [1713.0, 4618.5], [1677.0, 5437.0], [1673.0, 6082.0], [1669.0, 6550.0], [1665.0, 5195.5], [1693.0, 5479.0], [1689.0, 5644.0], [1685.0, 4998.666666666667], [1681.0, 5365.2], [1733.0, 4046.6666666666665], [1781.0, 5620.25], [1777.0, 5012.0], [1769.0, 5622.5], [1765.0, 5754.5], [1789.0, 3952.0], [1729.0, 4903.0], [1757.0, 5807.0], [1737.0, 4659.666666666667], [1741.0, 5588.571428571428], [1749.0, 5099.0], [1745.0, 5588.0], [1753.0, 5389.0], [1773.0, 5540.333333333334], [1849.0, 5008.0], [1825.0, 4008.0], [1829.0, 4858.0], [1833.0, 4386.5], [1853.0, 4421.333333333333], [1845.0, 4388.0], [1821.0, 4884.0], [1797.0, 5011.0], [1805.0, 4041.0], [1817.0, 4639.0], [1813.0, 5489.5], [1837.0, 4160.75], [1913.0, 4750.0], [1917.0, 4887.333333333333], [1889.0, 4564.666666666667], [1897.0, 5512.0], [1909.0, 5336.0], [1857.0, 5039.5], [1861.0, 4261.0], [1865.0, 4029.75], [1869.0, 5449.5], [1905.0, 4971.0], [1881.0, 4840.5], [1901.0, 4728.0], [1969.0, 3096.0], [1957.0, 4778.0], [1921.0, 4300.5], [1929.0, 4705.166666666667], [1933.0, 4994.0], [1937.0, 5014.25], [1945.0, 4412.0], [1993.0, 4035.0], [1985.0, 4134.727272727273], [1989.0, 4431.0], [1997.0, 4577.0], [543.0, 10341.8], [519.0, 10104.0], [537.0, 9150.5], [539.0, 10639.0], [515.0, 10250.333333333334], [517.0, 10755.0], [513.0, 10161.5], [535.0, 10393.0], [533.0, 10114.0], [531.0, 11010.0], [525.0, 10314.75], [521.0, 9982.5], [573.0, 10158.625], [567.0, 9644.0], [559.0, 9566.0], [545.0, 10482.0], [549.0, 9387.0], [557.0, 10124.5], [555.0, 10146.0], [553.0, 10610.0], [575.0, 10084.5], [565.0, 9755.0], [561.0, 10320.0], [603.0, 9402.0], [607.0, 9464.333333333334], [595.0, 10203.0], [593.0, 9316.333333333334], [601.0, 10361.666666666666], [591.0, 8803.0], [577.0, 9555.0], [579.0, 9935.5], [581.0, 9722.0], [589.0, 9552.0], [585.0, 10327.0], [599.0, 9907.5], [597.0, 10870.0], [633.0, 9319.8], [639.0, 8853.0], [625.0, 9729.333333333334], [627.0, 8695.0], [635.0, 10404.5], [637.0, 10537.0], [623.0, 9603.0], [609.0, 10141.75], [615.0, 9886.0], [613.0, 10251.0], [619.0, 9149.333333333334], [617.0, 9501.0], [631.0, 9930.0], [629.0, 9091.5], [645.0, 8949.333333333334], [671.0, 8825.0], [669.0, 8986.0], [667.0, 8600.5], [665.0, 8440.5], [655.0, 9279.0], [641.0, 8922.0], [643.0, 10175.0], [647.0, 10416.75], [653.0, 8955.0], [649.0, 9584.0], [663.0, 8943.5], [661.0, 10068.333333333334], [657.0, 9076.0], [659.0, 10266.2], [689.0, 9850.0], [679.0, 10473.0], [703.0, 10449.0], [697.0, 9272.0], [677.0, 9112.0], [675.0, 10505.0], [687.0, 10391.5], [681.0, 10174.285714285714], [695.0, 9555.5], [693.0, 8802.0], [691.0, 9867.0], [729.0, 8585.5], [735.0, 8715.0], [721.0, 9256.6], [731.0, 9210.666666666666], [719.0, 9147.0], [707.0, 10480.0], [705.0, 10009.0], [709.0, 9630.333333333334], [711.0, 9230.5], [717.0, 8655.0], [715.0, 9505.333333333334], [713.0, 9517.0], [727.0, 9736.5], [725.0, 10171.0], [723.0, 10019.666666666666], [763.0, 9543.0], [765.0, 9046.5], [767.0, 8706.0], [753.0, 7835.0], [751.0, 10019.0], [739.0, 9719.0], [737.0, 8938.0], [741.0, 9181.0], [743.0, 10258.0], [749.0, 8582.5], [747.0, 9256.0], [745.0, 10212.5], [759.0, 8579.0], [757.0, 10040.0], [755.0, 9961.0], [793.0, 7642.0], [797.0, 9559.0], [785.0, 8743.0], [795.0, 7730.0], [783.0, 8490.0], [771.0, 8767.333333333334], [775.0, 9054.666666666666], [781.0, 8111.0], [791.0, 8793.0], [787.0, 9961.0], [829.0, 9266.2], [831.0, 8466.25], [817.0, 10000.0], [821.0, 10086.0], [827.0, 9945.0], [825.0, 8068.0], [815.0, 8283.0], [803.0, 9748.0], [807.0, 10129.5], [811.0, 9573.0], [809.0, 9696.0], [823.0, 9065.0], [861.0, 8504.0], [863.0, 7589.0], [849.0, 9541.5], [851.0, 9602.0], [853.0, 9663.0], [859.0, 8620.0], [857.0, 7590.0], [847.0, 8842.5], [833.0, 8283.0], [837.0, 9197.0], [839.0, 9528.0], [845.0, 8370.0], [843.0, 8730.0], [841.0, 9676.0], [855.0, 7495.0], [865.0, 7852.0], [891.0, 8445.0], [889.0, 8563.0], [879.0, 9840.0], [867.0, 8028.0], [869.0, 8071.0], [871.0, 8853.0], [877.0, 8627.0], [875.0, 8969.111111111111], [873.0, 8439.0], [887.0, 9813.0], [885.0, 8444.5], [883.0, 8822.5], [923.0, 8682.333333333334], [927.0, 8409.0], [915.0, 8494.0], [913.0, 8521.0], [925.0, 8819.0], [921.0, 8550.0], [911.0, 8327.666666666666], [899.0, 8587.25], [903.0, 8853.933333333334], [901.0, 8215.0], [909.0, 8407.0], [907.0, 9544.0], [905.0, 8332.0], [919.0, 8814.5], [917.0, 9047.0], [957.0, 9288.0], [959.0, 9281.75], [945.0, 8892.75], [949.0, 7511.333333333333], [955.0, 8082.0], [953.0, 9106.5], [933.0, 8500.5], [931.0, 8354.0], [929.0, 8993.333333333334], [943.0, 8665.0], [941.0, 8196.0], [937.0, 9290.0], [951.0, 7166.0], [985.0, 7696.5], [979.0, 7987.5], [991.0, 8236.333333333334], [989.0, 7544.666666666667], [975.0, 8317.333333333334], [961.0, 8107.75], [965.0, 8737.0], [963.0, 9456.0], [967.0, 8720.25], [973.0, 8826.5], [971.0, 8836.0], [969.0, 8275.0], [983.0, 8426.666666666666], [981.0, 8630.0], [977.0, 8317.0], [1017.0, 8766.75], [1021.0, 7313.0], [1023.0, 8380.333333333334], [1011.0, 8747.0], [1019.0, 8771.666666666666], [993.0, 8009.0], [995.0, 8396.0], [999.0, 8325.666666666666], [997.0, 8132.0], [1005.0, 8014.75], [1007.0, 8777.0], [1001.0, 7010.0], [1003.0, 8512.0], [1015.0, 8294.0], [1013.0, 8573.875], [1074.0, 8732.0], [1058.0, 7327.0], [1062.0, 8150.333333333333], [1066.0, 7807.666666666667], [1086.0, 7576.25], [1078.0, 8656.0], [1054.0, 8451.8], [1026.0, 7830.0], [1030.0, 7180.0], [1034.0, 8112.5], [1050.0, 7891.5], [1046.0, 7679.666666666667], [1042.0, 7237.0], [1102.0, 8060.0], [1142.0, 7994.0], [1126.0, 8268.0], [1146.0, 7998.0], [1122.0, 7621.0], [1150.0, 8489.5], [1130.0, 7370.0], [1134.0, 8484.4], [1098.0, 8377.666666666666], [1094.0, 8631.0], [1090.0, 7944.8], [1118.0, 8485.0], [1114.0, 7268.0], [1110.0, 8191.5], [1106.0, 8371.0], [1214.0, 7373.666666666667], [1190.0, 7496.333333333333], [1186.0, 7165.333333333333], [1194.0, 6520.0], [1198.0, 7813.666666666667], [1158.0, 8022.0], [1162.0, 6670.5], [1166.0, 7897.5], [1210.0, 8136.0], [1202.0, 7590.0], [1182.0, 7378.0], [1178.0, 7554.0], [1174.0, 7487.0], [1170.0, 7011.666666666667], [1274.0, 7407.0], [1266.0, 7100.0], [1250.0, 7782.0], [1254.0, 6004.5], [1258.0, 6412.0], [1278.0, 6999.5], [1270.0, 7872.0], [1230.0, 6674.5], [1226.0, 7485.0], [1218.0, 7696.75], [1222.0, 6565.0], [1246.0, 7728.0], [1242.0, 6928.0], [1238.0, 6811.666666666667], [1234.0, 6440.0], [1334.0, 6536.5], [1342.0, 6786.666666666667], [1314.0, 7513.666666666667], [1322.0, 7003.0], [1318.0, 6777.0], [1338.0, 6354.333333333333], [1330.0, 6307.0], [1294.0, 6757.333333333333], [1290.0, 6075.0], [1286.0, 6847.0], [1282.0, 7859.666666666667], [1310.0, 5516.5], [1306.0, 6837.0], [1302.0, 6861.0], [1298.0, 7062.25], [1402.0, 6638.0], [1398.0, 7660.0], [1382.0, 6842.0], [1378.0, 5667.0], [1386.0, 6464.5], [1390.0, 7527.5], [1406.0, 4615.0], [1394.0, 5964.5], [1346.0, 6444.666666666667], [1350.0, 6915.0], [1354.0, 6445.0], [1358.0, 4820.0], [1374.0, 6552.6], [1370.0, 7341.6], [1466.0, 5785.666666666667], [1470.0, 5409.666666666667], [1442.0, 6037.0], [1446.0, 6745.5], [1450.0, 5386.5], [1454.0, 6195.0], [1462.0, 6026.5], [1458.0, 5830.5], [1422.0, 4852.0], [1414.0, 6693.333333333333], [1410.0, 6786.5], [1438.0, 6920.0], [1434.0, 6095.5], [1430.0, 7329.0], [1426.0, 6050.0], [1530.0, 6539.0], [1510.0, 6029.0], [1514.0, 6166.0], [1518.0, 5821.75], [1534.0, 5523.0], [1526.0, 6472.0], [1522.0, 5957.0], [1486.0, 7897.0], [1482.0, 6402.666666666667], [1478.0, 6291.0], [1474.0, 5842.0], [1494.0, 6824.0], [1490.0, 7032.666666666667], [1594.0, 5374.0], [1590.0, 5785.0], [1570.0, 6310.5], [1574.0, 6593.666666666667], [1578.0, 5212.666666666667], [1582.0, 5337.8], [1598.0, 5464.2], [1538.0, 5559.0], [1542.0, 5516.666666666667], [1546.0, 6755.5], [1550.0, 6081.0], [1586.0, 4282.0], [1566.0, 6185.666666666667], [1562.0, 6076.5], [1558.0, 6285.0], [1654.0, 5741.0], [1650.0, 4726.333333333333], [1662.0, 4837.5], [1634.0, 5793.75], [1642.0, 4036.5], [1646.0, 4752.0], [1658.0, 5046.6], [1614.0, 6607.0], [1610.0, 6506.0], [1606.0, 6140.0], [1630.0, 4254.75], [1626.0, 6416.0], [1622.0, 5226.0], [1618.0, 5520.5], [1722.0, 4383.0], [1698.0, 4717.5], [1702.0, 5922.333333333333], [1706.0, 5632.333333333333], [1710.0, 5063.0], [1718.0, 5380.0], [1714.0, 4866.0], [1678.0, 4602.75], [1674.0, 5096.5], [1670.0, 4268.5], [1666.0, 5358.0], [1694.0, 4890.5], [1690.0, 6050.0], [1686.0, 4970.0], [1682.0, 5386.0], [1786.0, 4527.666666666667], [1782.0, 5442.0], [1790.0, 5002.0], [1762.0, 5722.0], [1770.0, 5399.5], [1766.0, 5500.0], [1778.0, 5785.0], [1742.0, 4373.0], [1730.0, 5788.666666666667], [1758.0, 5739.0], [1734.0, 4144.0], [1738.0, 5293.0], [1754.0, 5960.333333333333], [1746.0, 5123.0], [1846.0, 5236.6], [1854.0, 5782.0], [1850.0, 4656.0], [1826.0, 4081.0], [1830.0, 3883.0], [1834.0, 4555.0], [1822.0, 4254.0], [1794.0, 5241.0], [1798.0, 3908.0], [1802.0, 5679.0], [1806.0, 6173.0], [1814.0, 4382.0], [1810.0, 5149.25], [1914.0, 4841.333333333333], [1894.0, 5594.285714285714], [1898.0, 4349.5], [1918.0, 4027.0], [1910.0, 5249.75], [1906.0, 5261.5], [1886.0, 4748.0], [1858.0, 4685.4], [1882.0, 5896.0], [1870.0, 4909.0], [1866.0, 4230.0], [1878.0, 4700.0], [1874.0, 4558.5], [1974.0, 4790.0], [1954.0, 5011.75], [1982.0, 3355.3333333333335], [1962.0, 3000.0], [1970.0, 4686.0], [1950.0, 4986.0], [1922.0, 5184.25], [1926.0, 5469.0], [1934.0, 5083.25], [1930.0, 5259.0], [1946.0, 3534.5], [1938.0, 5717.666666666667], [1966.0, 4235.333333333333], [1990.0, 4533.0], [1994.0, 3175.0], [1998.0, 3282.5], [1986.0, 4177.333333333333], [1079.0, 8696.5], [1083.0, 8452.0], [1087.0, 7944.0], [1059.0, 8205.666666666666], [1063.0, 8762.0], [1067.0, 9280.0], [1071.0, 7595.666666666667], [1075.0, 7884.8], [1027.0, 8410.666666666666], [1031.0, 7855.0], [1035.0, 7559.0], [1039.0, 8814.8], [1051.0, 8792.0], [1047.0, 6807.0], [1043.0, 8293.666666666666], [1147.0, 8016.5], [1151.0, 7933.0], [1123.0, 7020.0], [1127.0, 8489.0], [1131.0, 7514.2], [1135.0, 7509.0], [1143.0, 8073.0], [1139.0, 7321.333333333333], [1103.0, 7255.5], [1099.0, 8708.0], [1095.0, 6971.0], [1119.0, 8417.0], [1115.0, 7776.666666666667], [1111.0, 8993.0], [1107.0, 7127.0], [1211.0, 7649.666666666667], [1207.0, 7195.6], [1215.0, 7367.0], [1187.0, 7367.0], [1191.0, 7190.5], [1195.0, 7325.0], [1199.0, 6929.0], [1183.0, 7608.0], [1155.0, 7796.0], [1167.0, 7009.333333333333], [1159.0, 7216.0], [1179.0, 7536.333333333333], [1175.0, 7745.0], [1171.0, 7245.0], [1279.0, 7435.666666666667], [1275.0, 6521.0], [1251.0, 7904.0], [1255.0, 7522.5], [1259.0, 6514.0], [1263.0, 6938.8], [1271.0, 6711.5], [1267.0, 7095.5], [1231.0, 7956.0], [1223.0, 7724.333333333333], [1219.0, 6219.0], [1247.0, 7006.0], [1243.0, 7038.0], [1239.0, 8369.5], [1235.0, 8539.0], [1335.0, 6853.333333333333], [1339.0, 6525.5], [1343.0, 6087.0], [1315.0, 6722.0], [1319.0, 6651.5], [1323.0, 6879.333333333333], [1327.0, 7344.0], [1331.0, 6139.25], [1295.0, 7921.0], [1291.0, 5792.5], [1287.0, 6798.0], [1283.0, 6541.0], [1311.0, 6599.333333333333], [1307.0, 6387.5], [1299.0, 7285.5], [1303.0, 7733.0], [1407.0, 6503.0], [1399.0, 6369.5], [1379.0, 6584.75], [1387.0, 7016.2], [1383.0, 6418.0], [1391.0, 5361.5], [1403.0, 6851.0], [1395.0, 5591.5], [1375.0, 6212.666666666667], [1347.0, 7117.5], [1355.0, 5645.5], [1359.0, 7696.5], [1367.0, 6238.0], [1363.0, 7720.5], [1467.0, 6274.5], [1463.0, 7019.0], [1443.0, 5698.5], [1447.0, 6518.8], [1451.0, 5528.0], [1455.0, 6381.5], [1423.0, 5604.5], [1419.0, 6892.4], [1415.0, 6919.0], [1411.0, 6220.5], [1439.0, 6242.666666666667], [1435.0, 5578.0], [1431.0, 5788.0], [1531.0, 6028.5], [1507.0, 5881.0], [1515.0, 6561.0], [1511.0, 5573.0], [1527.0, 5107.5], [1523.0, 5308.5], [1487.0, 6077.5], [1479.0, 6235.0], [1475.0, 6237.0], [1503.0, 6524.25], [1499.0, 5932.5], [1495.0, 6485.0], [1491.0, 6839.333333333333], [1591.0, 5053.666666666667], [1595.0, 4904.5], [1599.0, 6869.0], [1571.0, 6054.5], [1579.0, 6241.0], [1583.0, 6890.0], [1587.0, 6178.5], [1567.0, 5859.5], [1539.0, 6048.5], [1543.0, 5924.0], [1547.0, 5563.5], [1551.0, 5924.666666666667], [1563.0, 5283.5], [1559.0, 6420.333333333333], [1555.0, 6196.0], [1659.0, 4295.0], [1655.0, 5703.5], [1635.0, 6712.0], [1639.0, 5612.5], [1643.0, 4564.0], [1647.0, 4551.0], [1651.0, 6044.5], [1615.0, 4743.5], [1607.0, 5164.0], [1611.0, 4165.0], [1603.0, 5940.75], [1631.0, 5141.5], [1627.0, 4758.0], [1623.0, 5883.5], [1619.0, 4154.0], [1727.0, 5910.0], [1703.0, 4697.0], [1723.0, 4836.0], [1699.0, 4752.5], [1707.0, 4407.0], [1711.0, 4556.5], [1719.0, 5642.4], [1715.0, 5287.5], [1679.0, 5174.0], [1675.0, 5021.0], [1671.0, 5617.5], [1667.0, 4256.0], [1695.0, 4723.5], [1691.0, 6089.5], [1687.0, 4737.5], [1683.0, 4838.333333333333], [1779.0, 5733.0], [1743.0, 4339.0], [1767.0, 5959.0], [1771.0, 4839.0], [1791.0, 4417.333333333333], [1787.0, 5555.5], [1783.0, 5300.0], [1731.0, 5435.0], [1759.0, 6211.0], [1735.0, 4345.0], [1755.0, 5659.0], [1751.0, 5245.0], [1747.0, 3977.0], [1775.0, 5344.2], [1803.0, 4875.0], [1851.0, 4859.5], [1847.0, 3833.0], [1827.0, 4252.0], [1819.0, 5822.5], [1795.0, 4762.0], [1799.0, 5181.0], [1807.0, 5039.666666666667], [1843.0, 3620.0], [1815.0, 4389.5], [1835.0, 4349.5], [1907.0, 4226.0], [1911.0, 4995.0], [1891.0, 5529.0], [1899.0, 5043.0], [1895.0, 4422.0], [1863.0, 3867.0], [1867.0, 4648.5], [1871.0, 4795.0], [1883.0, 4624.5], [1879.0, 4484.25], [1875.0, 5081.5], [1903.0, 5484.0], [1975.0, 4344.0], [1971.0, 5424.0], [1963.0, 4935.0], [1983.0, 3834.0], [1955.0, 3785.0], [1927.0, 4929.0], [1923.0, 4945.0], [1947.0, 3692.0], [1939.0, 4562.0], [1967.0, 3708.0], [1995.0, 3352.0], [1991.0, 3839.2499999999995], [1999.0, 2680.6], [1987.0, 3121.0], [1.0, 20486.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[1003.4592500000025, 8302.940249999994]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 17.583333333333332, "minX": 1.63090254E12, "maxY": 2419575.4833333334, "series": [{"data": [[1.6309026E12, 1187.8666666666666], [1.63090254E12, 2419575.4833333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6309026E12, 17.583333333333332], [1.63090254E12, 30818.916666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309026E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8296.008254127059, "minX": 1.63090254E12, "maxY": 22160.0, "series": [{"data": [[1.6309026E12, 22160.0], [1.63090254E12, 8296.008254127059]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309026E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4807.0, "minX": 1.63090254E12, "maxY": 5605.710605302632, "series": [{"data": [[1.6309026E12, 4807.0], [1.63090254E12, 5605.710605302632]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309026E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2973.5, "minX": 1.63090254E12, "maxY": 3535.965732866431, "series": [{"data": [[1.6309026E12, 2973.5], [1.63090254E12, 3535.965732866431]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309026E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2940.0, "minX": 1.63090254E12, "maxY": 22395.0, "series": [{"data": [[1.6309026E12, 22395.0], [1.63090254E12, 19750.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6309026E12, 22395.0], [1.63090254E12, 11352.200000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6309026E12, 22395.0], [1.63090254E12, 16493.72]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6309026E12, 22395.0], [1.63090254E12, 12087.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6309026E12, 21925.0], [1.63090254E12, 2940.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6309026E12, 22160.0], [1.63090254E12, 8427.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309026E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2678.5, "minX": 1.0, "maxY": 21925.0, "series": [{"data": [[3.0, 18155.0], [5.0, 14140.5], [93.0, 16352.0], [99.0, 5187.0], [6.0, 19174.5], [101.0, 11496.0], [8.0, 3281.0], [151.0, 8406.0], [9.0, 14834.0], [190.0, 6782.5], [199.0, 6455.0], [12.0, 15886.0], [224.0, 5185.0], [241.0, 4983.0], [254.0, 10591.5], [269.0, 8626.0], [266.0, 10092.5], [1.0, 21925.0], [18.0, 4103.5], [302.0, 7308.0], [315.0, 8268.0], [332.0, 9396.5], [23.0, 12020.0], [372.0, 5319.5], [425.0, 10878.0], [30.0, 15110.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[23.0, 2678.5], [224.0, 3628.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 425.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 15069.5, "series": [{"data": [[3.0, 4238.0], [5.0, 5082.0], [93.0, 5724.0], [99.0, 4740.0], [6.0, 4330.0], [101.0, 5221.0], [8.0, 3281.0], [151.0, 5770.0], [9.0, 6966.0], [190.0, 4902.5], [199.0, 4956.0], [12.0, 5277.5], [224.0, 4920.0], [241.0, 4843.0], [254.0, 5317.0], [269.0, 7730.0], [266.0, 7714.5], [1.0, 4306.0], [18.0, 2951.0], [302.0, 5228.5], [315.0, 5628.0], [332.0, 5702.5], [23.0, 6375.0], [372.0, 4398.0], [425.0, 7668.0], [30.0, 15069.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[23.0, 0.0], [224.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 425.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 66.66666666666667, "minX": 1.63090254E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63090254E12, 66.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090254E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090254E12, "maxY": 65.45, "series": [{"data": [[1.6309026E12, 0.03333333333333333], [1.63090254E12, 65.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63090254E12, 1.1833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309026E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090254E12, "maxY": 65.45, "series": [{"data": [[1.63090254E12, 1.1833333333333333]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.6309026E12, 0.03333333333333333], [1.63090254E12, 65.45]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309026E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090254E12, "maxY": 65.45, "series": [{"data": [[1.6309026E12, 0.03333333333333333], [1.63090254E12, 65.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63090254E12, 1.1833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309026E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

