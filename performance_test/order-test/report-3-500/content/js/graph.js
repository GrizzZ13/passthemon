/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 19648.0, "series": [{"data": [[0.0, 23.0], [0.1, 25.0], [0.2, 27.0], [0.3, 27.0], [0.4, 29.0], [0.5, 29.0], [0.6, 30.0], [0.7, 30.0], [0.8, 31.0], [0.9, 31.0], [1.0, 31.0], [1.1, 32.0], [1.2, 32.0], [1.3, 33.0], [1.4, 33.0], [1.5, 33.0], [1.6, 34.0], [1.7, 34.0], [1.8, 35.0], [1.9, 35.0], [2.0, 36.0], [2.1, 36.0], [2.2, 36.0], [2.3, 37.0], [2.4, 37.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 39.0], [2.9, 39.0], [3.0, 39.0], [3.1, 40.0], [3.2, 41.0], [3.3, 41.0], [3.4, 42.0], [3.5, 42.0], [3.6, 43.0], [3.7, 43.0], [3.8, 43.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 44.0], [4.3, 45.0], [4.4, 46.0], [4.5, 46.0], [4.6, 47.0], [4.7, 47.0], [4.8, 47.0], [4.9, 48.0], [5.0, 49.0], [5.1, 50.0], [5.2, 51.0], [5.3, 51.0], [5.4, 52.0], [5.5, 52.0], [5.6, 52.0], [5.7, 53.0], [5.8, 53.0], [5.9, 54.0], [6.0, 54.0], [6.1, 55.0], [6.2, 55.0], [6.3, 56.0], [6.4, 56.0], [6.5, 57.0], [6.6, 57.0], [6.7, 57.0], [6.8, 58.0], [6.9, 58.0], [7.0, 59.0], [7.1, 59.0], [7.2, 60.0], [7.3, 60.0], [7.4, 62.0], [7.5, 62.0], [7.6, 63.0], [7.7, 63.0], [7.8, 64.0], [7.9, 64.0], [8.0, 65.0], [8.1, 65.0], [8.2, 66.0], [8.3, 67.0], [8.4, 68.0], [8.5, 68.0], [8.6, 70.0], [8.7, 70.0], [8.8, 70.0], [8.9, 71.0], [9.0, 73.0], [9.1, 73.0], [9.2, 74.0], [9.3, 75.0], [9.4, 76.0], [9.5, 77.0], [9.6, 77.0], [9.7, 78.0], [9.8, 78.0], [9.9, 80.0], [10.0, 80.0], [10.1, 81.0], [10.2, 83.0], [10.3, 85.0], [10.4, 86.0], [10.5, 86.0], [10.6, 87.0], [10.7, 88.0], [10.8, 89.0], [10.9, 89.0], [11.0, 90.0], [11.1, 91.0], [11.2, 92.0], [11.3, 92.0], [11.4, 93.0], [11.5, 94.0], [11.6, 95.0], [11.7, 95.0], [11.8, 96.0], [11.9, 97.0], [12.0, 98.0], [12.1, 99.0], [12.2, 101.0], [12.3, 101.0], [12.4, 103.0], [12.5, 104.0], [12.6, 104.0], [12.7, 104.0], [12.8, 107.0], [12.9, 112.0], [13.0, 112.0], [13.1, 114.0], [13.2, 115.0], [13.3, 116.0], [13.4, 118.0], [13.5, 120.0], [13.6, 121.0], [13.7, 122.0], [13.8, 124.0], [13.9, 124.0], [14.0, 125.0], [14.1, 126.0], [14.2, 127.0], [14.3, 128.0], [14.4, 130.0], [14.5, 132.0], [14.6, 133.0], [14.7, 135.0], [14.8, 137.0], [14.9, 137.0], [15.0, 140.0], [15.1, 140.0], [15.2, 144.0], [15.3, 145.0], [15.4, 147.0], [15.5, 149.0], [15.6, 153.0], [15.7, 154.0], [15.8, 155.0], [15.9, 156.0], [16.0, 158.0], [16.1, 159.0], [16.2, 160.0], [16.3, 161.0], [16.4, 164.0], [16.5, 166.0], [16.6, 168.0], [16.7, 169.0], [16.8, 172.0], [16.9, 174.0], [17.0, 176.0], [17.1, 177.0], [17.2, 181.0], [17.3, 182.0], [17.4, 183.0], [17.5, 185.0], [17.6, 189.0], [17.7, 191.0], [17.8, 195.0], [17.9, 200.0], [18.0, 202.0], [18.1, 203.0], [18.2, 207.0], [18.3, 207.0], [18.4, 209.0], [18.5, 212.0], [18.6, 212.0], [18.7, 214.0], [18.8, 218.0], [18.9, 220.0], [19.0, 222.0], [19.1, 225.0], [19.2, 227.0], [19.3, 229.0], [19.4, 230.0], [19.5, 232.0], [19.6, 234.0], [19.7, 236.0], [19.8, 237.0], [19.9, 238.0], [20.0, 240.0], [20.1, 242.0], [20.2, 246.0], [20.3, 248.0], [20.4, 250.0], [20.5, 250.0], [20.6, 254.0], [20.7, 255.0], [20.8, 256.0], [20.9, 257.0], [21.0, 260.0], [21.1, 261.0], [21.2, 263.0], [21.3, 268.0], [21.4, 271.0], [21.5, 273.0], [21.6, 275.0], [21.7, 276.0], [21.8, 278.0], [21.9, 280.0], [22.0, 281.0], [22.1, 282.0], [22.2, 283.0], [22.3, 284.0], [22.4, 285.0], [22.5, 288.0], [22.6, 289.0], [22.7, 291.0], [22.8, 293.0], [22.9, 294.0], [23.0, 296.0], [23.1, 297.0], [23.2, 299.0], [23.3, 302.0], [23.4, 305.0], [23.5, 308.0], [23.6, 311.0], [23.7, 311.0], [23.8, 313.0], [23.9, 315.0], [24.0, 318.0], [24.1, 320.0], [24.2, 323.0], [24.3, 325.0], [24.4, 329.0], [24.5, 330.0], [24.6, 333.0], [24.7, 334.0], [24.8, 337.0], [24.9, 338.0], [25.0, 339.0], [25.1, 344.0], [25.2, 347.0], [25.3, 349.0], [25.4, 351.0], [25.5, 354.0], [25.6, 355.0], [25.7, 355.0], [25.8, 358.0], [25.9, 359.0], [26.0, 363.0], [26.1, 364.0], [26.2, 364.0], [26.3, 366.0], [26.4, 369.0], [26.5, 371.0], [26.6, 373.0], [26.7, 374.0], [26.8, 377.0], [26.9, 379.0], [27.0, 381.0], [27.1, 385.0], [27.2, 389.0], [27.3, 391.0], [27.4, 393.0], [27.5, 394.0], [27.6, 395.0], [27.7, 396.0], [27.8, 401.0], [27.9, 401.0], [28.0, 407.0], [28.1, 412.0], [28.2, 414.0], [28.3, 417.0], [28.4, 418.0], [28.5, 420.0], [28.6, 424.0], [28.7, 426.0], [28.8, 429.0], [28.9, 431.0], [29.0, 434.0], [29.1, 434.0], [29.2, 438.0], [29.3, 440.0], [29.4, 444.0], [29.5, 446.0], [29.6, 447.0], [29.7, 452.0], [29.8, 455.0], [29.9, 459.0], [30.0, 463.0], [30.1, 464.0], [30.2, 469.0], [30.3, 472.0], [30.4, 474.0], [30.5, 475.0], [30.6, 476.0], [30.7, 476.0], [30.8, 479.0], [30.9, 481.0], [31.0, 484.0], [31.1, 489.0], [31.2, 491.0], [31.3, 492.0], [31.4, 494.0], [31.5, 496.0], [31.6, 497.0], [31.7, 504.0], [31.8, 510.0], [31.9, 512.0], [32.0, 513.0], [32.1, 513.0], [32.2, 514.0], [32.3, 517.0], [32.4, 519.0], [32.5, 520.0], [32.6, 521.0], [32.7, 522.0], [32.8, 525.0], [32.9, 526.0], [33.0, 529.0], [33.1, 530.0], [33.2, 534.0], [33.3, 536.0], [33.4, 538.0], [33.5, 539.0], [33.6, 541.0], [33.7, 544.0], [33.8, 546.0], [33.9, 547.0], [34.0, 549.0], [34.1, 550.0], [34.2, 554.0], [34.3, 558.0], [34.4, 561.0], [34.5, 565.0], [34.6, 570.0], [34.7, 573.0], [34.8, 575.0], [34.9, 578.0], [35.0, 579.0], [35.1, 585.0], [35.2, 589.0], [35.3, 592.0], [35.4, 594.0], [35.5, 595.0], [35.6, 597.0], [35.7, 599.0], [35.8, 603.0], [35.9, 606.0], [36.0, 608.0], [36.1, 612.0], [36.2, 614.0], [36.3, 618.0], [36.4, 620.0], [36.5, 623.0], [36.6, 626.0], [36.7, 627.0], [36.8, 630.0], [36.9, 631.0], [37.0, 632.0], [37.1, 635.0], [37.2, 636.0], [37.3, 638.0], [37.4, 640.0], [37.5, 641.0], [37.6, 643.0], [37.7, 646.0], [37.8, 648.0], [37.9, 650.0], [38.0, 651.0], [38.1, 653.0], [38.2, 654.0], [38.3, 656.0], [38.4, 657.0], [38.5, 660.0], [38.6, 661.0], [38.7, 661.0], [38.8, 663.0], [38.9, 664.0], [39.0, 666.0], [39.1, 666.0], [39.2, 668.0], [39.3, 669.0], [39.4, 671.0], [39.5, 672.0], [39.6, 673.0], [39.7, 673.0], [39.8, 675.0], [39.9, 676.0], [40.0, 677.0], [40.1, 679.0], [40.2, 680.0], [40.3, 681.0], [40.4, 681.0], [40.5, 683.0], [40.6, 684.0], [40.7, 685.0], [40.8, 689.0], [40.9, 693.0], [41.0, 693.0], [41.1, 696.0], [41.2, 697.0], [41.3, 700.0], [41.4, 701.0], [41.5, 704.0], [41.6, 706.0], [41.7, 707.0], [41.8, 708.0], [41.9, 710.0], [42.0, 713.0], [42.1, 716.0], [42.2, 717.0], [42.3, 718.0], [42.4, 720.0], [42.5, 724.0], [42.6, 726.0], [42.7, 728.0], [42.8, 731.0], [42.9, 737.0], [43.0, 738.0], [43.1, 743.0], [43.2, 748.0], [43.3, 753.0], [43.4, 754.0], [43.5, 757.0], [43.6, 759.0], [43.7, 760.0], [43.8, 761.0], [43.9, 763.0], [44.0, 767.0], [44.1, 771.0], [44.2, 776.0], [44.3, 779.0], [44.4, 781.0], [44.5, 783.0], [44.6, 787.0], [44.7, 790.0], [44.8, 791.0], [44.9, 792.0], [45.0, 796.0], [45.1, 798.0], [45.2, 799.0], [45.3, 804.0], [45.4, 804.0], [45.5, 806.0], [45.6, 810.0], [45.7, 813.0], [45.8, 818.0], [45.9, 819.0], [46.0, 820.0], [46.1, 824.0], [46.2, 825.0], [46.3, 829.0], [46.4, 837.0], [46.5, 844.0], [46.6, 846.0], [46.7, 851.0], [46.8, 853.0], [46.9, 855.0], [47.0, 858.0], [47.1, 862.0], [47.2, 863.0], [47.3, 866.0], [47.4, 869.0], [47.5, 873.0], [47.6, 878.0], [47.7, 880.0], [47.8, 885.0], [47.9, 893.0], [48.0, 895.0], [48.1, 906.0], [48.2, 907.0], [48.3, 911.0], [48.4, 919.0], [48.5, 923.0], [48.6, 928.0], [48.7, 933.0], [48.8, 935.0], [48.9, 938.0], [49.0, 939.0], [49.1, 945.0], [49.2, 950.0], [49.3, 954.0], [49.4, 956.0], [49.5, 958.0], [49.6, 959.0], [49.7, 964.0], [49.8, 968.0], [49.9, 974.0], [50.0, 976.0], [50.1, 978.0], [50.2, 980.0], [50.3, 984.0], [50.4, 988.0], [50.5, 997.0], [50.6, 1004.0], [50.7, 1010.0], [50.8, 1013.0], [50.9, 1019.0], [51.0, 1023.0], [51.1, 1028.0], [51.2, 1031.0], [51.3, 1037.0], [51.4, 1039.0], [51.5, 1043.0], [51.6, 1044.0], [51.7, 1046.0], [51.8, 1052.0], [51.9, 1054.0], [52.0, 1057.0], [52.1, 1062.0], [52.2, 1067.0], [52.3, 1072.0], [52.4, 1075.0], [52.5, 1076.0], [52.6, 1076.0], [52.7, 1083.0], [52.8, 1089.0], [52.9, 1094.0], [53.0, 1095.0], [53.1, 1097.0], [53.2, 1099.0], [53.3, 1104.0], [53.4, 1106.0], [53.5, 1110.0], [53.6, 1111.0], [53.7, 1118.0], [53.8, 1120.0], [53.9, 1125.0], [54.0, 1129.0], [54.1, 1132.0], [54.2, 1134.0], [54.3, 1146.0], [54.4, 1148.0], [54.5, 1151.0], [54.6, 1157.0], [54.7, 1161.0], [54.8, 1170.0], [54.9, 1175.0], [55.0, 1179.0], [55.1, 1182.0], [55.2, 1184.0], [55.3, 1188.0], [55.4, 1193.0], [55.5, 1198.0], [55.6, 1199.0], [55.7, 1205.0], [55.8, 1209.0], [55.9, 1211.0], [56.0, 1219.0], [56.1, 1222.0], [56.2, 1225.0], [56.3, 1226.0], [56.4, 1229.0], [56.5, 1230.0], [56.6, 1231.0], [56.7, 1237.0], [56.8, 1240.0], [56.9, 1243.0], [57.0, 1249.0], [57.1, 1253.0], [57.2, 1255.0], [57.3, 1259.0], [57.4, 1261.0], [57.5, 1263.0], [57.6, 1268.0], [57.7, 1270.0], [57.8, 1272.0], [57.9, 1280.0], [58.0, 1284.0], [58.1, 1288.0], [58.2, 1291.0], [58.3, 1295.0], [58.4, 1299.0], [58.5, 1300.0], [58.6, 1301.0], [58.7, 1304.0], [58.8, 1309.0], [58.9, 1319.0], [59.0, 1320.0], [59.1, 1327.0], [59.2, 1328.0], [59.3, 1332.0], [59.4, 1338.0], [59.5, 1346.0], [59.6, 1348.0], [59.7, 1353.0], [59.8, 1354.0], [59.9, 1361.0], [60.0, 1366.0], [60.1, 1372.0], [60.2, 1380.0], [60.3, 1390.0], [60.4, 1399.0], [60.5, 1406.0], [60.6, 1408.0], [60.7, 1417.0], [60.8, 1420.0], [60.9, 1427.0], [61.0, 1436.0], [61.1, 1440.0], [61.2, 1445.0], [61.3, 1456.0], [61.4, 1470.0], [61.5, 1473.0], [61.6, 1481.0], [61.7, 1487.0], [61.8, 1493.0], [61.9, 1499.0], [62.0, 1504.0], [62.1, 1508.0], [62.2, 1510.0], [62.3, 1514.0], [62.4, 1516.0], [62.5, 1522.0], [62.6, 1528.0], [62.7, 1532.0], [62.8, 1538.0], [62.9, 1540.0], [63.0, 1541.0], [63.1, 1543.0], [63.2, 1546.0], [63.3, 1551.0], [63.4, 1554.0], [63.5, 1563.0], [63.6, 1566.0], [63.7, 1574.0], [63.8, 1577.0], [63.9, 1583.0], [64.0, 1587.0], [64.1, 1590.0], [64.2, 1596.0], [64.3, 1602.0], [64.4, 1607.0], [64.5, 1611.0], [64.6, 1615.0], [64.7, 1619.0], [64.8, 1622.0], [64.9, 1623.0], [65.0, 1630.0], [65.1, 1637.0], [65.2, 1640.0], [65.3, 1645.0], [65.4, 1648.0], [65.5, 1653.0], [65.6, 1655.0], [65.7, 1663.0], [65.8, 1671.0], [65.9, 1680.0], [66.0, 1681.0], [66.1, 1683.0], [66.2, 1689.0], [66.3, 1692.0], [66.4, 1699.0], [66.5, 1714.0], [66.6, 1716.0], [66.7, 1723.0], [66.8, 1726.0], [66.9, 1741.0], [67.0, 1751.0], [67.1, 1764.0], [67.2, 1769.0], [67.3, 1780.0], [67.4, 1786.0], [67.5, 1794.0], [67.6, 1799.0], [67.7, 1805.0], [67.8, 1808.0], [67.9, 1817.0], [68.0, 1824.0], [68.1, 1826.0], [68.2, 1834.0], [68.3, 1842.0], [68.4, 1849.0], [68.5, 1859.0], [68.6, 1863.0], [68.7, 1874.0], [68.8, 1883.0], [68.9, 1889.0], [69.0, 1893.0], [69.1, 1901.0], [69.2, 1907.0], [69.3, 1915.0], [69.4, 1931.0], [69.5, 1942.0], [69.6, 1955.0], [69.7, 1979.0], [69.8, 1992.0], [69.9, 1998.0], [70.0, 2025.0], [70.1, 2050.0], [70.2, 2060.0], [70.3, 2091.0], [70.4, 2096.0], [70.5, 2113.0], [70.6, 2116.0], [70.7, 2155.0], [70.8, 2179.0], [70.9, 2222.0], [71.0, 2238.0], [71.1, 2248.0], [71.2, 2255.0], [71.3, 2276.0], [71.4, 2280.0], [71.5, 2306.0], [71.6, 2311.0], [71.7, 2329.0], [71.8, 2338.0], [71.9, 2355.0], [72.0, 2359.0], [72.1, 2366.0], [72.2, 2371.0], [72.3, 2375.0], [72.4, 2395.0], [72.5, 2404.0], [72.6, 2411.0], [72.7, 2436.0], [72.8, 2440.0], [72.9, 2444.0], [73.0, 2452.0], [73.1, 2458.0], [73.2, 2472.0], [73.3, 2495.0], [73.4, 2505.0], [73.5, 2517.0], [73.6, 2523.0], [73.7, 2531.0], [73.8, 2539.0], [73.9, 2541.0], [74.0, 2551.0], [74.1, 2558.0], [74.2, 2561.0], [74.3, 2563.0], [74.4, 2567.0], [74.5, 2581.0], [74.6, 2596.0], [74.7, 2599.0], [74.8, 2604.0], [74.9, 2623.0], [75.0, 2629.0], [75.1, 2653.0], [75.2, 2670.0], [75.3, 2711.0], [75.4, 2718.0], [75.5, 2725.0], [75.6, 2730.0], [75.7, 2743.0], [75.8, 2753.0], [75.9, 2777.0], [76.0, 2790.0], [76.1, 2801.0], [76.2, 2810.0], [76.3, 2829.0], [76.4, 2842.0], [76.5, 2873.0], [76.6, 2877.0], [76.7, 2888.0], [76.8, 2900.0], [76.9, 2920.0], [77.0, 2937.0], [77.1, 2960.0], [77.2, 2990.0], [77.3, 3009.0], [77.4, 3022.0], [77.5, 3059.0], [77.6, 3070.0], [77.7, 3106.0], [77.8, 3112.0], [77.9, 3127.0], [78.0, 3136.0], [78.1, 3159.0], [78.2, 3169.0], [78.3, 3179.0], [78.4, 3180.0], [78.5, 3204.0], [78.6, 3211.0], [78.7, 3263.0], [78.8, 3265.0], [78.9, 3290.0], [79.0, 3299.0], [79.1, 3313.0], [79.2, 3324.0], [79.3, 3341.0], [79.4, 3353.0], [79.5, 3375.0], [79.6, 3379.0], [79.7, 3384.0], [79.8, 3405.0], [79.9, 3423.0], [80.0, 3430.0], [80.1, 3441.0], [80.2, 3464.0], [80.3, 3483.0], [80.4, 3498.0], [80.5, 3527.0], [80.6, 3532.0], [80.7, 3544.0], [80.8, 3553.0], [80.9, 3571.0], [81.0, 3599.0], [81.1, 3606.0], [81.2, 3617.0], [81.3, 3650.0], [81.4, 3654.0], [81.5, 3681.0], [81.6, 3688.0], [81.7, 3729.0], [81.8, 3736.0], [81.9, 3747.0], [82.0, 3765.0], [82.1, 3792.0], [82.2, 3803.0], [82.3, 3827.0], [82.4, 3836.0], [82.5, 3847.0], [82.6, 3901.0], [82.7, 3933.0], [82.8, 3957.0], [82.9, 3977.0], [83.0, 3994.0], [83.1, 4010.0], [83.2, 4021.0], [83.3, 4056.0], [83.4, 4075.0], [83.5, 4114.0], [83.6, 4162.0], [83.7, 4168.0], [83.8, 4172.0], [83.9, 4185.0], [84.0, 4191.0], [84.1, 4221.0], [84.2, 4229.0], [84.3, 4237.0], [84.4, 4256.0], [84.5, 4278.0], [84.6, 4297.0], [84.7, 4326.0], [84.8, 4348.0], [84.9, 4364.0], [85.0, 4375.0], [85.1, 4383.0], [85.2, 4394.0], [85.3, 4409.0], [85.4, 4420.0], [85.5, 4477.0], [85.6, 4523.0], [85.7, 4538.0], [85.8, 4556.0], [85.9, 4577.0], [86.0, 4652.0], [86.1, 4716.0], [86.2, 4786.0], [86.3, 4815.0], [86.4, 4843.0], [86.5, 4866.0], [86.6, 4898.0], [86.7, 4931.0], [86.8, 4945.0], [86.9, 4970.0], [87.0, 4988.0], [87.1, 4995.0], [87.2, 5011.0], [87.3, 5028.0], [87.4, 5061.0], [87.5, 5091.0], [87.6, 5118.0], [87.7, 5180.0], [87.8, 5258.0], [87.9, 5270.0], [88.0, 5288.0], [88.1, 5321.0], [88.2, 5381.0], [88.3, 5396.0], [88.4, 5413.0], [88.5, 5432.0], [88.6, 5442.0], [88.7, 5454.0], [88.8, 5461.0], [88.9, 5472.0], [89.0, 5488.0], [89.1, 5499.0], [89.2, 5533.0], [89.3, 5626.0], [89.4, 5701.0], [89.5, 5749.0], [89.6, 5820.0], [89.7, 5851.0], [89.8, 5882.0], [89.9, 6040.0], [90.0, 6150.0], [90.1, 6257.0], [90.2, 6287.0], [90.3, 6348.0], [90.4, 6579.0], [90.5, 6630.0], [90.6, 6822.0], [90.7, 6892.0], [90.8, 7106.0], [90.9, 7272.0], [91.0, 7469.0], [91.1, 7542.0], [91.2, 7633.0], [91.3, 7721.0], [91.4, 7934.0], [91.5, 8089.0], [91.6, 8159.0], [91.7, 8312.0], [91.8, 8609.0], [91.9, 8641.0], [92.0, 8807.0], [92.1, 8921.0], [92.2, 8983.0], [92.3, 9216.0], [92.4, 9309.0], [92.5, 9507.0], [92.6, 9628.0], [92.7, 9667.0], [92.8, 9906.0], [92.9, 9967.0], [93.0, 10054.0], [93.1, 10223.0], [93.2, 10278.0], [93.3, 10415.0], [93.4, 10558.0], [93.5, 10649.0], [93.6, 10819.0], [93.7, 10960.0], [93.8, 11059.0], [93.9, 11306.0], [94.0, 11389.0], [94.1, 11550.0], [94.2, 11619.0], [94.3, 11674.0], [94.4, 11883.0], [94.5, 11967.0], [94.6, 12034.0], [94.7, 12118.0], [94.8, 12341.0], [94.9, 12461.0], [95.0, 12703.0], [95.1, 12749.0], [95.2, 12928.0], [95.3, 12999.0], [95.4, 13109.0], [95.5, 13244.0], [95.6, 13467.0], [95.7, 13505.0], [95.8, 13659.0], [95.9, 13698.0], [96.0, 13856.0], [96.1, 13922.0], [96.2, 14117.0], [96.3, 14343.0], [96.4, 14567.0], [96.5, 14649.0], [96.6, 14755.0], [96.7, 14905.0], [96.8, 15015.0], [96.9, 15078.0], [97.0, 15216.0], [97.1, 15399.0], [97.2, 15494.0], [97.3, 15534.0], [97.4, 15742.0], [97.5, 15849.0], [97.6, 15980.0], [97.7, 16117.0], [97.8, 16393.0], [97.9, 16478.0], [98.0, 16609.0], [98.1, 16728.0], [98.2, 16801.0], [98.3, 16906.0], [98.4, 17074.0], [98.5, 17175.0], [98.6, 17298.0], [98.7, 17448.0], [98.8, 17667.0], [98.9, 17749.0], [99.0, 17960.0], [99.1, 18078.0], [99.2, 18211.0], [99.3, 18341.0], [99.4, 18569.0], [99.5, 18626.0], [99.6, 18750.0], [99.7, 18809.0], [99.8, 18998.0], [99.9, 19279.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 425.0, "series": [{"data": [[0.0, 425.0], [100.0, 201.0], [200.0, 187.0], [300.0, 159.0], [400.0, 136.0], [500.0, 142.0], [600.0, 195.0], [700.0, 137.0], [800.0, 99.0], [900.0, 88.0], [1000.0, 93.0], [1100.0, 84.0], [1200.0, 98.0], [1300.0, 70.0], [1400.0, 53.0], [1500.0, 83.0], [1600.0, 74.0], [1700.0, 42.0], [1800.0, 52.0], [1900.0, 29.0], [2000.0, 18.0], [2100.0, 14.0], [2200.0, 21.0], [2300.0, 36.0], [2400.0, 31.0], [2500.0, 50.0], [2600.0, 18.0], [2700.0, 26.0], [2800.0, 26.0], [2900.0, 17.0], [3000.0, 14.0], [3100.0, 29.0], [3200.0, 18.0], [3300.0, 25.0], [3400.0, 25.0], [3500.0, 21.0], [3700.0, 17.0], [3600.0, 21.0], [3800.0, 16.0], [3900.0, 17.0], [4000.0, 13.0], [4100.0, 20.0], [4200.0, 21.0], [4300.0, 21.0], [4400.0, 11.0], [4500.0, 14.0], [4600.0, 6.0], [4800.0, 14.0], [4700.0, 5.0], [4900.0, 18.0], [5000.0, 15.0], [5100.0, 7.0], [5200.0, 9.0], [5300.0, 10.0], [5400.0, 28.0], [5600.0, 5.0], [5500.0, 5.0], [5800.0, 10.0], [5700.0, 6.0], [6000.0, 5.0], [6100.0, 3.0], [6200.0, 5.0], [6300.0, 4.0], [6400.0, 1.0], [6500.0, 3.0], [6600.0, 3.0], [6700.0, 2.0], [6800.0, 4.0], [6900.0, 2.0], [7100.0, 2.0], [7000.0, 1.0], [7300.0, 1.0], [7200.0, 2.0], [7400.0, 4.0], [7500.0, 4.0], [7600.0, 3.0], [7700.0, 3.0], [7900.0, 2.0], [7800.0, 1.0], [8000.0, 4.0], [8100.0, 5.0], [8300.0, 2.0], [8500.0, 1.0], [8600.0, 5.0], [8400.0, 1.0], [8700.0, 2.0], [8800.0, 2.0], [8900.0, 6.0], [9200.0, 4.0], [9100.0, 2.0], [9300.0, 3.0], [9500.0, 4.0], [9600.0, 5.0], [9700.0, 2.0], [9900.0, 5.0], [10000.0, 4.0], [10200.0, 6.0], [10100.0, 1.0], [10400.0, 3.0], [10500.0, 4.0], [10300.0, 1.0], [10600.0, 3.0], [10700.0, 1.0], [11000.0, 4.0], [10900.0, 3.0], [10800.0, 2.0], [11100.0, 1.0], [11300.0, 5.0], [11500.0, 3.0], [11600.0, 5.0], [11400.0, 2.0], [11700.0, 1.0], [11900.0, 2.0], [11800.0, 5.0], [12000.0, 5.0], [12200.0, 2.0], [12100.0, 1.0], [12300.0, 3.0], [12500.0, 1.0], [12400.0, 2.0], [12700.0, 6.0], [12600.0, 1.0], [12900.0, 5.0], [13000.0, 3.0], [13200.0, 3.0], [13100.0, 3.0], [12800.0, 1.0], [13500.0, 5.0], [13400.0, 2.0], [13700.0, 2.0], [13800.0, 3.0], [13600.0, 5.0], [14000.0, 1.0], [13900.0, 3.0], [14100.0, 3.0], [14300.0, 1.0], [14200.0, 1.0], [14600.0, 4.0], [14400.0, 3.0], [14500.0, 2.0], [14700.0, 2.0], [14800.0, 2.0], [14900.0, 3.0], [15000.0, 6.0], [15200.0, 3.0], [15100.0, 2.0], [15300.0, 1.0], [15400.0, 5.0], [15500.0, 3.0], [15600.0, 2.0], [15800.0, 4.0], [15700.0, 2.0], [15900.0, 2.0], [16000.0, 2.0], [16200.0, 1.0], [16100.0, 1.0], [16300.0, 3.0], [16600.0, 3.0], [16700.0, 4.0], [16400.0, 3.0], [16900.0, 3.0], [17400.0, 3.0], [16500.0, 3.0], [16800.0, 3.0], [17100.0, 5.0], [17000.0, 2.0], [17300.0, 2.0], [17200.0, 2.0], [17600.0, 2.0], [17900.0, 4.0], [18300.0, 4.0], [17700.0, 2.0], [17500.0, 1.0], [18000.0, 5.0], [18200.0, 2.0], [18100.0, 1.0], [18400.0, 1.0], [18600.0, 5.0], [18500.0, 1.0], [19200.0, 2.0], [18700.0, 4.0], [19300.0, 2.0], [19000.0, 1.0], [18800.0, 3.0], [18900.0, 2.0], [19600.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1059.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1333.0, "series": [{"data": [[0.0, 1108.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1059.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1333.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 64.6840000000001, "minX": 1.6308963E12, "maxY": 339.3257328990228, "series": [{"data": [[1.6308963E12, 177.6380000000001]], "isOverall": false, "label": "getOrdersAsBuyerByUserId", "isController": false}, {"data": [[1.6308963E12, 64.6840000000001]], "isOverall": false, "label": "changeOrderStatus", "isController": false}, {"data": [[1.6308963E12, 241.03799999999987]], "isOverall": false, "label": "getOrdersByUserId", "isController": false}, {"data": [[1.6308963E12, 263.23400000000004]], "isOverall": false, "label": "makeOrder", "isController": false}, {"data": [[1.6308963E12, 154.57399999999984]], "isOverall": false, "label": "affirmWants", "isController": false}, {"data": [[1.6308963E12, 174.82400000000013]], "isOverall": false, "label": "getOrdersAsSellerByUserid", "isController": false}, {"data": [[1.6308963E12, 339.3257328990228], [1.63089636E12, 97.02072538860106]], "isOverall": false, "label": "commentAndRateOnOrder", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089636E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 520.2857142857143, "minX": 1.0, "maxY": 8646.5, "series": [{"data": [[2.0, 8646.5], [3.0, 4718.714285714286], [4.0, 5413.8], [5.0, 5620.666666666666], [6.0, 3780.1111111111113], [7.0, 1871.0], [8.0, 6738.625], [9.0, 5411.833333333333], [10.0, 6509.6], [11.0, 2509.818181818182], [12.0, 6652.4], [13.0, 3602.7000000000003], [14.0, 6158.6], [15.0, 4691.666666666667], [16.0, 4204.333333333333], [17.0, 4268.857142857143], [18.0, 5555.166666666667], [19.0, 2375.5], [20.0, 5350.166666666667], [21.0, 4068.875], [22.0, 4389.0], [23.0, 3745.6000000000004], [24.0, 4541.857142857143], [25.0, 4493.142857142857], [26.0, 2943.363636363636], [27.0, 1449.0], [28.0, 2977.769230769231], [29.0, 2871.818181818182], [30.0, 4765.833333333334], [31.0, 3702.5555555555557], [32.0, 4612.571428571428], [33.0, 5043.166666666667], [35.0, 3894.125], [34.0, 3885.375], [36.0, 3128.7], [37.0, 4709.166666666666], [39.0, 2123.8888888888887], [38.0, 4676.666666666666], [40.0, 6899.428571428572], [41.0, 3624.25], [43.0, 1890.0526315789475], [42.0, 3088.777777777778], [45.0, 987.0], [44.0, 3293.5555555555557], [46.0, 1348.25], [47.0, 700.3999999999999], [48.0, 1028.59375], [49.0, 913.4117647058823], [51.0, 1742.1176470588234], [50.0, 1092.4], [52.0, 1185.0], [53.0, 1039.0833333333333], [54.0, 4158.666666666667], [55.0, 3080.6], [57.0, 3516.8888888888887], [56.0, 3533.75], [59.0, 3994.2857142857147], [58.0, 2557.083333333333], [60.0, 2945.909090909091], [61.0, 2481.090909090909], [63.0, 3931.1111111111104], [62.0, 3253.0], [65.0, 3897.285714285714], [64.0, 2980.2], [66.0, 1745.5555555555554], [67.0, 972.2666666666667], [70.0, 2476.6923076923076], [68.0, 1612.5], [71.0, 2578.4444444444443], [69.0, 5603.6], [75.0, 2715.9166666666665], [74.0, 4027.0], [73.0, 3183.6], [72.0, 3147.727272727273], [79.0, 2695.5714285714284], [78.0, 2089.375], [76.0, 2831.2999999999997], [77.0, 3753.666666666667], [83.0, 1820.5714285714284], [81.0, 2465.583333333333], [82.0, 2939.8], [80.0, 2302.3076923076924], [87.0, 2322.583333333333], [86.0, 1845.375], [84.0, 2079.8333333333335], [85.0, 4103.888888888889], [88.0, 2413.3333333333335], [91.0, 1189.6000000000001], [89.0, 1742.4666666666667], [90.0, 3554.5], [93.0, 1542.4666666666667], [94.0, 2797.727272727273], [92.0, 2660.7999999999997], [95.0, 5172.75], [99.0, 2178.214285714286], [97.0, 3309.25], [96.0, 2192.9411764705883], [98.0, 3388.142857142857], [102.0, 1222.391304347826], [100.0, 1033.7391304347825], [101.0, 1468.6363636363635], [103.0, 2487.181818181818], [107.0, 2926.222222222222], [105.0, 2029.230769230769], [104.0, 2642.8999999999996], [106.0, 5062.6], [109.0, 2036.3076923076924], [108.0, 4875.2], [111.0, 2907.0], [110.0, 2194.5384615384614], [112.0, 2133.923076923077], [115.0, 1613.6470588235295], [113.0, 2332.181818181818], [114.0, 3075.625], [118.0, 2026.8461538461538], [116.0, 1603.8125], [117.0, 2530.181818181818], [119.0, 4041.5], [120.0, 3491.7142857142853], [121.0, 3119.125], [123.0, 2824.0], [122.0, 4399.4], [125.0, 4032.833333333333], [127.0, 3551.0], [126.0, 3658.714285714286], [124.0, 2733.7999999999997], [135.0, 3144.25], [134.0, 3818.3333333333335], [133.0, 3453.5714285714284], [132.0, 3563.285714285714], [131.0, 4067.1666666666665], [130.0, 4738.2], [129.0, 4894.2], [128.0, 4778.6], [139.0, 3622.75], [143.0, 3815.6666666666665], [142.0, 4121.5], [140.0, 5860.0], [138.0, 2519.5999999999995], [136.0, 3674.8333333333335], [141.0, 4961.0], [137.0, 5084.25], [150.0, 2657.7142857142853], [149.0, 4668.25], [148.0, 2732.857142857143], [147.0, 4654.0], [146.0, 3457.1428571428573], [145.0, 2985.25], [144.0, 4217.5], [151.0, 4628.0], [155.0, 2047.818181818182], [152.0, 2715.0], [159.0, 3147.4285714285716], [158.0, 4376.444444444444], [157.0, 3630.0], [154.0, 2683.285714285714], [153.0, 3400.636363636364], [156.0, 4974.666666666667], [161.0, 3150.666666666667], [160.0, 2673.6666666666665], [166.0, 2145.909090909091], [165.0, 4430.4], [164.0, 3970.333333333333], [163.0, 5086.25], [162.0, 2775.2], [167.0, 4576.0], [174.0, 2896.25], [169.0, 2452.4545454545455], [168.0, 2482.8888888888887], [171.0, 4091.5], [175.0, 4027.0], [173.0, 3419.666666666667], [172.0, 3367.714285714286], [170.0, 2995.0], [183.0, 2775.625], [181.0, 3462.833333333333], [177.0, 2953.75], [179.0, 3035.1428571428573], [182.0, 4025.4], [180.0, 4115.8], [178.0, 3218.5714285714284], [176.0, 4357.0], [186.0, 3000.875], [185.0, 2853.285714285714], [184.0, 2471.7], [187.0, 2385.666666666667], [191.0, 3529.0], [190.0, 2445.1111111111113], [188.0, 4821.25], [189.0, 3890.0], [198.0, 2138.090909090909], [197.0, 3218.2857142857147], [196.0, 4018.6], [192.0, 3143.857142857143], [199.0, 3986.6], [195.0, 2680.5], [194.0, 2348.666666666667], [193.0, 3941.4], [207.0, 2372.333333333333], [206.0, 4640.75], [205.0, 3345.5], [204.0, 3833.0], [203.0, 3423.166666666667], [202.0, 3834.8], [201.0, 2883.285714285714], [200.0, 3880.8], [215.0, 2605.333333333333], [214.0, 2572.5714285714284], [213.0, 2283.5], [212.0, 2707.285714285714], [211.0, 3197.666666666667], [210.0, 2871.75], [209.0, 2323.5714285714284], [208.0, 3938.8], [222.0, 2605.875], [223.0, 3081.833333333333], [221.0, 3095.166666666667], [220.0, 3543.8], [219.0, 3254.5], [218.0, 3435.833333333333], [217.0, 3728.0], [216.0, 4550.25], [231.0, 2989.0], [230.0, 2853.0], [228.0, 1988.1818181818185], [226.0, 3328.0], [225.0, 2716.5714285714284], [224.0, 3212.5], [229.0, 2921.0], [227.0, 3248.1666666666665], [238.0, 1879.6999999999998], [236.0, 3105.6666666666665], [233.0, 2130.1111111111113], [234.0, 2113.555555555555], [237.0, 2993.1666666666665], [239.0, 2203.8888888888887], [235.0, 2901.666666666667], [232.0, 1923.4], [243.0, 1587.3333333333335], [241.0, 2279.5], [240.0, 1712.4166666666665], [244.0, 1867.9], [245.0, 2942.6666666666665], [246.0, 2650.833333333333], [247.0, 2723.1666666666665], [242.0, 3388.4], [248.0, 3020.8], [255.0, 1288.1666666666667], [254.0, 4887.333333333334], [253.0, 2859.3333333333335], [252.0, 3139.0], [251.0, 2379.0], [250.0, 3855.75], [249.0, 2426.375], [270.0, 1767.0], [271.0, 2403.625], [269.0, 2510.0], [268.0, 3709.5], [267.0, 2753.8333333333335], [266.0, 2889.4], [265.0, 3020.4], [264.0, 2279.0], [263.0, 3650.0], [256.0, 3685.2857142857138], [258.0, 3180.8], [259.0, 2635.0], [257.0, 2363.714285714286], [262.0, 2584.5], [261.0, 3601.0], [260.0, 2155.1428571428573], [286.0, 2750.0], [287.0, 2443.8333333333335], [285.0, 2433.8333333333335], [284.0, 2527.666666666667], [283.0, 2436.833333333333], [282.0, 2776.0], [281.0, 3312.25], [280.0, 2435.8333333333335], [279.0, 2170.5714285714284], [273.0, 2486.666666666667], [272.0, 2335.285714285714], [275.0, 2479.166666666667], [274.0, 3094.4], [278.0, 2242.4285714285716], [277.0, 2562.833333333333], [276.0, 3136.4], [301.0, 1396.2307692307695], [291.0, 2511.166666666667], [292.0, 1621.3333333333335], [296.0, 2010.142857142857], [295.0, 1465.5833333333335], [288.0, 2704.4], [294.0, 2452.4], [290.0, 2400.5], [289.0, 2160.4285714285716], [293.0, 2009.1428571428573], [298.0, 1634.6], [297.0, 3224.75], [299.0, 1985.0], [300.0, 2465.4], [302.0, 1724.625], [303.0, 1894.857142857143], [318.0, 1962.833333333333], [319.0, 1572.111111111111], [312.0, 2268.5], [314.0, 1785.5555555555557], [315.0, 2429.8], [313.0, 1653.2222222222222], [311.0, 1965.8571428571427], [309.0, 1941.2857142857142], [310.0, 1764.875], [308.0, 1921.625], [317.0, 1633.8888888888887], [316.0, 2163.5], [307.0, 2539.0], [306.0, 1794.875], [305.0, 2526.6], [304.0, 2047.0], [333.0, 1815.888888888889], [329.0, 520.2857142857143], [328.0, 1921.3333333333335], [332.0, 1578.0], [323.0, 1838.5555555555557], [322.0, 2425.75], [321.0, 2149.5], [320.0, 1835.875], [335.0, 1249.0], [330.0, 1712.125], [331.0, 1913.5], [334.0, 1718.625], [327.0, 1979.3333333333333], [326.0, 1660.7777777777778], [324.0, 1144.3636363636363], [325.0, 2485.6666666666665], [349.0, 1660.111111111111], [339.0, 1797.6666666666665], [348.0, 1689.8333333333335], [338.0, 869.25], [340.0, 951.0], [341.0, 1302.4545454545455], [343.0, 1074.3809523809523], [337.0, 1360.181818181818], [336.0, 1131.6470588235293], [342.0, 1337.8181818181818], [344.0, 865.1724137931034], [345.0, 1097.0714285714284], [346.0, 1440.5454545454545], [347.0, 1100.8333333333333], [350.0, 1205.5833333333335], [351.0, 1259.5833333333333], [353.0, 989.4705882352941], [352.0, 1236.4545454545455], [354.0, 1429.3333333333335], [357.0, 781.4444444444443], [358.0, 756.5555555555555], [356.0, 2127.8], [355.0, 1299.0], [359.0, 3098.0], [366.0, 4087.0], [367.0, 5516.0], [361.0, 4148.0], [360.0, 4016.5], [363.0, 3995.5], [362.0, 4132.5], [365.0, 3921.0], [364.0, 4126.0], [380.0, 3552.0], [382.0, 2705.333333333333], [383.0, 3513.0], [377.0, 5118.0], [376.0, 4898.0], [381.0, 3548.5], [379.0, 3594.0], [378.0, 2918.75], [375.0, 3720.0], [369.0, 3987.5], [368.0, 3359.666666666667], [371.0, 3955.5], [370.0, 3952.5], [374.0, 3886.5], [373.0, 3782.0], [372.0, 3719.5], [398.0, 3350.5], [384.0, 2206.5], [385.0, 2667.666666666667], [387.0, 3240.0], [386.0, 3607.5], [391.0, 2375.5], [390.0, 4221.0], [389.0, 3367.0], [388.0, 3389.5], [399.0, 3129.0], [392.0, 3324.5], [393.0, 4242.0], [397.0, 3046.5], [396.0, 3250.5], [395.0, 3433.0], [394.0, 3079.0], [414.0, 2573.0], [404.0, 2294.0], [405.0, 2954.0], [407.0, 3244.3333333333335], [400.0, 3103.0], [401.0, 4275.0], [403.0, 2815.0], [402.0, 2818.6666666666665], [406.0, 1723.0], [412.0, 2054.3333333333335], [415.0, 2565.5], [413.0, 2583.0], [411.0, 2802.5], [410.0, 2198.6666666666665], [409.0, 2966.5], [408.0, 2704.0], [431.0, 2248.5], [426.0, 1839.0], [430.0, 2158.5], [429.0, 2304.5], [428.0, 2368.5], [419.0, 2577.5], [418.0, 2606.0], [417.0, 2638.0], [416.0, 2562.0], [427.0, 2333.5], [425.0, 2342.0], [424.0, 2345.0], [423.0, 2351.0], [422.0, 2373.0], [421.0, 2375.0], [420.0, 2485.0], [446.0, 1772.5], [433.0, 1474.25], [432.0, 2123.5], [435.0, 1669.6666666666665], [434.0, 2199.5], [439.0, 2041.0], [438.0, 2109.0], [437.0, 2156.0], [436.0, 2167.5], [447.0, 1754.0], [445.0, 1787.0], [444.0, 1821.5], [443.0, 1841.0], [442.0, 1860.0], [441.0, 1881.5], [440.0, 1903.5], [462.0, 1459.0], [454.0, 1321.6666666666667], [453.0, 1570.0], [452.0, 1737.0], [455.0, 1631.5], [449.0, 1797.0], [448.0, 1826.0], [451.0, 1619.0], [450.0, 1767.5], [463.0, 1431.0], [461.0, 1506.0], [460.0, 1523.5], [459.0, 1557.5], [458.0, 1239.25], [457.0, 1602.5], [456.0, 1629.5], [466.0, 1318.0], [470.0, 1241.5], [469.0, 1144.6666666666667], [468.0, 1592.0], [467.0, 1126.0], [465.0, 1178.5], [464.0, 1398.0], [471.0, 1522.0], [479.0, 1245.0], [473.0, 1441.0], [472.0, 1499.0], [475.0, 1403.0], [474.0, 1410.0], [478.0, 1259.0], [477.0, 1284.0], [476.0, 1309.0], [485.0, 964.0], [484.0, 1043.0], [483.0, 1046.0], [482.0, 1075.0], [481.0, 1157.0], [480.0, 1205.0], [1.0, 2230.166666666667]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[188.82657142857144, 2460.939714285712]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 485.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1061.5, "minX": 1.6308963E12, "maxY": 85193.63333333333, "series": [{"data": [[1.6308963E12, 85193.63333333333], [1.63089636E12, 1061.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6308963E12, 25228.3], [1.63089636E12, 1451.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089636E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1696.1820381009966, "minX": 1.6308963E12, "maxY": 15564.844559585494, "series": [{"data": [[1.6308963E12, 1696.1820381009966], [1.63089636E12, 15564.844559585494]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089636E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1691.0045358330822, "minX": 1.6308963E12, "maxY": 15559.761658031086, "series": [{"data": [[1.6308963E12, 1691.0045358330822], [1.63089636E12, 15559.761658031086]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089636E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11.523316062176159, "minX": 1.6308963E12, "maxY": 28.950408224977345, "series": [{"data": [[1.6308963E12, 28.950408224977345], [1.63089636E12, 11.523316062176159]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089636E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.6308963E12, "maxY": 19648.0, "series": [{"data": [[1.6308963E12, 11978.0], [1.63089636E12, 19648.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6308963E12, 4376.6], [1.63089636E12, 18625.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6308963E12, 10674.400000000001], [1.63089636E12, 19381.04]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6308963E12, 5872.599999999999], [1.63089636E12, 18838.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6308963E12, 23.0], [1.63089636E12, 11794.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6308963E12, 866.0], [1.63089636E12, 15495.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089636E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 63.0, "minX": 13.0, "maxY": 18833.0, "series": [{"data": [[41.0, 703.0], [56.0, 1518.0], [61.0, 3541.0], [68.0, 292.0], [93.0, 805.0], [92.0, 1688.0], [97.0, 2971.0], [96.0, 2510.5], [99.0, 4216.0], [103.0, 5099.0], [104.0, 1648.0], [128.0, 319.0], [162.0, 304.5], [179.0, 395.0], [189.0, 928.0], [184.0, 1511.5], [195.0, 1103.0], [13.0, 18833.0], [267.0, 78.0], [301.0, 63.0], [23.0, 9553.0], [393.0, 638.0], [24.0, 4778.0], [25.0, 6580.0], [26.0, 11573.5], [27.0, 14414.0], [28.0, 17216.0], [29.0, 10424.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 393.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 61.0, "minX": 13.0, "maxY": 18826.0, "series": [{"data": [[41.0, 703.0], [56.0, 1518.0], [61.0, 3541.0], [68.0, 292.0], [93.0, 797.0], [92.0, 1688.0], [97.0, 2971.0], [96.0, 2500.0], [99.0, 4216.0], [103.0, 5099.0], [104.0, 1622.0], [128.0, 319.0], [162.0, 285.5], [179.0, 378.0], [189.0, 909.0], [184.0, 1507.5], [195.0, 1099.0], [13.0, 18826.0], [267.0, 77.0], [301.0, 61.0], [23.0, 9552.0], [393.0, 635.0], [24.0, 4777.5], [25.0, 6578.0], [26.0, 11568.5], [27.0, 14408.0], [28.0, 17209.0], [29.0, 10403.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 393.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 58.333333333333336, "minX": 1.6308963E12, "maxY": 58.333333333333336, "series": [{"data": [[1.6308963E12, 58.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6308963E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.216666666666667, "minX": 1.6308963E12, "maxY": 55.11666666666667, "series": [{"data": [[1.6308963E12, 55.11666666666667], [1.63089636E12, 3.216666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089636E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.216666666666667, "minX": 1.6308963E12, "maxY": 55.11666666666667, "series": [{"data": [[1.6308963E12, 55.11666666666667], [1.63089636E12, 3.216666666666667]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089636E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.216666666666667, "minX": 1.6308963E12, "maxY": 55.11666666666667, "series": [{"data": [[1.6308963E12, 55.11666666666667], [1.63089636E12, 3.216666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089636E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

