/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 34667.0, "series": [{"data": [[0.0, 24.0], [0.1, 28.0], [0.2, 30.0], [0.3, 31.0], [0.4, 32.0], [0.5, 33.0], [0.6, 33.0], [0.7, 35.0], [0.8, 36.0], [0.9, 37.0], [1.0, 38.0], [1.1, 39.0], [1.2, 40.0], [1.3, 41.0], [1.4, 41.0], [1.5, 42.0], [1.6, 43.0], [1.7, 44.0], [1.8, 45.0], [1.9, 46.0], [2.0, 47.0], [2.1, 48.0], [2.2, 51.0], [2.3, 52.0], [2.4, 53.0], [2.5, 54.0], [2.6, 57.0], [2.7, 58.0], [2.8, 60.0], [2.9, 60.0], [3.0, 62.0], [3.1, 63.0], [3.2, 66.0], [3.3, 67.0], [3.4, 68.0], [3.5, 71.0], [3.6, 72.0], [3.7, 74.0], [3.8, 78.0], [3.9, 80.0], [4.0, 83.0], [4.1, 86.0], [4.2, 89.0], [4.3, 96.0], [4.4, 100.0], [4.5, 103.0], [4.6, 106.0], [4.7, 109.0], [4.8, 111.0], [4.9, 112.0], [5.0, 115.0], [5.1, 119.0], [5.2, 123.0], [5.3, 129.0], [5.4, 134.0], [5.5, 153.0], [5.6, 160.0], [5.7, 173.0], [5.8, 179.0], [5.9, 186.0], [6.0, 193.0], [6.1, 199.0], [6.2, 203.0], [6.3, 207.0], [6.4, 213.0], [6.5, 218.0], [6.6, 221.0], [6.7, 227.0], [6.8, 234.0], [6.9, 239.0], [7.0, 248.0], [7.1, 273.0], [7.2, 289.0], [7.3, 296.0], [7.4, 310.0], [7.5, 325.0], [7.6, 328.0], [7.7, 332.0], [7.8, 340.0], [7.9, 363.0], [8.0, 382.0], [8.1, 389.0], [8.2, 393.0], [8.3, 429.0], [8.4, 433.0], [8.5, 438.0], [8.6, 442.0], [8.7, 448.0], [8.8, 455.0], [8.9, 480.0], [9.0, 483.0], [9.1, 492.0], [9.2, 497.0], [9.3, 502.0], [9.4, 509.0], [9.5, 518.0], [9.6, 521.0], [9.7, 525.0], [9.8, 545.0], [9.9, 606.0], [10.0, 632.0], [10.1, 644.0], [10.2, 665.0], [10.3, 699.0], [10.4, 712.0], [10.5, 721.0], [10.6, 765.0], [10.7, 791.0], [10.8, 810.0], [10.9, 827.0], [11.0, 847.0], [11.1, 875.0], [11.2, 883.0], [11.3, 896.0], [11.4, 900.0], [11.5, 905.0], [11.6, 909.0], [11.7, 915.0], [11.8, 927.0], [11.9, 962.0], [12.0, 987.0], [12.1, 996.0], [12.2, 1003.0], [12.3, 1006.0], [12.4, 1010.0], [12.5, 1012.0], [12.6, 1015.0], [12.7, 1016.0], [12.8, 1018.0], [12.9, 1021.0], [13.0, 1029.0], [13.1, 1034.0], [13.2, 1040.0], [13.3, 1062.0], [13.4, 1078.0], [13.5, 1083.0], [13.6, 1094.0], [13.7, 1103.0], [13.8, 1119.0], [13.9, 1143.0], [14.0, 1156.0], [14.1, 1169.0], [14.2, 1174.0], [14.3, 1182.0], [14.4, 1186.0], [14.5, 1189.0], [14.6, 1195.0], [14.7, 1201.0], [14.8, 1204.0], [14.9, 1208.0], [15.0, 1211.0], [15.1, 1213.0], [15.2, 1214.0], [15.3, 1215.0], [15.4, 1218.0], [15.5, 1219.0], [15.6, 1221.0], [15.7, 1223.0], [15.8, 1226.0], [15.9, 1229.0], [16.0, 1233.0], [16.1, 1236.0], [16.2, 1239.0], [16.3, 1241.0], [16.4, 1242.0], [16.5, 1245.0], [16.6, 1248.0], [16.7, 1252.0], [16.8, 1256.0], [16.9, 1257.0], [17.0, 1262.0], [17.1, 1266.0], [17.2, 1273.0], [17.3, 1276.0], [17.4, 1279.0], [17.5, 1281.0], [17.6, 1292.0], [17.7, 1298.0], [17.8, 1306.0], [17.9, 1309.0], [18.0, 1312.0], [18.1, 1321.0], [18.2, 1329.0], [18.3, 1334.0], [18.4, 1339.0], [18.5, 1348.0], [18.6, 1354.0], [18.7, 1364.0], [18.8, 1371.0], [18.9, 1379.0], [19.0, 1390.0], [19.1, 1395.0], [19.2, 1402.0], [19.3, 1407.0], [19.4, 1411.0], [19.5, 1423.0], [19.6, 1426.0], [19.7, 1433.0], [19.8, 1440.0], [19.9, 1446.0], [20.0, 1460.0], [20.1, 1469.0], [20.2, 1477.0], [20.3, 1486.0], [20.4, 1491.0], [20.5, 1499.0], [20.6, 1510.0], [20.7, 1519.0], [20.8, 1528.0], [20.9, 1545.0], [21.0, 1553.0], [21.1, 1567.0], [21.2, 1574.0], [21.3, 1583.0], [21.4, 1591.0], [21.5, 1598.0], [21.6, 1601.0], [21.7, 1606.0], [21.8, 1614.0], [21.9, 1620.0], [22.0, 1623.0], [22.1, 1627.0], [22.2, 1632.0], [22.3, 1634.0], [22.4, 1635.0], [22.5, 1638.0], [22.6, 1640.0], [22.7, 1643.0], [22.8, 1647.0], [22.9, 1651.0], [23.0, 1654.0], [23.1, 1658.0], [23.2, 1665.0], [23.3, 1668.0], [23.4, 1676.0], [23.5, 1682.0], [23.6, 1690.0], [23.7, 1692.0], [23.8, 1699.0], [23.9, 1706.0], [24.0, 1716.0], [24.1, 1721.0], [24.2, 1729.0], [24.3, 1742.0], [24.4, 1752.0], [24.5, 1755.0], [24.6, 1761.0], [24.7, 1765.0], [24.8, 1772.0], [24.9, 1781.0], [25.0, 1790.0], [25.1, 1797.0], [25.2, 1801.0], [25.3, 1806.0], [25.4, 1807.0], [25.5, 1810.0], [25.6, 1813.0], [25.7, 1819.0], [25.8, 1824.0], [25.9, 1828.0], [26.0, 1833.0], [26.1, 1839.0], [26.2, 1856.0], [26.3, 1872.0], [26.4, 1889.0], [26.5, 1893.0], [26.6, 1898.0], [26.7, 1902.0], [26.8, 1907.0], [26.9, 1915.0], [27.0, 1923.0], [27.1, 1930.0], [27.2, 1935.0], [27.3, 1943.0], [27.4, 1950.0], [27.5, 1960.0], [27.6, 1967.0], [27.7, 1979.0], [27.8, 1998.0], [27.9, 2005.0], [28.0, 2013.0], [28.1, 2018.0], [28.2, 2028.0], [28.3, 2045.0], [28.4, 2053.0], [28.5, 2058.0], [28.6, 2067.0], [28.7, 2072.0], [28.8, 2078.0], [28.9, 2084.0], [29.0, 2092.0], [29.1, 2096.0], [29.2, 2099.0], [29.3, 2102.0], [29.4, 2104.0], [29.5, 2107.0], [29.6, 2112.0], [29.7, 2114.0], [29.8, 2116.0], [29.9, 2120.0], [30.0, 2125.0], [30.1, 2127.0], [30.2, 2131.0], [30.3, 2137.0], [30.4, 2141.0], [30.5, 2144.0], [30.6, 2148.0], [30.7, 2162.0], [30.8, 2165.0], [30.9, 2171.0], [31.0, 2175.0], [31.1, 2179.0], [31.2, 2182.0], [31.3, 2190.0], [31.4, 2200.0], [31.5, 2207.0], [31.6, 2216.0], [31.7, 2220.0], [31.8, 2229.0], [31.9, 2234.0], [32.0, 2246.0], [32.1, 2254.0], [32.2, 2261.0], [32.3, 2270.0], [32.4, 2278.0], [32.5, 2283.0], [32.6, 2290.0], [32.7, 2301.0], [32.8, 2316.0], [32.9, 2325.0], [33.0, 2330.0], [33.1, 2343.0], [33.2, 2348.0], [33.3, 2353.0], [33.4, 2359.0], [33.5, 2361.0], [33.6, 2367.0], [33.7, 2377.0], [33.8, 2384.0], [33.9, 2390.0], [34.0, 2396.0], [34.1, 2399.0], [34.2, 2403.0], [34.3, 2406.0], [34.4, 2411.0], [34.5, 2413.0], [34.6, 2417.0], [34.7, 2423.0], [34.8, 2428.0], [34.9, 2433.0], [35.0, 2438.0], [35.1, 2443.0], [35.2, 2446.0], [35.3, 2453.0], [35.4, 2457.0], [35.5, 2461.0], [35.6, 2467.0], [35.7, 2471.0], [35.8, 2477.0], [35.9, 2483.0], [36.0, 2490.0], [36.1, 2501.0], [36.2, 2508.0], [36.3, 2513.0], [36.4, 2518.0], [36.5, 2525.0], [36.6, 2531.0], [36.7, 2538.0], [36.8, 2544.0], [36.9, 2553.0], [37.0, 2563.0], [37.1, 2566.0], [37.2, 2573.0], [37.3, 2579.0], [37.4, 2583.0], [37.5, 2585.0], [37.6, 2588.0], [37.7, 2593.0], [37.8, 2605.0], [37.9, 2611.0], [38.0, 2615.0], [38.1, 2623.0], [38.2, 2625.0], [38.3, 2628.0], [38.4, 2635.0], [38.5, 2640.0], [38.6, 2652.0], [38.7, 2658.0], [38.8, 2661.0], [38.9, 2669.0], [39.0, 2676.0], [39.1, 2680.0], [39.2, 2684.0], [39.3, 2690.0], [39.4, 2696.0], [39.5, 2698.0], [39.6, 2701.0], [39.7, 2708.0], [39.8, 2716.0], [39.9, 2719.0], [40.0, 2723.0], [40.1, 2727.0], [40.2, 2730.0], [40.3, 2732.0], [40.4, 2736.0], [40.5, 2743.0], [40.6, 2749.0], [40.7, 2756.0], [40.8, 2766.0], [40.9, 2778.0], [41.0, 2783.0], [41.1, 2792.0], [41.2, 2803.0], [41.3, 2813.0], [41.4, 2822.0], [41.5, 2829.0], [41.6, 2836.0], [41.7, 2842.0], [41.8, 2851.0], [41.9, 2858.0], [42.0, 2864.0], [42.1, 2869.0], [42.2, 2880.0], [42.3, 2890.0], [42.4, 2895.0], [42.5, 2900.0], [42.6, 2907.0], [42.7, 2913.0], [42.8, 2917.0], [42.9, 2924.0], [43.0, 2936.0], [43.1, 2958.0], [43.2, 2967.0], [43.3, 2972.0], [43.4, 2977.0], [43.5, 2985.0], [43.6, 2989.0], [43.7, 2994.0], [43.8, 3000.0], [43.9, 3006.0], [44.0, 3013.0], [44.1, 3016.0], [44.2, 3023.0], [44.3, 3030.0], [44.4, 3034.0], [44.5, 3041.0], [44.6, 3048.0], [44.7, 3056.0], [44.8, 3059.0], [44.9, 3065.0], [45.0, 3074.0], [45.1, 3081.0], [45.2, 3085.0], [45.3, 3094.0], [45.4, 3099.0], [45.5, 3110.0], [45.6, 3117.0], [45.7, 3121.0], [45.8, 3133.0], [45.9, 3140.0], [46.0, 3147.0], [46.1, 3154.0], [46.2, 3162.0], [46.3, 3169.0], [46.4, 3176.0], [46.5, 3179.0], [46.6, 3186.0], [46.7, 3188.0], [46.8, 3196.0], [46.9, 3200.0], [47.0, 3208.0], [47.1, 3212.0], [47.2, 3220.0], [47.3, 3223.0], [47.4, 3233.0], [47.5, 3240.0], [47.6, 3245.0], [47.7, 3250.0], [47.8, 3259.0], [47.9, 3265.0], [48.0, 3270.0], [48.1, 3275.0], [48.2, 3280.0], [48.3, 3282.0], [48.4, 3287.0], [48.5, 3291.0], [48.6, 3295.0], [48.7, 3299.0], [48.8, 3306.0], [48.9, 3311.0], [49.0, 3323.0], [49.1, 3327.0], [49.2, 3334.0], [49.3, 3338.0], [49.4, 3346.0], [49.5, 3349.0], [49.6, 3352.0], [49.7, 3356.0], [49.8, 3362.0], [49.9, 3367.0], [50.0, 3369.0], [50.1, 3375.0], [50.2, 3377.0], [50.3, 3380.0], [50.4, 3382.0], [50.5, 3387.0], [50.6, 3392.0], [50.7, 3398.0], [50.8, 3403.0], [50.9, 3409.0], [51.0, 3413.0], [51.1, 3418.0], [51.2, 3422.0], [51.3, 3427.0], [51.4, 3430.0], [51.5, 3442.0], [51.6, 3449.0], [51.7, 3456.0], [51.8, 3459.0], [51.9, 3463.0], [52.0, 3465.0], [52.1, 3475.0], [52.2, 3479.0], [52.3, 3482.0], [52.4, 3488.0], [52.5, 3491.0], [52.6, 3495.0], [52.7, 3501.0], [52.8, 3510.0], [52.9, 3513.0], [53.0, 3523.0], [53.1, 3529.0], [53.2, 3536.0], [53.3, 3542.0], [53.4, 3547.0], [53.5, 3550.0], [53.6, 3556.0], [53.7, 3559.0], [53.8, 3565.0], [53.9, 3570.0], [54.0, 3578.0], [54.1, 3584.0], [54.2, 3591.0], [54.3, 3596.0], [54.4, 3602.0], [54.5, 3608.0], [54.6, 3616.0], [54.7, 3621.0], [54.8, 3633.0], [54.9, 3645.0], [55.0, 3651.0], [55.1, 3658.0], [55.2, 3664.0], [55.3, 3675.0], [55.4, 3685.0], [55.5, 3688.0], [55.6, 3696.0], [55.7, 3703.0], [55.8, 3710.0], [55.9, 3713.0], [56.0, 3724.0], [56.1, 3737.0], [56.2, 3746.0], [56.3, 3750.0], [56.4, 3756.0], [56.5, 3760.0], [56.6, 3768.0], [56.7, 3775.0], [56.8, 3782.0], [56.9, 3786.0], [57.0, 3792.0], [57.1, 3798.0], [57.2, 3801.0], [57.3, 3805.0], [57.4, 3810.0], [57.5, 3814.0], [57.6, 3819.0], [57.7, 3825.0], [57.8, 3833.0], [57.9, 3834.0], [58.0, 3838.0], [58.1, 3846.0], [58.2, 3857.0], [58.3, 3861.0], [58.4, 3870.0], [58.5, 3878.0], [58.6, 3885.0], [58.7, 3888.0], [58.8, 3894.0], [58.9, 3896.0], [59.0, 3899.0], [59.1, 3900.0], [59.2, 3903.0], [59.3, 3906.0], [59.4, 3908.0], [59.5, 3912.0], [59.6, 3914.0], [59.7, 3919.0], [59.8, 3927.0], [59.9, 3934.0], [60.0, 3940.0], [60.1, 3945.0], [60.2, 3955.0], [60.3, 3964.0], [60.4, 3976.0], [60.5, 3983.0], [60.6, 3988.0], [60.7, 3995.0], [60.8, 4003.0], [60.9, 4012.0], [61.0, 4025.0], [61.1, 4031.0], [61.2, 4038.0], [61.3, 4044.0], [61.4, 4055.0], [61.5, 4061.0], [61.6, 4069.0], [61.7, 4075.0], [61.8, 4084.0], [61.9, 4090.0], [62.0, 4096.0], [62.1, 4100.0], [62.2, 4107.0], [62.3, 4114.0], [62.4, 4119.0], [62.5, 4125.0], [62.6, 4128.0], [62.7, 4132.0], [62.8, 4135.0], [62.9, 4139.0], [63.0, 4145.0], [63.1, 4150.0], [63.2, 4154.0], [63.3, 4160.0], [63.4, 4164.0], [63.5, 4173.0], [63.6, 4182.0], [63.7, 4193.0], [63.8, 4199.0], [63.9, 4207.0], [64.0, 4213.0], [64.1, 4219.0], [64.2, 4232.0], [64.3, 4236.0], [64.4, 4243.0], [64.5, 4254.0], [64.6, 4259.0], [64.7, 4263.0], [64.8, 4267.0], [64.9, 4276.0], [65.0, 4287.0], [65.1, 4295.0], [65.2, 4302.0], [65.3, 4308.0], [65.4, 4313.0], [65.5, 4327.0], [65.6, 4341.0], [65.7, 4349.0], [65.8, 4363.0], [65.9, 4369.0], [66.0, 4373.0], [66.1, 4377.0], [66.2, 4394.0], [66.3, 4404.0], [66.4, 4411.0], [66.5, 4415.0], [66.6, 4428.0], [66.7, 4434.0], [66.8, 4443.0], [66.9, 4452.0], [67.0, 4459.0], [67.1, 4466.0], [67.2, 4477.0], [67.3, 4495.0], [67.4, 4502.0], [67.5, 4510.0], [67.6, 4521.0], [67.7, 4528.0], [67.8, 4537.0], [67.9, 4549.0], [68.0, 4556.0], [68.1, 4568.0], [68.2, 4579.0], [68.3, 4591.0], [68.4, 4603.0], [68.5, 4610.0], [68.6, 4627.0], [68.7, 4631.0], [68.8, 4643.0], [68.9, 4657.0], [69.0, 4669.0], [69.1, 4677.0], [69.2, 4685.0], [69.3, 4691.0], [69.4, 4695.0], [69.5, 4707.0], [69.6, 4717.0], [69.7, 4721.0], [69.8, 4727.0], [69.9, 4737.0], [70.0, 4746.0], [70.1, 4754.0], [70.2, 4762.0], [70.3, 4773.0], [70.4, 4779.0], [70.5, 4788.0], [70.6, 4797.0], [70.7, 4804.0], [70.8, 4816.0], [70.9, 4828.0], [71.0, 4840.0], [71.1, 4848.0], [71.2, 4850.0], [71.3, 4855.0], [71.4, 4858.0], [71.5, 4868.0], [71.6, 4876.0], [71.7, 4880.0], [71.8, 4886.0], [71.9, 4892.0], [72.0, 4901.0], [72.1, 4912.0], [72.2, 4925.0], [72.3, 4930.0], [72.4, 4939.0], [72.5, 4948.0], [72.6, 4962.0], [72.7, 4969.0], [72.8, 4977.0], [72.9, 4995.0], [73.0, 5001.0], [73.1, 5014.0], [73.2, 5022.0], [73.3, 5031.0], [73.4, 5036.0], [73.5, 5050.0], [73.6, 5062.0], [73.7, 5071.0], [73.8, 5086.0], [73.9, 5103.0], [74.0, 5113.0], [74.1, 5122.0], [74.2, 5136.0], [74.3, 5146.0], [74.4, 5156.0], [74.5, 5164.0], [74.6, 5170.0], [74.7, 5182.0], [74.8, 5191.0], [74.9, 5204.0], [75.0, 5213.0], [75.1, 5227.0], [75.2, 5237.0], [75.3, 5244.0], [75.4, 5261.0], [75.5, 5266.0], [75.6, 5273.0], [75.7, 5276.0], [75.8, 5282.0], [75.9, 5292.0], [76.0, 5303.0], [76.1, 5313.0], [76.2, 5317.0], [76.3, 5322.0], [76.4, 5328.0], [76.5, 5353.0], [76.6, 5361.0], [76.7, 5382.0], [76.8, 5395.0], [76.9, 5411.0], [77.0, 5422.0], [77.1, 5430.0], [77.2, 5442.0], [77.3, 5453.0], [77.4, 5459.0], [77.5, 5474.0], [77.6, 5482.0], [77.7, 5492.0], [77.8, 5502.0], [77.9, 5524.0], [78.0, 5540.0], [78.1, 5553.0], [78.2, 5562.0], [78.3, 5586.0], [78.4, 5598.0], [78.5, 5612.0], [78.6, 5636.0], [78.7, 5650.0], [78.8, 5663.0], [78.9, 5679.0], [79.0, 5696.0], [79.1, 5718.0], [79.2, 5745.0], [79.3, 5782.0], [79.4, 5808.0], [79.5, 5832.0], [79.6, 5852.0], [79.7, 5878.0], [79.8, 5900.0], [79.9, 5932.0], [80.0, 5961.0], [80.1, 5986.0], [80.2, 6011.0], [80.3, 6052.0], [80.4, 6075.0], [80.5, 6104.0], [80.6, 6144.0], [80.7, 6172.0], [80.8, 6202.0], [80.9, 6239.0], [81.0, 6250.0], [81.1, 6300.0], [81.2, 6326.0], [81.3, 6340.0], [81.4, 6379.0], [81.5, 6402.0], [81.6, 6418.0], [81.7, 6434.0], [81.8, 6458.0], [81.9, 6465.0], [82.0, 6490.0], [82.1, 6514.0], [82.2, 6542.0], [82.3, 6568.0], [82.4, 6595.0], [82.5, 6620.0], [82.6, 6648.0], [82.7, 6676.0], [82.8, 6696.0], [82.9, 6736.0], [83.0, 6745.0], [83.1, 6761.0], [83.2, 6794.0], [83.3, 6807.0], [83.4, 6821.0], [83.5, 6835.0], [83.6, 6870.0], [83.7, 6894.0], [83.8, 6912.0], [83.9, 6937.0], [84.0, 6965.0], [84.1, 6990.0], [84.2, 7019.0], [84.3, 7047.0], [84.4, 7079.0], [84.5, 7103.0], [84.6, 7128.0], [84.7, 7141.0], [84.8, 7152.0], [84.9, 7184.0], [85.0, 7216.0], [85.1, 7234.0], [85.2, 7266.0], [85.3, 7292.0], [85.4, 7319.0], [85.5, 7340.0], [85.6, 7355.0], [85.7, 7379.0], [85.8, 7400.0], [85.9, 7418.0], [86.0, 7430.0], [86.1, 7448.0], [86.2, 7476.0], [86.3, 7500.0], [86.4, 7527.0], [86.5, 7547.0], [86.6, 7599.0], [86.7, 7629.0], [86.8, 7660.0], [86.9, 7705.0], [87.0, 7751.0], [87.1, 7783.0], [87.2, 7826.0], [87.3, 7885.0], [87.4, 7935.0], [87.5, 7965.0], [87.6, 8013.0], [87.7, 8038.0], [87.8, 8072.0], [87.9, 8129.0], [88.0, 8161.0], [88.1, 8222.0], [88.2, 8264.0], [88.3, 8294.0], [88.4, 8369.0], [88.5, 8416.0], [88.6, 8469.0], [88.7, 8506.0], [88.8, 8561.0], [88.9, 8606.0], [89.0, 8681.0], [89.1, 8733.0], [89.2, 8809.0], [89.3, 8900.0], [89.4, 9137.0], [89.5, 9350.0], [89.6, 9651.0], [89.7, 9925.0], [89.8, 10091.0], [89.9, 10289.0], [90.0, 10480.0], [90.1, 10846.0], [90.2, 11112.0], [90.3, 11291.0], [90.4, 11456.0], [90.5, 11696.0], [90.6, 12023.0], [90.7, 12230.0], [90.8, 12511.0], [90.9, 12721.0], [91.0, 12960.0], [91.1, 13141.0], [91.2, 13365.0], [91.3, 13675.0], [91.4, 13973.0], [91.5, 14095.0], [91.6, 14378.0], [91.7, 14645.0], [91.8, 14852.0], [91.9, 15082.0], [92.0, 15315.0], [92.1, 15476.0], [92.2, 15683.0], [92.3, 15744.0], [92.4, 16066.0], [92.5, 16334.0], [92.6, 16788.0], [92.7, 16958.0], [92.8, 17195.0], [92.9, 17486.0], [93.0, 17596.0], [93.1, 17894.0], [93.2, 18114.0], [93.3, 18422.0], [93.4, 18537.0], [93.5, 18795.0], [93.6, 18932.0], [93.7, 19133.0], [93.8, 19496.0], [93.9, 19809.0], [94.0, 20098.0], [94.1, 20304.0], [94.2, 20518.0], [94.3, 20822.0], [94.4, 20994.0], [94.5, 21077.0], [94.6, 21324.0], [94.7, 21586.0], [94.8, 21715.0], [94.9, 22089.0], [95.0, 22314.0], [95.1, 22467.0], [95.2, 22684.0], [95.3, 22933.0], [95.4, 23252.0], [95.5, 23571.0], [95.6, 23758.0], [95.7, 23986.0], [95.8, 24260.0], [95.9, 24559.0], [96.0, 24808.0], [96.1, 24987.0], [96.2, 25210.0], [96.3, 25385.0], [96.4, 25692.0], [96.5, 25853.0], [96.6, 26111.0], [96.7, 26439.0], [96.8, 26612.0], [96.9, 26930.0], [97.0, 27164.0], [97.1, 27449.0], [97.2, 27680.0], [97.3, 27908.0], [97.4, 28109.0], [97.5, 28421.0], [97.6, 28595.0], [97.7, 28809.0], [97.8, 29019.0], [97.9, 29331.0], [98.0, 29575.0], [98.1, 29741.0], [98.2, 29991.0], [98.3, 30317.0], [98.4, 30518.0], [98.5, 30665.0], [98.6, 31030.0], [98.7, 31225.0], [98.8, 31533.0], [98.9, 31734.0], [99.0, 32027.0], [99.1, 32150.0], [99.2, 32341.0], [99.3, 32592.0], [99.4, 32825.0], [99.5, 33219.0], [99.6, 33514.0], [99.7, 33763.0], [99.8, 33871.0], [99.9, 34020.0], [100.0, 34667.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 308.0, "series": [{"data": [[0.0, 308.0], [100.0, 120.0], [32900.0, 4.0], [33300.0, 2.0], [33700.0, 2.0], [34100.0, 4.0], [200.0, 85.0], [300.0, 65.0], [400.0, 72.0], [500.0, 43.0], [600.0, 30.0], [700.0, 31.0], [800.0, 42.0], [900.0, 54.0], [1000.0, 106.0], [1100.0, 71.0], [1200.0, 212.0], [1300.0, 101.0], [1400.0, 95.0], [1500.0, 73.0], [1600.0, 159.0], [1700.0, 96.0], [1800.0, 102.0], [1900.0, 83.0], [2000.0, 97.0], [2100.0, 152.0], [2300.0, 101.0], [2200.0, 89.0], [2400.0, 139.0], [2500.0, 118.0], [2600.0, 124.0], [2700.0, 113.0], [2800.0, 93.0], [2900.0, 90.0], [3000.0, 114.0], [3100.0, 102.0], [3200.0, 129.0], [3300.0, 142.0], [3400.0, 134.0], [3500.0, 120.0], [3600.0, 89.0], [3700.0, 107.0], [3800.0, 134.0], [3900.0, 118.0], [4000.0, 91.0], [4100.0, 123.0], [4200.0, 93.0], [4300.0, 78.0], [4500.0, 67.0], [4400.0, 79.0], [4600.0, 77.0], [4700.0, 82.0], [4800.0, 95.0], [4900.0, 70.0], [5000.0, 63.0], [5100.0, 69.0], [5200.0, 75.0], [5300.0, 64.0], [5500.0, 46.0], [5400.0, 64.0], [5600.0, 41.0], [5700.0, 27.0], [5800.0, 28.0], [5900.0, 27.0], [6000.0, 21.0], [6100.0, 21.0], [6200.0, 22.0], [6300.0, 28.0], [6400.0, 40.0], [6600.0, 27.0], [6500.0, 26.0], [6700.0, 28.0], [6800.0, 36.0], [6900.0, 28.0], [7000.0, 25.0], [7100.0, 33.0], [7300.0, 32.0], [7200.0, 26.0], [7400.0, 35.0], [7500.0, 22.0], [7600.0, 19.0], [7700.0, 18.0], [7800.0, 14.0], [7900.0, 16.0], [8000.0, 20.0], [8100.0, 16.0], [8200.0, 16.0], [8300.0, 10.0], [8400.0, 14.0], [8500.0, 16.0], [8600.0, 12.0], [8700.0, 9.0], [8900.0, 4.0], [9000.0, 3.0], [8800.0, 8.0], [9100.0, 2.0], [9200.0, 4.0], [9300.0, 4.0], [9600.0, 4.0], [9400.0, 1.0], [9500.0, 1.0], [9700.0, 2.0], [9900.0, 7.0], [9800.0, 2.0], [10100.0, 3.0], [10200.0, 4.0], [10000.0, 2.0], [10500.0, 1.0], [10400.0, 4.0], [10300.0, 3.0], [10600.0, 1.0], [10700.0, 3.0], [10800.0, 4.0], [10900.0, 2.0], [11000.0, 2.0], [11100.0, 4.0], [11200.0, 4.0], [11400.0, 3.0], [11300.0, 4.0], [11600.0, 4.0], [11500.0, 3.0], [11800.0, 2.0], [12000.0, 4.0], [11900.0, 4.0], [12100.0, 2.0], [12200.0, 4.0], [12300.0, 2.0], [12700.0, 5.0], [12400.0, 1.0], [12500.0, 5.0], [12600.0, 1.0], [12800.0, 4.0], [13000.0, 4.0], [12900.0, 2.0], [13100.0, 3.0], [13300.0, 4.0], [13200.0, 2.0], [13400.0, 1.0], [13500.0, 2.0], [13600.0, 5.0], [13700.0, 1.0], [13800.0, 2.0], [13900.0, 4.0], [14000.0, 6.0], [14100.0, 2.0], [14200.0, 2.0], [14300.0, 3.0], [14400.0, 4.0], [14500.0, 2.0], [14600.0, 4.0], [14800.0, 3.0], [14700.0, 1.0], [14900.0, 5.0], [15000.0, 2.0], [15100.0, 5.0], [15200.0, 1.0], [15300.0, 5.0], [15600.0, 6.0], [15400.0, 5.0], [15700.0, 7.0], [15500.0, 1.0], [16100.0, 2.0], [16000.0, 4.0], [16200.0, 3.0], [16300.0, 2.0], [15900.0, 2.0], [16600.0, 3.0], [16800.0, 4.0], [17000.0, 4.0], [17200.0, 3.0], [17400.0, 6.0], [18200.0, 3.0], [17600.0, 1.0], [17800.0, 2.0], [18000.0, 3.0], [18400.0, 5.0], [18600.0, 3.0], [19000.0, 3.0], [18800.0, 5.0], [19400.0, 6.0], [19200.0, 1.0], [19600.0, 1.0], [20200.0, 4.0], [19800.0, 3.0], [20000.0, 2.0], [20400.0, 3.0], [21000.0, 7.0], [20600.0, 2.0], [20800.0, 3.0], [21200.0, 2.0], [21400.0, 3.0], [21600.0, 5.0], [21800.0, 2.0], [22000.0, 2.0], [22200.0, 4.0], [22400.0, 3.0], [22600.0, 4.0], [22800.0, 3.0], [23000.0, 2.0], [23200.0, 3.0], [23400.0, 1.0], [23600.0, 3.0], [23800.0, 3.0], [24000.0, 3.0], [24200.0, 3.0], [24400.0, 2.0], [24800.0, 5.0], [24600.0, 3.0], [25000.0, 3.0], [25200.0, 3.0], [25400.0, 2.0], [25600.0, 2.0], [25800.0, 5.0], [26000.0, 4.0], [26200.0, 2.0], [26400.0, 3.0], [26600.0, 3.0], [27400.0, 5.0], [26800.0, 2.0], [27200.0, 4.0], [27000.0, 2.0], [27600.0, 2.0], [27800.0, 2.0], [28000.0, 2.0], [28200.0, 4.0], [28600.0, 3.0], [28400.0, 3.0], [28800.0, 6.0], [29000.0, 4.0], [29400.0, 3.0], [29200.0, 1.0], [29600.0, 3.0], [29800.0, 2.0], [30000.0, 2.0], [30200.0, 1.0], [30400.0, 3.0], [30600.0, 2.0], [31000.0, 3.0], [30800.0, 1.0], [31600.0, 4.0], [31200.0, 3.0], [31400.0, 2.0], [31800.0, 2.0], [32000.0, 5.0], [32200.0, 1.0], [32400.0, 3.0], [32600.0, 3.0], [32800.0, 2.0], [33200.0, 4.0], [33600.0, 3.0], [34000.0, 3.0], [33500.0, 4.0], [33900.0, 1.0], [16500.0, 2.0], [16900.0, 2.0], [16700.0, 2.0], [17100.0, 3.0], [17500.0, 5.0], [17700.0, 4.0], [17900.0, 2.0], [18100.0, 4.0], [18300.0, 1.0], [18500.0, 5.0], [18700.0, 2.0], [18900.0, 5.0], [19300.0, 1.0], [19100.0, 1.0], [19500.0, 2.0], [19700.0, 2.0], [19900.0, 3.0], [20100.0, 2.0], [20300.0, 4.0], [21100.0, 2.0], [20500.0, 4.0], [20700.0, 1.0], [20900.0, 5.0], [21300.0, 4.0], [21500.0, 3.0], [21700.0, 2.0], [21900.0, 3.0], [22100.0, 2.0], [22300.0, 6.0], [22500.0, 3.0], [22700.0, 1.0], [22900.0, 3.0], [23100.0, 1.0], [23500.0, 5.0], [23300.0, 3.0], [23700.0, 3.0], [23900.0, 3.0], [24100.0, 1.0], [24500.0, 4.0], [24300.0, 2.0], [24700.0, 2.0], [24900.0, 4.0], [25100.0, 2.0], [25300.0, 5.0], [25500.0, 3.0], [25700.0, 3.0], [25900.0, 1.0], [26100.0, 3.0], [26300.0, 2.0], [26500.0, 4.0], [26900.0, 4.0], [26700.0, 1.0], [27100.0, 3.0], [27300.0, 2.0], [27500.0, 2.0], [27700.0, 2.0], [27900.0, 6.0], [28100.0, 3.0], [28500.0, 5.0], [28700.0, 2.0], [28900.0, 2.0], [29300.0, 4.0], [29100.0, 1.0], [29500.0, 3.0], [29700.0, 3.0], [30100.0, 3.0], [29900.0, 5.0], [30500.0, 6.0], [30300.0, 4.0], [30700.0, 3.0], [30900.0, 2.0], [31100.0, 3.0], [31500.0, 4.0], [31300.0, 1.0], [31700.0, 5.0], [32100.0, 5.0], [31900.0, 1.0], [32300.0, 4.0], [32500.0, 4.0], [32700.0, 2.0], [33000.0, 1.0], [33800.0, 10.0], [33400.0, 2.0], [34600.0, 2.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5549.0, "series": [{"data": [[0.0, 650.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 785.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5549.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.63090446E12, "maxY": 742.817817817818, "series": [{"data": [[1.63090452E12, 477.8977955911834], [1.63090458E12, 1.5]], "isOverall": false, "label": "getOrdersAsBuyerByUserId", "isController": false}, {"data": [[1.63090452E12, 334.03499999999985]], "isOverall": false, "label": "changeOrderStatus", "isController": false}, {"data": [[1.63090452E12, 486.84199999999987]], "isOverall": false, "label": "getOrdersByUserId", "isController": false}, {"data": [[1.63090452E12, 1.0], [1.63090446E12, 742.817817817818]], "isOverall": false, "label": "makeOrder", "isController": false}, {"data": [[1.63090452E12, 453.72600000000006]], "isOverall": false, "label": "affirmWants", "isController": false}, {"data": [[1.63090458E12, 462.54399999999987]], "isOverall": false, "label": "getOrdersAsSellerByUserid", "isController": false}, {"data": [[1.63090458E12, 498.8199999999999]], "isOverall": false, "label": "commentAndRateOnOrder", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090458E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1013.5, "minX": 1.0, "maxY": 18407.333333333332, "series": [{"data": [[2.0, 15438.2], [3.0, 14212.75], [4.0, 6874.0], [5.0, 14418.0], [6.0, 12472.8], [7.0, 14054.75], [8.0, 11859.8], [9.0, 11505.833333333334], [10.0, 6772.5], [11.0, 15888.0], [12.0, 13912.75], [13.0, 11082.0], [14.0, 12270.2], [15.0, 11863.4], [16.0, 10047.0], [17.0, 13809.25], [18.0, 9993.285714285714], [19.0, 10720.833333333332], [20.0, 9102.0], [21.0, 9542.42857142857], [22.0, 11059.333333333334], [23.0, 9766.428571428572], [24.0, 9813.0], [25.0, 12053.8], [26.0, 8429.111111111111], [27.0, 12060.6], [28.0, 11694.0], [29.0, 7732.727272727272], [30.0, 13005.5], [31.0, 10485.571428571428], [33.0, 7978.8], [32.0, 12096.0], [34.0, 10602.166666666668], [35.0, 11938.2], [36.0, 9725.5], [37.0, 10805.833333333332], [39.0, 10608.833333333334], [38.0, 10551.5], [41.0, 11050.333333333334], [40.0, 7659.666666666666], [42.0, 9828.428571428572], [43.0, 11971.0], [45.0, 8075.25], [44.0, 8248.0], [47.0, 11447.8], [46.0, 9407.285714285714], [49.0, 11724.0], [48.0, 11837.2], [50.0, 5314.75], [51.0, 6321.888888888889], [52.0, 4721.1875], [53.0, 5942.444444444444], [54.0, 5735.416666666666], [55.0, 6716.5], [57.0, 4894.2307692307695], [56.0, 8509.166666666666], [59.0, 4490.916666666666], [58.0, 4870.142857142857], [60.0, 6115.090909090909], [61.0, 4366.909090909091], [62.0, 7894.142857142857], [63.0, 6439.166666666666], [66.0, 6409.181818181818], [65.0, 5140.7], [64.0, 5850.1], [67.0, 11545.2], [68.0, 6819.0], [69.0, 6848.5], [71.0, 9889.833333333334], [70.0, 7175.333333333334], [74.0, 9315.5], [72.0, 9939.833333333334], [75.0, 10519.166666666668], [73.0, 11515.2], [79.0, 8673.428571428572], [76.0, 8698.428571428572], [78.0, 11454.0], [77.0, 11501.6], [81.0, 9825.666666666668], [83.0, 13043.75], [82.0, 11415.4], [80.0, 11407.6], [87.0, 6705.111111111111], [85.0, 5543.076923076923], [84.0, 7217.0], [86.0, 11340.2], [91.0, 6132.555555555556], [90.0, 8132.285714285714], [89.0, 6510.111111111111], [88.0, 9699.166666666668], [94.0, 7687.875], [95.0, 11179.0], [93.0, 9595.0], [92.0, 12827.25], [98.0, 8617.571428571428], [96.0, 8599.857142857143], [99.0, 11985.5], [97.0, 11208.4], [103.0, 6220.0], [102.0, 15258.0], [101.0, 11226.6], [100.0, 10707.333333333332], [106.0, 10049.2], [105.0, 9737.4], [107.0, 9035.75], [104.0, 9725.42857142857], [111.0, 11667.25], [110.0, 10465.8], [109.0, 6825.900000000001], [108.0, 11826.75], [115.0, 7317.125], [113.0, 3288.0], [112.0, 4842.666666666667], [114.0, 10735.375], [119.0, 9356.0], [118.0, 9537.666666666668], [117.0, 8321.285714285714], [116.0, 11008.8], [122.0, 6497.125], [121.0, 4922.916666666666], [120.0, 9162.833333333332], [123.0, 9939.666666666666], [124.0, 5795.599999999999], [126.0, 9816.0], [125.0, 9367.666666666668], [127.0, 9499.4], [134.0, 8727.166666666668], [132.0, 7724.875], [130.0, 7311.857142857143], [129.0, 7625.125], [128.0, 7350.333333333334], [135.0, 9840.833333333334], [133.0, 10855.6], [131.0, 10742.2], [143.0, 8847.666666666668], [142.0, 9462.666666666666], [141.0, 9631.8], [140.0, 7240.333333333334], [137.0, 9303.666666666666], [136.0, 8105.142857142857], [138.0, 12184.75], [139.0, 10321.4], [149.0, 6792.857142857143], [148.0, 6813.625], [147.0, 7045.125], [145.0, 6114.9], [151.0, 10559.2], [150.0, 11138.6], [146.0, 10672.2], [144.0, 11009.0], [159.0, 4190.0], [158.0, 5134.636363636364], [156.0, 8472.0], [155.0, 8518.0], [152.0, 6965.555555555556], [157.0, 8913.142857142857], [154.0, 10510.6], [153.0, 10691.8], [167.0, 9802.2], [166.0, 9729.2], [165.0, 9000.5], [164.0, 7192.636363636364], [163.0, 8857.6], [161.0, 8468.5], [162.0, 14486.333333333332], [160.0, 9614.333333333332], [170.0, 7856.0], [169.0, 10246.6], [168.0, 7967.714285714286], [175.0, 7445.857142857143], [173.0, 7384.636363636363], [174.0, 11864.75], [172.0, 5755.5], [171.0, 10284.0], [183.0, 8257.5], [182.0, 9626.2], [180.0, 10855.0], [179.0, 5945.7], [178.0, 7425.285714285715], [177.0, 5378.0], [176.0, 8223.166666666666], [181.0, 8696.142857142857], [191.0, 8309.0], [190.0, 7916.142857142857], [189.0, 8732.166666666666], [188.0, 9558.2], [187.0, 8175.833333333333], [185.0, 7382.888888888889], [184.0, 9595.4], [186.0, 10200.4], [192.0, 6861.857142857143], [196.0, 6572.666666666666], [197.0, 6438.5], [198.0, 7963.444444444444], [195.0, 9495.2], [194.0, 9445.8], [193.0, 8850.5], [199.0, 10063.2], [202.0, 6098.0], [207.0, 7605.5], [206.0, 8474.666666666668], [205.0, 10585.5], [204.0, 8610.333333333334], [203.0, 5641.909090909091], [201.0, 11305.75], [200.0, 11473.25], [215.0, 5998.125], [213.0, 8482.0], [212.0, 7442.0], [211.0, 9231.8], [209.0, 8350.4], [214.0, 9026.0], [210.0, 9341.0], [208.0, 9987.4], [223.0, 6800.714285714286], [221.0, 5988.0], [220.0, 7384.0], [219.0, 6008.1], [217.0, 8362.5], [216.0, 7394.125], [222.0, 7282.0], [218.0, 6350.666666666666], [225.0, 6195.0], [228.0, 4745.166666666666], [230.0, 6425.5], [227.0, 4089.818181818182], [226.0, 5622.111111111111], [224.0, 8233.2], [231.0, 8281.5], [229.0, 9572.0], [239.0, 5810.999999999999], [238.0, 8642.0], [237.0, 4451.125], [236.0, 8208.666666666666], [235.0, 6241.875], [234.0, 7404.375], [233.0, 7089.5], [232.0, 16623.0], [247.0, 8272.0], [246.0, 6381.375], [245.0, 5250.555555555556], [244.0, 8485.2], [243.0, 7156.142857142857], [241.0, 5995.333333333334], [240.0, 5640.125], [242.0, 6878.142857142857], [252.0, 6282.571428571428], [255.0, 8111.2], [253.0, 9402.0], [251.0, 10610.285714285714], [250.0, 3012.375], [249.0, 4502.2], [248.0, 9608.75], [254.0, 7741.75], [269.0, 6755.444444444444], [258.0, 4843.181818181818], [267.0, 2536.722222222222], [266.0, 7833.833333333334], [265.0, 7933.0], [264.0, 7720.428571428572], [260.0, 6109.125], [263.0, 7214.666666666666], [262.0, 9262.4], [261.0, 7475.285714285714], [259.0, 5672.875], [268.0, 9786.25], [257.0, 6640.5], [256.0, 5397.222222222223], [271.0, 7908.0], [270.0, 7810.166666666667], [286.0, 6744.857142857143], [284.0, 7661.428571428572], [285.0, 9039.0], [275.0, 7352.666666666666], [273.0, 8123.0], [274.0, 9585.8], [272.0, 7997.833333333334], [283.0, 8099.6], [282.0, 7218.285714285714], [281.0, 8497.4], [280.0, 7811.666666666667], [287.0, 9005.8], [279.0, 6116.200000000001], [277.0, 8577.4], [278.0, 9100.2], [276.0, 7800.166666666666], [291.0, 7749.333333333332], [303.0, 6714.0], [301.0, 6427.375], [300.0, 10030.75], [302.0, 8849.8], [299.0, 7596.166666666666], [298.0, 7629.833333333334], [297.0, 6042.75], [296.0, 8104.333333333332], [294.0, 7996.666666666666], [293.0, 9042.5], [292.0, 7603.166666666666], [290.0, 6825.857142857143], [289.0, 8348.833333333332], [288.0, 7004.166666666667], [295.0, 8163.333333333333], [317.0, 7348.666666666666], [316.0, 6680.5], [306.0, 6247.428571428571], [305.0, 8250.5], [304.0, 15018.0], [307.0, 8778.6], [315.0, 6671.111111111111], [314.0, 8777.75], [313.0, 6522.25], [312.0, 14631.0], [319.0, 7914.333333333332], [318.0, 9830.25], [311.0, 7566.5], [310.0, 8201.4], [309.0, 7625.833333333333], [308.0, 6125.5], [323.0, 7416.333333333334], [335.0, 5108.833333333333], [334.0, 7433.4], [333.0, 11423.0], [332.0, 7907.166666666666], [330.0, 5958.888888888889], [331.0, 9254.5], [328.0, 7405.2], [329.0, 8545.0], [326.0, 7250.333333333334], [325.0, 6887.285714285714], [324.0, 7937.8], [322.0, 7261.666666666667], [321.0, 7397.333333333334], [320.0, 5820.75], [327.0, 8408.2], [348.0, 7082.666666666666], [351.0, 5104.0], [350.0, 7094.714285714286], [349.0, 11052.666666666668], [339.0, 4922.583333333334], [338.0, 9526.25], [337.0, 9512.5], [336.0, 9354.25], [347.0, 6085.75], [346.0, 9526.5], [345.0, 6355.875], [344.0, 8109.8], [343.0, 7701.4], [342.0, 6389.222222222223], [341.0, 8267.0], [340.0, 7910.0], [367.0, 5258.5], [365.0, 6762.4], [364.0, 6840.571428571428], [355.0, 5340.25], [354.0, 5304.222222222223], [353.0, 4842.888888888889], [352.0, 4926.222222222223], [361.0, 5442.0], [363.0, 6190.5], [362.0, 4202.875], [360.0, 4707.363636363637], [359.0, 6501.4], [358.0, 5571.555555555556], [357.0, 4482.0], [356.0, 4755.875], [366.0, 5718.0], [368.0, 5254.75], [374.0, 5191.0], [375.0, 6912.333333333334], [373.0, 4331.0], [372.0, 4629.75], [369.0, 3965.818181818182], [370.0, 7957.0], [383.0, 6716.285714285714], [377.0, 6029.142857142857], [376.0, 7922.2], [382.0, 7118.2], [381.0, 6220.5], [380.0, 7809.0], [371.0, 6429.166666666667], [379.0, 6765.833333333333], [378.0, 6813.0], [398.0, 3769.5], [397.0, 5543.625], [399.0, 7114.0], [396.0, 6837.333333333333], [395.0, 6887.6], [394.0, 6638.0], [393.0, 6766.833333333333], [392.0, 5525.1], [391.0, 9117.666666666666], [390.0, 4685.333333333333], [385.0, 9142.666666666668], [384.0, 7339.8], [387.0, 6587.333333333333], [386.0, 5462.0], [389.0, 7193.2], [388.0, 6610.833333333334], [414.0, 6483.333333333334], [415.0, 6384.0], [413.0, 5749.857142857143], [412.0, 7434.2], [403.0, 6537.6], [402.0, 4374.5], [401.0, 7111.2], [400.0, 5283.777777777777], [411.0, 5661.571428571428], [410.0, 7583.8], [409.0, 6262.0], [408.0, 5818.285714285714], [407.0, 6038.666666666666], [405.0, 5633.0], [406.0, 7032.8], [404.0, 3733.0], [429.0, 4028.666666666667], [428.0, 4894.666666666667], [419.0, 5782.875], [418.0, 7717.25], [417.0, 6132.571428571428], [416.0, 6995.6], [427.0, 4054.666666666667], [425.0, 5645.428571428571], [423.0, 4822.111111111111], [422.0, 6034.8], [421.0, 5194.666666666667], [420.0, 9711.0], [431.0, 5413.714285714286], [424.0, 5263.875], [430.0, 5624.142857142857], [426.0, 6631.8], [446.0, 4916.714285714286], [440.0, 3607.7500000000005], [447.0, 4041.454545454546], [444.0, 3585.090909090909], [442.0, 3296.6666666666665], [445.0, 4337.125], [443.0, 6221.666666666666], [441.0, 6028.666666666666], [437.0, 4848.0], [436.0, 6096.833333333334], [438.0, 5176.428571428572], [432.0, 6838.4], [439.0, 4216.0], [435.0, 4713.0], [434.0, 6449.0], [433.0, 5876.714285714286], [450.0, 3876.0], [463.0, 4133.25], [462.0, 7732.25], [457.0, 3562.3], [459.0, 5988.666666666666], [458.0, 5388.875], [456.0, 4524.6], [455.0, 3805.333333333333], [453.0, 4692.25], [454.0, 4893.166666666667], [452.0, 6025.8], [448.0, 3563.5555555555557], [449.0, 5572.5], [461.0, 5593.285714285714], [460.0, 6534.2], [451.0, 3033.666666666667], [476.0, 4723.333333333333], [471.0, 3870.909090909091], [469.0, 5211.285714285714], [468.0, 5506.714285714286], [474.0, 3825.363636363636], [475.0, 9060.333333333332], [472.0, 5885.166666666666], [473.0, 7563.0], [470.0, 3825.125], [466.0, 3089.785714285714], [467.0, 6376.2], [464.0, 4925.714285714286], [465.0, 5080.125], [479.0, 5776.833333333334], [478.0, 5351.857142857143], [477.0, 4937.571428571428], [481.0, 4639.0], [491.0, 5790.4], [487.0, 4391.857142857143], [484.0, 5656.5], [486.0, 5815.333333333334], [485.0, 5033.0], [480.0, 3986.8888888888887], [494.0, 6235.2], [493.0, 4524.375], [492.0, 5584.285714285714], [483.0, 5722.666666666667], [482.0, 5369.428571428572], [490.0, 6135.4], [489.0, 5189.857142857143], [495.0, 5987.333333333334], [488.0, 5971.166666666666], [499.0, 5575.666666666666], [509.0, 6001.0], [510.0, 5976.0], [511.0, 5406.0], [508.0, 4632.333333333333], [498.0, 4962.75], [496.0, 5080.857142857143], [497.0, 7258.75], [506.0, 5164.5], [505.0, 5842.0], [507.0, 7122.0], [504.0, 6322.0], [503.0, 5675.333333333334], [502.0, 5388.571428571428], [501.0, 5948.6], [500.0, 5613.5], [516.0, 5194.857142857143], [540.0, 3783.692708333334], [542.0, 4341.888888888889], [541.0, 5529.8], [537.0, 3777.222222222222], [536.0, 4539.857142857143], [539.0, 3969.7142857142853], [538.0, 4079.8888888888887], [519.0, 5793.4], [518.0, 4880.285714285714], [517.0, 6224.4], [515.0, 5890.2], [514.0, 5492.166666666666], [513.0, 5161.428571428572], [512.0, 5150.5], [527.0, 5403.857142857143], [526.0, 8142.666666666667], [532.0, 4191.25], [531.0, 4456.25], [535.0, 3833.4], [534.0, 4847.333333333333], [533.0, 4637.875], [528.0, 4652.666666666667], [543.0, 5240.142857142857], [530.0, 4628.5], [529.0, 5195.0], [525.0, 5329.0], [524.0, 4806.714285714285], [523.0, 5670.5], [522.0, 5808.0], [521.0, 5522.5], [520.0, 5046.714285714285], [548.0, 3479.363636363636], [574.0, 5244.0], [570.0, 5445.166666666667], [550.0, 4672.0], [549.0, 5449.333333333333], [568.0, 6330.25], [551.0, 6193.8], [569.0, 5258.5], [573.0, 4590.5], [572.0, 6294.25], [571.0, 3489.1000000000004], [566.0, 3719.7], [565.0, 6396.5], [564.0, 5949.8], [567.0, 4762.0], [563.0, 5787.2], [575.0, 4301.25], [560.0, 5762.2], [562.0, 4096.375], [561.0, 4718.285714285714], [558.0, 4063.875], [554.0, 5967.2], [555.0, 3648.4444444444443], [557.0, 5590.166666666666], [556.0, 5015.857142857143], [553.0, 5694.0], [552.0, 5490.833333333334], [545.0, 5589.333333333333], [547.0, 6093.0], [546.0, 5618.166666666666], [559.0, 5547.5], [544.0, 5930.6], [604.0, 2596.125], [607.0, 4455.375], [592.0, 4471.714285714286], [606.0, 5456.0], [605.0, 6444.5], [602.0, 4515.0], [603.0, 4717.714285714286], [601.0, 5507.75], [599.0, 4067.6666666666665], [598.0, 3610.0], [597.0, 4337.75], [596.0, 5971.25], [595.0, 5045.5], [594.0, 5932.0], [593.0, 3730.2162162162163], [590.0, 4956.857142857143], [582.0, 5405.333333333333], [600.0, 4632.333333333333], [583.0, 2919.133333333333], [579.0, 5315.333333333334], [581.0, 6205.25], [580.0, 5555.6], [591.0, 4458.166666666667], [576.0, 5483.833333333334], [578.0, 5583.0], [577.0, 5279.333333333333], [585.0, 5593.8], [586.0, 6201.25], [584.0, 4820.166666666666], [589.0, 4346.571428571428], [588.0, 4786.571428571428], [587.0, 3977.0], [637.0, 3682.0], [639.0, 1634.181818181818], [638.0, 4865.6], [635.0, 2914.8888888888887], [634.0, 3784.0], [633.0, 5471.0], [636.0, 3905.0], [632.0, 2171.8333333333335], [627.0, 3885.166666666666], [626.0, 4139.333333333334], [629.0, 3931.222222222222], [628.0, 5544.0], [631.0, 3949.333333333333], [630.0, 5583.333333333334], [625.0, 1784.5625], [624.0, 1395.0], [620.0, 2832.125], [621.0, 3941.8888888888887], [609.0, 2788.2727272727275], [608.0, 2862.6666666666665], [623.0, 5046.6], [622.0, 5077.0], [612.0, 3912.857142857143], [611.0, 4370.8], [614.0, 3910.5], [615.0, 5634.5], [613.0, 4366.0], [610.0, 3260.4], [619.0, 2837.333333333333], [616.0, 3061.4117647058824], [618.0, 4051.0], [617.0, 5695.25], [665.0, 3730.714285714286], [658.0, 2667.8999999999996], [667.0, 3214.0], [668.0, 3353.375], [669.0, 4537.8], [671.0, 1935.8333333333333], [670.0, 3992.3333333333335], [657.0, 3480.714285714286], [656.0, 3389.857142857143], [666.0, 3256.4285714285716], [664.0, 2358.769230769231], [647.0, 4780.6], [646.0, 3455.5714285714284], [644.0, 3977.4285714285716], [643.0, 3566.857142857143], [642.0, 4801.4], [641.0, 3888.25], [640.0, 4147.428571428572], [655.0, 4670.0], [654.0, 4735.0], [645.0, 3805.4285714285716], [653.0, 3384.5714285714284], [651.0, 2991.0], [652.0, 3732.285714285714], [649.0, 3822.4285714285716], [648.0, 5328.25], [650.0, 3016.3], [661.0, 2380.5384615384614], [662.0, 2473.5454545454545], [663.0, 3781.8], [660.0, 2451.5], [659.0, 3234.375], [679.0, 2654.166666666667], [702.0, 1540.6], [703.0, 3377.8181818181815], [688.0, 3654.0], [701.0, 2628.375], [699.0, 2617.636363636364], [700.0, 4167.4], [698.0, 2693.875], [696.0, 2933.5], [697.0, 4727.75], [675.0, 3567.285714285714], [678.0, 4003.166666666667], [677.0, 4060.2], [676.0, 4511.6], [687.0, 3613.833333333333], [674.0, 3964.5], [673.0, 4513.6], [672.0, 5703.166666666667], [694.0, 3745.0], [695.0, 4743.5], [693.0, 4033.6], [692.0, 2787.8888888888887], [689.0, 3577.166666666666], [691.0, 3569.166666666667], [690.0, 3823.5], [686.0, 3549.1428571428573], [685.0, 3133.285714285714], [684.0, 2656.6153846153848], [683.0, 3667.0], [682.0, 2883.5], [681.0, 2271.7], [680.0, 3534.125], [711.0, 2670.8888888888887], [723.0, 2574.6666666666665], [735.0, 3700.333333333333], [734.0, 3317.1428571428573], [733.0, 4542.333333333334], [732.0, 2950.857142857143], [728.0, 3609.2], [729.0, 4262.5], [731.0, 2259.7272727272725], [730.0, 3066.5], [708.0, 2054.5833333333335], [707.0, 3367.8333333333335], [706.0, 4145.4], [705.0, 3122.857142857143], [704.0, 3426.5], [710.0, 3043.3333333333335], [709.0, 2845.625], [727.0, 2539.857142857143], [726.0, 3175.2857142857147], [724.0, 2796.857142857143], [725.0, 3326.0], [721.0, 2964.2], [722.0, 2784.363636363637], [720.0, 3508.6], [719.0, 2475.846153846154], [718.0, 1821.6666666666665], [717.0, 3216.4285714285716], [716.0, 2541.875], [715.0, 4021.4], [714.0, 1745.571428571429], [713.0, 2914.6666666666665], [712.0, 2801.25], [761.0, 3567.3333333333335], [766.0, 2322.5], [767.0, 4059.7142857142853], [752.0, 3971.75], [754.0, 2622.4], [753.0, 3305.8333333333335], [756.0, 2909.272727272727], [755.0, 3711.0], [764.0, 2963.777777777778], [765.0, 4259.666666666667], [762.0, 2806.0], [763.0, 2826.0000000000005], [760.0, 3058.3333333333335], [743.0, 3376.0], [742.0, 2485.0], [740.0, 1841.8461538461538], [741.0, 4593.666666666666], [739.0, 2475.727272727273], [737.0, 3425.625], [738.0, 4379.666666666666], [736.0, 2843.0], [751.0, 2942.285714285714], [750.0, 3057.666666666667], [749.0, 3847.0], [748.0, 3692.0], [747.0, 4204.0], [746.0, 2856.7692307692314], [744.0, 3663.4], [745.0, 4045.5], [758.0, 3450.6666666666665], [759.0, 3908.5], [757.0, 2977.285714285714], [775.0, 3036.6], [786.0, 2292.0], [799.0, 2265.5], [798.0, 3683.0], [797.0, 2476.0], [795.0, 2361.4], [794.0, 3314.2], [793.0, 3839.0], [792.0, 3362.4], [796.0, 3244.8], [790.0, 2348.8571428571427], [791.0, 3060.5], [789.0, 2805.5], [788.0, 2373.0], [787.0, 3383.4], [784.0, 1718.0], [785.0, 3262.1666666666665], [781.0, 1731.3333333333335], [779.0, 3163.3333333333335], [780.0, 3698.25], [778.0, 3452.4], [777.0, 3035.5], [776.0, 3730.75], [783.0, 2885.0], [782.0, 3704.25], [769.0, 3315.0], [768.0, 3670.3846153846152], [771.0, 2701.7272727272725], [770.0, 2200.7777777777783], [773.0, 2427.5714285714284], [774.0, 3440.0], [772.0, 2835.0], [807.0, 3777.75], [828.0, 3190.0], [830.0, 2725.5], [829.0, 2789.6666666666665], [825.0, 2960.3636363636365], [824.0, 2720.666666666667], [827.0, 2741.75], [826.0, 3047.25], [805.0, 3421.6666666666665], [804.0, 3788.333333333333], [806.0, 2729.285714285714], [803.0, 2828.5517241379307], [813.0, 2788.1428571428573], [814.0, 3356.0], [800.0, 3283.0], [815.0, 3667.666666666667], [802.0, 2693.75], [801.0, 3711.0], [822.0, 3480.8], [823.0, 3685.0], [821.0, 2768.142857142857], [820.0, 2611.375], [817.0, 3398.9], [818.0, 4411.0], [819.0, 3157.8], [816.0, 2664.285714285714], [831.0, 2872.6], [812.0, 3461.8333333333335], [810.0, 2697.357142857143], [811.0, 3219.5], [808.0, 3101.142857142857], [809.0, 6875.0], [856.0, 3210.0], [862.0, 2699.75], [863.0, 2289.307692307692], [848.0, 2300.6666666666665], [861.0, 2613.8571428571427], [860.0, 3474.3333333333335], [858.0, 2732.1428571428573], [859.0, 3677.5], [857.0, 2490.714285714286], [846.0, 3052.6], [847.0, 2194.75], [833.0, 3031.0], [834.0, 2789.5], [832.0, 2972.2499999999995], [836.0, 2882.333333333333], [837.0, 3331.333333333333], [839.0, 2572.3333333333335], [838.0, 3367.333333333333], [835.0, 3401.5], [845.0, 2104.25], [842.0, 2351.5384615384614], [844.0, 2157.0], [843.0, 2650.5], [841.0, 3059.4], [840.0, 2093.8181818181815], [853.0, 2913.4], [855.0, 2309.5555555555557], [854.0, 3110.75], [852.0, 2602.6], [850.0, 2535.6153846153848], [851.0, 2217.8888888888887], [849.0, 2953.6], [869.0, 2074.5555555555557], [880.0, 1943.0], [875.0, 1988.5238095238096], [873.0, 2832.75], [874.0, 3364.0], [872.0, 2406.625], [877.0, 3350.2], [876.0, 2524.8571428571427], [878.0, 1950.625], [879.0, 2125.7], [865.0, 2784.875], [866.0, 2803.25], [864.0, 2541.142857142857], [868.0, 2472.375], [867.0, 2091.571428571429], [871.0, 3969.5], [870.0, 2825.3333333333335], [889.0, 2435.0], [890.0, 2505.6666666666665], [888.0, 2283.142857142857], [883.0, 2481.923076923077], [881.0, 2778.5], [882.0, 2343.8333333333335], [884.0, 2140.909090909091], [885.0, 1864.2307692307693], [887.0, 2322.4867724867727], [886.0, 2554.6], [891.0, 2195.0], [893.0, 1913.6], [892.0, 2879.0], [894.0, 1996.0], [895.0, 1872.5384615384614], [903.0, 1778.2666666666667], [913.0, 1460.962962962963], [899.0, 1869.25], [902.0, 2113.714285714286], [900.0, 2222.6], [901.0, 2190.714285714286], [912.0, 1859.0], [927.0, 2154.25], [925.0, 2008.8333333333335], [926.0, 3174.0], [924.0, 2254.3333333333335], [923.0, 2409.0], [922.0, 2407.6666666666665], [921.0, 2250.6666666666665], [920.0, 2294.5], [904.0, 1578.4615384615386], [905.0, 1883.875], [910.0, 1556.7692307692307], [908.0, 1640.9230769230767], [909.0, 1425.6], [907.0, 2021.3], [906.0, 1990.1666666666667], [911.0, 2131.3], [896.0, 2290.777777777778], [898.0, 1853.090909090909], [897.0, 2109.75], [914.0, 1790.0666666666666], [915.0, 2268.285714285714], [916.0, 1637.25], [917.0, 1850.8235294117646], [918.0, 1598.3500000000001], [919.0, 2397.75], [934.0, 2233.3333333333335], [957.0, 1730.0], [959.0, 1598.0], [958.0, 2751.0], [944.0, 1883.5], [954.0, 1824.0], [955.0, 2697.0], [953.0, 2247.5], [952.0, 2271.5], [933.0, 1604.1666666666667], [932.0, 2074.166666666667], [931.0, 2592.2], [930.0, 1883.6666666666667], [929.0, 1293.1666666666665], [928.0, 1819.0], [943.0, 1852.3333333333333], [942.0, 1885.5], [941.0, 1969.5], [940.0, 1697.5], [939.0, 2344.5], [938.0, 1696.0], [937.0, 2068.5], [936.0, 1836.2857142857142], [950.0, 2109.6666666666665], [949.0, 2693.0], [948.0, 1805.0], [946.0, 2250.5], [947.0, 2710.0], [945.0, 2067.0], [962.0, 1555.6666666666665], [971.0, 1018.0], [972.0, 2739.6666666666665], [970.0, 1013.5], [968.0, 1444.75], [969.0, 2742.0], [966.0, 2131.6666666666665], [967.0, 2691.0], [986.0, 2687.0], [984.0, 2683.6666666666665], [989.0, 1101.5], [987.0, 2678.0], [964.0, 1853.5], [963.0, 1853.5], [960.0, 1079.0], [961.0, 2716.5], [973.0, 2718.0], [991.0, 1095.0], [976.0, 2746.5], [978.0, 2670.0], [977.0, 2723.0], [981.0, 2694.0], [980.0, 2675.5], [990.0, 1094.0], [997.0, 1084.0], [996.0, 1087.0], [994.0, 1085.0], [992.0, 1095.0], [1.0, 18407.333333333332]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[493.56885714285664, 5164.2081428571455]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 997.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5494.5, "minX": 1.63090446E12, "maxY": 122646.23333333334, "series": [{"data": [[1.63090452E12, 122646.23333333334], [1.63090458E12, 44653.55], [1.63090446E12, 5494.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63090452E12, 30476.816666666666], [1.63090458E12, 15667.866666666667], [1.63090446E12, 7105.966666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090458E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2159.8428428428415, "minX": 1.63090446E12, "maxY": 10398.610889110894, "series": [{"data": [[1.63090452E12, 3294.2623155788942], [1.63090458E12, 10398.610889110894], [1.63090446E12, 2159.8428428428415]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090458E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2147.787787787789, "minX": 1.63090446E12, "maxY": 10356.704295704296, "series": [{"data": [[1.63090452E12, 3280.0902725681462], [1.63090458E12, 10356.704295704296], [1.63090446E12, 2147.787787787789]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090458E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1017.9549549549544, "minX": 1.63090446E12, "maxY": 1925.6358641358654, "series": [{"data": [[1.63090452E12, 1046.0685171292816], [1.63090458E12, 1925.6358641358654], [1.63090446E12, 1017.9549549549544]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090458E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.63090446E12, "maxY": 34667.0, "series": [{"data": [[1.63090452E12, 9001.0], [1.63090458E12, 34667.0], [1.63090446E12, 4522.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63090452E12, 6642.400000000001], [1.63090458E12, 27548.7], [1.63090446E12, 3928.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63090452E12, 8448.34], [1.63090458E12, 33816.759999999995], [1.63090446E12, 4232.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63090452E12, 7411.4], [1.63090458E12, 31009.749999999996], [1.63090446E12, 4133.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63090452E12, 32.0], [1.63090458E12, 56.0], [1.63090446E12, 24.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63090452E12, 2895.0], [1.63090458E12, 4995.5], [1.63090446E12, 2511.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090458E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 58.0, "minX": 4.0, "maxY": 25587.0, "series": [{"data": [[32.0, 17746.0], [36.0, 2073.0], [37.0, 5496.0], [43.0, 3288.0], [45.0, 5559.5], [46.0, 645.5], [59.0, 440.0], [61.0, 889.0], [66.0, 73.0], [4.0, 66.0], [70.0, 1508.5], [104.0, 4764.0], [107.0, 5675.0], [108.0, 6110.5], [111.0, 3412.0], [109.0, 7942.0], [113.0, 2798.0], [114.0, 3898.5], [116.0, 6507.5], [120.0, 3662.5], [121.0, 1828.0], [137.0, 2400.0], [10.0, 1092.0], [182.0, 1948.5], [11.0, 17889.0], [204.0, 1745.0], [201.0, 3073.0], [205.0, 4056.0], [208.0, 3986.0], [215.0, 4813.0], [212.0, 4964.5], [233.0, 2566.0], [15.0, 3379.0], [269.0, 2246.0], [296.0, 1536.0], [19.0, 109.0], [23.0, 58.0], [380.0, 1223.5], [25.0, 25587.0], [422.0, 2667.0], [434.0, 3490.0], [27.0, 14955.0], [28.0, 22221.5], [29.0, 21651.0], [30.0, 12963.0], [31.0, 10059.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 21199.0], [4.0, 21037.0], [19.0, 21036.5], [233.0, 1894.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 434.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 25583.0, "series": [{"data": [[32.0, 17744.5], [36.0, 2070.0], [37.0, 5496.0], [43.0, 3288.0], [45.0, 5559.5], [46.0, 645.5], [59.0, 440.0], [61.0, 462.0], [66.0, 72.0], [4.0, 66.0], [70.0, 1508.0], [104.0, 4764.0], [107.0, 5675.0], [108.0, 6110.5], [111.0, 3409.0], [109.0, 7942.0], [113.0, 2798.0], [114.0, 3890.5], [116.0, 6507.5], [120.0, 3662.0], [121.0, 1828.0], [137.0, 2400.0], [10.0, 1091.5], [182.0, 1948.5], [11.0, 17887.0], [204.0, 1655.0], [201.0, 3073.0], [205.0, 4055.0], [208.0, 3983.0], [215.0, 4813.0], [212.0, 4964.5], [233.0, 2565.0], [15.0, 3379.0], [269.0, 2242.0], [296.0, 1535.0], [19.0, 109.0], [23.0, 57.0], [380.0, 1223.0], [25.0, 25583.0], [422.0, 2667.0], [434.0, 3488.5], [27.0, 14925.0], [28.0, 22216.0], [29.0, 21647.0], [30.0, 12961.5], [31.0, 10053.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 0.0], [4.0, 0.0], [19.0, 0.0], [233.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 434.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.63090446E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63090452E12, 66.66666666666667], [1.63090458E12, 33.333333333333336], [1.63090446E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090458E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090446E12, "maxY": 66.61666666666666, "series": [{"data": [[1.63090452E12, 66.61666666666666], [1.63090458E12, 33.13333333333333], [1.63090446E12, 16.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63090452E12, 0.03333333333333333], [1.63090458E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.63090458E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090458E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090446E12, "maxY": 66.61666666666666, "series": [{"data": [[1.63090452E12, 0.03333333333333333], [1.63090458E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63090452E12, 66.61666666666666], [1.63090458E12, 33.13333333333333], [1.63090446E12, 16.65]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090458E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090446E12, "maxY": 66.61666666666666, "series": [{"data": [[1.63090452E12, 66.61666666666666], [1.63090458E12, 33.13333333333333], [1.63090446E12, 16.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63090452E12, 0.03333333333333333], [1.63090458E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090458E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

