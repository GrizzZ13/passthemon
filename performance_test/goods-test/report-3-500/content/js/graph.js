/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 17.0, "minX": 0.0, "maxY": 72633.0, "series": [{"data": [[0.0, 17.0], [0.1, 18.0], [0.2, 18.0], [0.3, 18.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 20.0], [1.2, 20.0], [1.3, 20.0], [1.4, 20.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 20.0], [2.0, 20.0], [2.1, 20.0], [2.2, 20.0], [2.3, 20.0], [2.4, 21.0], [2.5, 21.0], [2.6, 21.0], [2.7, 21.0], [2.8, 21.0], [2.9, 21.0], [3.0, 21.0], [3.1, 21.0], [3.2, 21.0], [3.3, 21.0], [3.4, 21.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 22.0], [3.9, 22.0], [4.0, 22.0], [4.1, 22.0], [4.2, 22.0], [4.3, 22.0], [4.4, 22.0], [4.5, 22.0], [4.6, 22.0], [4.7, 23.0], [4.8, 23.0], [4.9, 23.0], [5.0, 23.0], [5.1, 23.0], [5.2, 23.0], [5.3, 23.0], [5.4, 23.0], [5.5, 23.0], [5.6, 23.0], [5.7, 24.0], [5.8, 24.0], [5.9, 24.0], [6.0, 24.0], [6.1, 24.0], [6.2, 24.0], [6.3, 25.0], [6.4, 25.0], [6.5, 25.0], [6.6, 25.0], [6.7, 26.0], [6.8, 26.0], [6.9, 26.0], [7.0, 26.0], [7.1, 26.0], [7.2, 27.0], [7.3, 27.0], [7.4, 28.0], [7.5, 28.0], [7.6, 28.0], [7.7, 28.0], [7.8, 28.0], [7.9, 29.0], [8.0, 30.0], [8.1, 30.0], [8.2, 31.0], [8.3, 31.0], [8.4, 32.0], [8.5, 32.0], [8.6, 33.0], [8.7, 33.0], [8.8, 33.0], [8.9, 34.0], [9.0, 34.0], [9.1, 35.0], [9.2, 35.0], [9.3, 35.0], [9.4, 36.0], [9.5, 36.0], [9.6, 37.0], [9.7, 37.0], [9.8, 37.0], [9.9, 38.0], [10.0, 38.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 40.0], [10.5, 40.0], [10.6, 41.0], [10.7, 41.0], [10.8, 42.0], [10.9, 42.0], [11.0, 43.0], [11.1, 43.0], [11.2, 43.0], [11.3, 44.0], [11.4, 44.0], [11.5, 45.0], [11.6, 45.0], [11.7, 46.0], [11.8, 46.0], [11.9, 47.0], [12.0, 47.0], [12.1, 47.0], [12.2, 48.0], [12.3, 48.0], [12.4, 49.0], [12.5, 49.0], [12.6, 49.0], [12.7, 50.0], [12.8, 50.0], [12.9, 50.0], [13.0, 51.0], [13.1, 52.0], [13.2, 52.0], [13.3, 52.0], [13.4, 53.0], [13.5, 53.0], [13.6, 54.0], [13.7, 55.0], [13.8, 55.0], [13.9, 55.0], [14.0, 56.0], [14.1, 56.0], [14.2, 57.0], [14.3, 57.0], [14.4, 58.0], [14.5, 59.0], [14.6, 59.0], [14.7, 59.0], [14.8, 60.0], [14.9, 61.0], [15.0, 61.0], [15.1, 62.0], [15.2, 62.0], [15.3, 63.0], [15.4, 63.0], [15.5, 64.0], [15.6, 64.0], [15.7, 65.0], [15.8, 66.0], [15.9, 67.0], [16.0, 68.0], [16.1, 69.0], [16.2, 69.0], [16.3, 70.0], [16.4, 70.0], [16.5, 71.0], [16.6, 72.0], [16.7, 73.0], [16.8, 74.0], [16.9, 74.0], [17.0, 75.0], [17.1, 76.0], [17.2, 77.0], [17.3, 77.0], [17.4, 79.0], [17.5, 79.0], [17.6, 80.0], [17.7, 81.0], [17.8, 82.0], [17.9, 83.0], [18.0, 85.0], [18.1, 86.0], [18.2, 87.0], [18.3, 88.0], [18.4, 91.0], [18.5, 92.0], [18.6, 93.0], [18.7, 95.0], [18.8, 96.0], [18.9, 97.0], [19.0, 99.0], [19.1, 100.0], [19.2, 102.0], [19.3, 104.0], [19.4, 105.0], [19.5, 106.0], [19.6, 107.0], [19.7, 109.0], [19.8, 111.0], [19.9, 114.0], [20.0, 117.0], [20.1, 118.0], [20.2, 120.0], [20.3, 121.0], [20.4, 122.0], [20.5, 125.0], [20.6, 127.0], [20.7, 130.0], [20.8, 131.0], [20.9, 132.0], [21.0, 135.0], [21.1, 137.0], [21.2, 139.0], [21.3, 142.0], [21.4, 144.0], [21.5, 145.0], [21.6, 148.0], [21.7, 149.0], [21.8, 150.0], [21.9, 154.0], [22.0, 157.0], [22.1, 161.0], [22.2, 164.0], [22.3, 167.0], [22.4, 170.0], [22.5, 172.0], [22.6, 177.0], [22.7, 180.0], [22.8, 183.0], [22.9, 188.0], [23.0, 191.0], [23.1, 195.0], [23.2, 200.0], [23.3, 202.0], [23.4, 204.0], [23.5, 206.0], [23.6, 210.0], [23.7, 212.0], [23.8, 217.0], [23.9, 219.0], [24.0, 221.0], [24.1, 223.0], [24.2, 224.0], [24.3, 227.0], [24.4, 234.0], [24.5, 238.0], [24.6, 240.0], [24.7, 242.0], [24.8, 243.0], [24.9, 245.0], [25.0, 247.0], [25.1, 248.0], [25.2, 251.0], [25.3, 254.0], [25.4, 257.0], [25.5, 259.0], [25.6, 261.0], [25.7, 263.0], [25.8, 264.0], [25.9, 267.0], [26.0, 269.0], [26.1, 270.0], [26.2, 272.0], [26.3, 276.0], [26.4, 278.0], [26.5, 281.0], [26.6, 282.0], [26.7, 284.0], [26.8, 288.0], [26.9, 292.0], [27.0, 296.0], [27.1, 300.0], [27.2, 302.0], [27.3, 305.0], [27.4, 309.0], [27.5, 312.0], [27.6, 316.0], [27.7, 317.0], [27.8, 321.0], [27.9, 322.0], [28.0, 326.0], [28.1, 331.0], [28.2, 337.0], [28.3, 340.0], [28.4, 343.0], [28.5, 346.0], [28.6, 349.0], [28.7, 351.0], [28.8, 352.0], [28.9, 355.0], [29.0, 357.0], [29.1, 363.0], [29.2, 365.0], [29.3, 368.0], [29.4, 370.0], [29.5, 376.0], [29.6, 377.0], [29.7, 379.0], [29.8, 385.0], [29.9, 388.0], [30.0, 391.0], [30.1, 393.0], [30.2, 395.0], [30.3, 398.0], [30.4, 401.0], [30.5, 404.0], [30.6, 406.0], [30.7, 408.0], [30.8, 411.0], [30.9, 413.0], [31.0, 416.0], [31.1, 417.0], [31.2, 422.0], [31.3, 427.0], [31.4, 430.0], [31.5, 433.0], [31.6, 435.0], [31.7, 439.0], [31.8, 441.0], [31.9, 444.0], [32.0, 449.0], [32.1, 454.0], [32.2, 459.0], [32.3, 464.0], [32.4, 467.0], [32.5, 470.0], [32.6, 476.0], [32.7, 479.0], [32.8, 481.0], [32.9, 485.0], [33.0, 489.0], [33.1, 495.0], [33.2, 500.0], [33.3, 505.0], [33.4, 508.0], [33.5, 510.0], [33.6, 512.0], [33.7, 516.0], [33.8, 520.0], [33.9, 525.0], [34.0, 530.0], [34.1, 533.0], [34.2, 535.0], [34.3, 537.0], [34.4, 541.0], [34.5, 544.0], [34.6, 547.0], [34.7, 554.0], [34.8, 557.0], [34.9, 561.0], [35.0, 563.0], [35.1, 568.0], [35.2, 572.0], [35.3, 575.0], [35.4, 581.0], [35.5, 583.0], [35.6, 585.0], [35.7, 590.0], [35.8, 592.0], [35.9, 598.0], [36.0, 600.0], [36.1, 604.0], [36.2, 606.0], [36.3, 609.0], [36.4, 611.0], [36.5, 615.0], [36.6, 616.0], [36.7, 618.0], [36.8, 622.0], [36.9, 623.0], [37.0, 625.0], [37.1, 627.0], [37.2, 632.0], [37.3, 635.0], [37.4, 639.0], [37.5, 641.0], [37.6, 646.0], [37.7, 650.0], [37.8, 653.0], [37.9, 659.0], [38.0, 664.0], [38.1, 668.0], [38.2, 670.0], [38.3, 673.0], [38.4, 678.0], [38.5, 679.0], [38.6, 685.0], [38.7, 688.0], [38.8, 690.0], [38.9, 692.0], [39.0, 697.0], [39.1, 698.0], [39.2, 701.0], [39.3, 704.0], [39.4, 709.0], [39.5, 715.0], [39.6, 721.0], [39.7, 727.0], [39.8, 733.0], [39.9, 737.0], [40.0, 741.0], [40.1, 752.0], [40.2, 760.0], [40.3, 765.0], [40.4, 770.0], [40.5, 776.0], [40.6, 788.0], [40.7, 797.0], [40.8, 806.0], [40.9, 809.0], [41.0, 835.0], [41.1, 841.0], [41.2, 854.0], [41.3, 864.0], [41.4, 878.0], [41.5, 885.0], [41.6, 898.0], [41.7, 913.0], [41.8, 923.0], [41.9, 935.0], [42.0, 954.0], [42.1, 959.0], [42.2, 968.0], [42.3, 975.0], [42.4, 984.0], [42.5, 994.0], [42.6, 1003.0], [42.7, 1011.0], [42.8, 1021.0], [42.9, 1027.0], [43.0, 1042.0], [43.1, 1046.0], [43.2, 1058.0], [43.3, 1071.0], [43.4, 1077.0], [43.5, 1088.0], [43.6, 1091.0], [43.7, 1098.0], [43.8, 1114.0], [43.9, 1122.0], [44.0, 1133.0], [44.1, 1147.0], [44.2, 1159.0], [44.3, 1184.0], [44.4, 1208.0], [44.5, 1233.0], [44.6, 1246.0], [44.7, 1260.0], [44.8, 1272.0], [44.9, 1288.0], [45.0, 1298.0], [45.1, 1312.0], [45.2, 1323.0], [45.3, 1354.0], [45.4, 1366.0], [45.5, 1388.0], [45.6, 1396.0], [45.7, 1405.0], [45.8, 1426.0], [45.9, 1442.0], [46.0, 1454.0], [46.1, 1479.0], [46.2, 1483.0], [46.3, 1498.0], [46.4, 1519.0], [46.5, 1537.0], [46.6, 1552.0], [46.7, 1573.0], [46.8, 1614.0], [46.9, 1627.0], [47.0, 1668.0], [47.1, 1688.0], [47.2, 1696.0], [47.3, 1713.0], [47.4, 1725.0], [47.5, 1733.0], [47.6, 1750.0], [47.7, 1757.0], [47.8, 1765.0], [47.9, 1773.0], [48.0, 1787.0], [48.1, 1799.0], [48.2, 1819.0], [48.3, 1827.0], [48.4, 1841.0], [48.5, 1865.0], [48.6, 1883.0], [48.7, 1892.0], [48.8, 1899.0], [48.9, 1902.0], [49.0, 1913.0], [49.1, 1926.0], [49.2, 1938.0], [49.3, 1957.0], [49.4, 1967.0], [49.5, 1979.0], [49.6, 1985.0], [49.7, 1991.0], [49.8, 2007.0], [49.9, 2019.0], [50.0, 2025.0], [50.1, 2038.0], [50.2, 2045.0], [50.3, 2056.0], [50.4, 2061.0], [50.5, 2083.0], [50.6, 2101.0], [50.7, 2118.0], [50.8, 2129.0], [50.9, 2150.0], [51.0, 2159.0], [51.1, 2181.0], [51.2, 2187.0], [51.3, 2211.0], [51.4, 2219.0], [51.5, 2232.0], [51.6, 2241.0], [51.7, 2250.0], [51.8, 2262.0], [51.9, 2271.0], [52.0, 2283.0], [52.1, 2290.0], [52.2, 2304.0], [52.3, 2316.0], [52.4, 2326.0], [52.5, 2343.0], [52.6, 2353.0], [52.7, 2374.0], [52.8, 2383.0], [52.9, 2391.0], [53.0, 2397.0], [53.1, 2411.0], [53.2, 2420.0], [53.3, 2425.0], [53.4, 2443.0], [53.5, 2457.0], [53.6, 2475.0], [53.7, 2497.0], [53.8, 2528.0], [53.9, 2550.0], [54.0, 2581.0], [54.1, 2595.0], [54.2, 2622.0], [54.3, 2656.0], [54.4, 2689.0], [54.5, 2726.0], [54.6, 2753.0], [54.7, 2833.0], [54.8, 2881.0], [54.9, 2914.0], [55.0, 2959.0], [55.1, 2994.0], [55.2, 3049.0], [55.3, 3104.0], [55.4, 3187.0], [55.5, 3222.0], [55.6, 3291.0], [55.7, 3322.0], [55.8, 3380.0], [55.9, 3404.0], [56.0, 3489.0], [56.1, 3534.0], [56.2, 3573.0], [56.3, 3622.0], [56.4, 3663.0], [56.5, 3710.0], [56.6, 3790.0], [56.7, 3860.0], [56.8, 3912.0], [56.9, 3971.0], [57.0, 4056.0], [57.1, 4068.0], [57.2, 4072.0], [57.3, 4075.0], [57.4, 4076.0], [57.5, 4077.0], [57.6, 4078.0], [57.7, 4079.0], [57.8, 4080.0], [57.9, 4080.0], [58.0, 4080.0], [58.1, 4081.0], [58.2, 4081.0], [58.3, 4081.0], [58.4, 4082.0], [58.5, 4082.0], [58.6, 4082.0], [58.7, 4083.0], [58.8, 4083.0], [58.9, 4083.0], [59.0, 4084.0], [59.1, 4084.0], [59.2, 4084.0], [59.3, 4085.0], [59.4, 4085.0], [59.5, 4085.0], [59.6, 4086.0], [59.7, 4086.0], [59.8, 4086.0], [59.9, 4087.0], [60.0, 4087.0], [60.1, 4087.0], [60.2, 4087.0], [60.3, 4088.0], [60.4, 4088.0], [60.5, 4088.0], [60.6, 4089.0], [60.7, 4089.0], [60.8, 4089.0], [60.9, 4089.0], [61.0, 4089.0], [61.1, 4089.0], [61.2, 4090.0], [61.3, 4090.0], [61.4, 4090.0], [61.5, 4091.0], [61.6, 4091.0], [61.7, 4092.0], [61.8, 4092.0], [61.9, 4092.0], [62.0, 4093.0], [62.1, 4093.0], [62.2, 4094.0], [62.3, 4094.0], [62.4, 4094.0], [62.5, 4094.0], [62.6, 4094.0], [62.7, 4095.0], [62.8, 4095.0], [62.9, 4096.0], [63.0, 4096.0], [63.1, 4096.0], [63.2, 4096.0], [63.3, 4097.0], [63.4, 4097.0], [63.5, 4097.0], [63.6, 4098.0], [63.7, 4098.0], [63.8, 4099.0], [63.9, 4099.0], [64.0, 4099.0], [64.1, 4099.0], [64.2, 4100.0], [64.3, 4100.0], [64.4, 4100.0], [64.5, 4101.0], [64.6, 4101.0], [64.7, 4101.0], [64.8, 4102.0], [64.9, 4102.0], [65.0, 4102.0], [65.1, 4103.0], [65.2, 4103.0], [65.3, 4104.0], [65.4, 4104.0], [65.5, 4105.0], [65.6, 4105.0], [65.7, 4105.0], [65.8, 4106.0], [65.9, 4106.0], [66.0, 4106.0], [66.1, 4107.0], [66.2, 4107.0], [66.3, 4107.0], [66.4, 4108.0], [66.5, 4108.0], [66.6, 4109.0], [66.7, 4111.0], [66.8, 4112.0], [66.9, 4116.0], [67.0, 4123.0], [67.1, 4150.0], [67.2, 4178.0], [67.3, 4215.0], [67.4, 4237.0], [67.5, 4291.0], [67.6, 4338.0], [67.7, 4400.0], [67.8, 4451.0], [67.9, 4468.0], [68.0, 4578.0], [68.1, 4665.0], [68.2, 4705.0], [68.3, 4760.0], [68.4, 4817.0], [68.5, 4852.0], [68.6, 4941.0], [68.7, 4986.0], [68.8, 5038.0], [68.9, 5068.0], [69.0, 5089.0], [69.1, 5152.0], [69.2, 5235.0], [69.3, 5281.0], [69.4, 5295.0], [69.5, 5354.0], [69.6, 5412.0], [69.7, 5452.0], [69.8, 5502.0], [69.9, 5521.0], [70.0, 5584.0], [70.1, 5609.0], [70.2, 5654.0], [70.3, 5677.0], [70.4, 5719.0], [70.5, 5773.0], [70.6, 5846.0], [70.7, 5879.0], [70.8, 5931.0], [70.9, 5980.0], [71.0, 6048.0], [71.1, 6072.0], [71.2, 6098.0], [71.3, 6106.0], [71.4, 6120.0], [71.5, 6184.0], [71.6, 6234.0], [71.7, 6293.0], [71.8, 6362.0], [71.9, 6404.0], [72.0, 6484.0], [72.1, 6526.0], [72.2, 6569.0], [72.3, 6581.0], [72.4, 6606.0], [72.5, 6634.0], [72.6, 6674.0], [72.7, 6717.0], [72.8, 6762.0], [72.9, 6843.0], [73.0, 6860.0], [73.1, 6882.0], [73.2, 6911.0], [73.3, 6957.0], [73.4, 7005.0], [73.5, 7090.0], [73.6, 7166.0], [73.7, 7239.0], [73.8, 7330.0], [73.9, 7395.0], [74.0, 7424.0], [74.1, 7494.0], [74.2, 7530.0], [74.3, 7561.0], [74.4, 7570.0], [74.5, 7588.0], [74.6, 7612.0], [74.7, 7642.0], [74.8, 7699.0], [74.9, 7723.0], [75.0, 7757.0], [75.1, 7776.0], [75.2, 7810.0], [75.3, 7845.0], [75.4, 7921.0], [75.5, 7989.0], [75.6, 8022.0], [75.7, 8088.0], [75.8, 8133.0], [75.9, 8184.0], [76.0, 8218.0], [76.1, 8237.0], [76.2, 8264.0], [76.3, 8299.0], [76.4, 8323.0], [76.5, 8376.0], [76.6, 8465.0], [76.7, 8509.0], [76.8, 8568.0], [76.9, 8693.0], [77.0, 8750.0], [77.1, 8850.0], [77.2, 8935.0], [77.3, 9076.0], [77.4, 9095.0], [77.5, 9192.0], [77.6, 9291.0], [77.7, 9418.0], [77.8, 9540.0], [77.9, 9577.0], [78.0, 9649.0], [78.1, 9761.0], [78.2, 9911.0], [78.3, 9991.0], [78.4, 10148.0], [78.5, 10220.0], [78.6, 10363.0], [78.7, 10426.0], [78.8, 10530.0], [78.9, 10628.0], [79.0, 10706.0], [79.1, 10808.0], [79.2, 10858.0], [79.3, 10955.0], [79.4, 11061.0], [79.5, 11174.0], [79.6, 11274.0], [79.7, 11347.0], [79.8, 11486.0], [79.9, 11644.0], [80.0, 11701.0], [80.1, 11785.0], [80.2, 11954.0], [80.3, 12090.0], [80.4, 12263.0], [80.5, 12320.0], [80.6, 12417.0], [80.7, 12502.0], [80.8, 12586.0], [80.9, 12667.0], [81.0, 12771.0], [81.1, 12841.0], [81.2, 13005.0], [81.3, 13051.0], [81.4, 13200.0], [81.5, 13301.0], [81.6, 13377.0], [81.7, 13494.0], [81.8, 13622.0], [81.9, 13713.0], [82.0, 13832.0], [82.1, 13949.0], [82.2, 14107.0], [82.3, 14216.0], [82.4, 14369.0], [82.5, 14434.0], [82.6, 14537.0], [82.7, 14622.0], [82.8, 14726.0], [82.9, 14965.0], [83.0, 15009.0], [83.1, 15106.0], [83.2, 15214.0], [83.3, 15310.0], [83.4, 15496.0], [83.5, 15586.0], [83.6, 15636.0], [83.7, 15803.0], [83.8, 15881.0], [83.9, 15967.0], [84.0, 16071.0], [84.1, 16193.0], [84.2, 16274.0], [84.3, 16364.0], [84.4, 16497.0], [84.5, 16583.0], [84.6, 16706.0], [84.7, 16760.0], [84.8, 16807.0], [84.9, 16843.0], [85.0, 16956.0], [85.1, 17067.0], [85.2, 17129.0], [85.3, 17281.0], [85.4, 17325.0], [85.5, 17492.0], [85.6, 17578.0], [85.7, 17693.0], [85.8, 17745.0], [85.9, 17845.0], [86.0, 18057.0], [86.1, 18191.0], [86.2, 18341.0], [86.3, 18371.0], [86.4, 18472.0], [86.5, 18576.0], [86.6, 18676.0], [86.7, 18748.0], [86.8, 18884.0], [86.9, 18965.0], [87.0, 19028.0], [87.1, 19085.0], [87.2, 19186.0], [87.3, 19288.0], [87.4, 19419.0], [87.5, 19511.0], [87.6, 19701.0], [87.7, 19746.0], [87.8, 19878.0], [87.9, 19936.0], [88.0, 20103.0], [88.1, 20207.0], [88.2, 20276.0], [88.3, 20313.0], [88.4, 20407.0], [88.5, 20556.0], [88.6, 20618.0], [88.7, 20700.0], [88.8, 20798.0], [88.9, 20935.0], [89.0, 20998.0], [89.1, 21051.0], [89.2, 21090.0], [89.3, 21152.0], [89.4, 21192.0], [89.5, 21402.0], [89.6, 21522.0], [89.7, 21625.0], [89.8, 21847.0], [89.9, 21883.0], [90.0, 21961.0], [90.1, 22036.0], [90.2, 22181.0], [90.3, 22252.0], [90.4, 22358.0], [90.5, 22508.0], [90.6, 22566.0], [90.7, 22724.0], [90.8, 22826.0], [90.9, 22917.0], [91.0, 23052.0], [91.1, 23106.0], [91.2, 23183.0], [91.3, 23227.0], [91.4, 23298.0], [91.5, 23406.0], [91.6, 23440.0], [91.7, 23624.0], [91.8, 23732.0], [91.9, 23883.0], [92.0, 24088.0], [92.1, 24177.0], [92.2, 24321.0], [92.3, 24622.0], [92.4, 24734.0], [92.5, 24807.0], [92.6, 25983.0], [92.7, 26755.0], [92.8, 27508.0], [92.9, 28313.0], [93.0, 29251.0], [93.1, 30026.0], [93.2, 30032.0], [93.3, 30080.0], [93.4, 30112.0], [93.5, 30146.0], [93.6, 30177.0], [93.7, 30214.0], [93.8, 30259.0], [93.9, 30848.0], [94.0, 31925.0], [94.1, 31969.0], [94.2, 32225.0], [94.3, 33265.0], [94.4, 33868.0], [94.5, 34544.0], [94.6, 35393.0], [94.7, 36067.0], [94.8, 37184.0], [94.9, 37580.0], [95.0, 38245.0], [95.1, 39009.0], [95.2, 39289.0], [95.3, 39955.0], [95.4, 40824.0], [95.5, 41792.0], [95.6, 42267.0], [95.7, 42897.0], [95.8, 43769.0], [95.9, 44479.0], [96.0, 44974.0], [96.1, 45820.0], [96.2, 46756.0], [96.3, 47431.0], [96.4, 48101.0], [96.5, 48998.0], [96.6, 49883.0], [96.7, 50391.0], [96.8, 50882.0], [96.9, 51664.0], [97.0, 52380.0], [97.1, 53418.0], [97.2, 54102.0], [97.3, 54442.0], [97.4, 55234.0], [97.5, 56034.0], [97.6, 57166.0], [97.7, 57532.0], [97.8, 58441.0], [97.9, 59186.0], [98.0, 59653.0], [98.1, 59812.0], [98.2, 59945.0], [98.3, 60530.0], [98.4, 61364.0], [98.5, 61700.0], [98.6, 62249.0], [98.7, 63112.0], [98.8, 63818.0], [98.9, 64451.0], [99.0, 65552.0], [99.1, 66181.0], [99.2, 67054.0], [99.3, 67976.0], [99.4, 68532.0], [99.5, 69288.0], [99.6, 70283.0], [99.7, 70823.0], [99.8, 72073.0], [99.9, 72570.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 955.0, "series": [{"data": [[0.0, 955.0], [71500.0, 1.0], [100.0, 204.0], [34500.0, 1.0], [35300.0, 1.0], [36100.0, 1.0], [37700.0, 2.0], [41700.0, 1.0], [42500.0, 2.0], [44100.0, 1.0], [44900.0, 1.0], [46500.0, 1.0], [48100.0, 2.0], [48900.0, 1.0], [50500.0, 1.0], [200.0, 195.0], [52100.0, 1.0], [53700.0, 2.0], [54500.0, 1.0], [56900.0, 1.0], [58500.0, 1.0], [59300.0, 1.0], [61700.0, 2.0], [62500.0, 2.0], [63300.0, 1.0], [67400.0, 1.0], [69000.0, 2.0], [300.0, 164.0], [400.0, 142.0], [500.0, 138.0], [600.0, 161.0], [700.0, 77.0], [800.0, 45.0], [900.0, 44.0], [1000.0, 60.0], [1100.0, 33.0], [1200.0, 32.0], [1300.0, 31.0], [1400.0, 34.0], [1500.0, 22.0], [1600.0, 23.0], [1700.0, 45.0], [1800.0, 35.0], [1900.0, 48.0], [2000.0, 40.0], [2100.0, 33.0], [2200.0, 48.0], [2300.0, 44.0], [2400.0, 32.0], [2500.0, 21.0], [2600.0, 16.0], [2700.0, 10.0], [2800.0, 11.0], [2900.0, 12.0], [3000.0, 8.0], [3100.0, 8.0], [3200.0, 12.0], [3300.0, 10.0], [3400.0, 7.0], [3500.0, 14.0], [3600.0, 9.0], [3700.0, 9.0], [3800.0, 6.0], [3900.0, 9.0], [4000.0, 360.0], [4200.0, 15.0], [4100.0, 155.0], [4300.0, 7.0], [66500.0, 1.0], [4400.0, 12.0], [4600.0, 8.0], [4500.0, 5.0], [71300.0, 1.0], [4800.0, 10.0], [4700.0, 8.0], [5000.0, 16.0], [4900.0, 8.0], [5100.0, 7.0], [5200.0, 12.0], [5300.0, 8.0], [5400.0, 11.0], [5500.0, 14.0], [5600.0, 15.0], [5700.0, 8.0], [5800.0, 11.0], [6000.0, 15.0], [6100.0, 14.0], [5900.0, 9.0], [6200.0, 11.0], [6300.0, 8.0], [6400.0, 7.0], [6500.0, 17.0], [6600.0, 13.0], [6700.0, 12.0], [6800.0, 14.0], [6900.0, 12.0], [7000.0, 7.0], [7100.0, 7.0], [7300.0, 9.0], [7400.0, 12.0], [7200.0, 3.0], [7500.0, 20.0], [7600.0, 13.0], [7800.0, 9.0], [7900.0, 8.0], [7700.0, 18.0], [8000.0, 11.0], [8100.0, 10.0], [8200.0, 19.0], [8400.0, 8.0], [8600.0, 6.0], [8800.0, 6.0], [9000.0, 10.0], [9200.0, 6.0], [9400.0, 5.0], [9600.0, 5.0], [9800.0, 4.0], [10000.0, 1.0], [10200.0, 4.0], [10400.0, 5.0], [10600.0, 4.0], [10800.0, 8.0], [11200.0, 6.0], [11000.0, 3.0], [11400.0, 5.0], [11600.0, 7.0], [12000.0, 3.0], [11800.0, 2.0], [12200.0, 3.0], [12400.0, 6.0], [12600.0, 3.0], [13000.0, 7.0], [13200.0, 5.0], [12800.0, 4.0], [13400.0, 5.0], [13600.0, 5.0], [13800.0, 3.0], [14000.0, 4.0], [14200.0, 3.0], [14400.0, 8.0], [14600.0, 6.0], [14800.0, 3.0], [15000.0, 6.0], [15200.0, 5.0], [15400.0, 6.0], [15600.0, 5.0], [15800.0, 6.0], [16000.0, 4.0], [16200.0, 6.0], [17200.0, 5.0], [16400.0, 5.0], [16800.0, 9.0], [17600.0, 5.0], [18000.0, 3.0], [18400.0, 5.0], [18800.0, 5.0], [19200.0, 6.0], [20000.0, 3.0], [20400.0, 4.0], [19600.0, 1.0], [20800.0, 3.0], [21200.0, 2.0], [21600.0, 6.0], [22000.0, 3.0], [22400.0, 3.0], [22800.0, 4.0], [23200.0, 7.0], [23600.0, 3.0], [24000.0, 5.0], [24400.0, 2.0], [24800.0, 4.0], [26400.0, 1.0], [26800.0, 1.0], [27200.0, 1.0], [28400.0, 1.0], [29200.0, 2.0], [30000.0, 15.0], [30400.0, 1.0], [30800.0, 2.0], [32000.0, 1.0], [32800.0, 1.0], [33600.0, 1.0], [34400.0, 1.0], [35200.0, 3.0], [36000.0, 1.0], [36800.0, 1.0], [37600.0, 2.0], [38400.0, 1.0], [39200.0, 2.0], [40800.0, 3.0], [43200.0, 1.0], [44800.0, 1.0], [47200.0, 1.0], [48000.0, 2.0], [48800.0, 1.0], [52800.0, 1.0], [54400.0, 1.0], [55200.0, 3.0], [56000.0, 1.0], [58400.0, 1.0], [60000.0, 1.0], [65600.0, 1.0], [67200.0, 1.0], [72000.0, 2.0], [67100.0, 1.0], [68700.0, 1.0], [70300.0, 1.0], [33900.0, 1.0], [35500.0, 1.0], [36300.0, 1.0], [37100.0, 1.0], [38700.0, 2.0], [39500.0, 1.0], [40300.0, 1.0], [41100.0, 1.0], [41900.0, 1.0], [45100.0, 2.0], [45900.0, 1.0], [46700.0, 2.0], [49900.0, 1.0], [50700.0, 1.0], [52300.0, 1.0], [53100.0, 1.0], [55500.0, 1.0], [57100.0, 2.0], [59500.0, 2.0], [61900.0, 1.0], [64300.0, 1.0], [65100.0, 2.0], [69400.0, 1.0], [72600.0, 2.0], [68500.0, 1.0], [16500.0, 6.0], [16900.0, 4.0], [17300.0, 5.0], [17700.0, 7.0], [18100.0, 5.0], [18500.0, 5.0], [18900.0, 6.0], [19300.0, 3.0], [19700.0, 9.0], [20100.0, 5.0], [20500.0, 4.0], [20900.0, 7.0], [21300.0, 2.0], [22100.0, 4.0], [22500.0, 10.0], [21700.0, 1.0], [23300.0, 4.0], [22900.0, 6.0], [23700.0, 4.0], [24100.0, 5.0], [24500.0, 1.0], [26100.0, 1.0], [26500.0, 2.0], [27700.0, 1.0], [28100.0, 2.0], [28900.0, 1.0], [29700.0, 2.0], [30100.0, 15.0], [31300.0, 1.0], [32100.0, 1.0], [32500.0, 2.0], [33800.0, 3.0], [34600.0, 1.0], [38600.0, 1.0], [39400.0, 2.0], [41800.0, 1.0], [42600.0, 1.0], [44200.0, 1.0], [45800.0, 2.0], [47400.0, 1.0], [49000.0, 2.0], [49800.0, 2.0], [50600.0, 1.0], [51400.0, 1.0], [53000.0, 1.0], [54600.0, 1.0], [56200.0, 1.0], [59400.0, 1.0], [62600.0, 1.0], [64200.0, 1.0], [66000.0, 2.0], [69200.0, 2.0], [70800.0, 1.0], [72400.0, 1.0], [65900.0, 1.0], [67500.0, 1.0], [70700.0, 1.0], [37300.0, 2.0], [40500.0, 1.0], [43700.0, 1.0], [44500.0, 2.0], [46100.0, 1.0], [46900.0, 1.0], [49300.0, 1.0], [50100.0, 1.0], [50900.0, 2.0], [52500.0, 1.0], [54100.0, 1.0], [58100.0, 1.0], [59700.0, 4.0], [60500.0, 2.0], [61300.0, 1.0], [62100.0, 1.0], [63700.0, 1.0], [69800.0, 1.0], [70500.0, 1.0], [72100.0, 1.0], [8300.0, 10.0], [8500.0, 7.0], [8700.0, 6.0], [8900.0, 2.0], [9100.0, 5.0], [9300.0, 3.0], [9500.0, 7.0], [9700.0, 4.0], [9900.0, 8.0], [10100.0, 6.0], [10300.0, 5.0], [10500.0, 7.0], [10700.0, 5.0], [10900.0, 6.0], [11100.0, 6.0], [11700.0, 6.0], [11500.0, 2.0], [11300.0, 3.0], [11900.0, 5.0], [12100.0, 3.0], [12500.0, 8.0], [12300.0, 7.0], [12700.0, 9.0], [13100.0, 3.0], [13300.0, 6.0], [12900.0, 1.0], [13500.0, 4.0], [13700.0, 4.0], [13900.0, 4.0], [14300.0, 5.0], [14100.0, 4.0], [14500.0, 4.0], [14700.0, 1.0], [14900.0, 5.0], [15100.0, 5.0], [15300.0, 1.0], [15500.0, 6.0], [15700.0, 2.0], [15900.0, 7.0], [16100.0, 4.0], [16300.0, 5.0], [17000.0, 6.0], [17400.0, 2.0], [16600.0, 2.0], [17800.0, 3.0], [18200.0, 2.0], [18600.0, 4.0], [19000.0, 9.0], [19400.0, 5.0], [19800.0, 4.0], [20200.0, 7.0], [20600.0, 7.0], [21400.0, 5.0], [21000.0, 11.0], [21800.0, 7.0], [22200.0, 7.0], [23000.0, 6.0], [23400.0, 8.0], [23800.0, 4.0], [24200.0, 3.0], [24600.0, 2.0], [25400.0, 1.0], [27000.0, 1.0], [28600.0, 2.0], [30200.0, 8.0], [31000.0, 1.0], [31400.0, 1.0], [31800.0, 1.0], [32200.0, 2.0], [33200.0, 2.0], [34000.0, 1.0], [35600.0, 1.0], [37200.0, 1.0], [42000.0, 1.0], [42800.0, 2.0], [43600.0, 2.0], [44400.0, 2.0], [45200.0, 1.0], [47600.0, 1.0], [50800.0, 1.0], [51600.0, 2.0], [54800.0, 1.0], [57200.0, 3.0], [58000.0, 1.0], [58800.0, 1.0], [59600.0, 1.0], [60400.0, 2.0], [62000.0, 1.0], [62800.0, 1.0], [63600.0, 1.0], [64400.0, 1.0], [66400.0, 1.0], [68000.0, 2.0], [69600.0, 1.0], [71200.0, 1.0], [66300.0, 1.0], [67900.0, 2.0], [71100.0, 1.0], [34300.0, 1.0], [37500.0, 1.0], [39100.0, 1.0], [39900.0, 2.0], [40700.0, 1.0], [46300.0, 1.0], [47900.0, 1.0], [48700.0, 1.0], [50300.0, 3.0], [51100.0, 1.0], [51900.0, 2.0], [54300.0, 2.0], [55100.0, 1.0], [55900.0, 1.0], [56700.0, 1.0], [57500.0, 2.0], [59100.0, 2.0], [59900.0, 2.0], [60700.0, 2.0], [61500.0, 2.0], [63100.0, 2.0], [63900.0, 1.0], [65500.0, 1.0], [67000.0, 1.0], [70200.0, 3.0], [66100.0, 1.0], [72500.0, 4.0], [16700.0, 10.0], [17100.0, 5.0], [17500.0, 6.0], [17900.0, 2.0], [18300.0, 8.0], [18700.0, 6.0], [19100.0, 4.0], [19500.0, 4.0], [19900.0, 4.0], [20300.0, 8.0], [20700.0, 6.0], [21100.0, 9.0], [21500.0, 3.0], [21900.0, 8.0], [22300.0, 3.0], [22700.0, 4.0], [23100.0, 9.0], [23500.0, 2.0], [24300.0, 2.0], [23900.0, 1.0], [24700.0, 8.0], [25900.0, 1.0], [26700.0, 2.0], [27500.0, 1.0], [28300.0, 2.0], [30300.0, 1.0], [31900.0, 8.0], [35800.0, 2.0], [36600.0, 1.0], [37400.0, 1.0], [38200.0, 1.0], [39000.0, 3.0], [40600.0, 1.0], [41400.0, 1.0], [42200.0, 2.0], [43000.0, 1.0], [43800.0, 1.0], [44600.0, 1.0], [47000.0, 1.0], [48600.0, 1.0], [50200.0, 1.0], [53400.0, 3.0], [54200.0, 2.0], [56600.0, 1.0], [58200.0, 1.0], [59000.0, 1.0], [59800.0, 5.0], [60600.0, 1.0], [61400.0, 2.0], [62200.0, 1.0], [63800.0, 2.0], [64600.0, 1.0], [65400.0, 1.0], [66800.0, 1.0], [68400.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 72600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 652.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2062.0, "series": [{"data": [[0.0, 1164.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 652.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2062.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1122.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.031999999999984, "minX": 1.63089594E12, "maxY": 460.5, "series": [{"data": [[1.630896E12, 231.04200000000017]], "isOverall": false, "label": "listMyGoodsByPages", "isController": false}, {"data": [[1.63089612E12, 144.090909090909], [1.63089606E12, 374.5467289719626]], "isOverall": false, "label": "editGood", "isController": false}, {"data": [[1.63089612E12, 110.844]], "isOverall": false, "label": "getWanter", "isController": false}, {"data": [[1.630896E12, 14.031999999999984]], "isOverall": false, "label": "getGoodsById", "isController": false}, {"data": [[1.63089594E12, 324.5681818181822], [1.630896E12, 74.71621621621621]], "isOverall": false, "label": "listGoodsByPages", "isController": false}, {"data": [[1.630896E12, 460.5], [1.63089606E12, 210.52857142857152]], "isOverall": false, "label": "searchGoods", "isController": false}, {"data": [[1.630896E12, 254.43599999999998]], "isOverall": false, "label": "addGood", "isController": false}, {"data": [[1.63089612E12, 245.65000000000023]], "isOverall": false, "label": "getMaxGoodsPage", "isController": false}, {"data": [[1.630896E12, 35.84000000000001]], "isOverall": false, "label": "removeGoods", "isController": false}, {"data": [[1.630896E12, 154.31400000000005]], "isOverall": false, "label": "findGoodsById", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089612E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1169.520661157025, "minX": 1.0, "maxY": 24766.0, "series": [{"data": [[2.0, 14000.846153846152], [3.0, 14944.777777777777], [4.0, 19137.11111111111], [5.0, 21637.333333333332], [6.0, 21810.333333333332], [7.0, 17533.545454545456], [8.0, 13318.7], [9.0, 11977.454545454544], [10.0, 4088.163265306123], [11.0, 1169.520661157025], [12.0, 1218.8303571428569], [13.0, 1790.8243243243242], [14.0, 3723.441860465116], [15.0, 3834.3125], [16.0, 5719.375], [17.0, 7797.117647058822], [18.0, 5156.079999999999], [19.0, 6982.823529411765], [20.0, 4743.4375], [21.0, 5527.217391304347], [22.0, 3529.416666666667], [23.0, 15531.599999999999], [24.0, 24766.0], [25.0, 4851.531249999999], [26.0, 7487.055555555555], [27.0, 8977.357142857141], [28.0, 6827.578947368421], [29.0, 9836.76923076923], [30.0, 5055.359999999999], [31.0, 4214.5], [33.0, 2263.6166666666672], [32.0, 3576.0], [35.0, 2149.3846153846157], [34.0, 2155.75], [37.0, 3407.972972972973], [36.0, 2635.02], [39.0, 3752.2222222222226], [38.0, 3872.8749999999995], [41.0, 7119.066666666667], [40.0, 7548.421052631578], [43.0, 11129.333333333332], [42.0, 15023.0], [45.0, 12364.099999999999], [44.0, 13713.22222222222], [47.0, 5188.625], [46.0, 12021.099999999999], [49.0, 5842.952380952381], [48.0, 5229.6], [51.0, 5838.666666666665], [50.0, 6876.666666666668], [53.0, 6946.961538461539], [52.0, 5977.100000000001], [54.0, 7458.375], [55.0, 15302.666666666666], [57.0, 10238.75], [56.0, 18731.75], [59.0, 14797.999999999998], [58.0, 12353.8], [61.0, 13352.888888888887], [60.0, 13903.800000000001], [63.0, 10928.25], [62.0, 16871.0], [67.0, 19279.166666666664], [66.0, 11946.599999999999], [65.0, 14460.250000000002], [64.0, 13062.333333333334], [70.0, 12255.363636363636], [69.0, 11684.400000000001], [68.0, 22862.2], [71.0, 12602.125], [75.0, 8690.909090909092], [74.0, 13946.57142857143], [73.0, 10761.222222222223], [72.0, 11472.5], [79.0, 15190.666666666668], [78.0, 17738.399999999998], [77.0, 14424.857142857143], [76.0, 17357.0], [83.0, 11525.636363636364], [82.0, 10465.09090909091], [81.0, 11210.428571428574], [80.0, 12352.666666666666], [87.0, 8001.466666666666], [86.0, 11039.6], [85.0, 12628.111111111113], [84.0, 12888.5], [91.0, 12801.333333333334], [90.0, 15435.428571428572], [89.0, 15863.0], [88.0, 15520.571428571428], [95.0, 6971.4375], [94.0, 14589.5], [93.0, 13120.5], [92.0, 9914.909090909092], [99.0, 9490.714285714286], [98.0, 10818.5], [97.0, 12118.800000000001], [96.0, 12098.888888888889], [103.0, 9878.818181818182], [102.0, 11538.7], [101.0, 13721.625000000002], [100.0, 5669.8], [107.0, 12036.222222222223], [106.0, 11990.888888888889], [105.0, 9226.666666666666], [104.0, 7670.3125], [111.0, 15121.428571428572], [110.0, 11199.400000000001], [109.0, 9624.0], [108.0, 10011.272727272728], [115.0, 7169.7058823529405], [114.0, 9162.42857142857], [113.0, 17852.333333333332], [112.0, 10893.8], [119.0, 6837.500000000001], [118.0, 6468.894736842106], [117.0, 7650.0666666666675], [116.0, 8497.461538461539], [123.0, 12355.5], [121.0, 11448.555555555555], [120.0, 7630.642857142856], [122.0, 8887.1], [127.0, 17100.5], [126.0, 8870.416666666666], [125.0, 8109.142857142857], [124.0, 6773.562499999999], [135.0, 14003.714285714284], [134.0, 12647.5], [133.0, 8313.538461538461], [132.0, 12618.875000000002], [131.0, 14261.714285714288], [130.0, 9113.076923076922], [129.0, 8131.869565217392], [128.0, 8044.8], [143.0, 11245.777777777777], [142.0, 19433.2], [141.0, 12465.5], [140.0, 10482.699999999999], [139.0, 14285.0], [138.0, 8228.5], [137.0, 19124.875], [136.0, 4524.727272727272], [151.0, 14054.875], [150.0, 10073.125], [149.0, 5985.176470588235], [148.0, 3077.6857142857143], [147.0, 5261.217391304348], [145.0, 6387.8125], [144.0, 8393.5], [146.0, 4971.652173913044], [159.0, 5534.888888888889], [158.0, 6547.533333333333], [157.0, 9752.099999999999], [156.0, 8101.76923076923], [155.0, 4661.150000000001], [154.0, 5746.956521739129], [153.0, 10497.222222222223], [152.0, 9855.5], [167.0, 9630.0], [166.0, 10721.0], [165.0, 3605.947368421053], [164.0, 6556.133333333332], [163.0, 13178.714285714286], [162.0, 6361.200000000001], [161.0, 13540.714285714284], [160.0, 15364.0], [175.0, 13728.857142857143], [174.0, 14075.833333333334], [173.0, 14412.199999999999], [169.0, 7345.913043478261], [168.0, 4132.0], [172.0, 10594.0], [171.0, 8454.555555555555], [170.0, 3597.4583333333326], [183.0, 10510.1], [182.0, 11670.5], [181.0, 10200.636363636364], [179.0, 12724.142857142857], [178.0, 13901.5], [176.0, 10154.222222222223], [180.0, 11008.0], [177.0, 6377.666666666666], [191.0, 12351.571428571428], [190.0, 7686.133333333332], [189.0, 13058.0], [187.0, 16960.2], [186.0, 14631.333333333332], [185.0, 11112.375], [184.0, 11020.624999999998], [188.0, 9205.5], [199.0, 10940.25], [198.0, 9111.900000000001], [197.0, 16654.4], [196.0, 7360.75], [195.0, 12911.714285714286], [194.0, 14052.5], [193.0, 14282.0], [192.0, 14440.833333333334], [207.0, 8005.857142857144], [206.0, 11792.142857142859], [205.0, 13720.428571428572], [204.0, 13722.0], [203.0, 12130.285714285716], [202.0, 13951.666666666666], [201.0, 8505.5], [200.0, 7881.0], [215.0, 6845.999999999999], [214.0, 10179.75], [213.0, 13132.5], [212.0, 13351.666666666666], [211.0, 15967.2], [210.0, 8210.3], [209.0, 13637.5], [208.0, 11668.428571428572], [223.0, 12897.5], [222.0, 6817.0], [221.0, 12782.833333333332], [220.0, 10510.374999999998], [219.0, 12382.200000000003], [216.0, 6512.200000000001], [218.0, 20888.666666666668], [217.0, 8075.874999999999], [231.0, 8055.099999999999], [230.0, 8443.0], [229.0, 11510.285714285714], [228.0, 7836.0], [227.0, 15026.0], [226.0, 7729.799999999999], [225.0, 10997.0], [224.0, 8096.642857142857], [239.0, 12124.0], [238.0, 10677.714285714284], [237.0, 8614.333333333334], [236.0, 14656.2], [235.0, 6974.818181818182], [234.0, 6069.9375], [233.0, 10691.57142857143], [232.0, 10093.625], [247.0, 6922.000000000001], [246.0, 10807.142857142857], [245.0, 8123.416666666667], [244.0, 11993.666666666668], [243.0, 10322.444444444445], [242.0, 7891.222222222223], [241.0, 9587.499999999998], [240.0, 9661.375], [255.0, 8377.666666666666], [254.0, 7838.444444444444], [253.0, 5979.692307692308], [252.0, 11730.000000000002], [251.0, 7892.4444444444425], [250.0, 7318.1], [249.0, 11005.857142857143], [248.0, 8383.25], [270.0, 13026.800000000001], [271.0, 13185.999999999998], [269.0, 7419.307692307693], [268.0, 13594.0], [267.0, 9764.999999999998], [266.0, 11114.166666666666], [265.0, 11060.57142857143], [264.0, 6315.899999999999], [263.0, 9056.25], [257.0, 10764.875], [256.0, 8227.285714285714], [259.0, 6197.214285714285], [258.0, 5474.200000000001], [262.0, 10881.666666666668], [261.0, 6821.769230769231], [260.0, 9651.857142857143], [285.0, 10833.166666666668], [287.0, 11975.666666666666], [286.0, 9070.0], [284.0, 10813.833333333334], [275.0, 10782.0], [274.0, 12813.400000000001], [273.0, 12762.2], [272.0, 9381.571428571428], [283.0, 12464.600000000002], [282.0, 11010.666666666668], [281.0, 10473.5], [280.0, 10707.333333333332], [279.0, 15226.250000000002], [278.0, 6643.8], [277.0, 10620.0], [276.0, 8054.25], [302.0, 9018.857142857143], [303.0, 7807.333333333333], [301.0, 11913.8], [300.0, 11771.6], [299.0, 10322.0], [298.0, 13660.75], [297.0, 11696.4], [296.0, 15185.666666666666], [295.0, 5174.333333333333], [289.0, 9229.5], [288.0, 12051.6], [291.0, 10699.666666666666], [290.0, 10348.0], [294.0, 11613.4], [293.0, 8163.1], [292.0, 11913.0], [318.0, 5093.0], [319.0, 14220.833333333334], [317.0, 10902.0], [316.0, 11029.2], [315.0, 11003.0], [314.0, 7187.272727272727], [313.0, 9368.0], [312.0, 9238.333333333332], [311.0, 7152.25], [305.0, 5433.2], [304.0, 8547.375], [307.0, 9910.5], [306.0, 8554.727272727272], [310.0, 11053.4], [309.0, 11132.0], [308.0, 7320.272727272727], [334.0, 12760.75], [335.0, 7712.857142857143], [333.0, 12739.857142857143], [332.0, 5857.2], [331.0, 5974.8], [330.0, 8727.857142857143], [329.0, 10552.4], [328.0, 10775.2], [327.0, 9046.5], [321.0, 9377.0], [320.0, 13108.25], [323.0, 10756.6], [322.0, 7841.666666666666], [326.0, 12932.5], [325.0, 13935.833333333332], [324.0, 5942.25], [350.0, 9392.166666666666], [351.0, 7407.000000000001], [349.0, 8932.5], [348.0, 10080.0], [347.0, 6882.5], [346.0, 10803.0], [345.0, 9331.142857142857], [344.0, 14167.666666666668], [343.0, 11039.125], [337.0, 9007.0], [336.0, 9324.833333333334], [339.0, 9229.333333333332], [338.0, 7222.7], [342.0, 6253.666666666667], [341.0, 5455.0], [340.0, 12690.5], [366.0, 9712.6], [367.0, 8761.0], [365.0, 7505.166666666666], [364.0, 11218.25], [363.0, 9122.2], [362.0, 9088.333333333332], [360.0, 9903.8], [361.0, 6094.75], [359.0, 9418.4], [353.0, 11939.0], [352.0, 7991.375], [355.0, 5812.454545454545], [354.0, 8158.666666666667], [358.0, 7547.125], [357.0, 8179.000000000001], [356.0, 11639.75], [382.0, 7900.6], [383.0, 7926.0], [381.0, 8128.8], [380.0, 8188.6], [379.0, 7148.166666666667], [378.0, 10048.25], [377.0, 8520.2], [376.0, 8374.4], [375.0, 6370.428571428572], [369.0, 6761.444444444444], [368.0, 9418.4], [371.0, 4733.250000000001], [370.0, 10704.75], [374.0, 10271.75], [373.0, 10474.5], [372.0, 7348.5], [398.0, 7111.799999999999], [399.0, 7021.200000000001], [397.0, 7060.666666666667], [396.0, 3683.3999999999996], [387.0, 8904.42857142857], [386.0, 2590.285714285714], [385.0, 4794.888888888889], [384.0, 5549.3125], [395.0, 10862.666666666666], [394.0, 5401.928571428571], [393.0, 7344.0], [392.0, 7436.0], [391.0, 8874.25], [390.0, 7484.8], [389.0, 7573.200000000001], [388.0, 6437.666666666666], [413.0, 5056.857142857143], [415.0, 5873.333333333333], [414.0, 5947.25], [412.0, 5771.142857142858], [403.0, 7995.500000000001], [402.0, 5672.666666666666], [401.0, 6647.6], [400.0, 5382.0], [411.0, 6193.2], [410.0, 5938.166666666667], [409.0, 4976.428571428572], [408.0, 6007.333333333333], [407.0, 5110.749999999999], [406.0, 7853.250000000001], [405.0, 6711.599999999999], [404.0, 5745.166666666666], [430.0, 4946.333333333333], [431.0, 5400.0], [429.0, 5024.4], [428.0, 4935.333333333334], [427.0, 3927.2499999999995], [426.0, 5219.6], [425.0, 5127.5], [424.0, 4590.333333333333], [423.0, 3854.5000000000005], [417.0, 7129.0], [416.0, 5966.4], [419.0, 5776.0], [418.0, 6399.6], [422.0, 4079.0], [421.0, 5468.2], [420.0, 3896.4444444444443], [446.0, 3983.0], [447.0, 4064.5], [445.0, 3789.833333333333], [444.0, 4186.333333333333], [443.0, 4094.6], [442.0, 3020.625], [441.0, 4924.25], [440.0, 4406.6], [439.0, 5380.25], [433.0, 4795.4], [432.0, 4227.428571428572], [435.0, 3673.2857142857138], [434.0, 5114.333333333333], [438.0, 4307.090909090909], [437.0, 4705.2], [436.0, 4640.666666666666], [462.0, 4457.666666666667], [463.0, 4091.0], [461.0, 3552.8], [460.0, 3759.6], [459.0, 2407.2], [458.0, 3514.0], [457.0, 4111.25], [456.0, 4103.4], [455.0, 3470.6], [449.0, 3895.6], [448.0, 3034.857142857143], [451.0, 3633.8], [450.0, 3374.1666666666665], [454.0, 3454.0], [453.0, 4149.75], [452.0, 4106.5], [478.0, 3129.3333333333335], [479.0, 2927.6666666666665], [477.0, 3779.25], [476.0, 3271.3333333333335], [475.0, 2563.3333333333335], [474.0, 3271.6666666666665], [473.0, 3770.5714285714284], [472.0, 3435.75], [471.0, 3750.714285714286], [465.0, 4838.0], [464.0, 4141.0], [467.0, 4161.2], [466.0, 3681.0], [470.0, 3996.5], [469.0, 3838.333333333333], [468.0, 3980.333333333333], [483.0, 2996.8], [494.0, 1405.6666666666667], [492.0, 3082.5], [493.0, 2321.0], [490.0, 2339.0], [491.0, 3209.5], [489.0, 2705.0], [488.0, 2699.5], [495.0, 2284.0], [487.0, 3213.3333333333335], [486.0, 2768.75], [485.0, 1901.0], [484.0, 3122.5], [482.0, 3164.4], [481.0, 2354.0], [480.0, 3692.625], [500.0, 2794.75], [499.0, 1553.0], [498.0, 3184.1111111111113], [497.0, 1584.0], [496.0, 1629.0], [1.0, 21431.285714285714]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[179.00160000000048, 7606.4660000000085]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2610.6, "minX": 1.63089594E12, "maxY": 86536.18333333333, "series": [{"data": [[1.63089594E12, 10451.433333333332], [1.63089612E12, 13439.966666666667], [1.630896E12, 56583.38333333333], [1.63089606E12, 11357.366666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63089594E12, 2610.6], [1.63089612E12, 86536.18333333333], [1.630896E12, 16262.366666666667], [1.63089606E12, 64707.38333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089612E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3132.8148826979545, "minX": 1.63089594E12, "maxY": 29883.380126182965, "series": [{"data": [[1.63089594E12, 10006.627840909094], [1.63089612E12, 5456.932348367026], [1.630896E12, 3132.8148826979545], [1.63089606E12, 29883.380126182965]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089612E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2365.47580645162, "minX": 1.63089594E12, "maxY": 29880.309148264994, "series": [{"data": [[1.63089594E12, 10002.92613636363], [1.63089612E12, 5288.822706065321], [1.630896E12, 2365.47580645162], [1.63089606E12, 29880.309148264994]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089612E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 17.219242902208205, "minX": 1.63089594E12, "maxY": 804.984970674486, "series": [{"data": [[1.63089594E12, 298.1079545454545], [1.63089612E12, 200.4004665629862], [1.630896E12, 804.984970674486], [1.63089606E12, 17.219242902208205]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089612E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.63089594E12, "maxY": 72633.0, "series": [{"data": [[1.63089594E12, 18376.0], [1.63089612E12, 24104.0], [1.630896E12, 24849.0], [1.63089606E12, 72633.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63089594E12, 16871.7], [1.63089612E12, 17726.8], [1.630896E12, 11018.999999999996], [1.63089606E12, 64272.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63089594E12, 18239.239999999998], [1.63089612E12, 23238.14], [1.630896E12, 24132.87], [1.63089606E12, 72566.25]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63089594E12, 17625.999999999996], [1.63089612E12, 20733.39999999999], [1.630896E12, 20993.8], [1.63089606E12, 69069.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63089594E12, 849.0], [1.63089612E12, 26.0], [1.630896E12, 23.0], [1.63089606E12, 210.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63089594E12, 10210.5], [1.63089612E12, 1974.0], [1.630896E12, 614.0], [1.63089606E12, 24886.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089612E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 20.0, "minX": 1.0, "maxY": 60060.0, "series": [{"data": [[2.0, 16131.5], [34.0, 882.0], [42.0, 437.0], [43.0, 724.0], [48.0, 3569.5], [3.0, 26105.0], [58.0, 3550.0], [59.0, 6527.0], [60.0, 7467.5], [65.0, 8221.0], [4.0, 34837.0], [5.0, 32871.0], [6.0, 56229.0], [97.0, 2387.0], [7.0, 53917.0], [8.0, 23190.5], [149.0, 81.0], [9.0, 16665.0], [10.0, 4227.0], [171.0, 1182.0], [11.0, 984.0], [179.0, 1932.0], [12.0, 50209.0], [221.0, 665.0], [14.0, 3410.0], [251.0, 213.0], [253.0, 449.0], [270.0, 355.5], [1.0, 12317.0], [16.0, 59352.0], [17.0, 1799.0], [18.0, 6746.5], [19.0, 8527.0], [20.0, 12882.0], [21.0, 12775.5], [22.0, 10147.5], [23.0, 18904.0], [24.0, 23106.0], [25.0, 17750.0], [26.0, 15819.5], [469.0, 57.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 40928.0], [9.0, 37685.0], [10.0, 44974.0], [42.0, 30124.0], [11.0, 60060.0], [12.0, 50393.0], [14.0, 31952.0], [251.0, 21121.0], [16.0, 59732.0], [68.0, 20.0], [5.0, 48034.0], [382.0, 4092.5], [24.0, 21688.0], [6.0, 42833.0], [433.0, 23.0], [7.0, 54332.5], [469.0, 4094.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 469.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 60059.0, "series": [{"data": [[2.0, 16131.5], [34.0, 882.0], [42.0, 433.0], [43.0, 708.0], [48.0, 3569.5], [3.0, 26105.0], [58.0, 3550.0], [59.0, 6527.0], [60.0, 7465.5], [65.0, 8220.0], [4.0, 34837.0], [5.0, 32871.0], [6.0, 56229.0], [97.0, 2383.0], [7.0, 53917.0], [8.0, 23190.5], [149.0, 77.0], [9.0, 16665.0], [10.0, 4227.0], [171.0, 1172.0], [11.0, 858.0], [179.0, 1926.0], [12.0, 50209.0], [221.0, 659.0], [14.0, 3410.0], [251.0, 205.0], [253.0, 442.0], [270.0, 354.5], [1.0, 12317.0], [16.0, 59352.0], [17.0, 1799.0], [18.0, 6746.5], [19.0, 8527.0], [20.0, 12882.0], [21.0, 12775.5], [22.0, 10147.5], [23.0, 18904.0], [24.0, 23106.0], [25.0, 17750.0], [26.0, 15819.5], [469.0, 56.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 40928.0], [9.0, 37685.0], [10.0, 44974.0], [42.0, 30121.0], [11.0, 60059.0], [12.0, 50391.0], [14.0, 31952.0], [251.0, 0.0], [16.0, 59732.0], [68.0, 20.0], [5.0, 48034.0], [382.0, 0.0], [24.0, 0.0], [6.0, 42826.0], [433.0, 23.0], [7.0, 54332.5], [469.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 469.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.63089594E12, "maxY": 50.0, "series": [{"data": [[1.63089594E12, 8.333333333333334], [1.63089612E12, 16.666666666666668], [1.630896E12, 50.0], [1.63089606E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089612E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.63089594E12, "maxY": 28.766666666666666, "series": [{"data": [[1.63089594E12, 5.866666666666666], [1.63089612E12, 21.266666666666666], [1.630896E12, 28.766666666666666], [1.63089606E12, 8.733333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.630896E12, 8.333333333333334]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.63089612E12, 0.16666666666666666], [1.630896E12, 8.366666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.63089606E12, 1.8333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089612E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.63089594E12, "maxY": 28.766666666666666, "series": [{"data": [[1.63089612E12, 0.16666666666666666], [1.630896E12, 16.7], [1.63089606E12, 1.8333333333333333]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63089594E12, 5.866666666666666], [1.63089612E12, 21.266666666666666], [1.630896E12, 28.766666666666666], [1.63089606E12, 8.733333333333333]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089612E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.63089594E12, "maxY": 28.766666666666666, "series": [{"data": [[1.63089594E12, 5.866666666666666], [1.63089612E12, 21.266666666666666], [1.630896E12, 28.766666666666666], [1.63089606E12, 8.733333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63089612E12, 0.16666666666666666], [1.630896E12, 16.7], [1.63089606E12, 1.8333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089612E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

