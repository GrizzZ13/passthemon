/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 77.0, "minX": 0.0, "maxY": 21081.0, "series": [{"data": [[0.0, 77.0], [0.1, 97.0], [0.2, 103.0], [0.3, 103.0], [0.4, 121.0], [0.5, 127.0], [0.6, 134.0], [0.7, 138.0], [0.8, 142.0], [0.9, 154.0], [1.0, 157.0], [1.1, 164.0], [1.2, 167.0], [1.3, 187.0], [1.4, 187.0], [1.5, 190.0], [1.6, 194.0], [1.7, 194.0], [1.8, 200.0], [1.9, 200.0], [2.0, 205.0], [2.1, 209.0], [2.2, 212.0], [2.3, 212.0], [2.4, 213.0], [2.5, 214.0], [2.6, 215.0], [2.7, 218.0], [2.8, 219.0], [2.9, 219.0], [3.0, 221.0], [3.1, 231.0], [3.2, 236.0], [3.3, 243.0], [3.4, 250.0], [3.5, 252.0], [3.6, 256.0], [3.7, 258.0], [3.8, 260.0], [3.9, 264.0], [4.0, 268.0], [4.1, 293.0], [4.2, 293.0], [4.3, 299.0], [4.4, 300.0], [4.5, 301.0], [4.6, 301.0], [4.7, 307.0], [4.8, 311.0], [4.9, 316.0], [5.0, 317.0], [5.1, 318.0], [5.2, 318.0], [5.3, 321.0], [5.4, 323.0], [5.5, 326.0], [5.6, 326.0], [5.7, 326.0], [5.8, 326.0], [5.9, 328.0], [6.0, 331.0], [6.1, 332.0], [6.2, 335.0], [6.3, 343.0], [6.4, 347.0], [6.5, 349.0], [6.6, 354.0], [6.7, 354.0], [6.8, 361.0], [6.9, 364.0], [7.0, 365.0], [7.1, 368.0], [7.2, 373.0], [7.3, 376.0], [7.4, 378.0], [7.5, 378.0], [7.6, 382.0], [7.7, 383.0], [7.8, 384.0], [7.9, 389.0], [8.0, 390.0], [8.1, 392.0], [8.2, 394.0], [8.3, 398.0], [8.4, 409.0], [8.5, 412.0], [8.6, 412.0], [8.7, 420.0], [8.8, 421.0], [8.9, 422.0], [9.0, 424.0], [9.1, 425.0], [9.2, 429.0], [9.3, 429.0], [9.4, 429.0], [9.5, 430.0], [9.6, 430.0], [9.7, 434.0], [9.8, 434.0], [9.9, 436.0], [10.0, 437.0], [10.1, 442.0], [10.2, 446.0], [10.3, 448.0], [10.4, 449.0], [10.5, 450.0], [10.6, 451.0], [10.7, 454.0], [10.8, 455.0], [10.9, 463.0], [11.0, 463.0], [11.1, 472.0], [11.2, 472.0], [11.3, 476.0], [11.4, 476.0], [11.5, 478.0], [11.6, 479.0], [11.7, 492.0], [11.8, 492.0], [11.9, 494.0], [12.0, 495.0], [12.1, 497.0], [12.2, 497.0], [12.3, 501.0], [12.4, 505.0], [12.5, 505.0], [12.6, 506.0], [12.7, 507.0], [12.8, 516.0], [12.9, 519.0], [13.0, 521.0], [13.1, 521.0], [13.2, 525.0], [13.3, 528.0], [13.4, 529.0], [13.5, 531.0], [13.6, 533.0], [13.7, 535.0], [13.8, 535.0], [13.9, 535.0], [14.0, 536.0], [14.1, 536.0], [14.2, 536.0], [14.3, 536.0], [14.4, 537.0], [14.5, 539.0], [14.6, 541.0], [14.7, 544.0], [14.8, 545.0], [14.9, 551.0], [15.0, 551.0], [15.1, 555.0], [15.2, 555.0], [15.3, 557.0], [15.4, 559.0], [15.5, 567.0], [15.6, 567.0], [15.7, 571.0], [15.8, 572.0], [15.9, 573.0], [16.0, 578.0], [16.1, 579.0], [16.2, 584.0], [16.3, 586.0], [16.4, 586.0], [16.5, 586.0], [16.6, 591.0], [16.7, 594.0], [16.8, 596.0], [16.9, 596.0], [17.0, 597.0], [17.1, 598.0], [17.2, 599.0], [17.3, 601.0], [17.4, 606.0], [17.5, 610.0], [17.6, 616.0], [17.7, 618.0], [17.8, 619.0], [17.9, 620.0], [18.0, 621.0], [18.1, 633.0], [18.2, 640.0], [18.3, 644.0], [18.4, 659.0], [18.5, 659.0], [18.6, 660.0], [18.7, 660.0], [18.8, 670.0], [18.9, 671.0], [19.0, 672.0], [19.1, 673.0], [19.2, 673.0], [19.3, 678.0], [19.4, 678.0], [19.5, 681.0], [19.6, 684.0], [19.7, 695.0], [19.8, 696.0], [19.9, 696.0], [20.0, 698.0], [20.1, 699.0], [20.2, 703.0], [20.3, 704.0], [20.4, 705.0], [20.5, 710.0], [20.6, 714.0], [20.7, 715.0], [20.8, 719.0], [20.9, 722.0], [21.0, 724.0], [21.1, 728.0], [21.2, 733.0], [21.3, 740.0], [21.4, 742.0], [21.5, 753.0], [21.6, 754.0], [21.7, 755.0], [21.8, 757.0], [21.9, 758.0], [22.0, 768.0], [22.1, 768.0], [22.2, 775.0], [22.3, 776.0], [22.4, 779.0], [22.5, 780.0], [22.6, 780.0], [22.7, 785.0], [22.8, 792.0], [22.9, 796.0], [23.0, 803.0], [23.1, 807.0], [23.2, 813.0], [23.3, 814.0], [23.4, 816.0], [23.5, 821.0], [23.6, 823.0], [23.7, 823.0], [23.8, 825.0], [23.9, 835.0], [24.0, 842.0], [24.1, 846.0], [24.2, 847.0], [24.3, 851.0], [24.4, 859.0], [24.5, 862.0], [24.6, 872.0], [24.7, 876.0], [24.8, 884.0], [24.9, 885.0], [25.0, 901.0], [25.1, 905.0], [25.2, 905.0], [25.3, 908.0], [25.4, 914.0], [25.5, 920.0], [25.6, 922.0], [25.7, 924.0], [25.8, 924.0], [25.9, 924.0], [26.0, 925.0], [26.1, 933.0], [26.2, 935.0], [26.3, 938.0], [26.4, 939.0], [26.5, 940.0], [26.6, 943.0], [26.7, 945.0], [26.8, 957.0], [26.9, 963.0], [27.0, 964.0], [27.1, 965.0], [27.2, 974.0], [27.3, 980.0], [27.4, 980.0], [27.5, 981.0], [27.6, 982.0], [27.7, 985.0], [27.8, 987.0], [27.9, 990.0], [28.0, 992.0], [28.1, 992.0], [28.2, 996.0], [28.3, 997.0], [28.4, 997.0], [28.5, 1011.0], [28.6, 1014.0], [28.7, 1017.0], [28.8, 1019.0], [28.9, 1021.0], [29.0, 1028.0], [29.1, 1028.0], [29.2, 1031.0], [29.3, 1032.0], [29.4, 1033.0], [29.5, 1034.0], [29.6, 1034.0], [29.7, 1039.0], [29.8, 1039.0], [29.9, 1044.0], [30.0, 1046.0], [30.1, 1056.0], [30.2, 1057.0], [30.3, 1057.0], [30.4, 1068.0], [30.5, 1070.0], [30.6, 1072.0], [30.7, 1079.0], [30.8, 1079.0], [30.9, 1079.0], [31.0, 1087.0], [31.1, 1087.0], [31.2, 1088.0], [31.3, 1090.0], [31.4, 1092.0], [31.5, 1092.0], [31.6, 1095.0], [31.7, 1096.0], [31.8, 1098.0], [31.9, 1104.0], [32.0, 1105.0], [32.1, 1107.0], [32.2, 1107.0], [32.3, 1108.0], [32.4, 1117.0], [32.5, 1124.0], [32.6, 1130.0], [32.7, 1131.0], [32.8, 1132.0], [32.9, 1134.0], [33.0, 1134.0], [33.1, 1137.0], [33.2, 1137.0], [33.3, 1137.0], [33.4, 1142.0], [33.5, 1145.0], [33.6, 1147.0], [33.7, 1151.0], [33.8, 1154.0], [33.9, 1155.0], [34.0, 1156.0], [34.1, 1156.0], [34.2, 1162.0], [34.3, 1162.0], [34.4, 1162.0], [34.5, 1163.0], [34.6, 1172.0], [34.7, 1173.0], [34.8, 1174.0], [34.9, 1175.0], [35.0, 1179.0], [35.1, 1182.0], [35.2, 1184.0], [35.3, 1184.0], [35.4, 1185.0], [35.5, 1186.0], [35.6, 1186.0], [35.7, 1190.0], [35.8, 1190.0], [35.9, 1192.0], [36.0, 1193.0], [36.1, 1197.0], [36.2, 1198.0], [36.3, 1206.0], [36.4, 1209.0], [36.5, 1210.0], [36.6, 1211.0], [36.7, 1212.0], [36.8, 1212.0], [36.9, 1214.0], [37.0, 1216.0], [37.1, 1217.0], [37.2, 1220.0], [37.3, 1221.0], [37.4, 1223.0], [37.5, 1224.0], [37.6, 1226.0], [37.7, 1232.0], [37.8, 1238.0], [37.9, 1240.0], [38.0, 1242.0], [38.1, 1247.0], [38.2, 1254.0], [38.3, 1255.0], [38.4, 1256.0], [38.5, 1257.0], [38.6, 1258.0], [38.7, 1264.0], [38.8, 1267.0], [38.9, 1268.0], [39.0, 1274.0], [39.1, 1274.0], [39.2, 1276.0], [39.3, 1278.0], [39.4, 1279.0], [39.5, 1282.0], [39.6, 1283.0], [39.7, 1287.0], [39.8, 1289.0], [39.9, 1289.0], [40.0, 1290.0], [40.1, 1290.0], [40.2, 1292.0], [40.3, 1293.0], [40.4, 1295.0], [40.5, 1300.0], [40.6, 1303.0], [40.7, 1312.0], [40.8, 1312.0], [40.9, 1315.0], [41.0, 1317.0], [41.1, 1318.0], [41.2, 1319.0], [41.3, 1320.0], [41.4, 1322.0], [41.5, 1325.0], [41.6, 1330.0], [41.7, 1331.0], [41.8, 1338.0], [41.9, 1338.0], [42.0, 1339.0], [42.1, 1343.0], [42.2, 1344.0], [42.3, 1347.0], [42.4, 1350.0], [42.5, 1356.0], [42.6, 1357.0], [42.7, 1358.0], [42.8, 1361.0], [42.9, 1368.0], [43.0, 1376.0], [43.1, 1376.0], [43.2, 1380.0], [43.3, 1380.0], [43.4, 1382.0], [43.5, 1385.0], [43.6, 1388.0], [43.7, 1394.0], [43.8, 1396.0], [43.9, 1400.0], [44.0, 1404.0], [44.1, 1406.0], [44.2, 1409.0], [44.3, 1411.0], [44.4, 1415.0], [44.5, 1418.0], [44.6, 1419.0], [44.7, 1421.0], [44.8, 1422.0], [44.9, 1424.0], [45.0, 1425.0], [45.1, 1426.0], [45.2, 1426.0], [45.3, 1426.0], [45.4, 1429.0], [45.5, 1429.0], [45.6, 1432.0], [45.7, 1433.0], [45.8, 1434.0], [45.9, 1440.0], [46.0, 1442.0], [46.1, 1447.0], [46.2, 1447.0], [46.3, 1455.0], [46.4, 1457.0], [46.5, 1460.0], [46.6, 1462.0], [46.7, 1465.0], [46.8, 1469.0], [46.9, 1469.0], [47.0, 1472.0], [47.1, 1479.0], [47.2, 1483.0], [47.3, 1485.0], [47.4, 1485.0], [47.5, 1486.0], [47.6, 1489.0], [47.7, 1492.0], [47.8, 1494.0], [47.9, 1495.0], [48.0, 1497.0], [48.1, 1501.0], [48.2, 1502.0], [48.3, 1502.0], [48.4, 1503.0], [48.5, 1504.0], [48.6, 1511.0], [48.7, 1512.0], [48.8, 1517.0], [48.9, 1522.0], [49.0, 1523.0], [49.1, 1532.0], [49.2, 1532.0], [49.3, 1533.0], [49.4, 1544.0], [49.5, 1546.0], [49.6, 1546.0], [49.7, 1553.0], [49.8, 1554.0], [49.9, 1555.0], [50.0, 1563.0], [50.1, 1571.0], [50.2, 1574.0], [50.3, 1580.0], [50.4, 1588.0], [50.5, 1594.0], [50.6, 1600.0], [50.7, 1602.0], [50.8, 1604.0], [50.9, 1607.0], [51.0, 1607.0], [51.1, 1615.0], [51.2, 1619.0], [51.3, 1627.0], [51.4, 1630.0], [51.5, 1630.0], [51.6, 1630.0], [51.7, 1630.0], [51.8, 1631.0], [51.9, 1635.0], [52.0, 1638.0], [52.1, 1640.0], [52.2, 1643.0], [52.3, 1644.0], [52.4, 1648.0], [52.5, 1652.0], [52.6, 1653.0], [52.7, 1655.0], [52.8, 1656.0], [52.9, 1657.0], [53.0, 1657.0], [53.1, 1658.0], [53.2, 1659.0], [53.3, 1662.0], [53.4, 1662.0], [53.5, 1668.0], [53.6, 1669.0], [53.7, 1671.0], [53.8, 1673.0], [53.9, 1683.0], [54.0, 1683.0], [54.1, 1686.0], [54.2, 1696.0], [54.3, 1697.0], [54.4, 1700.0], [54.5, 1700.0], [54.6, 1701.0], [54.7, 1703.0], [54.8, 1705.0], [54.9, 1705.0], [55.0, 1705.0], [55.1, 1706.0], [55.2, 1709.0], [55.3, 1712.0], [55.4, 1717.0], [55.5, 1718.0], [55.6, 1724.0], [55.7, 1738.0], [55.8, 1740.0], [55.9, 1749.0], [56.0, 1753.0], [56.1, 1756.0], [56.2, 1760.0], [56.3, 1763.0], [56.4, 1764.0], [56.5, 1772.0], [56.6, 1776.0], [56.7, 1776.0], [56.8, 1777.0], [56.9, 1779.0], [57.0, 1779.0], [57.1, 1780.0], [57.2, 1788.0], [57.3, 1793.0], [57.4, 1794.0], [57.5, 1797.0], [57.6, 1805.0], [57.7, 1807.0], [57.8, 1808.0], [57.9, 1809.0], [58.0, 1811.0], [58.1, 1813.0], [58.2, 1815.0], [58.3, 1815.0], [58.4, 1819.0], [58.5, 1819.0], [58.6, 1821.0], [58.7, 1823.0], [58.8, 1824.0], [58.9, 1826.0], [59.0, 1827.0], [59.1, 1828.0], [59.2, 1828.0], [59.3, 1829.0], [59.4, 1832.0], [59.5, 1834.0], [59.6, 1836.0], [59.7, 1837.0], [59.8, 1840.0], [59.9, 1841.0], [60.0, 1841.0], [60.1, 1843.0], [60.2, 1851.0], [60.3, 1857.0], [60.4, 1861.0], [60.5, 1862.0], [60.6, 1863.0], [60.7, 1864.0], [60.8, 1871.0], [60.9, 1871.0], [61.0, 1872.0], [61.1, 1874.0], [61.2, 1879.0], [61.3, 1879.0], [61.4, 1886.0], [61.5, 1892.0], [61.6, 1892.0], [61.7, 1893.0], [61.8, 1894.0], [61.9, 1894.0], [62.0, 1894.0], [62.1, 1897.0], [62.2, 1900.0], [62.3, 1901.0], [62.4, 1904.0], [62.5, 1907.0], [62.6, 1907.0], [62.7, 1909.0], [62.8, 1910.0], [62.9, 1910.0], [63.0, 1911.0], [63.1, 1912.0], [63.2, 1916.0], [63.3, 1918.0], [63.4, 1920.0], [63.5, 1921.0], [63.6, 1923.0], [63.7, 1931.0], [63.8, 1931.0], [63.9, 1934.0], [64.0, 1935.0], [64.1, 1935.0], [64.2, 1937.0], [64.3, 1938.0], [64.4, 1938.0], [64.5, 1941.0], [64.6, 1942.0], [64.7, 1942.0], [64.8, 1942.0], [64.9, 1950.0], [65.0, 1953.0], [65.1, 1953.0], [65.2, 1953.0], [65.3, 1956.0], [65.4, 1956.0], [65.5, 1957.0], [65.6, 1957.0], [65.7, 1959.0], [65.8, 1961.0], [65.9, 1961.0], [66.0, 1962.0], [66.1, 1963.0], [66.2, 1974.0], [66.3, 1976.0], [66.4, 1978.0], [66.5, 1979.0], [66.6, 1981.0], [66.7, 1982.0], [66.8, 1983.0], [66.9, 1983.0], [67.0, 1986.0], [67.1, 1988.0], [67.2, 1993.0], [67.3, 1996.0], [67.4, 1996.0], [67.5, 2000.0], [67.6, 2000.0], [67.7, 2001.0], [67.8, 2003.0], [67.9, 2003.0], [68.0, 2004.0], [68.1, 2006.0], [68.2, 2009.0], [68.3, 2011.0], [68.4, 2013.0], [68.5, 2018.0], [68.6, 2019.0], [68.7, 2023.0], [68.8, 2023.0], [68.9, 2023.0], [69.0, 2027.0], [69.1, 2032.0], [69.2, 2032.0], [69.3, 2035.0], [69.4, 2036.0], [69.5, 2037.0], [69.6, 2038.0], [69.7, 2039.0], [69.8, 2039.0], [69.9, 2044.0], [70.0, 2046.0], [70.1, 2046.0], [70.2, 2051.0], [70.3, 2052.0], [70.4, 2056.0], [70.5, 2065.0], [70.6, 2068.0], [70.7, 2069.0], [70.8, 2073.0], [70.9, 2077.0], [71.0, 2081.0], [71.1, 2097.0], [71.2, 2106.0], [71.3, 2108.0], [71.4, 2110.0], [71.5, 2111.0], [71.6, 2112.0], [71.7, 2118.0], [71.8, 2120.0], [71.9, 2120.0], [72.0, 2124.0], [72.1, 2126.0], [72.2, 2136.0], [72.3, 2139.0], [72.4, 2142.0], [72.5, 2143.0], [72.6, 2145.0], [72.7, 2147.0], [72.8, 2151.0], [72.9, 2154.0], [73.0, 2168.0], [73.1, 2169.0], [73.2, 2173.0], [73.3, 2177.0], [73.4, 2177.0], [73.5, 2181.0], [73.6, 2183.0], [73.7, 2192.0], [73.8, 2194.0], [73.9, 2194.0], [74.0, 2199.0], [74.1, 2200.0], [74.2, 2202.0], [74.3, 2206.0], [74.4, 2207.0], [74.5, 2219.0], [74.6, 2219.0], [74.7, 2234.0], [74.8, 2243.0], [74.9, 2245.0], [75.0, 2246.0], [75.1, 2248.0], [75.2, 2249.0], [75.3, 2249.0], [75.4, 2250.0], [75.5, 2251.0], [75.6, 2251.0], [75.7, 2253.0], [75.8, 2253.0], [75.9, 2256.0], [76.0, 2257.0], [76.1, 2258.0], [76.2, 2260.0], [76.3, 2263.0], [76.4, 2265.0], [76.5, 2270.0], [76.6, 2271.0], [76.7, 2274.0], [76.8, 2283.0], [76.9, 2284.0], [77.0, 2289.0], [77.1, 2292.0], [77.2, 2292.0], [77.3, 2295.0], [77.4, 2298.0], [77.5, 2300.0], [77.6, 2305.0], [77.7, 2305.0], [77.8, 2311.0], [77.9, 2311.0], [78.0, 2316.0], [78.1, 2316.0], [78.2, 2317.0], [78.3, 2317.0], [78.4, 2318.0], [78.5, 2319.0], [78.6, 2322.0], [78.7, 2326.0], [78.8, 2333.0], [78.9, 2334.0], [79.0, 2344.0], [79.1, 2344.0], [79.2, 2345.0], [79.3, 2350.0], [79.4, 2352.0], [79.5, 2357.0], [79.6, 2370.0], [79.7, 2371.0], [79.8, 2371.0], [79.9, 2373.0], [80.0, 2376.0], [80.1, 2377.0], [80.2, 2378.0], [80.3, 2380.0], [80.4, 2398.0], [80.5, 2401.0], [80.6, 2403.0], [80.7, 2409.0], [80.8, 2409.0], [80.9, 2412.0], [81.0, 2421.0], [81.1, 2425.0], [81.2, 2426.0], [81.3, 2437.0], [81.4, 2442.0], [81.5, 2443.0], [81.6, 2449.0], [81.7, 2453.0], [81.8, 2460.0], [81.9, 2462.0], [82.0, 2463.0], [82.1, 2463.0], [82.2, 2466.0], [82.3, 2468.0], [82.4, 2473.0], [82.5, 2480.0], [82.6, 2480.0], [82.7, 2488.0], [82.8, 2493.0], [82.9, 2493.0], [83.0, 2496.0], [83.1, 2496.0], [83.2, 2497.0], [83.3, 2498.0], [83.4, 2500.0], [83.5, 2502.0], [83.6, 2502.0], [83.7, 2503.0], [83.8, 2506.0], [83.9, 2514.0], [84.0, 2514.0], [84.1, 2516.0], [84.2, 2516.0], [84.3, 2517.0], [84.4, 2519.0], [84.5, 2521.0], [84.6, 2525.0], [84.7, 2528.0], [84.8, 2532.0], [84.9, 2532.0], [85.0, 2537.0], [85.1, 2540.0], [85.2, 2542.0], [85.3, 2549.0], [85.4, 2562.0], [85.5, 2566.0], [85.6, 2571.0], [85.7, 2577.0], [85.8, 2579.0], [85.9, 2582.0], [86.0, 2587.0], [86.1, 2587.0], [86.2, 2591.0], [86.3, 2592.0], [86.4, 2594.0], [86.5, 2595.0], [86.6, 2598.0], [86.7, 2604.0], [86.8, 2611.0], [86.9, 2613.0], [87.0, 2613.0], [87.1, 2614.0], [87.2, 2621.0], [87.3, 2627.0], [87.4, 2629.0], [87.5, 2629.0], [87.6, 2636.0], [87.7, 2639.0], [87.8, 2639.0], [87.9, 2640.0], [88.0, 2648.0], [88.1, 2649.0], [88.2, 2652.0], [88.3, 2653.0], [88.4, 2661.0], [88.5, 2661.0], [88.6, 2662.0], [88.7, 2665.0], [88.8, 2666.0], [88.9, 2671.0], [89.0, 2673.0], [89.1, 2677.0], [89.2, 2679.0], [89.3, 2682.0], [89.4, 2682.0], [89.5, 2685.0], [89.6, 2685.0], [89.7, 2688.0], [89.8, 2688.0], [89.9, 2691.0], [90.0, 2699.0], [90.1, 2711.0], [90.2, 2712.0], [90.3, 2727.0], [90.4, 2729.0], [90.5, 2730.0], [90.6, 2730.0], [90.7, 2730.0], [90.8, 2737.0], [90.9, 2738.0], [91.0, 2738.0], [91.1, 2738.0], [91.2, 2738.0], [91.3, 2740.0], [91.4, 2747.0], [91.5, 2750.0], [91.6, 2751.0], [91.7, 2751.0], [91.8, 2756.0], [91.9, 2766.0], [92.0, 2770.0], [92.1, 2775.0], [92.2, 2777.0], [92.3, 2780.0], [92.4, 2781.0], [92.5, 2787.0], [92.6, 2789.0], [92.7, 2790.0], [92.8, 2792.0], [92.9, 2803.0], [93.0, 2809.0], [93.1, 2810.0], [93.2, 2821.0], [93.3, 2821.0], [93.4, 2833.0], [93.5, 2842.0], [93.6, 2846.0], [93.7, 2847.0], [93.8, 2857.0], [93.9, 2860.0], [94.0, 2877.0], [94.1, 2885.0], [94.2, 2887.0], [94.3, 2889.0], [94.4, 2891.0], [94.5, 2897.0], [94.6, 2900.0], [94.7, 2915.0], [94.8, 2927.0], [94.9, 2928.0], [95.0, 2929.0], [95.1, 2934.0], [95.2, 2937.0], [95.3, 2939.0], [95.4, 2943.0], [95.5, 2946.0], [95.6, 2948.0], [95.7, 2952.0], [95.8, 2957.0], [95.9, 2964.0], [96.0, 2968.0], [96.1, 2970.0], [96.2, 2971.0], [96.3, 2977.0], [96.4, 2983.0], [96.5, 2987.0], [96.6, 2991.0], [96.7, 3016.0], [96.8, 3020.0], [96.9, 3029.0], [97.0, 3030.0], [97.1, 3034.0], [97.2, 3037.0], [97.3, 3042.0], [97.4, 3043.0], [97.5, 3052.0], [97.6, 3068.0], [97.7, 3077.0], [97.8, 3118.0], [97.9, 3121.0], [98.0, 3157.0], [98.1, 3295.0], [98.2, 3316.0], [98.3, 3317.0], [98.4, 3319.0], [98.5, 3356.0], [98.6, 3383.0], [98.7, 3440.0], [98.8, 3530.0], [98.9, 3559.0], [99.0, 21035.0], [99.1, 21042.0], [99.2, 21042.0], [99.3, 21045.0], [99.4, 21045.0], [99.5, 21048.0], [99.6, 21048.0], [99.7, 21053.0], [99.8, 21053.0], [99.9, 21081.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 53.0, "series": [{"data": [[0.0, 2.0], [600.0, 28.0], [700.0, 28.0], [800.0, 20.0], [900.0, 35.0], [1000.0, 34.0], [1100.0, 44.0], [1200.0, 42.0], [1300.0, 34.0], [21000.0, 10.0], [1400.0, 42.0], [1500.0, 25.0], [100.0, 15.0], [1600.0, 38.0], [1700.0, 32.0], [1800.0, 46.0], [1900.0, 53.0], [2000.0, 37.0], [2100.0, 29.0], [2200.0, 34.0], [2300.0, 31.0], [2400.0, 29.0], [2500.0, 33.0], [2600.0, 34.0], [2800.0, 17.0], [2700.0, 28.0], [2900.0, 21.0], [3000.0, 11.0], [3100.0, 3.0], [200.0, 26.0], [3300.0, 5.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 2.0], [300.0, 41.0], [400.0, 39.0], [500.0, 50.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 510.0, "series": [{"data": [[0.0, 123.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 357.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 510.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 10.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 207.39599999999987, "minX": 1.63089618E12, "maxY": 243.962, "series": [{"data": [[1.63089618E12, 207.39599999999987]], "isOverall": false, "label": "listHistoryByTime", "isController": false}, {"data": [[1.63089618E12, 243.962]], "isOverall": false, "label": "listHistory", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089618E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 368.0, "minX": 2.0, "maxY": 21053.0, "series": [{"data": [[2.0, 21053.0], [3.0, 3088.6666666666665], [4.0, 3295.0], [5.0, 2846.0], [6.0, 2991.0], [8.0, 3195.0], [9.0, 3559.0], [10.0, 19035.555555555555], [11.0, 2779.5], [12.0, 2849.0], [14.0, 2806.6666666666665], [15.0, 3440.0], [16.0, 2863.6666666666665], [17.0, 2814.0], [18.0, 2937.0], [19.0, 2758.25], [20.0, 2972.0], [21.0, 2896.5], [22.0, 2704.5], [23.0, 2421.0], [24.0, 2843.3333333333335], [25.0, 2819.0], [26.0, 2652.0], [27.0, 2885.0], [28.0, 2967.0], [29.0, 2987.0], [30.0, 2704.6666666666665], [31.0, 2600.0], [33.0, 2665.0], [32.0, 2620.0], [35.0, 2698.0], [34.0, 2937.3333333333335], [37.0, 3162.0], [36.0, 2544.0], [39.0, 2708.5], [38.0, 2720.5], [41.0, 2833.0], [40.0, 2566.5], [43.0, 2653.5], [42.0, 2705.5], [45.0, 2625.3333333333335], [44.0, 2712.0], [47.0, 2888.6666666666665], [46.0, 2532.0], [49.0, 2466.5], [48.0, 2491.5], [51.0, 2700.3333333333335], [50.0, 2946.0], [53.0, 2608.0], [52.0, 2965.0], [55.0, 2827.0], [54.0, 2595.5], [57.0, 2674.5], [56.0, 2678.0], [59.0, 2406.5], [58.0, 2699.5], [61.0, 2474.0], [60.0, 2492.0], [63.0, 2479.5], [62.0, 2498.0], [66.0, 2485.5], [65.0, 2553.75], [67.0, 3034.0], [69.0, 2463.0], [68.0, 2413.0], [70.0, 1373.0], [75.0, 2631.5], [74.0, 2771.0], [73.0, 2701.8], [72.0, 2544.5], [78.0, 2490.5], [77.0, 2527.6666666666665], [76.0, 3030.0], [83.0, 2528.6666666666665], [82.0, 2582.0], [80.0, 2450.0], [81.0, 2792.0], [87.0, 1072.0], [86.0, 2571.0], [85.0, 2705.5], [84.0, 2469.5], [90.0, 1197.5], [89.0, 2353.0], [88.0, 2464.6666666666665], [91.0, 3029.0], [95.0, 2241.0], [94.0, 2103.5], [93.0, 2445.25], [92.0, 2699.0], [99.0, 2193.6666666666665], [97.0, 2345.5], [96.0, 2330.0], [98.0, 2983.0], [103.0, 2145.5], [102.0, 2544.5], [101.0, 2194.0], [100.0, 2295.0], [107.0, 2439.0], [106.0, 1637.6666666666667], [105.0, 2359.0], [104.0, 2491.5], [111.0, 783.6666666666667], [110.0, 1546.6666666666667], [109.0, 2407.0], [108.0, 2120.0], [115.0, 2305.0], [114.0, 962.4], [113.0, 2570.5], [112.0, 1172.8333333333333], [119.0, 2083.0], [118.0, 2107.2], [116.0, 2484.0], [123.0, 2217.0], [122.0, 2284.0], [121.0, 2152.0], [120.0, 2221.0], [127.0, 2138.0], [126.0, 2088.5], [125.0, 2245.0], [124.0, 2621.0], [135.0, 2126.5], [134.0, 1691.6666666666667], [133.0, 1408.6666666666667], [132.0, 2195.0], [131.0, 615.8], [130.0, 2242.0], [129.0, 2270.5], [128.0, 2301.5], [143.0, 2312.5], [142.0, 2528.0], [141.0, 2209.0], [140.0, 2016.5], [139.0, 2077.5], [138.0, 1945.5], [137.0, 2357.5], [136.0, 1944.0], [151.0, 1879.0], [150.0, 1279.25], [149.0, 1773.6666666666667], [148.0, 2201.0], [147.0, 2252.0], [146.0, 1265.75], [145.0, 1917.0], [144.0, 1470.0], [158.0, 2081.6666666666665], [157.0, 1957.0], [156.0, 2180.0], [155.0, 2265.0], [154.0, 2359.5], [152.0, 2120.3333333333335], [159.0, 1117.5], [153.0, 2068.0], [166.0, 1948.3333333333333], [165.0, 1185.5], [164.0, 2194.5], [163.0, 1880.5], [162.0, 2059.5], [161.0, 2299.5], [160.0, 1938.0], [167.0, 2037.0], [175.0, 2076.0], [174.0, 1356.6666666666667], [173.0, 1978.5], [172.0, 1921.5], [171.0, 2035.75], [168.0, 1522.0], [170.0, 1157.0], [169.0, 616.0], [181.0, 1794.0], [180.0, 2110.5], [179.0, 1946.0], [178.0, 1810.0], [177.0, 1837.0], [176.0, 2374.5], [183.0, 2357.0], [182.0, 1956.0], [191.0, 1120.0], [190.0, 2060.0], [189.0, 1800.3333333333333], [188.0, 2177.0], [187.0, 1396.6666666666667], [186.0, 1325.25], [185.0, 1877.8], [184.0, 2032.0], [198.0, 1464.0], [197.0, 2038.0], [196.0, 1144.5], [195.0, 2040.3333333333333], [193.0, 1636.5], [192.0, 1724.5], [199.0, 1832.0], [194.0, 2480.0], [206.0, 1460.3333333333333], [205.0, 1563.5], [204.0, 824.6666666666666], [203.0, 1709.0], [202.0, 1765.5], [201.0, 1876.0], [200.0, 1778.6666666666667], [207.0, 1942.0], [215.0, 1451.25], [213.0, 1522.0], [212.0, 1740.6666666666667], [210.0, 1544.0], [209.0, 1549.0], [208.0, 1638.6666666666667], [214.0, 1580.0], [211.0, 1602.0], [223.0, 1564.5], [222.0, 1629.0], [221.0, 1656.0], [220.0, 1510.0], [219.0, 1715.5], [218.0, 1501.0], [217.0, 1859.5], [216.0, 1529.0], [231.0, 1538.0], [230.0, 1850.3333333333333], [228.0, 1750.5], [227.0, 1625.0], [226.0, 1762.0], [225.0, 1311.3333333333333], [224.0, 1991.5], [229.0, 1492.0], [239.0, 1826.5], [238.0, 1682.0], [237.0, 1571.0], [236.0, 1616.0], [235.0, 2032.0], [234.0, 1911.5], [233.0, 1350.0], [232.0, 1850.5], [247.0, 1669.0], [246.0, 957.0], [245.0, 1677.5], [244.0, 1504.0], [243.0, 1523.0], [242.0, 1917.5], [241.0, 1043.5], [240.0, 1670.5], [255.0, 1439.5], [254.0, 1437.0], [253.0, 1669.3333333333333], [251.0, 1354.5], [250.0, 1575.5], [249.0, 1884.0], [248.0, 1509.0], [252.0, 1826.0], [270.0, 945.5], [271.0, 1766.0], [269.0, 1103.0], [268.0, 1596.0], [267.0, 1569.5], [266.0, 1277.5], [265.0, 1135.0], [264.0, 1267.6666666666667], [263.0, 1382.6666666666667], [257.0, 1294.0], [256.0, 1826.5], [259.0, 1213.75], [258.0, 1546.0], [262.0, 1544.0], [261.0, 1676.5], [260.0, 1508.0], [286.0, 1694.0], [287.0, 1164.0], [285.0, 1317.0], [284.0, 913.5], [283.0, 1138.5], [282.0, 1392.3333333333333], [281.0, 1418.0], [280.0, 1171.3333333333333], [279.0, 1170.5], [273.0, 1461.5], [272.0, 1370.0], [275.0, 1517.0], [274.0, 1026.0], [278.0, 1573.3333333333333], [276.0, 1574.0], [277.0, 1686.0], [302.0, 898.6666666666666], [303.0, 1440.5], [301.0, 1382.5], [300.0, 1612.5], [299.0, 1460.0], [298.0, 1162.0], [297.0, 1402.5], [296.0, 1431.0], [295.0, 1131.0], [294.0, 1658.0], [289.0, 931.0], [288.0, 1491.5], [291.0, 1176.0], [290.0, 737.0], [293.0, 1350.0], [292.0, 854.5], [318.0, 1133.0], [319.0, 941.5], [317.0, 1379.5], [316.0, 1388.0], [315.0, 1198.6666666666667], [314.0, 1258.0], [313.0, 1284.0], [312.0, 1205.5], [311.0, 1217.0], [310.0, 1180.6666666666667], [305.0, 1076.6666666666667], [304.0, 1303.0], [307.0, 1240.6666666666667], [306.0, 1193.0], [309.0, 1555.0], [308.0, 1350.5], [335.0, 953.4], [332.0, 1111.0], [323.0, 1011.0], [334.0, 1184.0], [333.0, 922.0], [322.0, 599.1666666666666], [321.0, 1201.0], [320.0, 856.5], [331.0, 1295.0], [330.0, 1201.5], [329.0, 1087.5], [328.0, 924.2], [327.0, 734.0], [326.0, 936.6666666666666], [325.0, 1029.5], [324.0, 1196.3333333333333], [350.0, 1198.3333333333333], [351.0, 1055.5], [349.0, 876.3333333333334], [348.0, 699.0], [339.0, 980.6666666666666], [338.0, 656.0], [337.0, 902.6666666666666], [336.0, 904.5], [347.0, 987.0], [346.0, 709.0], [345.0, 839.3333333333334], [344.0, 1244.5], [343.0, 1108.0], [342.0, 901.0], [341.0, 1077.0], [340.0, 885.0], [367.0, 806.0], [363.0, 1146.5], [362.0, 1030.0], [361.0, 1235.0], [360.0, 1092.0], [359.0, 929.0], [358.0, 924.0], [353.0, 1146.5], [352.0, 643.0], [357.0, 873.5], [356.0, 1120.5], [355.0, 1114.5], [364.0, 1039.0], [366.0, 724.0], [365.0, 1046.0], [354.0, 829.5], [382.0, 628.3333333333334], [368.0, 537.4285714285714], [369.0, 751.3333333333334], [371.0, 857.5], [370.0, 909.5], [375.0, 719.8], [374.0, 612.0], [373.0, 728.4], [372.0, 546.3333333333334], [377.0, 572.0], [378.0, 543.25], [379.0, 702.0], [383.0, 498.3333333333333], [376.0, 672.3333333333334], [381.0, 900.6666666666666], [380.0, 1142.0], [398.0, 581.0], [388.0, 622.0], [389.0, 937.0], [390.0, 515.2], [393.0, 466.4], [392.0, 609.6666666666666], [396.0, 588.1666666666666], [391.0, 756.5], [384.0, 705.0], [385.0, 731.5], [387.0, 863.5], [386.0, 780.0], [399.0, 792.0], [397.0, 595.3333333333334], [394.0, 541.0], [395.0, 567.0], [402.0, 666.0], [401.0, 620.5], [400.0, 1017.0], [413.0, 520.0], [415.0, 715.0], [414.0, 924.0], [412.0, 939.0], [403.0, 618.0], [410.0, 970.0], [407.0, 733.0], [406.0, 980.0], [405.0, 633.0], [404.0, 754.0], [429.0, 577.8], [431.0, 632.0], [419.0, 749.0], [424.0, 633.2], [430.0, 773.3333333333334], [428.0, 823.0], [427.0, 673.5], [425.0, 859.0], [421.0, 536.0], [418.0, 908.0], [417.0, 698.0], [416.0, 924.0], [420.0, 535.0], [434.0, 496.8333333333333], [435.0, 368.0], [438.0, 541.0], [437.0, 547.0], [436.0, 633.5], [433.0, 667.5], [432.0, 492.0], [439.0, 584.0], [440.0, 740.0], [445.0, 695.0], [446.0, 776.0], [443.0, 719.0], [444.0, 681.5]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[225.67900000000012, 1751.8740000000012]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 446.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7496.116666666667, "minX": 1.63089618E12, "maxY": 57285.9, "series": [{"data": [[1.63089618E12, 57285.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63089618E12, 7496.116666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089618E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1751.8740000000012, "minX": 1.63089618E12, "maxY": 1751.8740000000012, "series": [{"data": [[1.63089618E12, 1751.8740000000012]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089618E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1540.3880000000006, "minX": 1.63089618E12, "maxY": 1540.3880000000006, "series": [{"data": [[1.63089618E12, 1540.3880000000006]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089618E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 262.65900000000033, "minX": 1.63089618E12, "maxY": 262.65900000000033, "series": [{"data": [[1.63089618E12, 262.65900000000033]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089618E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 77.0, "minX": 1.63089618E12, "maxY": 3559.0, "series": [{"data": [[1.63089618E12, 3559.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63089618E12, 2676.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63089618E12, 3169.4200000000046]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63089618E12, 2880.5999999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63089618E12, 77.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63089618E12, 1546.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089618E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 383.0, "minX": 9.0, "maxY": 21046.5, "series": [{"data": [[136.0, 1125.5], [142.0, 1863.5], [9.0, 2751.0], [165.0, 1419.0], [189.0, 2270.0], [103.0, 383.0], [119.0, 2730.0], [127.0, 633.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 21046.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 189.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 9.0, "maxY": 2750.0, "series": [{"data": [[136.0, 1125.0], [142.0, 1863.5], [9.0, 2750.0], [165.0, 1414.0], [189.0, 2270.0], [103.0, 382.0], [119.0, 2730.0], [127.0, 633.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 189.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.63089618E12, "maxY": 16.666666666666668, "series": [{"data": [[1.63089618E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089618E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.63089618E12, "maxY": 16.5, "series": [{"data": [[1.63089618E12, 16.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63089618E12, 0.16666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089618E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.63089618E12, "maxY": 16.5, "series": [{"data": [[1.63089618E12, 0.16666666666666666]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63089618E12, 16.5]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089618E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.63089618E12, "maxY": 16.5, "series": [{"data": [[1.63089618E12, 16.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63089618E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089618E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

