/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 93.0, "minX": 0.0, "maxY": 21044.0, "series": [{"data": [[0.0, 93.0], [0.1, 137.0], [0.2, 171.0], [0.3, 184.0], [0.4, 210.0], [0.5, 258.0], [0.6, 301.0], [0.7, 308.0], [0.8, 317.0], [0.9, 338.0], [1.0, 359.0], [1.1, 365.0], [1.2, 401.0], [1.3, 430.0], [1.4, 433.0], [1.5, 437.0], [1.6, 453.0], [1.7, 512.0], [1.8, 524.0], [1.9, 528.0], [2.0, 563.0], [2.1, 580.0], [2.2, 620.0], [2.3, 643.0], [2.4, 648.0], [2.5, 657.0], [2.6, 695.0], [2.7, 707.0], [2.8, 725.0], [2.9, 736.0], [3.0, 747.0], [3.1, 802.0], [3.2, 817.0], [3.3, 824.0], [3.4, 829.0], [3.5, 834.0], [3.6, 853.0], [3.7, 931.0], [3.8, 983.0], [3.9, 990.0], [4.0, 1001.0], [4.1, 1005.0], [4.2, 1051.0], [4.3, 1062.0], [4.4, 1115.0], [4.5, 1177.0], [4.6, 1254.0], [4.7, 1326.0], [4.8, 1348.0], [4.9, 1360.0], [5.0, 1409.0], [5.1, 1455.0], [5.2, 1530.0], [5.3, 1590.0], [5.4, 1612.0], [5.5, 1621.0], [5.6, 1639.0], [5.7, 1656.0], [5.8, 1670.0], [5.9, 1680.0], [6.0, 1698.0], [6.1, 1708.0], [6.2, 1720.0], [6.3, 1738.0], [6.4, 1742.0], [6.5, 1752.0], [6.6, 1770.0], [6.7, 1780.0], [6.8, 1795.0], [6.9, 1801.0], [7.0, 1816.0], [7.1, 1833.0], [7.2, 1850.0], [7.3, 1853.0], [7.4, 1860.0], [7.5, 1867.0], [7.6, 1877.0], [7.7, 1886.0], [7.8, 1894.0], [7.9, 1900.0], [8.0, 1909.0], [8.1, 1911.0], [8.2, 1923.0], [8.3, 1928.0], [8.4, 1934.0], [8.5, 1941.0], [8.6, 1955.0], [8.7, 1957.0], [8.8, 1963.0], [8.9, 1971.0], [9.0, 1988.0], [9.1, 2000.0], [9.2, 2013.0], [9.3, 2019.0], [9.4, 2035.0], [9.5, 2063.0], [9.6, 2089.0], [9.7, 2102.0], [9.8, 2122.0], [9.9, 2142.0], [10.0, 2154.0], [10.1, 2174.0], [10.2, 2198.0], [10.3, 2214.0], [10.4, 2229.0], [10.5, 2240.0], [10.6, 2255.0], [10.7, 2288.0], [10.8, 2311.0], [10.9, 2319.0], [11.0, 2349.0], [11.1, 2369.0], [11.2, 2383.0], [11.3, 2398.0], [11.4, 2430.0], [11.5, 2433.0], [11.6, 2435.0], [11.7, 2438.0], [11.8, 2440.0], [11.9, 2473.0], [12.0, 2477.0], [12.1, 2478.0], [12.2, 2482.0], [12.3, 2490.0], [12.4, 2503.0], [12.5, 2506.0], [12.6, 2520.0], [12.7, 2536.0], [12.8, 2558.0], [12.9, 2565.0], [13.0, 2575.0], [13.1, 2589.0], [13.2, 2595.0], [13.3, 2603.0], [13.4, 2619.0], [13.5, 2627.0], [13.6, 2634.0], [13.7, 2637.0], [13.8, 2653.0], [13.9, 2655.0], [14.0, 2659.0], [14.1, 2665.0], [14.2, 2667.0], [14.3, 2669.0], [14.4, 2671.0], [14.5, 2676.0], [14.6, 2681.0], [14.7, 2686.0], [14.8, 2689.0], [14.9, 2704.0], [15.0, 2708.0], [15.1, 2709.0], [15.2, 2710.0], [15.3, 2712.0], [15.4, 2721.0], [15.5, 2734.0], [15.6, 2737.0], [15.7, 2742.0], [15.8, 2747.0], [15.9, 2759.0], [16.0, 2769.0], [16.1, 2774.0], [16.2, 2779.0], [16.3, 2792.0], [16.4, 2802.0], [16.5, 2815.0], [16.6, 2819.0], [16.7, 2821.0], [16.8, 2831.0], [16.9, 2838.0], [17.0, 2841.0], [17.1, 2854.0], [17.2, 2856.0], [17.3, 2869.0], [17.4, 2872.0], [17.5, 2876.0], [17.6, 2883.0], [17.7, 2891.0], [17.8, 2896.0], [17.9, 2899.0], [18.0, 2906.0], [18.1, 2928.0], [18.2, 2938.0], [18.3, 2943.0], [18.4, 2949.0], [18.5, 2955.0], [18.6, 2969.0], [18.7, 2976.0], [18.8, 2988.0], [18.9, 2994.0], [19.0, 2997.0], [19.1, 3001.0], [19.2, 3007.0], [19.3, 3014.0], [19.4, 3017.0], [19.5, 3027.0], [19.6, 3030.0], [19.7, 3034.0], [19.8, 3036.0], [19.9, 3040.0], [20.0, 3046.0], [20.1, 3059.0], [20.2, 3061.0], [20.3, 3076.0], [20.4, 3087.0], [20.5, 3097.0], [20.6, 3102.0], [20.7, 3106.0], [20.8, 3108.0], [20.9, 3114.0], [21.0, 3121.0], [21.1, 3126.0], [21.2, 3132.0], [21.3, 3147.0], [21.4, 3155.0], [21.5, 3169.0], [21.6, 3185.0], [21.7, 3194.0], [21.8, 3199.0], [21.9, 3211.0], [22.0, 3215.0], [22.1, 3222.0], [22.2, 3228.0], [22.3, 3231.0], [22.4, 3246.0], [22.5, 3251.0], [22.6, 3267.0], [22.7, 3278.0], [22.8, 3290.0], [22.9, 3304.0], [23.0, 3313.0], [23.1, 3324.0], [23.2, 3330.0], [23.3, 3341.0], [23.4, 3343.0], [23.5, 3348.0], [23.6, 3351.0], [23.7, 3362.0], [23.8, 3367.0], [23.9, 3371.0], [24.0, 3377.0], [24.1, 3380.0], [24.2, 3384.0], [24.3, 3390.0], [24.4, 3392.0], [24.5, 3398.0], [24.6, 3405.0], [24.7, 3409.0], [24.8, 3421.0], [24.9, 3429.0], [25.0, 3444.0], [25.1, 3449.0], [25.2, 3464.0], [25.3, 3469.0], [25.4, 3482.0], [25.5, 3486.0], [25.6, 3492.0], [25.7, 3495.0], [25.8, 3504.0], [25.9, 3508.0], [26.0, 3514.0], [26.1, 3526.0], [26.2, 3539.0], [26.3, 3547.0], [26.4, 3556.0], [26.5, 3567.0], [26.6, 3576.0], [26.7, 3590.0], [26.8, 3600.0], [26.9, 3623.0], [27.0, 3631.0], [27.1, 3638.0], [27.2, 3651.0], [27.3, 3662.0], [27.4, 3672.0], [27.5, 3687.0], [27.6, 3694.0], [27.7, 3703.0], [27.8, 3716.0], [27.9, 3726.0], [28.0, 3737.0], [28.1, 3760.0], [28.2, 3767.0], [28.3, 3772.0], [28.4, 3776.0], [28.5, 3789.0], [28.6, 3799.0], [28.7, 3813.0], [28.8, 3823.0], [28.9, 3831.0], [29.0, 3838.0], [29.1, 3853.0], [29.2, 3856.0], [29.3, 3864.0], [29.4, 3871.0], [29.5, 3878.0], [29.6, 3888.0], [29.7, 3905.0], [29.8, 3915.0], [29.9, 3931.0], [30.0, 3946.0], [30.1, 3959.0], [30.2, 3964.0], [30.3, 3976.0], [30.4, 3990.0], [30.5, 4002.0], [30.6, 4014.0], [30.7, 4028.0], [30.8, 4041.0], [30.9, 4052.0], [31.0, 4078.0], [31.1, 4085.0], [31.2, 4106.0], [31.3, 4115.0], [31.4, 4129.0], [31.5, 4136.0], [31.6, 4146.0], [31.7, 4161.0], [31.8, 4169.0], [31.9, 4177.0], [32.0, 4184.0], [32.1, 4190.0], [32.2, 4200.0], [32.3, 4218.0], [32.4, 4223.0], [32.5, 4238.0], [32.6, 4243.0], [32.7, 4259.0], [32.8, 4265.0], [32.9, 4280.0], [33.0, 4299.0], [33.1, 4308.0], [33.2, 4315.0], [33.3, 4325.0], [33.4, 4335.0], [33.5, 4339.0], [33.6, 4349.0], [33.7, 4357.0], [33.8, 4372.0], [33.9, 4378.0], [34.0, 4391.0], [34.1, 4395.0], [34.2, 4401.0], [34.3, 4411.0], [34.4, 4420.0], [34.5, 4428.0], [34.6, 4436.0], [34.7, 4451.0], [34.8, 4457.0], [34.9, 4469.0], [35.0, 4494.0], [35.1, 4501.0], [35.2, 4514.0], [35.3, 4527.0], [35.4, 4539.0], [35.5, 4544.0], [35.6, 4553.0], [35.7, 4563.0], [35.8, 4576.0], [35.9, 4580.0], [36.0, 4594.0], [36.1, 4604.0], [36.2, 4608.0], [36.3, 4615.0], [36.4, 4623.0], [36.5, 4634.0], [36.6, 4642.0], [36.7, 4652.0], [36.8, 4665.0], [36.9, 4674.0], [37.0, 4676.0], [37.1, 4689.0], [37.2, 4700.0], [37.3, 4704.0], [37.4, 4713.0], [37.5, 4727.0], [37.6, 4740.0], [37.7, 4760.0], [37.8, 4775.0], [37.9, 4782.0], [38.0, 4792.0], [38.1, 4795.0], [38.2, 4803.0], [38.3, 4810.0], [38.4, 4818.0], [38.5, 4839.0], [38.6, 4847.0], [38.7, 4852.0], [38.8, 4857.0], [38.9, 4870.0], [39.0, 4877.0], [39.1, 4883.0], [39.2, 4888.0], [39.3, 4906.0], [39.4, 4914.0], [39.5, 4923.0], [39.6, 4943.0], [39.7, 4955.0], [39.8, 4965.0], [39.9, 4974.0], [40.0, 4995.0], [40.1, 5003.0], [40.2, 5021.0], [40.3, 5023.0], [40.4, 5034.0], [40.5, 5061.0], [40.6, 5074.0], [40.7, 5091.0], [40.8, 5100.0], [40.9, 5108.0], [41.0, 5122.0], [41.1, 5140.0], [41.2, 5148.0], [41.3, 5155.0], [41.4, 5163.0], [41.5, 5173.0], [41.6, 5185.0], [41.7, 5191.0], [41.8, 5195.0], [41.9, 5214.0], [42.0, 5225.0], [42.1, 5247.0], [42.2, 5265.0], [42.3, 5276.0], [42.4, 5281.0], [42.5, 5298.0], [42.6, 5319.0], [42.7, 5327.0], [42.8, 5337.0], [42.9, 5341.0], [43.0, 5356.0], [43.1, 5366.0], [43.2, 5372.0], [43.3, 5387.0], [43.4, 5391.0], [43.5, 5406.0], [43.6, 5416.0], [43.7, 5428.0], [43.8, 5440.0], [43.9, 5444.0], [44.0, 5464.0], [44.1, 5472.0], [44.2, 5488.0], [44.3, 5506.0], [44.4, 5512.0], [44.5, 5516.0], [44.6, 5520.0], [44.7, 5544.0], [44.8, 5550.0], [44.9, 5568.0], [45.0, 5575.0], [45.1, 5584.0], [45.2, 5589.0], [45.3, 5596.0], [45.4, 5602.0], [45.5, 5607.0], [45.6, 5619.0], [45.7, 5625.0], [45.8, 5633.0], [45.9, 5649.0], [46.0, 5661.0], [46.1, 5672.0], [46.2, 5681.0], [46.3, 5702.0], [46.4, 5715.0], [46.5, 5719.0], [46.6, 5723.0], [46.7, 5738.0], [46.8, 5765.0], [46.9, 5782.0], [47.0, 5808.0], [47.1, 5818.0], [47.2, 5829.0], [47.3, 5844.0], [47.4, 5861.0], [47.5, 5874.0], [47.6, 5884.0], [47.7, 5903.0], [47.8, 5930.0], [47.9, 5936.0], [48.0, 5947.0], [48.1, 5971.0], [48.2, 6002.0], [48.3, 6022.0], [48.4, 6036.0], [48.5, 6045.0], [48.6, 6060.0], [48.7, 6069.0], [48.8, 6087.0], [48.9, 6112.0], [49.0, 6125.0], [49.1, 6154.0], [49.2, 6163.0], [49.3, 6178.0], [49.4, 6198.0], [49.5, 6211.0], [49.6, 6240.0], [49.7, 6256.0], [49.8, 6263.0], [49.9, 6274.0], [50.0, 6288.0], [50.1, 6322.0], [50.2, 6346.0], [50.3, 6358.0], [50.4, 6365.0], [50.5, 6380.0], [50.6, 6384.0], [50.7, 6386.0], [50.8, 6402.0], [50.9, 6417.0], [51.0, 6430.0], [51.1, 6437.0], [51.2, 6452.0], [51.3, 6459.0], [51.4, 6467.0], [51.5, 6473.0], [51.6, 6487.0], [51.7, 6496.0], [51.8, 6501.0], [51.9, 6512.0], [52.0, 6516.0], [52.1, 6519.0], [52.2, 6533.0], [52.3, 6545.0], [52.4, 6571.0], [52.5, 6574.0], [52.6, 6578.0], [52.7, 6588.0], [52.8, 6602.0], [52.9, 6604.0], [53.0, 6609.0], [53.1, 6615.0], [53.2, 6621.0], [53.3, 6632.0], [53.4, 6642.0], [53.5, 6645.0], [53.6, 6650.0], [53.7, 6656.0], [53.8, 6666.0], [53.9, 6677.0], [54.0, 6688.0], [54.1, 6695.0], [54.2, 6704.0], [54.3, 6714.0], [54.4, 6716.0], [54.5, 6727.0], [54.6, 6735.0], [54.7, 6745.0], [54.8, 6756.0], [54.9, 6767.0], [55.0, 6770.0], [55.1, 6782.0], [55.2, 6804.0], [55.3, 6815.0], [55.4, 6826.0], [55.5, 6831.0], [55.6, 6848.0], [55.7, 6862.0], [55.8, 6870.0], [55.9, 6880.0], [56.0, 6903.0], [56.1, 6908.0], [56.2, 6933.0], [56.3, 6947.0], [56.4, 6962.0], [56.5, 6966.0], [56.6, 6979.0], [56.7, 6991.0], [56.8, 7010.0], [56.9, 7023.0], [57.0, 7032.0], [57.1, 7044.0], [57.2, 7057.0], [57.3, 7067.0], [57.4, 7099.0], [57.5, 7105.0], [57.6, 7116.0], [57.7, 7125.0], [57.8, 7139.0], [57.9, 7157.0], [58.0, 7166.0], [58.1, 7175.0], [58.2, 7185.0], [58.3, 7198.0], [58.4, 7212.0], [58.5, 7222.0], [58.6, 7236.0], [58.7, 7238.0], [58.8, 7245.0], [58.9, 7251.0], [59.0, 7263.0], [59.1, 7274.0], [59.2, 7281.0], [59.3, 7285.0], [59.4, 7292.0], [59.5, 7309.0], [59.6, 7322.0], [59.7, 7330.0], [59.8, 7345.0], [59.9, 7368.0], [60.0, 7372.0], [60.1, 7382.0], [60.2, 7387.0], [60.3, 7397.0], [60.4, 7412.0], [60.5, 7416.0], [60.6, 7423.0], [60.7, 7435.0], [60.8, 7444.0], [60.9, 7453.0], [61.0, 7461.0], [61.1, 7471.0], [61.2, 7479.0], [61.3, 7491.0], [61.4, 7506.0], [61.5, 7517.0], [61.6, 7529.0], [61.7, 7539.0], [61.8, 7567.0], [61.9, 7577.0], [62.0, 7598.0], [62.1, 7610.0], [62.2, 7636.0], [62.3, 7643.0], [62.4, 7651.0], [62.5, 7656.0], [62.6, 7670.0], [62.7, 7678.0], [62.8, 7685.0], [62.9, 7696.0], [63.0, 7721.0], [63.1, 7739.0], [63.2, 7753.0], [63.3, 7768.0], [63.4, 7779.0], [63.5, 7791.0], [63.6, 7805.0], [63.7, 7832.0], [63.8, 7841.0], [63.9, 7861.0], [64.0, 7866.0], [64.1, 7875.0], [64.2, 7895.0], [64.3, 7902.0], [64.4, 7912.0], [64.5, 7923.0], [64.6, 7933.0], [64.7, 7941.0], [64.8, 7952.0], [64.9, 7964.0], [65.0, 7969.0], [65.1, 7978.0], [65.2, 7999.0], [65.3, 8006.0], [65.4, 8010.0], [65.5, 8028.0], [65.6, 8038.0], [65.7, 8052.0], [65.8, 8058.0], [65.9, 8071.0], [66.0, 8076.0], [66.1, 8084.0], [66.2, 8088.0], [66.3, 8107.0], [66.4, 8115.0], [66.5, 8127.0], [66.6, 8135.0], [66.7, 8142.0], [66.8, 8155.0], [66.9, 8163.0], [67.0, 8185.0], [67.1, 8193.0], [67.2, 8202.0], [67.3, 8212.0], [67.4, 8220.0], [67.5, 8231.0], [67.6, 8240.0], [67.7, 8250.0], [67.8, 8269.0], [67.9, 8286.0], [68.0, 8300.0], [68.1, 8307.0], [68.2, 8317.0], [68.3, 8323.0], [68.4, 8334.0], [68.5, 8345.0], [68.6, 8364.0], [68.7, 8380.0], [68.8, 8407.0], [68.9, 8421.0], [69.0, 8439.0], [69.1, 8448.0], [69.2, 8462.0], [69.3, 8466.0], [69.4, 8488.0], [69.5, 8500.0], [69.6, 8507.0], [69.7, 8515.0], [69.8, 8524.0], [69.9, 8534.0], [70.0, 8555.0], [70.1, 8570.0], [70.2, 8581.0], [70.3, 8588.0], [70.4, 8601.0], [70.5, 8608.0], [70.6, 8619.0], [70.7, 8644.0], [70.8, 8656.0], [70.9, 8664.0], [71.0, 8675.0], [71.1, 8680.0], [71.2, 8684.0], [71.3, 8698.0], [71.4, 8705.0], [71.5, 8716.0], [71.6, 8724.0], [71.7, 8731.0], [71.8, 8739.0], [71.9, 8748.0], [72.0, 8754.0], [72.1, 8764.0], [72.2, 8775.0], [72.3, 8781.0], [72.4, 8790.0], [72.5, 8808.0], [72.6, 8817.0], [72.7, 8829.0], [72.8, 8839.0], [72.9, 8846.0], [73.0, 8852.0], [73.1, 8858.0], [73.2, 8862.0], [73.3, 8867.0], [73.4, 8871.0], [73.5, 8882.0], [73.6, 8897.0], [73.7, 8907.0], [73.8, 8915.0], [73.9, 8940.0], [74.0, 8950.0], [74.1, 8957.0], [74.2, 8965.0], [74.3, 8986.0], [74.4, 8990.0], [74.5, 9005.0], [74.6, 9021.0], [74.7, 9044.0], [74.8, 9057.0], [74.9, 9073.0], [75.0, 9088.0], [75.1, 9094.0], [75.2, 9108.0], [75.3, 9117.0], [75.4, 9131.0], [75.5, 9138.0], [75.6, 9143.0], [75.7, 9150.0], [75.8, 9156.0], [75.9, 9163.0], [76.0, 9187.0], [76.1, 9190.0], [76.2, 9201.0], [76.3, 9210.0], [76.4, 9229.0], [76.5, 9238.0], [76.6, 9250.0], [76.7, 9262.0], [76.8, 9267.0], [76.9, 9280.0], [77.0, 9287.0], [77.1, 9298.0], [77.2, 9305.0], [77.3, 9315.0], [77.4, 9329.0], [77.5, 9337.0], [77.6, 9342.0], [77.7, 9355.0], [77.8, 9362.0], [77.9, 9367.0], [78.0, 9385.0], [78.1, 9404.0], [78.2, 9412.0], [78.3, 9430.0], [78.4, 9448.0], [78.5, 9462.0], [78.6, 9467.0], [78.7, 9487.0], [78.8, 9497.0], [78.9, 9505.0], [79.0, 9513.0], [79.1, 9521.0], [79.2, 9530.0], [79.3, 9536.0], [79.4, 9551.0], [79.5, 9562.0], [79.6, 9569.0], [79.7, 9575.0], [79.8, 9589.0], [79.9, 9592.0], [80.0, 9599.0], [80.1, 9612.0], [80.2, 9625.0], [80.3, 9627.0], [80.4, 9642.0], [80.5, 9648.0], [80.6, 9654.0], [80.7, 9660.0], [80.8, 9667.0], [80.9, 9679.0], [81.0, 9697.0], [81.1, 9702.0], [81.2, 9718.0], [81.3, 9736.0], [81.4, 9742.0], [81.5, 9751.0], [81.6, 9774.0], [81.7, 9783.0], [81.8, 9796.0], [81.9, 9823.0], [82.0, 9833.0], [82.1, 9846.0], [82.2, 9868.0], [82.3, 9892.0], [82.4, 9903.0], [82.5, 9923.0], [82.6, 9934.0], [82.7, 9953.0], [82.8, 9963.0], [82.9, 9970.0], [83.0, 9977.0], [83.1, 9997.0], [83.2, 10008.0], [83.3, 10013.0], [83.4, 10029.0], [83.5, 10042.0], [83.6, 10058.0], [83.7, 10068.0], [83.8, 10107.0], [83.9, 10113.0], [84.0, 10126.0], [84.1, 10145.0], [84.2, 10156.0], [84.3, 10164.0], [84.4, 10175.0], [84.5, 10182.0], [84.6, 10193.0], [84.7, 10202.0], [84.8, 10210.0], [84.9, 10221.0], [85.0, 10229.0], [85.1, 10241.0], [85.2, 10245.0], [85.3, 10250.0], [85.4, 10270.0], [85.5, 10280.0], [85.6, 10292.0], [85.7, 10297.0], [85.8, 10313.0], [85.9, 10331.0], [86.0, 10339.0], [86.1, 10342.0], [86.2, 10364.0], [86.3, 10379.0], [86.4, 10387.0], [86.5, 10396.0], [86.6, 10408.0], [86.7, 10428.0], [86.8, 10440.0], [86.9, 10460.0], [87.0, 10464.0], [87.1, 10506.0], [87.2, 10522.0], [87.3, 10530.0], [87.4, 10541.0], [87.5, 10545.0], [87.6, 10578.0], [87.7, 10588.0], [87.8, 10599.0], [87.9, 10601.0], [88.0, 10613.0], [88.1, 10623.0], [88.2, 10641.0], [88.3, 10660.0], [88.4, 10663.0], [88.5, 10673.0], [88.6, 10681.0], [88.7, 10697.0], [88.8, 10712.0], [88.9, 10725.0], [89.0, 10733.0], [89.1, 10757.0], [89.2, 10763.0], [89.3, 10780.0], [89.4, 10787.0], [89.5, 10838.0], [89.6, 10865.0], [89.7, 10878.0], [89.8, 10884.0], [89.9, 10906.0], [90.0, 10921.0], [90.1, 10939.0], [90.2, 10961.0], [90.3, 11001.0], [90.4, 11027.0], [90.5, 11046.0], [90.6, 11077.0], [90.7, 11079.0], [90.8, 11125.0], [90.9, 11146.0], [91.0, 11175.0], [91.1, 11194.0], [91.2, 11217.0], [91.3, 11238.0], [91.4, 11259.0], [91.5, 11284.0], [91.6, 11305.0], [91.7, 11318.0], [91.8, 11346.0], [91.9, 11355.0], [92.0, 11384.0], [92.1, 11404.0], [92.2, 11463.0], [92.3, 11484.0], [92.4, 11510.0], [92.5, 11527.0], [92.6, 11541.0], [92.7, 11574.0], [92.8, 11629.0], [92.9, 11643.0], [93.0, 11666.0], [93.1, 11704.0], [93.2, 11720.0], [93.3, 11766.0], [93.4, 11810.0], [93.5, 11833.0], [93.6, 11852.0], [93.7, 11857.0], [93.8, 11885.0], [93.9, 11896.0], [94.0, 11912.0], [94.1, 11939.0], [94.2, 11960.0], [94.3, 11964.0], [94.4, 11987.0], [94.5, 12011.0], [94.6, 12032.0], [94.7, 12050.0], [94.8, 12111.0], [94.9, 12130.0], [95.0, 12167.0], [95.1, 12195.0], [95.2, 12227.0], [95.3, 12265.0], [95.4, 12303.0], [95.5, 12325.0], [95.6, 12350.0], [95.7, 12373.0], [95.8, 12389.0], [95.9, 12411.0], [96.0, 12434.0], [96.1, 12449.0], [96.2, 12478.0], [96.3, 12488.0], [96.4, 12502.0], [96.5, 12509.0], [96.6, 12516.0], [96.7, 12534.0], [96.8, 12569.0], [96.9, 12585.0], [97.0, 12668.0], [97.1, 12688.0], [97.2, 12753.0], [97.3, 12770.0], [97.4, 12817.0], [97.5, 12832.0], [97.6, 12854.0], [97.7, 12875.0], [97.8, 12892.0], [97.9, 12917.0], [98.0, 12936.0], [98.1, 12950.0], [98.2, 12954.0], [98.3, 12968.0], [98.4, 12997.0], [98.5, 13026.0], [98.6, 13069.0], [98.7, 13096.0], [98.8, 13105.0], [98.9, 13132.0], [99.0, 13151.0], [99.1, 13160.0], [99.2, 13170.0], [99.3, 13190.0], [99.4, 13211.0], [99.5, 13235.0], [99.6, 13254.0], [99.7, 13359.0], [99.8, 21031.0], [99.9, 21042.0], [100.0, 21044.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 66.0, "series": [{"data": [[0.0, 3.0], [100.0, 11.0], [200.0, 9.0], [300.0, 24.0], [400.0, 21.0], [500.0, 20.0], [600.0, 18.0], [700.0, 17.0], [800.0, 23.0], [900.0, 14.0], [1000.0, 14.0], [1100.0, 8.0], [1200.0, 6.0], [1300.0, 10.0], [1400.0, 8.0], [1500.0, 7.0], [1600.0, 29.0], [1700.0, 32.0], [1800.0, 41.0], [1900.0, 48.0], [2000.0, 23.0], [2100.0, 22.0], [2200.0, 22.0], [2300.0, 22.0], [2400.0, 42.0], [2500.0, 37.0], [2600.0, 63.0], [2700.0, 60.0], [2800.0, 62.0], [2900.0, 47.0], [3000.0, 59.0], [3100.0, 51.0], [3200.0, 43.0], [3300.0, 66.0], [3400.0, 48.0], [3500.0, 42.0], [3600.0, 36.0], [3700.0, 37.0], [3800.0, 42.0], [3900.0, 31.0], [4000.0, 30.0], [4100.0, 40.0], [4200.0, 33.0], [4300.0, 46.0], [4400.0, 36.0], [4500.0, 41.0], [4600.0, 44.0], [4700.0, 38.0], [4800.0, 46.0], [4900.0, 32.0], [5100.0, 41.0], [5000.0, 28.0], [5300.0, 38.0], [5200.0, 28.0], [5500.0, 44.0], [5400.0, 32.0], [5600.0, 37.0], [5700.0, 27.0], [5800.0, 28.0], [5900.0, 21.0], [6000.0, 27.0], [6100.0, 22.0], [6200.0, 24.0], [6300.0, 31.0], [6400.0, 39.0], [6500.0, 39.0], [6600.0, 57.0], [6700.0, 40.0], [6800.0, 33.0], [6900.0, 32.0], [7000.0, 25.0], [7100.0, 37.0], [7200.0, 45.0], [7300.0, 34.0], [7400.0, 42.0], [7500.0, 26.0], [7600.0, 36.0], [7700.0, 27.0], [7800.0, 28.0], [7900.0, 39.0], [8000.0, 40.0], [8100.0, 37.0], [8200.0, 32.0], [8300.0, 31.0], [8400.0, 29.0], [8500.0, 36.0], [8600.0, 37.0], [8700.0, 44.0], [8800.0, 48.0], [8900.0, 33.0], [9000.0, 28.0], [9100.0, 41.0], [9200.0, 39.0], [9300.0, 36.0], [9400.0, 31.0], [9500.0, 48.0], [9600.0, 39.0], [9700.0, 32.0], [9800.0, 22.0], [9900.0, 30.0], [10000.0, 26.0], [10100.0, 36.0], [10200.0, 44.0], [10300.0, 31.0], [10400.0, 22.0], [10500.0, 31.0], [10600.0, 35.0], [10700.0, 27.0], [10800.0, 19.0], [10900.0, 16.0], [11000.0, 18.0], [11100.0, 16.0], [11200.0, 16.0], [11300.0, 19.0], [11400.0, 15.0], [11500.0, 15.0], [11600.0, 12.0], [11700.0, 12.0], [11800.0, 24.0], [11900.0, 18.0], [12000.0, 13.0], [12100.0, 16.0], [12200.0, 10.0], [12300.0, 19.0], [12400.0, 20.0], [12500.0, 23.0], [12600.0, 8.0], [12700.0, 8.0], [12800.0, 20.0], [12900.0, 23.0], [13000.0, 12.0], [13100.0, 26.0], [13200.0, 12.0], [13300.0, 3.0], [21000.0, 11.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3783.0, "series": [{"data": [[0.0, 68.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 138.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3783.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 938.4669999999993, "minX": 1.63090248E12, "maxY": 980.1070000000008, "series": [{"data": [[1.63090248E12, 938.4669999999993]], "isOverall": false, "label": "listHistoryByTime", "isController": false}, {"data": [[1.63090248E12, 980.1070000000008]], "isOverall": false, "label": "listHistory", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090248E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1073.4444444444443, "minX": 1.0, "maxY": 21025.0, "series": [{"data": [[2.0, 13190.0], [3.0, 13242.0], [4.0, 13373.0], [5.0, 13279.0], [6.0, 19917.0], [7.0, 13180.0], [8.0, 13170.0], [9.0, 13212.0], [10.0, 19467.6], [11.0, 12061.0], [12.0, 12015.0], [13.0, 12065.5], [14.0, 11959.0], [15.0, 11957.0], [16.0, 12088.5], [17.0, 10767.0], [18.0, 12470.666666666666], [19.0, 13172.0], [20.0, 11612.0], [21.0, 10774.0], [22.0, 12379.0], [23.0, 11936.0], [24.0, 11931.0], [25.0, 12064.0], [26.0, 11967.0], [27.0, 11910.5], [28.0, 11858.0], [29.0, 12917.0], [30.0, 11498.333333333334], [31.0, 12057.0], [32.0, 11943.0], [33.0, 13221.0], [35.0, 11992.0], [34.0, 11492.666666666666], [37.0, 11568.0], [36.0, 13102.0], [39.0, 11802.5], [38.0, 11882.0], [41.0, 11841.0], [40.0, 11784.0], [43.0, 11864.0], [42.0, 11799.0], [45.0, 12170.666666666666], [44.0, 10608.0], [47.0, 11836.5], [46.0, 11869.5], [49.0, 11752.0], [48.0, 11758.0], [51.0, 11755.0], [50.0, 11769.5], [53.0, 11815.0], [52.0, 11807.0], [55.0, 11724.5], [54.0, 11741.5], [57.0, 11837.5], [56.0, 11711.0], [59.0, 11865.0], [58.0, 11719.5], [61.0, 11810.5], [60.0, 11808.5], [63.0, 11684.5], [62.0, 11924.0], [67.0, 11816.0], [66.0, 11674.5], [65.0, 11889.0], [64.0, 11770.5], [71.0, 11346.666666666666], [69.0, 11656.5], [68.0, 11758.5], [70.0, 12845.0], [75.0, 12039.0], [74.0, 12125.666666666666], [73.0, 10434.0], [72.0, 11634.0], [79.0, 11628.5], [78.0, 11702.5], [77.0, 11372.0], [76.0, 12918.0], [83.0, 11626.0], [82.0, 11737.0], [81.0, 11593.5], [80.0, 11604.5], [86.0, 11378.0], [84.0, 11767.5], [87.0, 12757.0], [85.0, 12759.0], [91.0, 11585.5], [90.0, 11695.5], [89.0, 11616.5], [88.0, 11168.666666666666], [95.0, 11939.5], [94.0, 11537.0], [93.0, 11582.0], [92.0, 11631.5], [99.0, 11601.0], [98.0, 11862.5], [97.0, 11575.0], [96.0, 11819.0], [103.0, 11312.0], [101.0, 11708.5], [100.0, 11500.5], [102.0, 12434.0], [107.0, 11384.5], [106.0, 11511.5], [105.0, 11397.5], [104.0, 11690.0], [111.0, 11360.5], [110.0, 11617.5], [109.0, 11386.0], [108.0, 11373.0], [115.0, 10245.0], [114.0, 11570.0], [113.0, 11054.666666666666], [112.0, 12506.0], [119.0, 11585.5], [118.0, 11404.5], [117.0, 11345.0], [116.0, 11801.666666666666], [123.0, 10158.0], [122.0, 11356.0], [121.0, 11345.0], [120.0, 11439.0], [127.0, 11313.5], [126.0, 11412.0], [125.0, 11160.0], [124.0, 12762.0], [135.0, 11388.0], [134.0, 11396.5], [133.0, 11402.5], [132.0, 11381.5], [131.0, 11321.5], [130.0, 11508.0], [129.0, 11415.5], [128.0, 11265.0], [143.0, 10063.0], [142.0, 11310.0], [141.0, 11309.0], [140.0, 11367.5], [139.0, 11221.5], [138.0, 11406.0], [137.0, 11823.0], [136.0, 10287.0], [151.0, 10997.666666666666], [149.0, 11210.5], [148.0, 11340.5], [147.0, 11344.0], [146.0, 11352.0], [145.0, 10917.666666666666], [150.0, 12391.0], [144.0, 12492.5], [159.0, 11112.0], [158.0, 11101.0], [157.0, 11173.0], [156.0, 11275.5], [155.0, 11301.0], [154.0, 11304.5], [153.0, 11187.0], [152.0, 11142.0], [167.0, 4510.2], [166.0, 11005.333333333334], [164.0, 7532.333333333334], [163.0, 11403.0], [162.0, 11134.0], [161.0, 11132.5], [160.0, 11288.0], [165.0, 4177.0], [175.0, 8175.0], [173.0, 11198.0], [172.0, 11228.5], [171.0, 11174.0], [170.0, 11048.0], [169.0, 11232.5], [168.0, 11192.5], [174.0, 6222.0], [183.0, 11112.5], [182.0, 3000.875], [181.0, 11626.333333333334], [180.0, 5212.5], [179.0, 5713.0], [178.0, 7421.333333333334], [177.0, 5732.75], [176.0, 11195.5], [191.0, 11087.0], [190.0, 11014.5], [189.0, 10634.0], [187.0, 11491.0], [186.0, 9853.0], [185.0, 11102.5], [184.0, 11237.0], [188.0, 12144.0], [199.0, 10992.0], [198.0, 10646.0], [196.0, 9796.0], [195.0, 10567.666666666666], [193.0, 11101.0], [192.0, 10939.5], [197.0, 12061.0], [194.0, 12449.0], [207.0, 10840.0], [206.0, 10939.5], [205.0, 10987.5], [204.0, 10987.0], [203.0, 11066.0], [202.0, 11016.0], [201.0, 11003.0], [200.0, 10937.0], [215.0, 10838.5], [214.0, 10842.5], [213.0, 10846.5], [212.0, 11133.5], [211.0, 10951.5], [210.0, 10980.0], [209.0, 10976.5], [208.0, 11180.0], [223.0, 10932.5], [222.0, 10372.666666666666], [220.0, 10900.0], [219.0, 10814.5], [218.0, 10907.5], [217.0, 10816.5], [216.0, 10990.0], [221.0, 12233.0], [231.0, 10780.5], [230.0, 10750.5], [229.0, 10705.0], [228.0, 10742.0], [227.0, 11039.5], [226.0, 10719.0], [225.0, 10834.0], [224.0, 10765.5], [239.0, 10724.5], [238.0, 5563.25], [237.0, 10736.0], [236.0, 10802.0], [235.0, 10822.0], [234.0, 10629.5], [233.0, 11252.0], [232.0, 9533.0], [246.0, 10819.5], [245.0, 10787.0], [244.0, 10746.0], [243.0, 10749.0], [242.0, 10768.5], [241.0, 10511.0], [240.0, 11857.0], [255.0, 10815.5], [254.0, 10639.0], [253.0, 10658.5], [252.0, 10928.0], [251.0, 9612.0], [250.0, 10728.0], [249.0, 10328.666666666666], [248.0, 10943.0], [270.0, 10595.0], [271.0, 10735.5], [269.0, 10549.5], [268.0, 10611.0], [267.0, 10705.0], [266.0, 10757.0], [265.0, 10773.0], [264.0, 10821.0], [263.0, 10598.0], [257.0, 10480.5], [256.0, 10682.0], [259.0, 10572.0], [258.0, 10660.5], [262.0, 10595.0], [261.0, 10602.0], [260.0, 10775.0], [286.0, 10637.0], [287.0, 10495.5], [285.0, 10566.75], [275.0, 10670.5], [274.0, 7262.666666666666], [273.0, 7085.333333333334], [272.0, 10569.0], [283.0, 10378.5], [282.0, 10484.0], [281.0, 10491.0], [280.0, 10967.666666666666], [279.0, 9267.0], [278.0, 10539.0], [277.0, 10398.5], [276.0, 10557.5], [301.0, 10405.5], [302.0, 10391.0], [303.0, 11003.0], [300.0, 10543.0], [291.0, 10460.5], [290.0, 10629.5], [289.0, 7090.0], [288.0, 10476.5], [299.0, 10378.5], [298.0, 10384.5], [297.0, 10524.5], [296.0, 10424.5], [295.0, 10519.0], [294.0, 10580.0], [293.0, 10606.5], [292.0, 5482.5], [318.0, 10143.5], [319.0, 9187.0], [317.0, 10148.5], [316.0, 10264.0], [315.0, 10516.0], [314.0, 10197.5], [313.0, 10323.5], [312.0, 10347.0], [311.0, 10515.5], [305.0, 10536.5], [304.0, 9967.0], [307.0, 10449.5], [306.0, 10312.5], [310.0, 10428.0], [309.0, 10161.5], [308.0, 10329.5], [334.0, 10171.5], [335.0, 10220.5], [333.0, 10223.5], [332.0, 10290.0], [331.0, 10255.5], [330.0, 10056.5], [329.0, 10333.5], [328.0, 9923.666666666666], [326.0, 10324.0], [320.0, 10702.666666666666], [321.0, 11525.0], [327.0, 11487.0], [323.0, 9314.0], [322.0, 9912.666666666666], [325.0, 10129.5], [324.0, 10589.666666666666], [350.0, 9905.5], [351.0, 10262.5], [349.0, 10255.0], [348.0, 9964.0], [347.0, 9881.0], [346.0, 10283.0], [345.0, 10300.5], [344.0, 10251.5], [343.0, 9909.5], [337.0, 9854.333333333334], [336.0, 11355.0], [339.0, 10149.5], [338.0, 10253.5], [342.0, 9959.5], [341.0, 10339.75], [365.0, 9800.5], [366.0, 5204.5], [367.0, 11219.0], [364.0, 6890.333333333334], [355.0, 10146.0], [354.0, 9919.5], [353.0, 10217.5], [352.0, 10226.0], [363.0, 10185.5], [362.0, 9941.5], [361.0, 10205.0], [360.0, 9849.5], [359.0, 9925.5], [358.0, 10363.666666666666], [357.0, 9079.0], [356.0, 10211.0], [382.0, 10035.0], [383.0, 10020.5], [381.0, 10063.5], [380.0, 10058.5], [379.0, 10049.5], [378.0, 10048.0], [377.0, 9859.0], [376.0, 9988.5], [375.0, 9932.0], [369.0, 10133.0], [368.0, 9790.0], [371.0, 9769.5], [370.0, 10216.5], [374.0, 10069.5], [373.0, 10033.0], [372.0, 9953.0], [398.0, 9594.333333333334], [399.0, 9618.5], [396.0, 9951.0], [397.0, 11061.0], [387.0, 9977.5], [386.0, 10055.5], [385.0, 10327.333333333334], [384.0, 8949.0], [395.0, 10337.0], [394.0, 8958.0], [393.0, 9988.0], [392.0, 9990.5], [391.0, 9562.0], [389.0, 9993.0], [390.0, 11038.0], [388.0, 9992.5], [414.0, 9842.0], [415.0, 9783.5], [413.0, 9828.0], [412.0, 9751.5], [411.0, 9881.5], [410.0, 9851.0], [409.0, 9568.5], [408.0, 9900.5], [407.0, 9890.5], [401.0, 10321.333333333334], [400.0, 8855.0], [403.0, 9922.5], [402.0, 9467.5], [406.0, 10050.333333333334], [405.0, 8839.0], [404.0, 9603.5], [430.0, 9415.5], [431.0, 9717.5], [429.0, 9428.0], [428.0, 9743.5], [427.0, 9754.5], [426.0, 3444.5], [425.0, 6690.333333333334], [424.0, 9718.0], [423.0, 4625.5], [417.0, 9808.5], [416.0, 9846.0], [419.0, 9895.0], [418.0, 9803.0], [422.0, 9473.0], [420.0, 6681.0], [421.0, 3877.6666666666665], [446.0, 8604.0], [447.0, 9750.0], [445.0, 9283.0], [444.0, 9574.0], [443.0, 9675.0], [442.0, 9316.5], [441.0, 9164.333333333334], [440.0, 10008.0], [439.0, 9679.5], [432.0, 9424.5], [434.0, 9482.5], [435.0, 10042.0], [433.0, 9395.0], [438.0, 9386.5], [437.0, 9056.0], [436.0, 10104.0], [462.0, 9318.5], [463.0, 9561.0], [461.0, 9217.0], [460.0, 9211.0], [459.0, 9205.0], [458.0, 9904.0], [457.0, 9208.5], [456.0, 9568.0], [455.0, 9577.5], [449.0, 9272.0], [448.0, 9284.5], [451.0, 9252.0], [450.0, 9593.5], [454.0, 9759.0], [453.0, 8590.0], [452.0, 9371.5], [478.0, 9206.0], [479.0, 9107.5], [477.0, 9144.0], [476.0, 10464.0], [467.0, 9522.5], [466.0, 9527.5], [465.0, 9528.5], [464.0, 9266.5], [475.0, 9431.0], [474.0, 9144.5], [473.0, 9206.5], [472.0, 9416.5], [471.0, 9503.0], [470.0, 9780.666666666666], [469.0, 8468.0], [468.0, 9168.0], [494.0, 9294.5], [495.0, 9251.0], [493.0, 9452.5], [492.0, 9336.0], [491.0, 9060.0], [490.0, 9316.0], [489.0, 9375.0], [488.0, 9439.5], [487.0, 9323.5], [481.0, 8434.0], [480.0, 9135.5], [483.0, 9429.0], [482.0, 9763.666666666666], [486.0, 9389.0], [485.0, 9102.0], [484.0, 9416.5], [509.0, 8249.0], [511.0, 8971.0], [510.0, 9613.0], [508.0, 8954.5], [499.0, 8987.0], [498.0, 9269.0], [497.0, 9465.0], [496.0, 8533.0], [507.0, 9015.0], [506.0, 9767.25], [505.0, 8317.0], [504.0, 8324.0], [503.0, 8977.5], [502.0, 8759.666666666666], [500.0, 9016.0], [501.0, 10331.0], [538.0, 8584.666666666666], [542.0, 8741.0], [528.0, 8830.5], [530.0, 8821.5], [532.0, 8837.0], [540.0, 9088.0], [536.0, 9124.5], [518.0, 8889.0], [516.0, 9289.0], [514.0, 8962.0], [512.0, 9295.5], [526.0, 9185.0], [524.0, 9256.666666666666], [522.0, 8856.0], [534.0, 9023.5], [568.0, 8656.0], [572.0, 7999.0], [574.0, 8578.666666666666], [560.0, 8841.0], [562.0, 8620.0], [570.0, 8542.0], [544.0, 8831.5], [546.0, 8718.5], [548.0, 8948.5], [550.0, 8776.0], [558.0, 8780.5], [556.0, 8912.5], [554.0, 8747.5], [552.0, 8688.5], [564.0, 8806.0], [566.0, 9182.0], [604.0, 7805.0], [592.0, 8682.0], [594.0, 8391.0], [596.0, 8440.0], [606.0, 8682.0], [602.0, 8869.333333333334], [600.0, 8396.5], [576.0, 8454.0], [578.0, 8491.5], [580.0, 7934.5], [582.0, 5826.0], [590.0, 3017.333333333333], [586.0, 5999.0], [588.0, 5007.5], [584.0, 8468.5], [598.0, 8831.333333333334], [634.0, 8137.5], [638.0, 8213.0], [624.0, 8246.0], [626.0, 8245.0], [628.0, 8446.0], [636.0, 8412.0], [614.0, 8551.5], [632.0, 8779.0], [612.0, 8567.5], [610.0, 8538.0], [608.0, 8672.0], [622.0, 8255.5], [620.0, 8078.0], [618.0, 8276.0], [616.0, 8666.5], [630.0, 8260.5], [668.0, 8194.0], [656.0, 8097.0], [658.0, 8289.5], [660.0, 8376.5], [670.0, 7924.5], [666.0, 8035.0], [664.0, 8349.5], [640.0, 8361.0], [642.0, 8506.333333333334], [644.0, 8414.0], [646.0, 8140.5], [654.0, 8325.0], [652.0, 8177.0], [650.0, 8117.5], [648.0, 8311.5], [662.0, 8350.5], [700.0, 8000.5], [688.0, 8496.75], [690.0, 8059.0], [692.0, 8127.5], [702.0, 7975.0], [698.0, 8242.333333333334], [696.0, 8009.0], [672.0, 7408.0], [674.0, 8297.5], [676.0, 8291.5], [678.0, 8121.0], [686.0, 7304.0], [684.0, 7387.0], [682.0, 8131.0], [680.0, 8250.0], [694.0, 8058.0], [732.0, 7832.5], [720.0, 4311.5], [722.0, 5551.333333333333], [724.0, 4252.25], [734.0, 7695.0], [730.0, 7941.5], [728.0, 7646.5], [704.0, 8086.5], [706.0, 8122.0], [708.0, 8077.0], [710.0, 7739.5], [718.0, 7965.0], [716.0, 5961.75], [714.0, 8233.666666666666], [712.0, 7720.5], [726.0, 3491.6], [764.0, 7608.5], [752.0, 7783.5], [754.0, 7791.0], [756.0, 7722.5], [758.0, 8587.0], [766.0, 7686.0], [762.0, 7436.0], [760.0, 7648.5], [736.0, 7550.5], [738.0, 7926.5], [740.0, 7881.5], [742.0, 8704.0], [750.0, 7799.0], [748.0, 7867.0], [746.0, 7873.5], [744.0, 6979.0], [772.0, 7313.666666666667], [792.0, 7190.333333333333], [796.0, 7138.333333333333], [798.0, 8339.0], [784.0, 8205.0], [794.0, 6741.0], [782.0, 7135.25], [780.0, 8214.0], [768.0, 7647.5], [770.0, 7789.666666666667], [774.0, 7509.5], [778.0, 7360.333333333333], [776.0, 6805.0], [790.0, 7448.0], [788.0, 8364.0], [786.0, 7058.8], [806.0, 7363.0], [828.0, 7089.333333333333], [830.0, 7904.0], [826.0, 7090.0], [824.0, 7057.0], [804.0, 6729.0], [802.0, 7468.0], [814.0, 7364.0], [800.0, 8317.0], [812.0, 7411.0], [810.0, 8247.0], [808.0, 8171.5], [822.0, 7032.0], [820.0, 7027.0], [818.0, 7128.0], [816.0, 6935.0], [856.0, 6910.666666666667], [860.0, 7119.5], [850.0, 6857.0], [852.0, 6855.5], [862.0, 7133.0], [848.0, 7292.0], [858.0, 7122.5], [834.0, 6730.142857142857], [832.0, 7400.0], [836.0, 6937.0], [838.0, 7242.0], [846.0, 7205.0], [844.0, 6467.0], [842.0, 6891.0], [840.0, 6981.0], [854.0, 7167.5], [892.0, 7210.333333333333], [882.0, 7155.0], [884.0, 6953.0], [894.0, 6968.5], [880.0, 7376.0], [890.0, 6777.5], [888.0, 6981.5], [864.0, 7282.5], [866.0, 6923.5], [868.0, 6734.333333333333], [870.0, 6885.0], [878.0, 6816.0], [874.0, 7165.5], [876.0, 7397.0], [872.0, 7120.5], [886.0, 6898.5], [922.0, 6489.666666666667], [926.0, 6503.666666666667], [912.0, 6922.0], [914.0, 3457.5], [916.0, 2598.6666666666665], [924.0, 6410.0], [920.0, 4566.0], [902.0, 6976.0], [900.0, 6879.5], [898.0, 6955.0], [896.0, 6975.0], [910.0, 6890.5], [908.0, 6771.5], [906.0, 6823.0], [904.0, 7479.0], [918.0, 6090.0], [956.0, 6343.0], [958.0, 4549.333333333333], [944.0, 6729.0], [946.0, 6253.5], [948.0, 6276.5], [954.0, 6562.0], [952.0, 6787.0], [934.0, 6964.0], [932.0, 6774.0], [930.0, 6666.5], [928.0, 6362.0], [942.0, 6183.0], [940.0, 6592.0], [938.0, 6771.5], [936.0, 6806.5], [950.0, 6703.0], [988.0, 6292.0], [976.0, 6222.5], [978.0, 6216.5], [980.0, 6216.5], [990.0, 6147.0], [986.0, 6163.0], [984.0, 6232.666666666667], [960.0, 6554.0], [962.0, 6574.5], [964.0, 6292.5], [966.0, 6576.0], [974.0, 6517.0], [972.0, 5823.0], [970.0, 6255.0], [968.0, 6613.5], [982.0, 6202.0], [996.0, 6051.666666666667], [1020.0, 6328.0], [998.0, 4286.666666666667], [1016.0, 6237.0], [992.0, 6163.5], [994.0, 6293.5], [1006.0, 6647.333333333333], [1004.0, 6323.0], [1002.0, 6342.0], [1000.0, 6274.0], [1010.0, 6067.666666666667], [1008.0, 6171.0], [1012.0, 6264.0], [1014.0, 6250.25], [1022.0, 6243.0], [1018.0, 6297.0], [1080.0, 5829.5], [1076.0, 5898.5], [1084.0, 5920.5], [1056.0, 5782.0], [1060.0, 5767.5], [1064.0, 5935.0], [1068.0, 6031.0], [1072.0, 6018.5], [1036.0, 5421.0], [1032.0, 6248.5], [1028.0, 6063.0], [1024.0, 6264.5], [1052.0, 6218.333333333333], [1048.0, 6059.5], [1044.0, 5950.0], [1040.0, 5366.0], [1096.0, 5841.5], [1136.0, 5589.0], [1148.0, 5214.5], [1120.0, 6277.0], [1100.0, 5779.0], [1092.0, 5933.5], [1088.0, 5796.5], [1116.0, 5690.0], [1112.0, 4294.0], [1108.0, 3380.75], [1104.0, 5712.5], [1124.0, 5636.0], [1132.0, 5528.5], [1128.0, 6501.0], [1144.0, 5173.666666666667], [1140.0, 5848.0], [1164.0, 5318.0], [1208.0, 4463.0], [1212.0, 5065.0], [1152.0, 2274.0], [1156.0, 5274.5], [1160.0, 5211.5], [1200.0, 4519.0], [1204.0, 5160.5], [1180.0, 5588.5], [1176.0, 5028.0], [1172.0, 5310.5], [1168.0, 5149.5], [1184.0, 5070.0], [1188.0, 4725.0], [1192.0, 5185.0], [1196.0, 5060.0], [1244.0, 4655.5], [1240.0, 4781.5], [1236.0, 4978.0], [1232.0, 4750.5], [1264.0, 4887.75], [1228.0, 4999.5], [1224.0, 4983.0], [1220.0, 4992.0], [1216.0, 4990.5], [1268.0, 4680.333333333333], [1272.0, 4582.5], [1252.0, 4822.5], [1248.0, 5124.5], [1256.0, 4814.5], [1260.0, 4897.5], [1276.0, 4669.0], [1336.0, 4595.0], [1312.0, 4488.5], [1340.0, 1913.2], [1324.0, 4240.0], [1320.0, 4452.0], [1316.0, 4399.0], [1332.0, 4197.0], [1328.0, 4261.0], [1292.0, 4579.5], [1288.0, 4487.0], [1284.0, 4680.5], [1280.0, 4543.0], [1308.0, 4481.0], [1304.0, 4456.0], [1300.0, 4516.666666666667], [1296.0, 4450.0], [1348.0, 4240.0], [1352.0, 4137.5], [1344.0, 3197.6666666666665], [1356.0, 4160.5], [1372.0, 3872.0], [1368.0, 4167.5], [1364.0, 4029.5], [1360.0, 4214.0], [1392.0, 3851.0], [1400.0, 4277.0], [1396.0, 2738.0], [1376.0, 4173.5], [1380.0, 4060.5], [1384.0, 4123.5], [1388.0, 4180.333333333333], [1404.0, 3985.0], [1460.0, 3695.0], [1464.0, 3540.0], [1468.0, 3515.0], [1440.0, 3711.0], [1444.0, 3694.5], [1448.0, 3480.0], [1456.0, 3908.0], [1420.0, 3779.5], [1416.0, 3862.5], [1412.0, 4077.0], [1408.0, 3940.0], [1432.0, 3164.75], [1436.0, 3922.0], [1428.0, 3050.6666666666665], [1424.0, 3126.6666666666665], [1476.0, 3440.0], [1524.0, 2508.6666666666665], [1484.0, 3519.0], [1480.0, 3418.0], [1472.0, 3560.5], [1500.0, 3608.0], [1496.0, 3479.5], [1492.0, 3475.0], [1488.0, 3727.0], [1520.0, 3419.5], [1512.0, 3253.0], [1516.0, 3222.0], [1528.0, 3447.5], [1532.0, 3399.0], [1504.0, 3810.0], [1508.0, 3267.5], [1536.0, 3454.0], [1596.0, 2190.3333333333335], [1552.0, 3379.0], [1556.0, 3191.0], [1560.0, 3134.0], [1564.0, 2282.0], [1584.0, 1622.0], [1540.0, 3109.5], [1544.0, 3378.0], [1548.0, 3305.0], [1568.0, 3097.0], [1572.0, 3216.5], [1576.0, 3076.0], [1580.0, 3095.5], [1592.0, 3107.0], [1588.0, 2893.5], [1628.0, 2952.0], [1612.0, 2998.0], [1616.0, 1732.0], [1620.0, 2938.0], [1624.0, 2934.0], [1648.0, 2782.0], [1608.0, 2807.0], [1604.0, 3141.0], [1600.0, 3176.0], [1652.0, 2736.3333333333335], [1632.0, 2632.0], [1636.0, 2682.0], [1640.0, 2939.8], [1644.0, 2819.0], [1660.0, 2357.0], [1656.0, 2353.0], [1672.0, 2107.6666666666665], [1668.0, 2590.0], [1664.0, 2930.6666666666665], [1692.0, 2045.6666666666667], [1676.0, 2593.3333333333335], [1720.0, 1073.4444444444443], [1716.0, 2475.0], [1712.0, 2614.5], [1724.0, 2550.5], [1704.0, 2571.5], [1700.0, 2708.0], [1696.0, 2792.0], [1708.0, 2598.6666666666665], [1684.0, 2670.0], [1680.0, 2883.0], [1688.0, 2012.6666666666665], [1784.0, 2512.0], [1788.0, 2100.0], [1760.0, 1905.5], [1768.0, 1838.0], [1772.0, 2869.0], [1776.0, 2028.5], [1728.0, 2786.4], [1732.0, 2223.0], [1736.0, 2212.0], [1740.0, 2350.0], [1756.0, 2102.0], [1748.0, 2471.0], [1752.0, 2634.5], [1744.0, 2209.0], [1840.0, 1768.0], [1824.0, 2282.0], [1852.0, 2664.5], [1844.0, 2505.5], [1792.0, 2296.5], [1816.0, 2175.75], [1812.0, 2575.0], [1808.0, 2617.0], [1820.0, 2507.5], [1828.0, 2097.6666666666665], [1832.0, 2218.5], [1836.0, 2324.0], [1804.0, 2321.0], [1796.0, 2522.0], [1800.0, 2726.0], [1864.0, 2178.5], [1892.0, 1584.0], [1888.0, 1782.5], [1868.0, 2685.0], [1900.0, 1662.0], [1896.0, 1670.0], [1856.0, 2168.5], [1860.0, 1862.5], [1880.0, 2029.0], [1884.0, 2437.0], [1876.0, 1652.0], [1872.0, 2169.6666666666665], [1081.0, 5923.5], [1085.0, 6036.5], [1057.0, 6207.666666666667], [1065.0, 5954.0], [1061.0, 6712.0], [1069.0, 5935.0], [1077.0, 5172.0], [1073.0, 5986.0], [1037.0, 5456.0], [1033.0, 6336.5], [1029.0, 6217.5], [1025.0, 6208.5], [1053.0, 5973.0], [1049.0, 6014.0], [1045.0, 6141.0], [1041.0, 6464.666666666667], [1097.0, 5889.0], [1141.0, 5154.0], [1137.0, 5380.0], [1101.0, 5848.5], [1093.0, 5754.0], [1089.0, 5775.5], [1117.0, 5689.5], [1113.0, 2631.166666666667], [1109.0, 5877.5], [1105.0, 5917.0], [1125.0, 5590.5], [1129.0, 5326.333333333333], [1133.0, 5522.5], [1149.0, 5248.0], [1121.0, 6404.0], [1145.0, 5453.0], [1161.0, 5239.0], [1201.0, 4505.0], [1153.0, 3674.666666666667], [1157.0, 5606.0], [1165.0, 5165.0], [1205.0, 4962.5], [1209.0, 4422.0], [1181.0, 5049.0], [1173.0, 5126.5], [1177.0, 5593.0], [1169.0, 5256.0], [1185.0, 5118.5], [1189.0, 5179.333333333333], [1193.0, 5017.5], [1197.0, 4998.0], [1213.0, 5019.5], [1229.0, 4953.0], [1265.0, 4901.0], [1273.0, 4856.5], [1277.0, 4983.5], [1241.0, 4382.0], [1237.0, 4913.0], [1233.0, 4769.0], [1245.0, 4929.5], [1225.0, 4866.5], [1217.0, 5111.0], [1269.0, 4608.0], [1253.0, 4694.5], [1249.0, 4800.5], [1257.0, 4877.0], [1261.0, 4619.0], [1313.0, 4463.0], [1341.0, 2309.25], [1325.0, 4511.0], [1321.0, 4561.0], [1317.0, 4343.0], [1337.0, 4548.5], [1333.0, 4363.5], [1329.0, 4331.0], [1293.0, 4742.5], [1289.0, 4610.0], [1285.0, 4541.5], [1281.0, 4607.0], [1309.0, 4331.0], [1305.0, 4505.5], [1301.0, 4545.0], [1297.0, 4542.5], [1353.0, 4496.5], [1349.0, 4104.0], [1345.0, 4494.0], [1357.0, 4202.0], [1373.0, 4433.5], [1369.0, 4047.5], [1365.0, 4064.0], [1361.0, 4128.0], [1393.0, 3836.0], [1397.0, 2780.3333333333335], [1401.0, 3840.5], [1377.0, 3999.0], [1381.0, 4115.0], [1385.0, 3938.0], [1389.0, 4015.5], [1405.0, 4090.5], [1465.0, 3844.5], [1441.0, 3694.0], [1453.0, 3654.75], [1449.0, 3897.5], [1445.0, 3944.0], [1469.0, 3577.5], [1457.0, 3580.5], [1461.0, 3959.0], [1421.0, 4077.0], [1417.0, 4038.0], [1413.0, 3976.6666666666665], [1409.0, 3796.0], [1437.0, 3996.6666666666665], [1433.0, 3719.0], [1429.0, 2960.0], [1425.0, 2550.0], [1477.0, 3528.5], [1481.0, 3449.5], [1509.0, 1418.6666666666665], [1485.0, 1969.0], [1473.0, 3552.5], [1501.0, 3303.5], [1497.0, 3329.0], [1493.0, 3423.0], [1489.0, 3491.6666666666665], [1521.0, 3551.0], [1513.0, 3231.0], [1517.0, 3437.0], [1525.0, 2518.6666666666665], [1529.0, 3521.5], [1533.0, 3486.0], [1505.0, 3334.5], [1537.0, 3270.6666666666665], [1553.0, 2309.6666666666665], [1557.0, 3309.5], [1561.0, 3018.0], [1541.0, 2872.0], [1545.0, 2839.0], [1549.0, 3576.0], [1565.0, 3307.5], [1585.0, 3173.0], [1569.0, 3204.5], [1573.0, 3220.0], [1577.0, 3246.0], [1581.0, 2817.0], [1597.0, 2953.5], [1593.0, 3153.0], [1589.0, 3195.5], [1609.0, 2854.0], [1625.0, 1364.0], [1617.0, 1703.5], [1621.0, 2747.0], [1613.0, 3005.0], [1605.0, 2999.5], [1601.0, 3135.0], [1649.0, 2812.0], [1633.0, 2891.0], [1637.0, 2930.5], [1641.0, 2762.5], [1645.0, 2478.0], [1661.0, 2394.0], [1657.0, 2355.0], [1653.0, 2955.0], [1677.0, 2744.0], [1713.0, 2415.0], [1669.0, 2626.5], [1665.0, 2672.0], [1693.0, 2674.5], [1673.0, 2634.0], [1717.0, 2655.5], [1721.0, 2648.8], [1697.0, 2289.0], [1701.0, 2444.0], [1705.0, 2384.5], [1709.0, 2470.0], [1725.0, 2094.0], [1681.0, 2450.0], [1685.0, 2488.0], [1689.0, 1249.0], [1777.0, 2579.5], [1769.0, 1984.0], [1773.0, 1977.5], [1789.0, 2648.2], [1761.0, 3008.5], [1781.0, 2758.0], [1729.0, 2368.0], [1733.0, 2461.5], [1737.0, 1929.0], [1741.0, 2743.4], [1757.0, 1917.0], [1753.0, 1920.0], [1745.0, 2586.6666666666665], [1749.0, 2645.5], [1853.0, 1931.0], [1793.0, 1995.6666666666667], [1829.0, 1775.0], [1821.0, 2066.3333333333335], [1817.0, 2503.0], [1813.0, 2533.0], [1809.0, 2565.0], [1825.0, 2121.0], [1833.0, 1679.0], [1837.0, 1795.0], [1841.0, 2410.0], [1849.0, 2863.5], [1845.0, 2486.0], [1801.0, 2187.0], [1797.0, 1752.0], [1861.0, 2255.3333333333335], [1889.0, 1719.0], [1897.0, 1665.0], [1893.0, 1634.0], [1857.0, 1680.0], [1865.0, 2210.0], [1885.0, 1690.5], [1881.0, 2010.5], [1877.0, 2167.3333333333335], [1873.0, 2007.0], [541.0, 8864.0], [543.0, 8736.0], [529.0, 8817.0], [531.0, 8844.5], [539.0, 9001.5], [537.0, 9536.0], [519.0, 8195.0], [517.0, 9262.5], [515.0, 8943.5], [513.0, 8921.5], [527.0, 9098.5], [525.0, 9205.0], [523.0, 8169.0], [521.0, 9271.8], [533.0, 8852.5], [549.0, 8691.0], [561.0, 8868.5], [575.0, 9112.0], [573.0, 9366.5], [571.0, 8842.5], [569.0, 8550.0], [559.0, 8008.0], [545.0, 8701.5], [547.0, 8949.0], [551.0, 8645.5], [557.0, 8643.5], [555.0, 8918.5], [553.0, 8917.0], [567.0, 8525.666666666666], [565.0, 8947.5], [563.0, 9000.5], [605.0, 8837.666666666666], [607.0, 8537.5], [593.0, 8666.5], [597.0, 7793.0], [595.0, 9533.0], [603.0, 8696.5], [601.0, 7779.0], [591.0, 8861.0], [577.0, 8743.0], [581.0, 8874.333333333334], [579.0, 9610.0], [583.0, 8757.5], [589.0, 3484.375], [587.0, 8708.0], [585.0, 6005.666666666667], [599.0, 8606.5], [637.0, 8398.5], [639.0, 8533.0], [625.0, 8577.5], [627.0, 8555.0], [629.0, 8444.5], [635.0, 8394.0], [633.0, 8035.333333333333], [615.0, 8310.5], [613.0, 8535.5], [611.0, 8543.5], [609.0, 8555.0], [623.0, 8479.0], [621.0, 8262.5], [617.0, 8300.5], [619.0, 9298.0], [631.0, 8442.0], [669.0, 7939.5], [671.0, 8175.5], [657.0, 8313.5], [659.0, 8216.0], [661.0, 8057.5], [667.0, 8005.5], [665.0, 8333.0], [655.0, 8342.5], [641.0, 7651.0], [643.0, 8159.5], [645.0, 8149.5], [647.0, 8339.5], [653.0, 8409.0], [651.0, 8107.5], [649.0, 8338.5], [663.0, 8357.5], [701.0, 8149.0], [703.0, 7990.0], [689.0, 8213.0], [691.0, 8091.0], [693.0, 8102.0], [699.0, 8010.0], [697.0, 7238.0], [687.0, 7322.0], [673.0, 8543.333333333334], [675.0, 8158.5], [677.0, 8109.5], [679.0, 8098.0], [685.0, 8358.666666666666], [683.0, 8087.5], [681.0, 8140.0], [695.0, 8056.0], [733.0, 7868.5], [735.0, 7858.5], [721.0, 5323.666666666667], [723.0, 7953.0], [725.0, 4185.5], [731.0, 7615.5], [729.0, 7841.5], [719.0, 5312.666666666667], [705.0, 7972.0], [707.0, 7939.5], [709.0, 7944.5], [711.0, 7974.0], [717.0, 5503.0], [713.0, 7180.0], [715.0, 8634.0], [727.0, 7942.5], [765.0, 7562.5], [767.0, 7731.0], [753.0, 7709.5], [755.0, 7663.0], [763.0, 7728.0], [761.0, 7752.5], [751.0, 7543.5], [737.0, 7879.5], [739.0, 8022.5], [743.0, 7377.666666666667], [741.0, 7871.5], [749.0, 7511.0], [747.0, 7937.5], [745.0, 8134.666666666667], [759.0, 7452.0], [757.0, 7764.0], [797.0, 7469.0], [799.0, 7236.666666666667], [785.0, 8055.0], [793.0, 7429.0], [795.0, 8320.0], [769.0, 6903.0], [771.0, 8506.0], [773.0, 7478.5], [775.0, 6863.0], [779.0, 7553.5], [777.0, 8507.0], [781.0, 8278.0], [783.0, 8086.0], [789.0, 7305.333333333333], [791.0, 8526.0], [787.0, 7392.5], [805.0, 7789.0], [819.0, 7034.5], [831.0, 7903.0], [817.0, 8006.0], [829.0, 8321.0], [827.0, 7913.0], [825.0, 8081.0], [803.0, 7438.5], [801.0, 7244.666666666667], [813.0, 7322.5], [815.0, 8235.0], [811.0, 6875.166666666667], [809.0, 7927.0], [823.0, 7315.5], [821.0, 8079.0], [861.0, 6951.5], [863.0, 7135.5], [849.0, 6947.666666666667], [851.0, 7211.5], [859.0, 6801.0], [857.0, 6823.0], [847.0, 6878.5], [833.0, 8010.0], [835.0, 6941.5], [837.0, 6927.0], [839.0, 7968.0], [845.0, 7574.0], [843.0, 7350.5], [841.0, 6937.0], [853.0, 6866.0], [855.0, 8335.0], [893.0, 6999.0], [895.0, 6847.5], [881.0, 6796.333333333333], [883.0, 7108.0], [885.0, 6989.5], [891.0, 6178.0], [889.0, 7027.5], [879.0, 7114.5], [865.0, 7092.0], [869.0, 6904.0], [867.0, 7968.0], [871.0, 7078.5], [877.0, 6814.333333333333], [875.0, 6820.0], [873.0, 6888.5], [887.0, 7164.5], [925.0, 6044.0], [927.0, 6817.0], [913.0, 6475.5], [915.0, 2563.6666666666665], [917.0, 4812.125], [923.0, 6847.5], [921.0, 7384.0], [903.0, 6671.5], [901.0, 6811.5], [899.0, 6878.0], [897.0, 6761.0], [911.0, 6498.5], [909.0, 6819.5], [907.0, 6774.5], [905.0, 6729.0], [919.0, 5560.5], [953.0, 6665.5], [959.0, 6719.0], [945.0, 6267.5], [947.0, 6557.5], [949.0, 6224.5], [957.0, 6190.0], [955.0, 7143.0], [935.0, 6627.0], [933.0, 6362.5], [931.0, 6348.5], [929.0, 6662.0], [943.0, 6321.5], [941.0, 6621.0], [939.0, 6586.0], [937.0, 6598.5], [951.0, 6511.0], [989.0, 6166.5], [991.0, 6459.0], [977.0, 6467.5], [979.0, 6575.0], [987.0, 6458.5], [985.0, 6290.0], [975.0, 6332.0], [961.0, 6165.5], [963.0, 6552.5], [965.0, 5815.0], [967.0, 6726.666666666667], [973.0, 6872.333333333333], [971.0, 6288.5], [969.0, 6537.0], [981.0, 6394.5], [983.0, 7176.0], [999.0, 6072.5], [997.0, 4181.333333333333], [995.0, 6876.0], [1017.0, 6239.5], [1007.0, 4287.0], [1005.0, 5619.0], [1003.0, 6218.0], [1001.0, 6129.0], [1023.0, 6280.0], [1011.0, 6343.5], [1009.0, 7099.0], [1015.0, 6239.0], [1021.0, 6080.5], [1019.0, 6033.0], [1086.0, 5874.5], [1058.0, 6033.0], [1062.0, 5729.666666666667], [1066.0, 6064.0], [1070.0, 6015.0], [1082.0, 5837.5], [1078.0, 6142.0], [1038.0, 6630.166666666666], [1074.0, 6632.0], [1034.0, 5391.0], [1030.0, 6195.0], [1026.0, 6101.5], [1054.0, 5297.0], [1050.0, 6101.0], [1046.0, 6076.5], [1042.0, 6100.5], [1138.0, 5349.5], [1142.0, 5444.5], [1102.0, 5800.0], [1098.0, 5794.5], [1118.0, 5684.0], [1094.0, 6521.0], [1090.0, 6641.0], [1114.0, 5690.5], [1106.0, 4221.333333333333], [1110.0, 2423.0], [1122.0, 5349.5], [1130.0, 4877.0], [1134.0, 5514.0], [1150.0, 5359.0], [1146.0, 5234.5], [1158.0, 5061.0], [1154.0, 5206.0], [1162.0, 5217.5], [1166.0, 5248.5], [1202.0, 5207.25], [1206.0, 4917.0], [1182.0, 3556.3333333333335], [1178.0, 5077.0], [1174.0, 5376.0], [1170.0, 5204.5], [1186.0, 5168.0], [1190.0, 5159.5], [1194.0, 5120.5], [1198.0, 5126.5], [1214.0, 5081.0], [1210.0, 5176.0], [1226.0, 4937.0], [1242.0, 4924.333333333333], [1238.0, 4859.0], [1234.0, 5057.0], [1246.0, 4771.5], [1230.0, 4805.0], [1222.0, 4838.5], [1218.0, 5052.0], [1266.0, 4665.0], [1270.0, 4629.0], [1250.0, 4835.0], [1258.0, 4829.0], [1254.0, 5129.0], [1262.0, 4189.0], [1278.0, 4642.0], [1274.0, 4708.5], [1314.0, 4523.5], [1326.0, 4281.5], [1322.0, 4378.5], [1318.0, 4376.0], [1342.0, 4472.0], [1338.0, 4593.0], [1334.0, 4028.0], [1330.0, 4441.0], [1290.0, 4526.5], [1294.0, 4874.0], [1286.0, 4650.0], [1310.0, 4311.0], [1282.0, 4969.0], [1306.0, 4474.5], [1302.0, 4411.5], [1298.0, 4426.0], [1354.0, 4167.0], [1402.0, 2304.5], [1350.0, 4219.5], [1346.0, 4589.0], [1358.0, 4354.0], [1374.0, 4021.5], [1370.0, 4036.0], [1366.0, 4027.5], [1362.0, 4083.5], [1394.0, 3992.0], [1398.0, 4248.0], [1378.0, 3995.5], [1382.0, 3846.0], [1386.0, 4027.5], [1390.0, 3910.5], [1406.0, 4026.0], [1470.0, 3513.0], [1446.0, 3677.6666666666665], [1442.0, 3964.0], [1450.0, 3564.3333333333335], [1454.0, 3637.0], [1466.0, 3865.0], [1462.0, 3852.0], [1458.0, 3617.5], [1422.0, 3747.0], [1418.0, 3870.5], [1414.0, 3927.0], [1410.0, 3896.5], [1438.0, 3930.0], [1434.0, 3811.0], [1430.0, 2947.6666666666665], [1426.0, 2219.6], [1474.0, 3308.0], [1482.0, 3493.0], [1534.0, 3446.25], [1478.0, 3497.5], [1486.0, 3495.5], [1502.0, 3643.0], [1498.0, 3466.5], [1494.0, 3500.5], [1490.0, 3473.5], [1522.0, 2988.0], [1514.0, 3341.3333333333335], [1510.0, 3490.6666666666665], [1518.0, 1866.5], [1526.0, 3489.0], [1530.0, 3434.5], [1506.0, 3534.0], [1538.0, 2879.0], [1550.0, 3380.0], [1586.0, 2165.6666666666665], [1554.0, 3356.0], [1558.0, 3211.5], [1562.0, 3060.0], [1542.0, 3383.0], [1546.0, 3082.0], [1566.0, 3115.5], [1570.0, 3141.5], [1574.0, 2959.3333333333335], [1578.0, 2956.5], [1582.0, 3108.3333333333335], [1598.0, 3055.5], [1594.0, 2989.5], [1590.0, 2659.0], [1606.0, 3103.5], [1654.0, 2129.0], [1618.0, 2698.0], [1626.0, 2803.5714285714284], [1630.0, 2760.0], [1614.0, 3105.5], [1610.0, 3029.0], [1602.0, 2959.0], [1650.0, 2505.0], [1634.0, 2725.0], [1638.0, 2293.0], [1642.0, 2976.0], [1646.0, 2813.0], [1662.0, 2459.0], [1658.0, 2336.0], [1678.0, 2082.6666666666665], [1666.0, 1980.3333333333333], [1670.0, 2609.0], [1694.0, 1673.75], [1674.0, 2703.0], [1714.0, 2471.0], [1722.0, 2372.0], [1698.0, 2144.0], [1702.0, 2131.0], [1706.0, 2419.0], [1710.0, 2383.0], [1682.0, 1648.25], [1686.0, 2681.0], [1690.0, 1162.3125], [1782.0, 2141.25], [1766.0, 1891.1666666666667], [1774.0, 2998.0], [1770.0, 2868.5], [1790.0, 3009.0], [1762.0, 2595.0], [1758.0, 2154.0], [1730.0, 2435.5], [1738.0, 2401.5], [1734.0, 2712.0], [1742.0, 2398.5], [1746.0, 2442.5], [1750.0, 2667.0], [1754.0, 2676.5], [1842.0, 2098.5], [1818.0, 2194.5], [1814.0, 2107.0], [1810.0, 2057.6], [1838.0, 2464.3333333333335], [1854.0, 1785.0], [1850.0, 1969.0], [1806.0, 2150.6666666666665], [1802.0, 2578.0], [1794.0, 2742.0], [1822.0, 2481.0], [1862.0, 2306.0], [1890.0, 1613.0], [1858.0, 1738.0], [1870.0, 2005.2857142857144], [1866.0, 2689.0], [1878.0, 1629.0], [1902.0, 1932.5], [1898.0, 1670.0], [1886.0, 1932.0], [1882.0, 2434.0], [1083.0, 6109.0], [1087.0, 5862.5], [1059.0, 5726.5], [1063.0, 6015.5], [1067.0, 5940.0], [1071.0, 5948.5], [1079.0, 6039.5], [1075.0, 5648.666666666667], [1039.0, 6208.0], [1035.0, 5422.0], [1031.0, 6164.5], [1027.0, 6278.5], [1055.0, 6245.666666666667], [1051.0, 5717.0], [1047.0, 6084.0], [1043.0, 6175.0], [1099.0, 5839.5], [1139.0, 5303.5], [1143.0, 2937.5], [1103.0, 5835.5], [1095.0, 5574.666666666667], [1091.0, 5616.0], [1119.0, 5620.5], [1115.0, 5677.0], [1111.0, 5724.5], [1107.0, 5838.5], [1151.0, 2776.5], [1123.0, 5884.5], [1127.0, 5565.5], [1131.0, 5886.333333333333], [1135.0, 4895.0], [1147.0, 5369.5], [1159.0, 5230.5], [1155.0, 5209.5], [1163.0, 5238.0], [1167.0, 5213.0], [1203.0, 5137.0], [1207.0, 4940.5], [1179.0, 5073.5], [1175.0, 5297.5], [1171.0, 5099.0], [1183.0, 5067.5], [1215.0, 5119.5], [1187.0, 5453.0], [1191.0, 5160.0], [1195.0, 5276.0], [1199.0, 5124.0], [1211.0, 5029.5], [1227.0, 5015.0], [1231.0, 5047.5], [1243.0, 2535.5], [1239.0, 4800.0], [1235.0, 4942.0], [1223.0, 4469.0], [1219.0, 5155.0], [1247.0, 4981.5], [1267.0, 4563.0], [1271.0, 4617.0], [1255.0, 3597.0], [1251.0, 5112.5], [1259.0, 4818.5], [1263.0, 4185.0], [1279.0, 4509.5], [1275.0, 4643.5], [1343.0, 4452.5], [1335.0, 4342.666666666667], [1331.0, 4304.5], [1295.0, 5034.0], [1339.0, 4602.5], [1327.0, 4275.0], [1323.0, 4338.0], [1319.0, 4306.0], [1315.0, 4532.0], [1291.0, 4654.5], [1287.0, 4505.5], [1283.0, 4402.0], [1311.0, 4551.666666666667], [1307.0, 4620.5], [1303.0, 4548.0], [1299.0, 4001.0], [1351.0, 4377.0], [1383.0, 4169.666666666667], [1347.0, 4020.5], [1355.0, 4527.5], [1359.0, 4051.0], [1375.0, 4110.5], [1367.0, 4057.0], [1371.0, 4325.0], [1363.0, 4515.5], [1395.0, 4107.0], [1399.0, 4001.0], [1407.0, 2238.25], [1379.0, 4077.0], [1391.0, 4005.0], [1387.0, 4312.0], [1403.0, 4023.6666666666665], [1467.0, 3554.0], [1459.0, 3566.0], [1471.0, 3658.0], [1443.0, 3775.0], [1447.0, 3655.0], [1451.0, 3776.0], [1455.0, 3666.5], [1463.0, 3582.0], [1423.0, 3752.5], [1419.0, 3856.5], [1415.0, 4224.0], [1411.0, 3887.0], [1439.0, 3691.3333333333335], [1435.0, 3789.5], [1427.0, 3009.6666666666665], [1431.0, 2218.0], [1479.0, 3570.5], [1483.0, 3522.0], [1475.0, 3612.0], [1487.0, 3460.5], [1503.0, 3407.5], [1499.0, 3731.0], [1491.0, 3689.5], [1523.0, 3328.25], [1515.0, 1861.75], [1511.0, 3548.0], [1519.0, 1869.142857142857], [1527.0, 3202.0], [1531.0, 3428.5], [1535.0, 3219.5], [1507.0, 3603.0], [1567.0, 3285.0], [1555.0, 3223.0], [1559.0, 3336.5], [1563.0, 3049.0], [1539.0, 3300.6666666666665], [1547.0, 3403.666666666667], [1551.0, 3195.3333333333335], [1599.0, 3106.0], [1571.0, 3052.0], [1575.0, 2856.0], [1579.0, 2976.5], [1583.0, 3128.0], [1595.0, 3101.5], [1591.0, 3190.3333333333335], [1587.0, 3148.0], [1603.0, 2921.0], [1619.0, 2871.0], [1623.0, 2491.0], [1627.0, 2586.0], [1615.0, 2883.0], [1611.0, 3106.5], [1607.0, 3083.0], [1631.0, 3047.75], [1651.0, 2556.0], [1663.0, 2319.0], [1635.0, 2908.0], [1643.0, 2933.5], [1647.0, 2879.4], [1655.0, 2823.5], [1659.0, 3076.25], [1715.0, 2102.0], [1691.0, 2022.0], [1671.0, 1967.6666666666667], [1667.0, 2725.0], [1695.0, 2494.0], [1719.0, 2111.0], [1679.0, 2716.5], [1675.0, 3269.0], [1723.0, 2690.0], [1727.0, 2157.0], [1699.0, 2573.5], [1703.0, 2507.3333333333335], [1711.0, 2721.25], [1683.0, 2704.5], [1687.0, 2658.5], [1779.0, 1850.5], [1787.0, 1369.0], [1791.0, 2127.6666666666665], [1767.0, 2011.0], [1775.0, 1867.0], [1783.0, 1859.0], [1731.0, 1999.0], [1759.0, 2780.3333333333335], [1755.0, 2595.0], [1735.0, 2285.6666666666665], [1739.0, 1941.0], [1743.0, 2488.5], [1751.0, 1859.0], [1747.0, 1885.0], [1855.0, 2428.0], [1795.0, 1436.2142857142858], [1851.0, 1780.0], [1823.0, 1857.0], [1819.0, 1881.5], [1811.0, 1909.0], [1831.0, 2251.4], [1827.0, 2480.0], [1835.0, 2346.8], [1839.0, 2478.0], [1847.0, 2073.5714285714284], [1803.0, 2044.0], [1799.0, 2736.5], [1807.0, 2855.5], [1863.0, 2235.0], [1891.0, 1723.6666666666667], [1899.0, 1934.0], [1895.0, 1670.5], [1887.0, 1611.0], [1859.0, 2581.3333333333335], [1871.0, 1708.0], [1867.0, 2438.0], [1883.0, 1508.0], [1879.0, 2131.6666666666665], [1875.0, 2058.25], [1.0, 21025.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[959.2870000000014, 6395.151750000011]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1902.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 30189.55, "minX": 1.63090248E12, "maxY": 230427.2, "series": [{"data": [[1.63090248E12, 230427.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63090248E12, 30189.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090248E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6395.151750000011, "minX": 1.63090248E12, "maxY": 6395.151750000011, "series": [{"data": [[1.63090248E12, 6395.151750000011]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090248E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6336.252000000006, "minX": 1.63090248E12, "maxY": 6336.252000000006, "series": [{"data": [[1.63090248E12, 6336.252000000006]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090248E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 892.9657500000003, "minX": 1.63090248E12, "maxY": 892.9657500000003, "series": [{"data": [[1.63090248E12, 892.9657500000003]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090248E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 93.0, "minX": 1.63090248E12, "maxY": 13373.0, "series": [{"data": [[1.63090248E12, 13373.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63090248E12, 10880.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63090248E12, 13102.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63090248E12, 12105.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63090248E12, 93.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63090248E12, 6273.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090248E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 95.5, "minX": 1.0, "maxY": 21041.5, "series": [{"data": [[141.0, 4175.0], [142.0, 9194.0], [143.0, 7448.0], [140.0, 8349.0], [144.0, 11261.5], [167.0, 4241.0], [172.0, 7748.0], [171.0, 3466.0], [173.0, 4955.0], [170.0, 7737.0], [174.0, 7853.5], [181.0, 1856.0], [196.0, 2688.5], [207.0, 3243.0], [4.0, 95.5], [74.0, 527.5], [81.0, 5670.0], [21.0, 171.0], [90.0, 714.0], [119.0, 12960.0], [31.0, 1635.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 21025.0], [21.0, 21041.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 207.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 12960.0, "series": [{"data": [[141.0, 4175.0], [142.0, 9194.0], [143.0, 7444.0], [140.0, 8349.0], [144.0, 11261.5], [167.0, 4241.0], [172.0, 7748.0], [171.0, 3465.0], [173.0, 4954.0], [170.0, 7737.0], [174.0, 7853.5], [181.0, 1852.0], [196.0, 2687.5], [207.0, 3243.0], [4.0, 95.5], [74.0, 527.5], [81.0, 5670.0], [21.0, 171.0], [90.0, 704.5], [119.0, 12960.0], [31.0, 1635.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [21.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 207.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 66.66666666666667, "minX": 1.63090248E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63090248E12, 66.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090248E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.63090248E12, "maxY": 66.48333333333333, "series": [{"data": [[1.63090248E12, 66.48333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63090248E12, 0.18333333333333332]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090248E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.63090248E12, "maxY": 66.48333333333333, "series": [{"data": [[1.63090248E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63090248E12, 66.48333333333333]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090248E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.63090248E12, "maxY": 66.48333333333333, "series": [{"data": [[1.63090248E12, 66.48333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63090248E12, 0.18333333333333332]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090248E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

