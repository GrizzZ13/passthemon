/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 228.0, "minX": 0.0, "maxY": 7359.0, "series": [{"data": [[0.0, 228.0], [0.1, 236.0], [0.2, 246.0], [0.3, 246.0], [0.4, 281.0], [0.5, 285.0], [0.6, 300.0], [0.7, 323.0], [0.8, 363.0], [0.9, 368.0], [1.0, 369.0], [1.1, 380.0], [1.2, 381.0], [1.3, 515.0], [1.4, 515.0], [1.5, 629.0], [1.6, 637.0], [1.7, 638.0], [1.8, 644.0], [1.9, 656.0], [2.0, 658.0], [2.1, 659.0], [2.2, 665.0], [2.3, 677.0], [2.4, 688.0], [2.5, 689.0], [2.6, 690.0], [2.7, 691.0], [2.8, 693.0], [2.9, 704.0], [3.0, 715.0], [3.1, 719.0], [3.2, 722.0], [3.3, 734.0], [3.4, 735.0], [3.5, 750.0], [3.6, 780.0], [3.7, 820.0], [3.8, 823.0], [3.9, 844.0], [4.0, 876.0], [4.1, 899.0], [4.2, 909.0], [4.3, 918.0], [4.4, 934.0], [4.5, 938.0], [4.6, 944.0], [4.7, 956.0], [4.8, 956.0], [4.9, 968.0], [5.0, 974.0], [5.1, 975.0], [5.2, 978.0], [5.3, 979.0], [5.4, 996.0], [5.5, 1005.0], [5.6, 1009.0], [5.7, 1015.0], [5.8, 1024.0], [5.9, 1025.0], [6.0, 1038.0], [6.1, 1039.0], [6.2, 1040.0], [6.3, 1056.0], [6.4, 1057.0], [6.5, 1063.0], [6.6, 1066.0], [6.7, 1076.0], [6.8, 1080.0], [6.9, 1084.0], [7.0, 1096.0], [7.1, 1107.0], [7.2, 1108.0], [7.3, 1116.0], [7.4, 1120.0], [7.5, 1130.0], [7.6, 1135.0], [7.7, 1137.0], [7.8, 1138.0], [7.9, 1138.0], [8.0, 1139.0], [8.1, 1139.0], [8.2, 1142.0], [8.3, 1146.0], [8.4, 1152.0], [8.5, 1156.0], [8.6, 1165.0], [8.7, 1168.0], [8.8, 1173.0], [8.9, 1187.0], [9.0, 1191.0], [9.1, 1216.0], [9.2, 1236.0], [9.3, 1241.0], [9.4, 1246.0], [9.5, 1249.0], [9.6, 1259.0], [9.7, 1269.0], [9.8, 1271.0], [9.9, 1285.0], [10.0, 1294.0], [10.1, 1300.0], [10.2, 1305.0], [10.3, 1308.0], [10.4, 1310.0], [10.5, 1322.0], [10.6, 1323.0], [10.7, 1329.0], [10.8, 1335.0], [10.9, 1338.0], [11.0, 1347.0], [11.1, 1347.0], [11.2, 1351.0], [11.3, 1374.0], [11.4, 1381.0], [11.5, 1382.0], [11.6, 1384.0], [11.7, 1396.0], [11.8, 1396.0], [11.9, 1421.0], [12.0, 1425.0], [12.1, 1433.0], [12.2, 1433.0], [12.3, 1434.0], [12.4, 1441.0], [12.5, 1451.0], [12.6, 1463.0], [12.7, 1467.0], [12.8, 1475.0], [12.9, 1486.0], [13.0, 1494.0], [13.1, 1502.0], [13.2, 1511.0], [13.3, 1529.0], [13.4, 1531.0], [13.5, 1531.0], [13.6, 1533.0], [13.7, 1555.0], [13.8, 1560.0], [13.9, 1575.0], [14.0, 1577.0], [14.1, 1578.0], [14.2, 1582.0], [14.3, 1586.0], [14.4, 1593.0], [14.5, 1595.0], [14.6, 1609.0], [14.7, 1613.0], [14.8, 1631.0], [14.9, 1636.0], [15.0, 1643.0], [15.1, 1645.0], [15.2, 1646.0], [15.3, 1649.0], [15.4, 1652.0], [15.5, 1662.0], [15.6, 1670.0], [15.7, 1670.0], [15.8, 1680.0], [15.9, 1699.0], [16.0, 1706.0], [16.1, 1709.0], [16.2, 1713.0], [16.3, 1716.0], [16.4, 1745.0], [16.5, 1745.0], [16.6, 1776.0], [16.7, 1782.0], [16.8, 1795.0], [16.9, 1811.0], [17.0, 1812.0], [17.1, 1814.0], [17.2, 1814.0], [17.3, 1821.0], [17.4, 1840.0], [17.5, 1841.0], [17.6, 1845.0], [17.7, 1869.0], [17.8, 1874.0], [17.9, 1876.0], [18.0, 1877.0], [18.1, 1886.0], [18.2, 1893.0], [18.3, 1895.0], [18.4, 1895.0], [18.5, 1909.0], [18.6, 1920.0], [18.7, 1922.0], [18.8, 1928.0], [18.9, 1935.0], [19.0, 1938.0], [19.1, 1942.0], [19.2, 1944.0], [19.3, 1949.0], [19.4, 1957.0], [19.5, 1957.0], [19.6, 1959.0], [19.7, 1963.0], [19.8, 1965.0], [19.9, 1965.0], [20.0, 1992.0], [20.1, 2002.0], [20.2, 2008.0], [20.3, 2018.0], [20.4, 2027.0], [20.5, 2038.0], [20.6, 2039.0], [20.7, 2049.0], [20.8, 2051.0], [20.9, 2052.0], [21.0, 2054.0], [21.1, 2057.0], [21.2, 2060.0], [21.3, 2071.0], [21.4, 2075.0], [21.5, 2096.0], [21.6, 2096.0], [21.7, 2110.0], [21.8, 2111.0], [21.9, 2111.0], [22.0, 2123.0], [22.1, 2131.0], [22.2, 2132.0], [22.3, 2135.0], [22.4, 2136.0], [22.5, 2147.0], [22.6, 2154.0], [22.7, 2156.0], [22.8, 2156.0], [22.9, 2159.0], [23.0, 2159.0], [23.1, 2159.0], [23.2, 2168.0], [23.3, 2198.0], [23.4, 2205.0], [23.5, 2206.0], [23.6, 2245.0], [23.7, 2245.0], [23.8, 2260.0], [23.9, 2261.0], [24.0, 2279.0], [24.1, 2297.0], [24.2, 2302.0], [24.3, 2303.0], [24.4, 2324.0], [24.5, 2334.0], [24.6, 2335.0], [24.7, 2337.0], [24.8, 2344.0], [24.9, 2345.0], [25.0, 2360.0], [25.1, 2372.0], [25.2, 2377.0], [25.3, 2381.0], [25.4, 2389.0], [25.5, 2402.0], [25.6, 2407.0], [25.7, 2410.0], [25.8, 2415.0], [25.9, 2421.0], [26.0, 2430.0], [26.1, 2431.0], [26.2, 2437.0], [26.3, 2446.0], [26.4, 2458.0], [26.5, 2462.0], [26.6, 2465.0], [26.7, 2469.0], [26.8, 2478.0], [26.9, 2479.0], [27.0, 2485.0], [27.1, 2508.0], [27.2, 2515.0], [27.3, 2529.0], [27.4, 2530.0], [27.5, 2532.0], [27.6, 2552.0], [27.7, 2558.0], [27.8, 2574.0], [27.9, 2575.0], [28.0, 2576.0], [28.1, 2587.0], [28.2, 2587.0], [28.3, 2594.0], [28.4, 2594.0], [28.5, 2595.0], [28.6, 2600.0], [28.7, 2611.0], [28.8, 2612.0], [28.9, 2620.0], [29.0, 2630.0], [29.1, 2642.0], [29.2, 2650.0], [29.3, 2654.0], [29.4, 2665.0], [29.5, 2670.0], [29.6, 2678.0], [29.7, 2679.0], [29.8, 2697.0], [29.9, 2699.0], [30.0, 2702.0], [30.1, 2739.0], [30.2, 2747.0], [30.3, 2749.0], [30.4, 2751.0], [30.5, 2756.0], [30.6, 2757.0], [30.7, 2765.0], [30.8, 2766.0], [30.9, 2770.0], [31.0, 2771.0], [31.1, 2773.0], [31.2, 2773.0], [31.3, 2777.0], [31.4, 2791.0], [31.5, 2822.0], [31.6, 2826.0], [31.7, 2828.0], [31.8, 2829.0], [31.9, 2832.0], [32.0, 2835.0], [32.1, 2836.0], [32.2, 2837.0], [32.3, 2844.0], [32.4, 2852.0], [32.5, 2861.0], [32.6, 2862.0], [32.7, 2870.0], [32.8, 2878.0], [32.9, 2885.0], [33.0, 2887.0], [33.1, 2895.0], [33.2, 2901.0], [33.3, 2932.0], [33.4, 2932.0], [33.5, 2934.0], [33.6, 2937.0], [33.7, 2946.0], [33.8, 2946.0], [33.9, 2950.0], [34.0, 2950.0], [34.1, 2952.0], [34.2, 2956.0], [34.3, 2969.0], [34.4, 2971.0], [34.5, 2971.0], [34.6, 2971.0], [34.7, 2977.0], [34.8, 2978.0], [34.9, 2984.0], [35.0, 2987.0], [35.1, 3006.0], [35.2, 3007.0], [35.3, 3009.0], [35.4, 3020.0], [35.5, 3021.0], [35.6, 3024.0], [35.7, 3024.0], [35.8, 3027.0], [35.9, 3031.0], [36.0, 3038.0], [36.1, 3042.0], [36.2, 3048.0], [36.3, 3054.0], [36.4, 3056.0], [36.5, 3061.0], [36.6, 3082.0], [36.7, 3083.0], [36.8, 3083.0], [36.9, 3091.0], [37.0, 3098.0], [37.1, 3101.0], [37.2, 3104.0], [37.3, 3107.0], [37.4, 3128.0], [37.5, 3136.0], [37.6, 3144.0], [37.7, 3152.0], [37.8, 3169.0], [37.9, 3175.0], [38.0, 3179.0], [38.1, 3180.0], [38.2, 3184.0], [38.3, 3186.0], [38.4, 3186.0], [38.5, 3194.0], [38.6, 3199.0], [38.7, 3208.0], [38.8, 3219.0], [38.9, 3227.0], [39.0, 3227.0], [39.1, 3235.0], [39.2, 3243.0], [39.3, 3244.0], [39.4, 3255.0], [39.5, 3261.0], [39.6, 3263.0], [39.7, 3264.0], [39.8, 3266.0], [39.9, 3267.0], [40.0, 3275.0], [40.1, 3284.0], [40.2, 3297.0], [40.3, 3297.0], [40.4, 3298.0], [40.5, 3305.0], [40.6, 3308.0], [40.7, 3309.0], [40.8, 3312.0], [40.9, 3317.0], [41.0, 3322.0], [41.1, 3335.0], [41.2, 3336.0], [41.3, 3339.0], [41.4, 3362.0], [41.5, 3365.0], [41.6, 3379.0], [41.7, 3383.0], [41.8, 3386.0], [41.9, 3397.0], [42.0, 3408.0], [42.1, 3418.0], [42.2, 3431.0], [42.3, 3436.0], [42.4, 3438.0], [42.5, 3446.0], [42.6, 3457.0], [42.7, 3468.0], [42.8, 3479.0], [42.9, 3488.0], [43.0, 3490.0], [43.1, 3493.0], [43.2, 3493.0], [43.3, 3494.0], [43.4, 3508.0], [43.5, 3520.0], [43.6, 3545.0], [43.7, 3554.0], [43.8, 3554.0], [43.9, 3558.0], [44.0, 3560.0], [44.1, 3567.0], [44.2, 3576.0], [44.3, 3582.0], [44.4, 3600.0], [44.5, 3601.0], [44.6, 3602.0], [44.7, 3612.0], [44.8, 3616.0], [44.9, 3618.0], [45.0, 3632.0], [45.1, 3640.0], [45.2, 3641.0], [45.3, 3647.0], [45.4, 3650.0], [45.5, 3664.0], [45.6, 3666.0], [45.7, 3687.0], [45.8, 3697.0], [45.9, 3699.0], [46.0, 3709.0], [46.1, 3715.0], [46.2, 3732.0], [46.3, 3733.0], [46.4, 3744.0], [46.5, 3745.0], [46.6, 3758.0], [46.7, 3762.0], [46.8, 3768.0], [46.9, 3786.0], [47.0, 3790.0], [47.1, 3799.0], [47.2, 3801.0], [47.3, 3806.0], [47.4, 3807.0], [47.5, 3809.0], [47.6, 3812.0], [47.7, 3821.0], [47.8, 3832.0], [47.9, 3841.0], [48.0, 3841.0], [48.1, 3848.0], [48.2, 3848.0], [48.3, 3851.0], [48.4, 3870.0], [48.5, 3882.0], [48.6, 3886.0], [48.7, 3893.0], [48.8, 3911.0], [48.9, 3924.0], [49.0, 3930.0], [49.1, 3935.0], [49.2, 3950.0], [49.3, 3954.0], [49.4, 3956.0], [49.5, 3968.0], [49.6, 3972.0], [49.7, 3976.0], [49.8, 3988.0], [49.9, 4003.0], [50.0, 4005.0], [50.1, 4014.0], [50.2, 4033.0], [50.3, 4045.0], [50.4, 4052.0], [50.5, 4058.0], [50.6, 4061.0], [50.7, 4062.0], [50.8, 4067.0], [50.9, 4072.0], [51.0, 4079.0], [51.1, 4086.0], [51.2, 4088.0], [51.3, 4091.0], [51.4, 4093.0], [51.5, 4101.0], [51.6, 4102.0], [51.7, 4102.0], [51.8, 4103.0], [51.9, 4106.0], [52.0, 4118.0], [52.1, 4120.0], [52.2, 4121.0], [52.3, 4122.0], [52.4, 4136.0], [52.5, 4141.0], [52.6, 4147.0], [52.7, 4155.0], [52.8, 4175.0], [52.9, 4175.0], [53.0, 4182.0], [53.1, 4183.0], [53.2, 4204.0], [53.3, 4206.0], [53.4, 4208.0], [53.5, 4219.0], [53.6, 4234.0], [53.7, 4242.0], [53.8, 4244.0], [53.9, 4246.0], [54.0, 4258.0], [54.1, 4259.0], [54.2, 4261.0], [54.3, 4262.0], [54.4, 4263.0], [54.5, 4266.0], [54.6, 4271.0], [54.7, 4273.0], [54.8, 4282.0], [54.9, 4293.0], [55.0, 4298.0], [55.1, 4298.0], [55.2, 4306.0], [55.3, 4309.0], [55.4, 4313.0], [55.5, 4319.0], [55.6, 4322.0], [55.7, 4334.0], [55.8, 4347.0], [55.9, 4348.0], [56.0, 4352.0], [56.1, 4353.0], [56.2, 4395.0], [56.3, 4401.0], [56.4, 4417.0], [56.5, 4419.0], [56.6, 4428.0], [56.7, 4440.0], [56.8, 4442.0], [56.9, 4443.0], [57.0, 4446.0], [57.1, 4449.0], [57.2, 4462.0], [57.3, 4462.0], [57.4, 4477.0], [57.5, 4482.0], [57.6, 4491.0], [57.7, 4498.0], [57.8, 4514.0], [57.9, 4523.0], [58.0, 4524.0], [58.1, 4534.0], [58.2, 4553.0], [58.3, 4553.0], [58.4, 4554.0], [58.5, 4556.0], [58.6, 4563.0], [58.7, 4565.0], [58.8, 4567.0], [58.9, 4567.0], [59.0, 4575.0], [59.1, 4584.0], [59.2, 4610.0], [59.3, 4612.0], [59.4, 4617.0], [59.5, 4619.0], [59.6, 4619.0], [59.7, 4624.0], [59.8, 4629.0], [59.9, 4636.0], [60.0, 4639.0], [60.1, 4639.0], [60.2, 4640.0], [60.3, 4655.0], [60.4, 4662.0], [60.5, 4670.0], [60.6, 4674.0], [60.7, 4679.0], [60.8, 4697.0], [60.9, 4699.0], [61.0, 4716.0], [61.1, 4717.0], [61.2, 4720.0], [61.3, 4728.0], [61.4, 4730.0], [61.5, 4734.0], [61.6, 4734.0], [61.7, 4742.0], [61.8, 4745.0], [61.9, 4748.0], [62.0, 4750.0], [62.1, 4759.0], [62.2, 4765.0], [62.3, 4769.0], [62.4, 4774.0], [62.5, 4780.0], [62.6, 4793.0], [62.7, 4797.0], [62.8, 4812.0], [62.9, 4814.0], [63.0, 4824.0], [63.1, 4831.0], [63.2, 4832.0], [63.3, 4832.0], [63.4, 4841.0], [63.5, 4857.0], [63.6, 4858.0], [63.7, 4870.0], [63.8, 4881.0], [63.9, 4898.0], [64.0, 4913.0], [64.1, 4920.0], [64.2, 4922.0], [64.3, 4926.0], [64.4, 4927.0], [64.5, 4930.0], [64.6, 4931.0], [64.7, 4942.0], [64.8, 4943.0], [64.9, 4945.0], [65.0, 4953.0], [65.1, 4976.0], [65.2, 4983.0], [65.3, 4992.0], [65.4, 4994.0], [65.5, 5002.0], [65.6, 5003.0], [65.7, 5007.0], [65.8, 5010.0], [65.9, 5013.0], [66.0, 5036.0], [66.1, 5046.0], [66.2, 5049.0], [66.3, 5050.0], [66.4, 5053.0], [66.5, 5060.0], [66.6, 5060.0], [66.7, 5072.0], [66.8, 5073.0], [66.9, 5073.0], [67.0, 5079.0], [67.1, 5080.0], [67.2, 5089.0], [67.3, 5089.0], [67.4, 5096.0], [67.5, 5114.0], [67.6, 5124.0], [67.7, 5136.0], [67.8, 5137.0], [67.9, 5140.0], [68.0, 5146.0], [68.1, 5151.0], [68.2, 5151.0], [68.3, 5152.0], [68.4, 5153.0], [68.5, 5154.0], [68.6, 5164.0], [68.7, 5171.0], [68.8, 5178.0], [68.9, 5194.0], [69.0, 5196.0], [69.1, 5213.0], [69.2, 5221.0], [69.3, 5222.0], [69.4, 5226.0], [69.5, 5252.0], [69.6, 5255.0], [69.7, 5255.0], [69.8, 5256.0], [69.9, 5258.0], [70.0, 5267.0], [70.1, 5272.0], [70.2, 5277.0], [70.3, 5280.0], [70.4, 5285.0], [70.5, 5294.0], [70.6, 5312.0], [70.7, 5315.0], [70.8, 5328.0], [70.9, 5343.0], [71.0, 5361.0], [71.1, 5365.0], [71.2, 5375.0], [71.3, 5377.0], [71.4, 5379.0], [71.5, 5386.0], [71.6, 5388.0], [71.7, 5389.0], [71.8, 5396.0], [71.9, 5405.0], [72.0, 5407.0], [72.1, 5408.0], [72.2, 5414.0], [72.3, 5423.0], [72.4, 5424.0], [72.5, 5437.0], [72.6, 5445.0], [72.7, 5449.0], [72.8, 5451.0], [72.9, 5455.0], [73.0, 5469.0], [73.1, 5472.0], [73.2, 5474.0], [73.3, 5475.0], [73.4, 5476.0], [73.5, 5493.0], [73.6, 5496.0], [73.7, 5509.0], [73.8, 5518.0], [73.9, 5520.0], [74.0, 5526.0], [74.1, 5536.0], [74.2, 5554.0], [74.3, 5568.0], [74.4, 5574.0], [74.5, 5580.0], [74.6, 5582.0], [74.7, 5590.0], [74.8, 5591.0], [74.9, 5591.0], [75.0, 5596.0], [75.1, 5600.0], [75.2, 5612.0], [75.3, 5620.0], [75.4, 5625.0], [75.5, 5644.0], [75.6, 5650.0], [75.7, 5669.0], [75.8, 5672.0], [75.9, 5682.0], [76.0, 5688.0], [76.1, 5690.0], [76.2, 5692.0], [76.3, 5708.0], [76.4, 5718.0], [76.5, 5729.0], [76.6, 5731.0], [76.7, 5745.0], [76.8, 5746.0], [76.9, 5750.0], [77.0, 5762.0], [77.1, 5764.0], [77.2, 5765.0], [77.3, 5765.0], [77.4, 5769.0], [77.5, 5781.0], [77.6, 5781.0], [77.7, 5799.0], [77.8, 5809.0], [77.9, 5818.0], [78.0, 5819.0], [78.1, 5819.0], [78.2, 5820.0], [78.3, 5825.0], [78.4, 5832.0], [78.5, 5841.0], [78.6, 5841.0], [78.7, 5842.0], [78.8, 5855.0], [78.9, 5874.0], [79.0, 5880.0], [79.1, 5880.0], [79.2, 5881.0], [79.3, 5890.0], [79.4, 5891.0], [79.5, 5904.0], [79.6, 5914.0], [79.7, 5916.0], [79.8, 5917.0], [79.9, 5928.0], [80.0, 5937.0], [80.1, 5942.0], [80.2, 5943.0], [80.3, 5944.0], [80.4, 5950.0], [80.5, 5955.0], [80.6, 5966.0], [80.7, 5973.0], [80.8, 5975.0], [80.9, 5982.0], [81.0, 5985.0], [81.1, 5989.0], [81.2, 5995.0], [81.3, 5997.0], [81.4, 5999.0], [81.5, 6001.0], [81.6, 6006.0], [81.7, 6006.0], [81.8, 6010.0], [81.9, 6015.0], [82.0, 6032.0], [82.1, 6035.0], [82.2, 6037.0], [82.3, 6038.0], [82.4, 6040.0], [82.5, 6045.0], [82.6, 6047.0], [82.7, 6054.0], [82.8, 6061.0], [82.9, 6081.0], [83.0, 6089.0], [83.1, 6089.0], [83.2, 6103.0], [83.3, 6112.0], [83.4, 6118.0], [83.5, 6122.0], [83.6, 6150.0], [83.7, 6153.0], [83.8, 6154.0], [83.9, 6169.0], [84.0, 6172.0], [84.1, 6176.0], [84.2, 6181.0], [84.3, 6183.0], [84.4, 6194.0], [84.5, 6200.0], [84.6, 6203.0], [84.7, 6203.0], [84.8, 6214.0], [84.9, 6222.0], [85.0, 6230.0], [85.1, 6235.0], [85.2, 6236.0], [85.3, 6240.0], [85.4, 6253.0], [85.5, 6253.0], [85.6, 6264.0], [85.7, 6271.0], [85.8, 6273.0], [85.9, 6302.0], [86.0, 6309.0], [86.1, 6311.0], [86.2, 6316.0], [86.3, 6322.0], [86.4, 6335.0], [86.5, 6336.0], [86.6, 6337.0], [86.7, 6345.0], [86.8, 6371.0], [86.9, 6372.0], [87.0, 6373.0], [87.1, 6383.0], [87.2, 6391.0], [87.3, 6403.0], [87.4, 6405.0], [87.5, 6406.0], [87.6, 6407.0], [87.7, 6409.0], [87.8, 6411.0], [87.9, 6416.0], [88.0, 6426.0], [88.1, 6431.0], [88.2, 6432.0], [88.3, 6438.0], [88.4, 6441.0], [88.5, 6445.0], [88.6, 6449.0], [88.7, 6452.0], [88.8, 6466.0], [88.9, 6473.0], [89.0, 6477.0], [89.1, 6493.0], [89.2, 6494.0], [89.3, 6494.0], [89.4, 6495.0], [89.5, 6496.0], [89.6, 6503.0], [89.7, 6507.0], [89.8, 6509.0], [89.9, 6528.0], [90.0, 6534.0], [90.1, 6537.0], [90.2, 6546.0], [90.3, 6554.0], [90.4, 6556.0], [90.5, 6564.0], [90.6, 6565.0], [90.7, 6575.0], [90.8, 6581.0], [90.9, 6592.0], [91.0, 6593.0], [91.1, 6602.0], [91.2, 6624.0], [91.3, 6625.0], [91.4, 6630.0], [91.5, 6633.0], [91.6, 6646.0], [91.7, 6648.0], [91.8, 6655.0], [91.9, 6675.0], [92.0, 6685.0], [92.1, 6686.0], [92.2, 6689.0], [92.3, 6689.0], [92.4, 6706.0], [92.5, 6713.0], [92.6, 6714.0], [92.7, 6715.0], [92.8, 6719.0], [92.9, 6720.0], [93.0, 6720.0], [93.1, 6720.0], [93.2, 6721.0], [93.3, 6739.0], [93.4, 6740.0], [93.5, 6742.0], [93.6, 6745.0], [93.7, 6748.0], [93.8, 6749.0], [93.9, 6762.0], [94.0, 6765.0], [94.1, 6777.0], [94.2, 6777.0], [94.3, 6785.0], [94.4, 6785.0], [94.5, 6801.0], [94.6, 6826.0], [94.7, 6829.0], [94.8, 6833.0], [94.9, 6838.0], [95.0, 6840.0], [95.1, 6849.0], [95.2, 6864.0], [95.3, 6867.0], [95.4, 6870.0], [95.5, 6876.0], [95.6, 6888.0], [95.7, 6896.0], [95.8, 6898.0], [95.9, 6900.0], [96.0, 6903.0], [96.1, 6903.0], [96.2, 6910.0], [96.3, 6921.0], [96.4, 6931.0], [96.5, 6935.0], [96.6, 6937.0], [96.7, 6939.0], [96.8, 6941.0], [96.9, 6944.0], [97.0, 6959.0], [97.1, 6961.0], [97.2, 6976.0], [97.3, 6991.0], [97.4, 7010.0], [97.5, 7023.0], [97.6, 7037.0], [97.7, 7040.0], [97.8, 7055.0], [97.9, 7056.0], [98.0, 7064.0], [98.1, 7068.0], [98.2, 7073.0], [98.3, 7080.0], [98.4, 7083.0], [98.5, 7086.0], [98.6, 7112.0], [98.7, 7121.0], [98.8, 7157.0], [98.9, 7177.0], [99.0, 7190.0], [99.1, 7196.0], [99.2, 7218.0], [99.3, 7221.0], [99.4, 7223.0], [99.5, 7233.0], [99.6, 7246.0], [99.7, 7302.0], [99.8, 7351.0], [99.9, 7359.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 23.0, "series": [{"data": [[600.0, 14.0], [700.0, 8.0], [800.0, 5.0], [900.0, 14.0], [1000.0, 16.0], [1100.0, 20.0], [1200.0, 10.0], [1300.0, 18.0], [1400.0, 12.0], [1500.0, 15.0], [1600.0, 14.0], [1700.0, 9.0], [1800.0, 16.0], [1900.0, 15.0], [2000.0, 16.0], [2100.0, 17.0], [2200.0, 8.0], [2300.0, 13.0], [2400.0, 16.0], [2500.0, 15.0], [2600.0, 14.0], [2700.0, 15.0], [2800.0, 17.0], [2900.0, 19.0], [3000.0, 20.0], [3100.0, 16.0], [3200.0, 18.0], [3300.0, 15.0], [3400.0, 14.0], [3500.0, 10.0], [3600.0, 16.0], [3700.0, 12.0], [3800.0, 16.0], [3900.0, 11.0], [4000.0, 16.0], [4100.0, 17.0], [4200.0, 20.0], [4300.0, 11.0], [4400.0, 15.0], [4500.0, 14.0], [4600.0, 18.0], [4700.0, 18.0], [4800.0, 12.0], [4900.0, 15.0], [5000.0, 20.0], [5100.0, 16.0], [5200.0, 15.0], [5300.0, 13.0], [5400.0, 18.0], [5500.0, 14.0], [5600.0, 13.0], [5700.0, 15.0], [5800.0, 17.0], [5900.0, 20.0], [6000.0, 17.0], [6100.0, 13.0], [6200.0, 14.0], [6300.0, 14.0], [6400.0, 23.0], [6500.0, 15.0], [6600.0, 13.0], [6700.0, 21.0], [6800.0, 14.0], [6900.0, 15.0], [7000.0, 12.0], [7100.0, 6.0], [7200.0, 5.0], [7300.0, 3.0], [200.0, 6.0], [300.0, 7.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 869.0, "series": [{"data": [[0.0, 13.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 118.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 869.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 250.64999999999995, "minX": 1.6306815E12, "maxY": 250.73199999999966, "series": [{"data": [[1.6306815E12, 250.64999999999995]], "isOverall": false, "label": "listHistoryByTime", "isController": false}, {"data": [[1.6306815E12, 250.73199999999966]], "isOverall": false, "label": "listHistory", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306815E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 237.0, "minX": 1.0, "maxY": 7359.0, "series": [{"data": [[2.0, 7068.0], [3.0, 7359.0], [5.0, 7065.5], [6.0, 7056.0], [7.0, 7157.0], [8.0, 6903.0], [10.0, 7127.0], [11.0, 7040.0], [12.0, 7037.0], [13.0, 6777.0], [14.0, 7223.0], [15.0, 7073.0], [16.0, 7302.0], [17.0, 6713.0], [18.0, 6991.0], [19.0, 7246.0], [20.0, 6921.0], [21.0, 6762.0], [22.0, 7055.0], [23.0, 6829.0], [24.0, 6706.0], [26.0, 7225.5], [27.0, 6941.0], [28.0, 7023.0], [29.0, 7221.0], [30.0, 7112.0], [33.0, 7177.0], [32.0, 7138.0], [35.0, 6838.0], [34.0, 6888.0], [37.0, 6877.5], [39.0, 6976.0], [38.0, 7010.0], [41.0, 6686.0], [40.0, 6931.0], [43.0, 6937.0], [42.0, 6801.0], [45.0, 6624.0], [44.0, 6554.0], [47.0, 6564.0], [46.0, 6939.0], [49.0, 6949.0], [51.0, 6849.0], [50.0, 6593.0], [53.0, 6833.0], [52.0, 6867.0], [55.0, 6494.0], [54.0, 6898.0], [57.0, 6870.0], [56.0, 7064.0], [59.0, 6452.0], [58.0, 6749.0], [61.0, 6602.0], [60.0, 6685.0], [63.0, 6720.0], [62.0, 6719.0], [67.0, 6689.0], [66.0, 6494.0], [65.0, 6876.0], [64.0, 6896.0], [71.0, 6715.0], [70.0, 6944.0], [69.0, 6959.0], [68.0, 6721.0], [75.0, 6840.0], [74.0, 6930.5], [72.0, 6720.0], [79.0, 6373.0], [78.0, 6826.0], [77.0, 6503.0], [76.0, 6592.0], [83.0, 6537.0], [82.0, 6648.0], [81.0, 6910.0], [80.0, 6739.0], [87.0, 6507.0], [86.0, 6637.5], [85.0, 6445.0], [91.0, 6372.0], [90.0, 6690.5], [88.0, 6689.0], [95.0, 6785.0], [94.0, 6646.0], [93.0, 6720.0], [92.0, 6528.0], [99.0, 6194.0], [98.0, 6477.0], [97.0, 6230.0], [96.0, 6302.0], [103.0, 6785.0], [102.0, 6575.0], [101.0, 6740.0], [100.0, 6765.0], [107.0, 6745.0], [106.0, 6416.0], [105.0, 6509.0], [104.0, 6473.0], [111.0, 6409.0], [110.0, 6426.0], [109.0, 6316.0], [108.0, 6742.0], [115.0, 6714.0], [114.0, 6438.0], [113.0, 6496.0], [112.0, 6625.0], [119.0, 6546.0], [118.0, 6383.0], [117.0, 6183.0], [116.0, 6089.0], [123.0, 6309.0], [122.0, 6392.666666666667], [127.0, 6371.0], [126.0, 6432.0], [125.0, 6655.0], [124.0, 6565.0], [135.0, 5999.0], [134.0, 6006.0], [133.0, 6556.0], [132.0, 6581.0], [131.0, 6493.0], [130.0, 6169.0], [129.0, 6335.0], [128.0, 6311.0], [143.0, 6144.0], [141.0, 6162.5], [139.0, 6112.0], [138.0, 5997.0], [137.0, 6222.0], [136.0, 6534.0], [151.0, 6253.0], [150.0, 6271.0], [149.0, 6495.0], [148.0, 6260.0], [146.0, 6322.0], [145.0, 5973.0], [144.0, 5928.0], [159.0, 6103.0], [158.0, 5841.0], [157.0, 6445.0], [155.0, 6431.0], [154.0, 6407.0], [153.0, 6264.0], [152.0, 6203.0], [167.0, 6154.0], [165.0, 6336.0], [164.0, 6403.0], [163.0, 5855.0], [162.0, 6122.0], [161.0, 6405.5], [171.0, 6253.0], [170.0, 6240.0], [169.0, 6047.0], [168.0, 6172.0], [183.0, 6038.5], [181.0, 6181.0], [180.0, 6052.6], [179.0, 6118.0], [176.0, 6147.0], [191.0, 6040.0], [190.0, 5880.0], [189.0, 5914.0], [188.0, 6154.0], [187.0, 5818.0], [186.0, 6047.666666666667], [199.0, 6035.0], [198.0, 6150.0], [197.0, 5803.0], [195.0, 5950.0], [194.0, 5955.0], [193.0, 6037.0], [192.0, 6200.0], [207.0, 5682.0], [206.0, 6010.0], [205.0, 5832.0], [204.0, 5855.333333333333], [201.0, 6038.0], [200.0, 5690.0], [215.0, 6081.0], [214.0, 5729.0], [213.0, 5650.0], [212.0, 5874.0], [211.0, 5820.0], [210.0, 5891.0], [209.0, 5600.0], [208.0, 5819.0], [223.0, 5765.0], [222.0, 5769.0], [221.0, 6001.0], [220.0, 5708.0], [219.0, 5966.0], [218.0, 5475.0], [217.0, 5794.5], [230.0, 5583.5], [228.0, 5731.0], [227.0, 6006.0], [226.0, 5989.0], [225.0, 5654.0], [239.0, 5881.0], [238.0, 5942.0], [237.0, 5746.0], [236.0, 5842.0], [235.0, 5944.0], [234.0, 5750.0], [233.0, 5899.666666666667], [247.0, 5554.0], [246.0, 5474.0], [245.0, 5880.0], [244.0, 5508.0], [242.0, 5679.5], [240.0, 5625.0], [255.0, 5568.0], [254.0, 5574.0], [253.0, 5256.0], [252.0, 5267.0], [251.0, 5414.0], [250.0, 5424.0], [249.0, 5591.0], [248.0, 5375.0], [259.0, 5518.0], [270.0, 5164.0], [271.0, 5301.0], [268.0, 5644.0], [258.0, 5799.0], [257.0, 5252.0], [256.0, 5312.0], [267.0, 5577.333333333333], [264.0, 5222.0], [263.0, 5762.0], [262.0, 5765.0], [261.0, 5389.0], [260.0, 5509.0], [285.0, 5136.0], [287.0, 5472.0], [284.0, 5469.0], [275.0, 5688.0], [274.0, 5153.0], [273.0, 5612.0], [272.0, 5476.0], [283.0, 5493.0], [282.0, 5377.0], [281.0, 5470.5], [279.0, 5692.0], [278.0, 5667.0], [277.0, 5421.5], [302.0, 5196.0], [303.0, 4983.0], [301.0, 5013.0], [300.0, 5285.0], [299.0, 5514.5], [297.0, 5073.0], [296.0, 5152.0], [295.0, 5080.0], [288.0, 5213.0], [291.0, 5435.5], [289.0, 5089.0], [294.0, 5596.0], [293.0, 5343.0], [292.0, 5520.0], [306.0, 5407.0], [318.0, 5223.5], [316.0, 5294.0], [315.0, 5178.0], [314.0, 5220.666666666667], [311.0, 5060.0], [310.0, 5050.0], [309.0, 5049.0], [308.0, 5363.5], [305.0, 5258.0], [304.0, 5526.0], [333.0, 5072.5], [331.0, 5376.5], [329.0, 4942.0], [328.0, 4945.0], [327.0, 5272.0], [321.0, 5315.0], [320.0, 5053.5], [326.0, 5140.0], [325.0, 4931.0], [324.0, 5361.0], [323.0, 5423.0], [322.0, 5089.0], [350.0, 5150.0], [351.0, 4898.0], [348.0, 4858.0], [339.0, 5328.0], [338.0, 4994.0], [337.0, 4920.75], [347.0, 5255.0], [346.0, 5226.0], [345.0, 5096.0], [344.0, 5277.0], [343.0, 5003.0], [342.0, 5046.0], [341.0, 4881.0], [340.0, 4769.0], [366.0, 4968.0], [367.0, 4920.0], [364.0, 4714.0], [361.0, 5154.0], [360.0, 4832.0], [359.0, 4612.0], [358.0, 5151.0], [357.0, 4802.333333333333], [354.0, 4910.5], [352.0, 4662.0], [382.0, 4815.5], [383.0, 4617.0], [380.0, 4745.0], [371.0, 4640.0], [370.0, 4556.0], [369.0, 4629.0], [368.0, 4554.0], [379.0, 4584.0], [378.0, 4734.0], [377.0, 4922.0], [376.0, 5060.0], [375.0, 5044.5], [373.0, 4831.0], [372.0, 4930.0], [398.0, 4449.0], [399.0, 4699.0], [397.0, 4619.0], [396.0, 4624.0], [395.0, 4926.0], [394.0, 4927.0], [393.0, 4765.0], [392.0, 4708.0], [390.0, 4943.0], [384.0, 4442.0], [387.0, 4796.0], [385.0, 4992.0], [389.0, 4639.0], [388.0, 4670.0], [412.0, 4565.0], [414.0, 4619.0], [415.0, 4266.0], [413.0, 4610.0], [411.0, 4797.0], [410.0, 4677.5], [406.0, 4401.0], [401.0, 4857.0], [400.0, 4567.0], [403.0, 4446.0], [402.0, 4824.0], [405.0, 4674.0], [404.0, 4759.0], [430.0, 4514.0], [431.0, 4118.0], [429.0, 4428.0], [428.0, 4447.5], [426.0, 4261.0], [425.0, 4419.0], [424.0, 4477.0], [423.0, 4735.0], [417.0, 4750.0], [416.0, 4443.0], [419.0, 4462.0], [418.0, 4258.0], [421.0, 4716.0], [420.0, 4717.0], [446.0, 4244.0], [447.0, 4567.0], [445.0, 4498.0], [444.0, 4553.0], [443.0, 4491.0], [442.0, 4062.0], [441.0, 4347.0], [440.0, 4348.0], [439.0, 4523.0], [432.0, 4524.0], [435.0, 4270.0], [433.0, 4462.0], [438.0, 4352.0], [437.0, 4122.0], [436.0, 4353.0], [462.0, 4182.0], [463.0, 4175.0], [461.0, 4052.0], [460.0, 3950.0], [459.0, 4259.0], [458.0, 3954.0], [457.0, 4102.0], [456.0, 4334.0], [455.0, 4501.5], [449.0, 4534.0], [448.0, 4306.0], [451.0, 4219.0], [450.0, 4282.0], [453.0, 4322.0], [452.0, 4273.0], [478.0, 4298.0], [479.0, 4395.0], [477.0, 3972.0], [476.0, 4120.0], [475.0, 3812.0], [474.0, 4086.0], [473.0, 4121.0], [472.0, 4012.5], [470.0, 4365.0], [467.0, 4136.0], [466.0, 4204.0], [465.0, 3968.0], [464.0, 4271.0], [468.0, 4093.0], [494.0, 4091.0], [495.0, 4293.0], [493.0, 4156.0], [483.0, 4291.0], [481.0, 4246.0], [480.0, 4045.0], [491.0, 4005.0], [490.0, 4309.0], [489.0, 4102.0], [488.0, 4088.0], [487.0, 3821.0], [486.0, 4101.666666666667], [510.0, 4206.0], [511.0, 3768.0], [509.0, 4065.6666666666665], [506.0, 3986.5], [504.0, 3641.0], [503.0, 4217.0], [500.0, 3709.0], [499.0, 3883.0], [497.0, 4084.5], [541.0, 3468.0], [542.0, 3988.0], [529.0, 3984.5], [531.0, 3666.0], [530.0, 3806.0], [540.0, 3832.0], [539.0, 3799.0], [538.0, 3886.0], [537.0, 3893.0], [536.0, 3976.0], [519.0, 3851.0], [518.0, 3801.0], [517.0, 3882.0], [516.0, 3733.0], [515.0, 3808.0], [512.0, 3632.0], [525.0, 3955.0], [522.0, 4079.0], [521.0, 3699.0], [535.0, 3554.0], [534.0, 3791.6666666666665], [563.0, 3809.0], [575.0, 3744.0], [574.0, 3180.0], [573.0, 3525.4], [568.0, 3554.5], [558.0, 3408.0], [547.0, 3379.0], [546.0, 3537.75], [551.0, 3608.5], [549.0, 3649.5], [557.0, 3317.0], [556.0, 3841.0], [555.0, 3762.0], [554.0, 3560.0], [553.0, 3715.0], [552.0, 3494.0], [566.0, 3758.0], [565.0, 3297.0], [564.0, 3227.0], [562.0, 3745.0], [561.0, 3533.6666666666665], [601.0, 3020.0], [605.0, 3152.0], [606.0, 3520.0], [593.0, 3275.0], [592.0, 3038.0], [604.0, 3136.0], [603.0, 3383.0], [602.0, 3056.0], [600.0, 3491.0], [583.0, 3335.0], [582.0, 3470.6666666666665], [579.0, 3558.0], [578.0, 3219.0], [577.0, 3457.0], [576.0, 3490.0], [591.0, 3083.0], [590.0, 3208.0], [589.0, 3336.0], [588.0, 3199.0], [587.0, 3322.0], [586.0, 3339.0], [585.0, 3419.0], [597.0, 3358.0], [594.0, 3179.0], [633.0, 3365.0], [637.0, 3009.0], [638.0, 2766.0], [626.0, 3083.0], [624.0, 3031.0], [629.0, 2952.0], [628.0, 3032.3333333333335], [636.0, 2828.0], [635.0, 3263.0], [634.0, 2987.0], [632.0, 3308.0], [615.0, 3243.0], [614.0, 3007.0], [613.0, 3264.0], [612.0, 3186.0], [611.0, 3098.0], [610.0, 3254.75], [623.0, 3431.0], [622.0, 2901.0], [621.0, 3175.0], [620.0, 2956.0], [619.0, 3267.0], [618.0, 3244.0], [617.0, 3224.5], [631.0, 3048.0], [630.0, 2885.0], [670.0, 2751.0], [671.0, 2558.0], [657.0, 2870.0], [656.0, 3250.5], [669.0, 2814.3333333333335], [666.0, 3169.0], [665.0, 2862.0], [664.0, 2749.0], [654.0, 3128.0], [640.0, 3011.5], [644.0, 3305.0], [643.0, 2987.6666666666665], [646.0, 2791.0], [645.0, 3312.0], [653.0, 2996.0], [651.0, 2878.0], [650.0, 3298.0], [649.0, 3027.0], [663.0, 2829.0], [662.0, 3006.0], [661.0, 2995.6666666666665], [658.0, 3184.0], [697.0, 2950.0], [702.0, 2615.0], [703.0, 2937.0], [688.0, 2789.0], [690.0, 2642.0], [689.0, 2587.0], [692.0, 2612.0], [691.0, 2773.0], [700.0, 2977.0], [699.0, 2971.0], [698.0, 2508.0], [696.0, 2574.0], [679.0, 3082.0], [678.0, 3104.0], [677.0, 3107.0], [676.0, 3016.5], [674.0, 2777.0], [673.0, 2575.0], [672.0, 2678.0], [685.0, 2822.0], [684.0, 2946.0], [683.0, 2895.0], [682.0, 2826.6666666666665], [695.0, 3024.0], [694.0, 2786.0], [729.0, 2499.25], [734.0, 2478.0], [735.0, 2198.0], [721.0, 2462.0], [720.0, 2515.0], [733.0, 2469.0], [732.0, 2437.0], [730.0, 2670.0], [719.0, 2548.5], [704.0, 2832.0], [707.0, 2771.0], [706.0, 2849.5], [710.0, 2595.0], [709.0, 2504.5], [717.0, 2297.0], [716.0, 2654.0], [715.0, 2637.0], [713.0, 2679.0], [712.0, 2554.0], [725.0, 2770.0], [724.0, 2773.0], [723.0, 2431.0], [722.0, 2844.0], [765.0, 2008.0], [756.0, 2344.0], [766.0, 2261.0], [752.0, 2410.0], [755.0, 2594.0], [754.0, 2170.5], [764.0, 2294.3333333333335], [761.0, 2529.0], [760.0, 2039.0], [743.0, 2611.0], [742.0, 2446.0], [741.0, 2159.0], [740.0, 2650.0], [739.0, 2539.5], [737.0, 2156.0], [736.0, 2697.0], [751.0, 2345.0], [750.0, 2260.0], [749.0, 2407.0], [748.0, 2465.0], [747.0, 2205.0], [746.0, 2421.0], [745.0, 2472.0], [759.0, 2052.0], [758.0, 1992.0], [757.0, 2159.0], [793.0, 2060.0], [797.0, 1935.0], [799.0, 1930.0], [784.0, 1795.0], [787.0, 2372.0], [786.0, 2370.5], [789.0, 2027.0], [788.0, 2002.0], [796.0, 1909.0], [795.0, 1886.0], [794.0, 2324.0], [792.0, 2111.0], [774.0, 2334.0], [773.0, 2458.0], [772.0, 2105.0], [770.0, 1965.0], [769.0, 2402.0], [768.0, 2407.0], [783.0, 2075.0], [782.0, 2096.0], [781.0, 2064.5], [779.0, 2071.0], [778.0, 2154.0], [777.0, 2168.0], [776.0, 2121.5], [791.0, 2245.0], [790.0, 2049.0], [827.0, 1813.5], [820.0, 2123.0], [828.0, 1670.0], [817.0, 1876.0], [816.0, 1841.0], [825.0, 1706.0], [824.0, 1699.0], [815.0, 1959.0], [802.0, 2057.0], [801.0, 2176.5], [804.0, 1895.0], [803.0, 1893.0], [806.0, 1877.0], [805.0, 2206.0], [814.0, 1895.0], [813.0, 1874.0], [812.0, 2159.0], [811.0, 1848.0], [809.0, 1963.0], [808.0, 1876.5], [823.0, 1531.0], [822.0, 1709.0], [821.0, 2132.0], [819.0, 2136.0], [818.0, 2110.0], [860.0, 1531.0], [863.0, 1840.0], [849.0, 1694.5], [851.0, 1613.0], [850.0, 1396.0], [853.0, 1586.0], [852.0, 1593.0], [862.0, 1381.0], [861.0, 1433.0], [859.0, 1467.0], [858.0, 1646.0], [857.0, 1560.0], [856.0, 1463.0], [847.0, 1670.0], [832.0, 1797.0], [834.0, 1662.0], [833.0, 1645.0], [836.0, 1652.0], [835.0, 1713.0], [838.0, 1957.0], [837.0, 1957.0], [846.0, 1682.5], [844.0, 1779.5], [842.0, 1636.0], [841.0, 1555.0], [840.0, 1844.5], [855.0, 1869.0], [854.0, 1595.0], [890.0, 1256.3333333333333], [894.0, 1575.0], [895.0, 1191.0], [881.0, 1511.0], [880.0, 1322.0], [893.0, 1502.0], [892.0, 1080.0], [891.0, 1116.0], [879.0, 1421.0], [866.0, 1653.5], [864.0, 1582.0], [869.0, 1814.0], [868.0, 1318.5], [871.0, 1374.0], [870.0, 1475.0], [878.0, 1347.0], [877.0, 1338.0], [876.0, 1433.0], [875.0, 1434.0], [874.0, 1347.0], [873.0, 1494.0], [872.0, 1425.0], [887.0, 1308.0], [886.0, 1497.0], [884.0, 1279.5], [882.0, 1382.0], [920.0, 1142.0], [914.0, 1165.0], [927.0, 1099.0], [923.0, 1038.0], [922.0, 1087.0], [911.0, 1096.0], [897.0, 1269.0], [896.0, 1441.0], [899.0, 1609.0], [898.0, 1249.0], [901.0, 1529.0], [900.0, 1259.0], [903.0, 1578.0], [902.0, 1533.0], [910.0, 1187.0], [909.0, 1144.5], [907.0, 1177.5], [905.0, 1146.0], [904.0, 1156.0], [919.0, 1111.0], [916.0, 1120.0], [915.0, 944.0], [913.0, 1279.5], [953.0, 1063.0], [947.0, 876.5], [958.0, 910.0], [959.0, 750.0], [945.0, 899.0], [944.0, 956.0], [956.0, 956.3333333333334], [952.0, 870.5], [934.0, 1154.5], [932.0, 1384.0], [931.0, 1335.0], [930.0, 1055.6666666666667], [943.0, 926.0], [942.0, 1294.0], [941.0, 934.0], [940.0, 975.0], [939.0, 956.0], [938.0, 1138.0], [937.0, 1015.0], [936.0, 1302.5], [950.0, 1005.0], [949.0, 722.0], [948.0, 1271.0], [988.0, 478.6666666666667], [989.0, 629.0], [985.0, 381.0], [984.0, 369.0], [983.0, 656.0], [982.0, 515.0], [981.0, 938.0], [980.0, 780.8181818181819], [969.0, 996.0], [967.0, 719.0], [966.0, 688.0], [965.0, 704.0], [964.0, 725.0], [962.0, 920.5], [960.0, 1168.0], [968.0, 637.0], [995.0, 237.0], [1000.0, 260.5], [996.0, 290.5], [994.0, 644.0], [993.0, 323.0], [992.0, 434.6666666666667], [1.0, 7083.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[500.8329999999998, 3948.309000000003]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7566.033333333334, "minX": 1.6306815E12, "maxY": 57574.63333333333, "series": [{"data": [[1.6306815E12, 57574.63333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6306815E12, 7566.033333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306815E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3948.309000000003, "minX": 1.6306815E12, "maxY": 3948.309000000003, "series": [{"data": [[1.6306815E12, 3948.309000000003]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306815E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3941.3679999999968, "minX": 1.6306815E12, "maxY": 3941.3679999999968, "series": [{"data": [[1.6306815E12, 3941.3679999999968]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306815E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 84.901, "minX": 1.6306815E12, "maxY": 84.901, "series": [{"data": [[1.6306815E12, 84.901]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306815E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 228.0, "minX": 1.6306815E12, "maxY": 7359.0, "series": [{"data": [[1.6306815E12, 7359.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6306815E12, 6533.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6306815E12, 7189.87]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6306815E12, 6839.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6306815E12, 228.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6306815E12, 4009.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306815E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 899.0, "minX": 81.0, "maxY": 6706.0, "series": [{"data": [[147.0, 1652.0], [151.0, 6706.0], [153.0, 3690.5], [152.0, 3692.0], [81.0, 899.0], [163.0, 5745.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 163.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 808.0, "minX": 81.0, "maxY": 6698.0, "series": [{"data": [[147.0, 1646.0], [151.0, 6698.0], [153.0, 3683.5], [152.0, 3683.5], [81.0, 808.0], [163.0, 5745.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 163.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6306815E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6306815E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306815E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6306815E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6306815E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306815E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6306815E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6306815E12, 16.666666666666668]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306815E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6306815E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6306815E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306815E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

