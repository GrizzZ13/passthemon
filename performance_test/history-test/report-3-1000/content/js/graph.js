/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 91.0, "minX": 0.0, "maxY": 7492.0, "series": [{"data": [[0.0, 91.0], [0.1, 153.0], [0.2, 158.0], [0.3, 162.0], [0.4, 165.0], [0.5, 169.0], [0.6, 264.0], [0.7, 265.0], [0.8, 268.0], [0.9, 271.0], [1.0, 272.0], [1.1, 277.0], [1.2, 278.0], [1.3, 282.0], [1.4, 377.0], [1.5, 380.0], [1.6, 380.0], [1.7, 385.0], [1.8, 385.0], [1.9, 387.0], [2.0, 391.0], [2.1, 413.0], [2.2, 420.0], [2.3, 432.0], [2.4, 433.0], [2.5, 447.0], [2.6, 702.0], [2.7, 706.0], [2.8, 717.0], [2.9, 725.0], [3.0, 1696.0], [3.1, 1724.0], [3.2, 1731.0], [3.3, 1757.0], [3.4, 1769.0], [3.5, 1802.0], [3.6, 1810.0], [3.7, 1814.0], [3.8, 1833.0], [3.9, 1838.0], [4.0, 1856.0], [4.1, 1861.0], [4.2, 1872.0], [4.3, 1875.0], [4.4, 1877.0], [4.5, 1880.0], [4.6, 1882.0], [4.7, 1883.0], [4.8, 1884.0], [4.9, 1888.0], [5.0, 1903.0], [5.1, 1906.0], [5.2, 1910.0], [5.3, 1912.0], [5.4, 1914.0], [5.5, 1914.0], [5.6, 1915.0], [5.7, 1916.0], [5.8, 1919.0], [5.9, 1919.0], [6.0, 1920.0], [6.1, 1921.0], [6.2, 1922.0], [6.3, 1923.0], [6.4, 1924.0], [6.5, 1925.0], [6.6, 1926.0], [6.7, 1929.0], [6.8, 1931.0], [6.9, 1934.0], [7.0, 1936.0], [7.1, 1937.0], [7.2, 1938.0], [7.3, 1939.0], [7.4, 1941.0], [7.5, 1944.0], [7.6, 1946.0], [7.7, 1948.0], [7.8, 1950.0], [7.9, 1951.0], [8.0, 1954.0], [8.1, 1956.0], [8.2, 1957.0], [8.3, 1960.0], [8.4, 1960.0], [8.5, 1961.0], [8.6, 1963.0], [8.7, 1964.0], [8.8, 1966.0], [8.9, 1968.0], [9.0, 1969.0], [9.1, 1970.0], [9.2, 1973.0], [9.3, 1975.0], [9.4, 1977.0], [9.5, 1978.0], [9.6, 1979.0], [9.7, 1980.0], [9.8, 1981.0], [9.9, 1985.0], [10.0, 1988.0], [10.1, 1990.0], [10.2, 1991.0], [10.3, 1996.0], [10.4, 1999.0], [10.5, 2001.0], [10.6, 2002.0], [10.7, 2004.0], [10.8, 2006.0], [10.9, 2006.0], [11.0, 2010.0], [11.1, 2013.0], [11.2, 2019.0], [11.3, 2023.0], [11.4, 2025.0], [11.5, 2026.0], [11.6, 2035.0], [11.7, 2037.0], [11.8, 2041.0], [11.9, 2044.0], [12.0, 2046.0], [12.1, 2049.0], [12.2, 2049.0], [12.3, 2053.0], [12.4, 2055.0], [12.5, 2057.0], [12.6, 2059.0], [12.7, 2060.0], [12.8, 2062.0], [12.9, 2068.0], [13.0, 2077.0], [13.1, 2078.0], [13.2, 2080.0], [13.3, 2081.0], [13.4, 2091.0], [13.5, 2096.0], [13.6, 2098.0], [13.7, 2103.0], [13.8, 2107.0], [13.9, 2113.0], [14.0, 2116.0], [14.1, 2122.0], [14.2, 2124.0], [14.3, 2128.0], [14.4, 2132.0], [14.5, 2138.0], [14.6, 2139.0], [14.7, 2140.0], [14.8, 2142.0], [14.9, 2144.0], [15.0, 2147.0], [15.1, 2152.0], [15.2, 2155.0], [15.3, 2158.0], [15.4, 2159.0], [15.5, 2160.0], [15.6, 2162.0], [15.7, 2170.0], [15.8, 2179.0], [15.9, 2183.0], [16.0, 2187.0], [16.1, 2193.0], [16.2, 2198.0], [16.3, 2204.0], [16.4, 2205.0], [16.5, 2208.0], [16.6, 2215.0], [16.7, 2221.0], [16.8, 2228.0], [16.9, 2230.0], [17.0, 2232.0], [17.1, 2239.0], [17.2, 2247.0], [17.3, 2248.0], [17.4, 2250.0], [17.5, 2253.0], [17.6, 2256.0], [17.7, 2260.0], [17.8, 2272.0], [17.9, 2273.0], [18.0, 2277.0], [18.1, 2278.0], [18.2, 2285.0], [18.3, 2290.0], [18.4, 2296.0], [18.5, 2300.0], [18.6, 2302.0], [18.7, 2310.0], [18.8, 2315.0], [18.9, 2316.0], [19.0, 2320.0], [19.1, 2324.0], [19.2, 2329.0], [19.3, 2332.0], [19.4, 2337.0], [19.5, 2338.0], [19.6, 2343.0], [19.7, 2346.0], [19.8, 2350.0], [19.9, 2352.0], [20.0, 2355.0], [20.1, 2360.0], [20.2, 2363.0], [20.3, 2365.0], [20.4, 2375.0], [20.5, 2378.0], [20.6, 2380.0], [20.7, 2381.0], [20.8, 2382.0], [20.9, 2390.0], [21.0, 2396.0], [21.1, 2399.0], [21.2, 2405.0], [21.3, 2412.0], [21.4, 2413.0], [21.5, 2419.0], [21.6, 2427.0], [21.7, 2437.0], [21.8, 2443.0], [21.9, 2444.0], [22.0, 2448.0], [22.1, 2450.0], [22.2, 2456.0], [22.3, 2460.0], [22.4, 2460.0], [22.5, 2471.0], [22.6, 2478.0], [22.7, 2486.0], [22.8, 2492.0], [22.9, 2500.0], [23.0, 2503.0], [23.1, 2507.0], [23.2, 2511.0], [23.3, 2520.0], [23.4, 2525.0], [23.5, 2526.0], [23.6, 2528.0], [23.7, 2530.0], [23.8, 2533.0], [23.9, 2540.0], [24.0, 2542.0], [24.1, 2552.0], [24.2, 2554.0], [24.3, 2555.0], [24.4, 2556.0], [24.5, 2564.0], [24.6, 2571.0], [24.7, 2572.0], [24.8, 2575.0], [24.9, 2577.0], [25.0, 2585.0], [25.1, 2592.0], [25.2, 2596.0], [25.3, 2599.0], [25.4, 2603.0], [25.5, 2607.0], [25.6, 2610.0], [25.7, 2617.0], [25.8, 2622.0], [25.9, 2630.0], [26.0, 2634.0], [26.1, 2637.0], [26.2, 2640.0], [26.3, 2642.0], [26.4, 2647.0], [26.5, 2658.0], [26.6, 2661.0], [26.7, 2662.0], [26.8, 2663.0], [26.9, 2666.0], [27.0, 2670.0], [27.1, 2672.0], [27.2, 2677.0], [27.3, 2680.0], [27.4, 2683.0], [27.5, 2686.0], [27.6, 2688.0], [27.7, 2689.0], [27.8, 2690.0], [27.9, 2691.0], [28.0, 2696.0], [28.1, 2699.0], [28.2, 2703.0], [28.3, 2708.0], [28.4, 2709.0], [28.5, 2712.0], [28.6, 2718.0], [28.7, 2721.0], [28.8, 2731.0], [28.9, 2734.0], [29.0, 2740.0], [29.1, 2743.0], [29.2, 2744.0], [29.3, 2748.0], [29.4, 2751.0], [29.5, 2753.0], [29.6, 2770.0], [29.7, 2779.0], [29.8, 2785.0], [29.9, 2788.0], [30.0, 2791.0], [30.1, 2796.0], [30.2, 2799.0], [30.3, 2803.0], [30.4, 2805.0], [30.5, 2812.0], [30.6, 2822.0], [30.7, 2824.0], [30.8, 2828.0], [30.9, 2831.0], [31.0, 2837.0], [31.1, 2843.0], [31.2, 2845.0], [31.3, 2849.0], [31.4, 2854.0], [31.5, 2858.0], [31.6, 2860.0], [31.7, 2861.0], [31.8, 2862.0], [31.9, 2864.0], [32.0, 2871.0], [32.1, 2872.0], [32.2, 2877.0], [32.3, 2881.0], [32.4, 2888.0], [32.5, 2893.0], [32.6, 2898.0], [32.7, 2909.0], [32.8, 2909.0], [32.9, 2911.0], [33.0, 2919.0], [33.1, 2925.0], [33.2, 2926.0], [33.3, 2928.0], [33.4, 2941.0], [33.5, 2951.0], [33.6, 2964.0], [33.7, 2969.0], [33.8, 2973.0], [33.9, 2981.0], [34.0, 2988.0], [34.1, 2991.0], [34.2, 3015.0], [34.3, 3016.0], [34.4, 3024.0], [34.5, 3044.0], [34.6, 3049.0], [34.7, 3052.0], [34.8, 3059.0], [34.9, 3067.0], [35.0, 3079.0], [35.1, 3081.0], [35.2, 3082.0], [35.3, 3084.0], [35.4, 3093.0], [35.5, 3095.0], [35.6, 3107.0], [35.7, 3112.0], [35.8, 3116.0], [35.9, 3121.0], [36.0, 3126.0], [36.1, 3134.0], [36.2, 3137.0], [36.3, 3139.0], [36.4, 3141.0], [36.5, 3152.0], [36.6, 3158.0], [36.7, 3163.0], [36.8, 3164.0], [36.9, 3165.0], [37.0, 3179.0], [37.1, 3184.0], [37.2, 3185.0], [37.3, 3193.0], [37.4, 3198.0], [37.5, 3201.0], [37.6, 3204.0], [37.7, 3211.0], [37.8, 3219.0], [37.9, 3232.0], [38.0, 3233.0], [38.1, 3238.0], [38.2, 3240.0], [38.3, 3245.0], [38.4, 3253.0], [38.5, 3259.0], [38.6, 3266.0], [38.7, 3268.0], [38.8, 3270.0], [38.9, 3273.0], [39.0, 3275.0], [39.1, 3277.0], [39.2, 3280.0], [39.3, 3282.0], [39.4, 3289.0], [39.5, 3293.0], [39.6, 3300.0], [39.7, 3301.0], [39.8, 3309.0], [39.9, 3313.0], [40.0, 3314.0], [40.1, 3322.0], [40.2, 3337.0], [40.3, 3348.0], [40.4, 3353.0], [40.5, 3354.0], [40.6, 3357.0], [40.7, 3358.0], [40.8, 3359.0], [40.9, 3363.0], [41.0, 3364.0], [41.1, 3374.0], [41.2, 3382.0], [41.3, 3384.0], [41.4, 3389.0], [41.5, 3395.0], [41.6, 3404.0], [41.7, 3409.0], [41.8, 3415.0], [41.9, 3418.0], [42.0, 3422.0], [42.1, 3427.0], [42.2, 3437.0], [42.3, 3439.0], [42.4, 3439.0], [42.5, 3443.0], [42.6, 3449.0], [42.7, 3451.0], [42.8, 3452.0], [42.9, 3454.0], [43.0, 3454.0], [43.1, 3456.0], [43.2, 3462.0], [43.3, 3469.0], [43.4, 3473.0], [43.5, 3474.0], [43.6, 3479.0], [43.7, 3480.0], [43.8, 3490.0], [43.9, 3491.0], [44.0, 3498.0], [44.1, 3502.0], [44.2, 3509.0], [44.3, 3512.0], [44.4, 3514.0], [44.5, 3529.0], [44.6, 3532.0], [44.7, 3542.0], [44.8, 3547.0], [44.9, 3555.0], [45.0, 3561.0], [45.1, 3567.0], [45.2, 3577.0], [45.3, 3588.0], [45.4, 3592.0], [45.5, 3595.0], [45.6, 3599.0], [45.7, 3602.0], [45.8, 3607.0], [45.9, 3610.0], [46.0, 3615.0], [46.1, 3621.0], [46.2, 3622.0], [46.3, 3631.0], [46.4, 3637.0], [46.5, 3648.0], [46.6, 3649.0], [46.7, 3653.0], [46.8, 3658.0], [46.9, 3661.0], [47.0, 3672.0], [47.1, 3673.0], [47.2, 3679.0], [47.3, 3681.0], [47.4, 3686.0], [47.5, 3694.0], [47.6, 3697.0], [47.7, 3700.0], [47.8, 3703.0], [47.9, 3707.0], [48.0, 3712.0], [48.1, 3713.0], [48.2, 3714.0], [48.3, 3718.0], [48.4, 3721.0], [48.5, 3724.0], [48.6, 3727.0], [48.7, 3728.0], [48.8, 3734.0], [48.9, 3741.0], [49.0, 3749.0], [49.1, 3752.0], [49.2, 3755.0], [49.3, 3762.0], [49.4, 3763.0], [49.5, 3771.0], [49.6, 3780.0], [49.7, 3784.0], [49.8, 3786.0], [49.9, 3793.0], [50.0, 3797.0], [50.1, 3799.0], [50.2, 3801.0], [50.3, 3804.0], [50.4, 3809.0], [50.5, 3814.0], [50.6, 3815.0], [50.7, 3819.0], [50.8, 3833.0], [50.9, 3839.0], [51.0, 3841.0], [51.1, 3847.0], [51.2, 3858.0], [51.3, 3862.0], [51.4, 3867.0], [51.5, 3868.0], [51.6, 3871.0], [51.7, 3873.0], [51.8, 3878.0], [51.9, 3881.0], [52.0, 3889.0], [52.1, 3891.0], [52.2, 3892.0], [52.3, 3900.0], [52.4, 3910.0], [52.5, 3912.0], [52.6, 3912.0], [52.7, 3920.0], [52.8, 3937.0], [52.9, 3940.0], [53.0, 3941.0], [53.1, 3947.0], [53.2, 3949.0], [53.3, 3960.0], [53.4, 3967.0], [53.5, 3977.0], [53.6, 3986.0], [53.7, 3989.0], [53.8, 3999.0], [53.9, 4006.0], [54.0, 4023.0], [54.1, 4031.0], [54.2, 4034.0], [54.3, 4041.0], [54.4, 4050.0], [54.5, 4051.0], [54.6, 4054.0], [54.7, 4055.0], [54.8, 4063.0], [54.9, 4069.0], [55.0, 4086.0], [55.1, 4093.0], [55.2, 4101.0], [55.3, 4111.0], [55.4, 4120.0], [55.5, 4130.0], [55.6, 4140.0], [55.7, 4144.0], [55.8, 4151.0], [55.9, 4153.0], [56.0, 4155.0], [56.1, 4158.0], [56.2, 4171.0], [56.3, 4173.0], [56.4, 4181.0], [56.5, 4185.0], [56.6, 4186.0], [56.7, 4193.0], [56.8, 4211.0], [56.9, 4214.0], [57.0, 4219.0], [57.1, 4227.0], [57.2, 4233.0], [57.3, 4238.0], [57.4, 4244.0], [57.5, 4252.0], [57.6, 4256.0], [57.7, 4258.0], [57.8, 4261.0], [57.9, 4265.0], [58.0, 4271.0], [58.1, 4274.0], [58.2, 4276.0], [58.3, 4280.0], [58.4, 4284.0], [58.5, 4286.0], [58.6, 4286.0], [58.7, 4288.0], [58.8, 4295.0], [58.9, 4296.0], [59.0, 4300.0], [59.1, 4307.0], [59.2, 4312.0], [59.3, 4314.0], [59.4, 4322.0], [59.5, 4330.0], [59.6, 4334.0], [59.7, 4340.0], [59.8, 4346.0], [59.9, 4349.0], [60.0, 4351.0], [60.1, 4353.0], [60.2, 4356.0], [60.3, 4360.0], [60.4, 4363.0], [60.5, 4368.0], [60.6, 4370.0], [60.7, 4371.0], [60.8, 4380.0], [60.9, 4397.0], [61.0, 4398.0], [61.1, 4399.0], [61.2, 4401.0], [61.3, 4407.0], [61.4, 4422.0], [61.5, 4433.0], [61.6, 4435.0], [61.7, 4439.0], [61.8, 4441.0], [61.9, 4447.0], [62.0, 4453.0], [62.1, 4458.0], [62.2, 4476.0], [62.3, 4479.0], [62.4, 4486.0], [62.5, 4489.0], [62.6, 4497.0], [62.7, 4499.0], [62.8, 4500.0], [62.9, 4503.0], [63.0, 4510.0], [63.1, 4511.0], [63.2, 4516.0], [63.3, 4530.0], [63.4, 4533.0], [63.5, 4536.0], [63.6, 4542.0], [63.7, 4547.0], [63.8, 4554.0], [63.9, 4557.0], [64.0, 4562.0], [64.1, 4564.0], [64.2, 4573.0], [64.3, 4579.0], [64.4, 4582.0], [64.5, 4588.0], [64.6, 4592.0], [64.7, 4612.0], [64.8, 4629.0], [64.9, 4636.0], [65.0, 4643.0], [65.1, 4658.0], [65.2, 4668.0], [65.3, 4686.0], [65.4, 4690.0], [65.5, 4703.0], [65.6, 4707.0], [65.7, 4714.0], [65.8, 4719.0], [65.9, 4724.0], [66.0, 4730.0], [66.1, 4733.0], [66.2, 4739.0], [66.3, 4742.0], [66.4, 4745.0], [66.5, 4751.0], [66.6, 4754.0], [66.7, 4757.0], [66.8, 4760.0], [66.9, 4765.0], [67.0, 4772.0], [67.1, 4783.0], [67.2, 4787.0], [67.3, 4796.0], [67.4, 4806.0], [67.5, 4810.0], [67.6, 4816.0], [67.7, 4825.0], [67.8, 4835.0], [67.9, 4843.0], [68.0, 4851.0], [68.1, 4853.0], [68.2, 4863.0], [68.3, 4865.0], [68.4, 4867.0], [68.5, 4870.0], [68.6, 4875.0], [68.7, 4880.0], [68.8, 4885.0], [68.9, 4889.0], [69.0, 4891.0], [69.1, 4897.0], [69.2, 4906.0], [69.3, 4912.0], [69.4, 4914.0], [69.5, 4921.0], [69.6, 4926.0], [69.7, 4931.0], [69.8, 4939.0], [69.9, 4950.0], [70.0, 4958.0], [70.1, 4966.0], [70.2, 4970.0], [70.3, 4977.0], [70.4, 4978.0], [70.5, 4986.0], [70.6, 4995.0], [70.7, 4999.0], [70.8, 5007.0], [70.9, 5012.0], [71.0, 5022.0], [71.1, 5028.0], [71.2, 5037.0], [71.3, 5046.0], [71.4, 5048.0], [71.5, 5052.0], [71.6, 5054.0], [71.7, 5066.0], [71.8, 5075.0], [71.9, 5083.0], [72.0, 5086.0], [72.1, 5089.0], [72.2, 5092.0], [72.3, 5096.0], [72.4, 5106.0], [72.5, 5116.0], [72.6, 5122.0], [72.7, 5123.0], [72.8, 5128.0], [72.9, 5128.0], [73.0, 5130.0], [73.1, 5136.0], [73.2, 5144.0], [73.3, 5145.0], [73.4, 5153.0], [73.5, 5162.0], [73.6, 5166.0], [73.7, 5169.0], [73.8, 5175.0], [73.9, 5187.0], [74.0, 5201.0], [74.1, 5203.0], [74.2, 5203.0], [74.3, 5210.0], [74.4, 5214.0], [74.5, 5228.0], [74.6, 5230.0], [74.7, 5236.0], [74.8, 5243.0], [74.9, 5249.0], [75.0, 5267.0], [75.1, 5271.0], [75.2, 5274.0], [75.3, 5278.0], [75.4, 5285.0], [75.5, 5287.0], [75.6, 5297.0], [75.7, 5302.0], [75.8, 5305.0], [75.9, 5329.0], [76.0, 5340.0], [76.1, 5345.0], [76.2, 5348.0], [76.3, 5350.0], [76.4, 5352.0], [76.5, 5356.0], [76.6, 5363.0], [76.7, 5374.0], [76.8, 5393.0], [76.9, 5398.0], [77.0, 5405.0], [77.1, 5409.0], [77.2, 5410.0], [77.3, 5420.0], [77.4, 5421.0], [77.5, 5423.0], [77.6, 5429.0], [77.7, 5430.0], [77.8, 5441.0], [77.9, 5446.0], [78.0, 5450.0], [78.1, 5454.0], [78.2, 5456.0], [78.3, 5459.0], [78.4, 5462.0], [78.5, 5465.0], [78.6, 5466.0], [78.7, 5471.0], [78.8, 5474.0], [78.9, 5479.0], [79.0, 5492.0], [79.1, 5498.0], [79.2, 5503.0], [79.3, 5505.0], [79.4, 5534.0], [79.5, 5546.0], [79.6, 5547.0], [79.7, 5555.0], [79.8, 5562.0], [79.9, 5567.0], [80.0, 5571.0], [80.1, 5580.0], [80.2, 5583.0], [80.3, 5585.0], [80.4, 5602.0], [80.5, 5611.0], [80.6, 5620.0], [80.7, 5630.0], [80.8, 5631.0], [80.9, 5635.0], [81.0, 5638.0], [81.1, 5642.0], [81.2, 5645.0], [81.3, 5648.0], [81.4, 5649.0], [81.5, 5650.0], [81.6, 5659.0], [81.7, 5664.0], [81.8, 5674.0], [81.9, 5676.0], [82.0, 5678.0], [82.1, 5680.0], [82.2, 5685.0], [82.3, 5691.0], [82.4, 5697.0], [82.5, 5708.0], [82.6, 5713.0], [82.7, 5719.0], [82.8, 5727.0], [82.9, 5732.0], [83.0, 5736.0], [83.1, 5742.0], [83.2, 5752.0], [83.3, 5764.0], [83.4, 5768.0], [83.5, 5774.0], [83.6, 5781.0], [83.7, 5786.0], [83.8, 5796.0], [83.9, 5803.0], [84.0, 5804.0], [84.1, 5815.0], [84.2, 5825.0], [84.3, 5830.0], [84.4, 5849.0], [84.5, 5855.0], [84.6, 5856.0], [84.7, 5856.0], [84.8, 5862.0], [84.9, 5868.0], [85.0, 5879.0], [85.1, 5882.0], [85.2, 5885.0], [85.3, 5890.0], [85.4, 5909.0], [85.5, 5912.0], [85.6, 5922.0], [85.7, 5934.0], [85.8, 5937.0], [85.9, 5942.0], [86.0, 5945.0], [86.1, 5950.0], [86.2, 5956.0], [86.3, 5967.0], [86.4, 5975.0], [86.5, 5980.0], [86.6, 5984.0], [86.7, 5989.0], [86.8, 5990.0], [86.9, 5991.0], [87.0, 5997.0], [87.1, 6013.0], [87.2, 6022.0], [87.3, 6033.0], [87.4, 6038.0], [87.5, 6043.0], [87.6, 6053.0], [87.7, 6056.0], [87.8, 6056.0], [87.9, 6069.0], [88.0, 6070.0], [88.1, 6077.0], [88.2, 6085.0], [88.3, 6095.0], [88.4, 6110.0], [88.5, 6117.0], [88.6, 6123.0], [88.7, 6137.0], [88.8, 6139.0], [88.9, 6143.0], [89.0, 6165.0], [89.1, 6174.0], [89.2, 6184.0], [89.3, 6191.0], [89.4, 6208.0], [89.5, 6217.0], [89.6, 6229.0], [89.7, 6233.0], [89.8, 6239.0], [89.9, 6241.0], [90.0, 6247.0], [90.1, 6250.0], [90.2, 6288.0], [90.3, 6293.0], [90.4, 6296.0], [90.5, 6306.0], [90.6, 6322.0], [90.7, 6346.0], [90.8, 6369.0], [90.9, 6390.0], [91.0, 6410.0], [91.1, 6425.0], [91.2, 6427.0], [91.3, 6443.0], [91.4, 6452.0], [91.5, 6463.0], [91.6, 6464.0], [91.7, 6474.0], [91.8, 6492.0], [91.9, 6505.0], [92.0, 6507.0], [92.1, 6524.0], [92.2, 6526.0], [92.3, 6539.0], [92.4, 6551.0], [92.5, 6564.0], [92.6, 6572.0], [92.7, 6574.0], [92.8, 6585.0], [92.9, 6589.0], [93.0, 6603.0], [93.1, 6624.0], [93.2, 6628.0], [93.3, 6644.0], [93.4, 6655.0], [93.5, 6672.0], [93.6, 6673.0], [93.7, 6683.0], [93.8, 6701.0], [93.9, 6709.0], [94.0, 6713.0], [94.1, 6720.0], [94.2, 6757.0], [94.3, 6761.0], [94.4, 6776.0], [94.5, 6784.0], [94.6, 6825.0], [94.7, 6829.0], [94.8, 6837.0], [94.9, 6841.0], [95.0, 6848.0], [95.1, 6849.0], [95.2, 6860.0], [95.3, 6862.0], [95.4, 6885.0], [95.5, 6891.0], [95.6, 6900.0], [95.7, 6908.0], [95.8, 6921.0], [95.9, 6933.0], [96.0, 6939.0], [96.1, 6945.0], [96.2, 6967.0], [96.3, 6968.0], [96.4, 6973.0], [96.5, 6976.0], [96.6, 6981.0], [96.7, 6986.0], [96.8, 6989.0], [96.9, 6999.0], [97.0, 7000.0], [97.1, 7007.0], [97.2, 7017.0], [97.3, 7028.0], [97.4, 7032.0], [97.5, 7045.0], [97.6, 7061.0], [97.7, 7075.0], [97.8, 7076.0], [97.9, 7104.0], [98.0, 7114.0], [98.1, 7118.0], [98.2, 7125.0], [98.3, 7138.0], [98.4, 7166.0], [98.5, 7217.0], [98.6, 7228.0], [98.7, 7229.0], [98.8, 7238.0], [98.9, 7248.0], [99.0, 7249.0], [99.1, 7252.0], [99.2, 7256.0], [99.3, 7269.0], [99.4, 7276.0], [99.5, 7306.0], [99.6, 7323.0], [99.7, 7337.0], [99.8, 7354.0], [99.9, 7439.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 110.0, "series": [{"data": [[0.0, 2.0], [600.0, 1.0], [700.0, 7.0], [1400.0, 1.0], [1600.0, 1.0], [1700.0, 9.0], [1800.0, 30.0], [1900.0, 110.0], [2000.0, 63.0], [2100.0, 51.0], [2200.0, 45.0], [2300.0, 53.0], [2400.0, 35.0], [2500.0, 49.0], [2600.0, 56.0], [2700.0, 42.0], [2800.0, 48.0], [2900.0, 30.0], [3000.0, 28.0], [3100.0, 39.0], [3200.0, 43.0], [3300.0, 39.0], [3400.0, 51.0], [3500.0, 31.0], [3600.0, 41.0], [3700.0, 49.0], [3800.0, 43.0], [3900.0, 31.0], [4000.0, 27.0], [4100.0, 31.0], [4200.0, 45.0], [4300.0, 44.0], [4400.0, 31.0], [4500.0, 38.0], [4600.0, 17.0], [4700.0, 37.0], [4800.0, 37.0], [4900.0, 31.0], [5000.0, 33.0], [5100.0, 32.0], [5200.0, 34.0], [5300.0, 25.0], [5400.0, 44.0], [5500.0, 24.0], [5600.0, 42.0], [5700.0, 29.0], [5800.0, 29.0], [5900.0, 34.0], [6000.0, 27.0], [6100.0, 20.0], [6200.0, 21.0], [6300.0, 10.0], [6400.0, 19.0], [6500.0, 21.0], [6600.0, 17.0], [6700.0, 15.0], [6800.0, 21.0], [6900.0, 28.0], [7000.0, 17.0], [7100.0, 13.0], [7200.0, 20.0], [7300.0, 8.0], [7400.0, 2.0], [100.0, 9.0], [200.0, 16.0], [300.0, 15.0], [400.0, 9.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1940.0, "series": [{"data": [[0.0, 51.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1940.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 444.68918918918956, "minX": 1.63090434E12, "maxY": 945.1249999999999, "series": [{"data": [[1.6309044E12, 464.45999999999975]], "isOverall": false, "label": "listHistoryByTime", "isController": false}, {"data": [[1.63090434E12, 945.1249999999999], [1.6309044E12, 444.68918918918956]], "isOverall": false, "label": "listHistory", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1147.5, "minX": 1.0, "maxY": 7492.0, "series": [{"data": [[2.0, 6569.0], [3.0, 6546.5], [5.0, 6174.5], [6.0, 6955.25], [7.0, 5768.0], [8.0, 6043.0], [9.0, 6993.5], [10.0, 7114.0], [11.0, 6420.333333333333], [12.0, 6081.0], [13.0, 5680.0], [14.0, 6519.5], [15.0, 6055.0], [16.0, 7003.4], [17.0, 6509.5], [18.0, 6636.0], [19.0, 6592.0], [20.0, 7061.0], [21.0, 6420.666666666667], [22.0, 6455.5], [23.0, 5922.0], [24.0, 7217.0], [25.0, 6360.333333333333], [26.0, 6448.0], [27.0, 6652.5], [28.0, 6606.5], [29.0, 6660.5], [30.0, 6571.5], [31.0, 7311.0], [33.0, 6138.25], [32.0, 7125.0], [35.0, 6488.5], [34.0, 6428.0], [37.0, 6636.0], [36.0, 6890.0], [39.0, 6291.5], [38.0, 6165.0], [41.0, 6447.0], [40.0, 6548.5], [43.0, 6084.0], [42.0, 6848.0], [45.0, 6254.5], [44.0, 6591.0], [47.0, 6429.0], [46.0, 6552.0], [49.0, 6510.5], [48.0, 6353.0], [51.0, 6431.0], [50.0, 6385.5], [52.0, 6118.0], [53.0, 5803.0], [55.0, 5810.0], [54.0, 5804.0], [57.0, 5786.0], [56.0, 5879.0], [59.0, 6267.5], [58.0, 6860.571428571428], [61.0, 6390.0], [60.0, 6431.0], [63.0, 6355.666666666667], [62.0, 5764.0], [67.0, 7045.0], [66.0, 6442.0], [65.0, 6359.0], [64.0, 6360.5], [71.0, 6127.666666666667], [70.0, 6837.0], [69.0, 6269.0], [68.0, 6048.0], [75.0, 6334.0], [74.0, 6308.5], [73.0, 6407.0], [72.0, 6227.5], [79.0, 7076.0], [78.0, 6183.5], [77.0, 6315.0], [76.0, 6325.0], [83.0, 6301.5], [82.0, 6079.333333333333], [81.0, 6976.0], [80.0, 6125.0], [87.0, 6249.0], [86.0, 6031.0], [85.0, 6701.0], [84.0, 6214.5], [91.0, 6999.0], [90.0, 6278.0], [89.0, 6234.5], [88.0, 6275.0], [95.0, 3072.0], [94.0, 6287.0], [93.0, 6147.0], [92.0, 5976.666666666667], [99.0, 6065.0], [98.0, 6261.0], [97.0, 5979.0], [96.0, 6971.0], [103.0, 6190.5], [102.0, 5920.0], [101.0, 6924.5], [100.0, 5141.0], [107.0, 6761.0], [106.0, 5872.5], [105.0, 5977.0], [104.0, 6005.0], [111.0, 5922.5], [110.0, 6121.0], [109.0, 5994.5], [108.0, 5781.333333333333], [115.0, 6111.5], [114.0, 6083.0], [113.0, 5623.666666666667], [112.0, 6573.0], [119.0, 5998.5], [118.0, 6086.0], [117.0, 6173.0], [116.0, 5964.0], [123.0, 6038.5], [122.0, 5720.0], [121.0, 6894.0], [120.0, 6051.0], [127.0, 6759.0], [126.0, 6215.333333333333], [124.0, 6860.0], [125.0, 5334.5], [135.0, 6024.5], [134.0, 5979.0], [133.0, 5501.666666666667], [132.0, 6801.0], [131.0, 5865.5], [130.0, 5670.0], [129.0, 5832.0], [128.0, 5766.0], [143.0, 6655.0], [142.0, 5882.0], [141.0, 5901.0], [140.0, 5803.5], [139.0, 5909.0], [138.0, 6169.333333333333], [136.0, 5755.5], [137.0, 5214.0], [151.0, 5585.0], [150.0, 5703.0], [149.0, 6293.0], [148.0, 5916.5], [147.0, 5673.0], [146.0, 5863.0], [145.0, 5920.5], [144.0, 5585.666666666667], [159.0, 2102.833333333333], [158.0, 3971.0], [157.0, 5806.0], [156.0, 5876.0], [155.0, 5711.0], [154.0, 6027.333333333333], [152.0, 5918.5], [153.0, 5203.0], [167.0, 6063.8], [163.0, 5868.0], [162.0, 5644.0], [161.0, 3255.0], [160.0, 2965.25], [166.0, 4708.0], [165.0, 4697.5], [174.0, 5826.0], [172.0, 6492.0], [171.0, 4672.0], [169.0, 5914.0], [168.0, 5733.5], [175.0, 5075.0], [173.0, 4936.5], [183.0, 5669.0], [182.0, 5240.0], [181.0, 6574.0], [180.0, 5760.5], [179.0, 5811.666666666667], [177.0, 5854.8], [178.0, 5079.0], [191.0, 6347.5], [189.0, 6240.0], [188.0, 5277.666666666667], [187.0, 6504.5], [185.0, 6543.0], [184.0, 5693.5], [190.0, 4595.5], [186.0, 4908.0], [199.0, 5246.5], [198.0, 6465.0], [197.0, 6230.5], [193.0, 5565.0], [192.0, 5035.0], [196.0, 4919.5], [194.0, 4516.0], [207.0, 5494.0], [206.0, 5280.0], [205.0, 5776.333333333333], [203.0, 5298.5], [202.0, 5640.0], [201.0, 5360.333333333333], [200.0, 6185.0], [204.0, 4999.0], [215.0, 5466.5], [214.0, 5369.25], [212.0, 5642.0], [211.0, 5108.333333333333], [210.0, 5981.0], [209.0, 5434.0], [208.0, 5264.5], [223.0, 5095.5], [222.0, 5214.0], [221.0, 4902.0], [220.0, 6042.0], [219.0, 5659.333333333333], [217.0, 5575.75], [218.0, 4816.0], [231.0, 5174.0], [230.0, 5124.5], [229.0, 5118.5], [228.0, 5216.5], [226.0, 5283.5], [225.0, 5305.5], [239.0, 5356.5], [238.0, 5082.0], [237.0, 5063.5], [236.0, 5307.0], [235.0, 5602.5], [234.0, 5092.333333333333], [233.0, 5917.0], [232.0, 5356.5], [247.0, 6120.5], [245.0, 3023.5], [244.0, 5594.0], [242.0, 4943.0], [241.0, 6138.0], [240.0, 5465.5], [243.0, 2315.5], [246.0, 4735.5], [255.0, 4839.0], [254.0, 6193.0], [253.0, 4673.666666666667], [252.0, 1458.0], [251.0, 2277.6], [250.0, 1952.6666666666665], [249.0, 2748.75], [248.0, 3693.75], [270.0, 5645.0], [271.0, 4759.666666666667], [269.0, 5284.5], [268.0, 5160.0], [267.0, 5083.5], [266.0, 5219.0], [265.0, 4862.333333333333], [264.0, 5742.0], [263.0, 5210.5], [257.0, 5466.333333333333], [256.0, 4110.0], [259.0, 4705.0], [258.0, 5825.0], [262.0, 5487.333333333333], [260.0, 5147.0], [261.0, 4386.0], [286.0, 4642.333333333333], [287.0, 5099.0], [285.0, 5956.0], [284.0, 4918.5], [283.0, 4812.666666666667], [282.0, 5149.0], [281.0, 5659.0], [280.0, 5258.666666666667], [278.0, 4984.5], [279.0, 4542.0], [273.0, 5674.0], [272.0, 5242.0], [275.0, 5633.0], [274.0, 4699.333333333333], [277.0, 5118.5], [276.0, 5038.333333333333], [302.0, 4742.5], [303.0, 5658.0], [301.0, 4979.5], [300.0, 4956.0], [299.0, 5003.5], [298.0, 4796.666666666667], [297.0, 5868.0], [296.0, 5151.0], [295.0, 4965.5], [289.0, 4787.0], [288.0, 4758.0], [291.0, 5936.0], [290.0, 5077.5], [294.0, 5503.333333333333], [292.0, 4693.0], [293.0, 4029.0], [318.0, 5115.666666666667], [316.0, 4566.0], [317.0, 4322.0], [307.0, 4847.0], [306.0, 4487.333333333333], [305.0, 5638.0], [304.0, 4608.333333333333], [315.0, 4650.0], [314.0, 4858.5], [313.0, 5036.5], [312.0, 4619.6], [319.0, 4353.0], [310.0, 5774.0], [309.0, 4881.5], [308.0, 4924.5], [334.0, 4672.5], [335.0, 4547.5], [333.0, 4856.0], [332.0, 5079.5], [331.0, 4446.333333333333], [330.0, 5513.0], [328.0, 4708.0], [329.0, 3986.0], [327.0, 4255.75], [321.0, 4407.666666666667], [320.0, 5662.0], [323.0, 4603.0], [322.0, 5776.0], [326.0, 5680.0], [325.0, 5586.0], [324.0, 3966.5], [350.0, 4359.666666666667], [351.0, 4503.0], [349.0, 5481.5], [348.0, 3674.0], [339.0, 4788.5], [338.0, 4389.333333333333], [337.0, 5713.0], [336.0, 4680.0], [347.0, 5346.0], [346.0, 4706.0], [345.0, 4705.0], [344.0, 4725.5], [343.0, 4505.5], [342.0, 4775.0], [341.0, 4152.0], [340.0, 5288.0], [355.0, 5547.0], [367.0, 4377.833333333334], [364.0, 4821.5], [363.0, 4541.0], [362.0, 4833.0], [360.0, 5377.0], [361.0, 3513.5], [359.0, 4328.0], [358.0, 4698.666666666667], [356.0, 4223.333333333333], [357.0, 4032.0], [354.0, 4363.0], [353.0, 5238.0], [352.0, 5676.0], [382.0, 4272.0], [383.0, 4309.0], [381.0, 4045.0], [380.0, 5458.0], [379.0, 4840.0], [378.0, 3943.5], [377.0, 5096.0], [376.0, 4194.333333333333], [375.0, 5471.0], [369.0, 4505.0], [368.0, 4331.0], [371.0, 4337.5], [370.0, 4428.5], [374.0, 4665.5], [373.0, 4419.0], [372.0, 5446.0], [398.0, 1772.5], [399.0, 1964.3333333333335], [397.0, 2861.3333333333335], [396.0, 2963.6666666666665], [395.0, 4633.5], [394.0, 2893.2], [392.0, 2783.0], [393.0, 1947.25], [391.0, 3045.6666666666665], [385.0, 5153.0], [384.0, 2955.3333333333335], [387.0, 2982.3333333333335], [386.0, 2599.2], [390.0, 3240.75], [389.0, 1932.6666666666665], [388.0, 1939.2], [414.0, 4116.0], [415.0, 5187.0], [413.0, 4319.0], [412.0, 4511.666666666667], [410.0, 3999.0], [411.0, 3473.0], [409.0, 5285.0], [408.0, 4115.333333333333], [407.0, 5356.0], [401.0, 5307.5], [400.0, 3529.5], [403.0, 4592.5], [402.0, 3985.0], [406.0, 3770.5], [405.0, 4995.0], [404.0, 4898.0], [430.0, 4129.0], [431.0, 4172.5], [429.0, 3925.3333333333335], [428.0, 4818.0], [427.0, 4193.5], [426.0, 4098.666666666667], [425.0, 4281.0], [424.0, 5123.0], [423.0, 4255.0], [417.0, 4272.5], [416.0, 4056.6666666666665], [419.0, 4100.5], [418.0, 5130.0], [422.0, 4064.0], [421.0, 4280.5], [420.0, 3968.3333333333335], [447.0, 3639.3333333333335], [446.0, 4743.0], [445.0, 3139.0], [444.0, 3842.0], [435.0, 4853.0], [434.0, 3951.0], [433.0, 4192.5], [432.0, 3997.0], [443.0, 4105.5], [442.0, 4056.0], [441.0, 5106.0], [440.0, 4272.5], [439.0, 4313.5], [438.0, 3724.0], [437.0, 4664.0], [436.0, 3991.0], [462.0, 4547.0], [463.0, 3823.0], [461.0, 4104.0], [460.0, 3011.0], [451.0, 4081.0], [450.0, 3982.5], [449.0, 4217.0], [448.0, 4053.5], [459.0, 4536.0], [458.0, 4067.5], [457.0, 4183.5], [456.0, 3942.3333333333335], [455.0, 4581.0], [454.0, 4190.5], [453.0, 4243.0], [452.0, 4146.0], [479.0, 4507.0], [476.0, 4476.0], [478.0, 3709.0], [475.0, 4016.75], [474.0, 4489.0], [473.0, 4950.0], [472.0, 4281.333333333333], [470.0, 3595.6666666666665], [469.0, 4749.5], [468.0, 3411.5], [467.0, 4875.0], [466.0, 4175.0], [465.0, 3968.3333333333335], [464.0, 4632.0], [471.0, 3513.0], [494.0, 3812.5], [495.0, 4704.0], [493.0, 3750.75], [492.0, 4380.0], [491.0, 4558.0], [490.0, 3775.75], [489.0, 4764.0], [488.0, 3108.0], [487.0, 3860.3333333333335], [480.0, 4877.0], [482.0, 3835.5], [483.0, 3460.0], [481.0, 3705.6666666666665], [486.0, 4787.0], [485.0, 4077.5], [484.0, 4332.666666666667], [510.0, 3364.5], [511.0, 3929.5], [509.0, 4690.0], [508.0, 4314.0], [507.0, 3512.0], [506.0, 3893.0], [505.0, 3481.0], [504.0, 3686.0], [503.0, 3606.5], [497.0, 4786.0], [496.0, 3608.6666666666665], [499.0, 4371.0], [498.0, 3548.3333333333335], [502.0, 4004.0], [501.0, 3787.0], [500.0, 3841.6666666666665], [538.0, 4214.0], [542.0, 3522.5], [543.0, 3820.0], [530.0, 3282.0], [529.0, 3300.0], [532.0, 3686.0], [531.0, 4125.6], [541.0, 3744.5], [540.0, 3461.0], [539.0, 3220.25], [537.0, 4148.5], [536.0, 2577.0], [519.0, 3499.0], [518.0, 3692.5], [517.0, 3799.0], [516.0, 4185.666666666667], [514.0, 4356.0], [515.0, 3243.0], [513.0, 4050.0], [512.0, 3312.0], [527.0, 4334.0], [526.0, 4450.0], [525.0, 3027.5], [523.0, 3539.0], [522.0, 3414.0], [521.0, 4003.4], [535.0, 3628.0], [533.0, 4573.0], [569.0, 3588.0], [574.0, 3468.0], [575.0, 4111.0], [561.0, 3766.0], [560.0, 3713.5], [563.0, 4086.0], [562.0, 3221.5], [565.0, 4120.0], [564.0, 3225.6666666666665], [573.0, 3638.5], [572.0, 3013.3333333333335], [571.0, 4238.0], [570.0, 3121.0], [568.0, 3364.3333333333335], [551.0, 3353.0], [550.0, 3646.5], [549.0, 3607.0], [548.0, 3788.5], [547.0, 3736.5], [546.0, 3703.0], [545.0, 3442.0], [544.0, 4497.0], [559.0, 3508.0], [558.0, 3812.5], [557.0, 3601.0], [556.0, 3236.3333333333335], [555.0, 4478.666666666667], [552.0, 3783.6666666666665], [554.0, 2830.0], [567.0, 4441.0], [566.0, 3258.0], [601.0, 3543.5], [606.0, 3080.6666666666665], [607.0, 3867.0], [593.0, 3098.0], [592.0, 4210.0], [595.0, 3336.0], [594.0, 3731.0], [597.0, 3082.5], [596.0, 3237.5], [605.0, 3801.0], [604.0, 3653.6666666666665], [602.0, 3351.5], [603.0, 2861.0], [600.0, 3595.0], [583.0, 3948.75], [582.0, 3705.3333333333335], [581.0, 2911.0], [580.0, 3195.0], [577.0, 3339.0], [578.0, 2934.0], [576.0, 3286.0], [591.0, 3218.75], [590.0, 3999.0], [589.0, 3892.0], [588.0, 3357.3333333333335], [587.0, 4349.0], [585.0, 3889.0], [584.0, 2262.0], [586.0, 2323.5], [599.0, 3391.5], [598.0, 3557.0], [634.0, 3147.5], [638.0, 3180.5], [639.0, 3091.5], [625.0, 3193.3333333333335], [624.0, 4041.0], [629.0, 3295.2], [627.0, 2788.0], [626.0, 3364.0], [637.0, 3357.0], [636.0, 3041.5], [635.0, 3325.0], [633.0, 3344.0], [632.0, 2416.0], [615.0, 3341.0], [614.0, 3495.6666666666665], [613.0, 2785.0], [612.0, 3125.6666666666665], [611.0, 3763.0], [610.0, 2758.0], [609.0, 3737.0], [608.0, 4121.0], [623.0, 3203.0], [622.0, 3606.3333333333335], [621.0, 2805.0], [620.0, 3220.25], [618.0, 3448.5], [617.0, 3487.0], [616.0, 3286.5], [631.0, 3752.0], [630.0, 3261.5], [668.0, 3100.5], [671.0, 3105.5], [657.0, 2960.6666666666665], [656.0, 3891.0], [659.0, 2849.6666666666665], [658.0, 3632.0], [661.0, 2858.0], [660.0, 3940.0], [670.0, 2979.0], [669.0, 2946.5], [667.0, 2619.0], [666.0, 3895.0], [665.0, 3511.0], [664.0, 2849.5], [655.0, 3065.0], [640.0, 3104.5], [642.0, 3565.0], [641.0, 3318.5], [644.0, 3167.0], [643.0, 3077.3333333333335], [647.0, 3304.5], [646.0, 3110.25], [654.0, 2858.0], [653.0, 3236.5], [652.0, 3009.5], [651.0, 3018.5], [650.0, 2756.0], [649.0, 4005.0], [648.0, 3130.5], [663.0, 2868.6666666666665], [662.0, 3577.0], [697.0, 3309.0], [701.0, 2616.5], [703.0, 3170.6666666666665], [702.0, 2539.0], [689.0, 3509.0], [688.0, 2771.0], [691.0, 3207.0], [690.0, 2798.6666666666665], [693.0, 3439.0], [692.0, 3727.0], [700.0, 3258.0], [699.0, 3415.0], [698.0, 3679.0], [696.0, 2665.8333333333335], [679.0, 2840.6666666666665], [678.0, 3771.0], [677.0, 3101.25], [675.0, 3045.6666666666665], [674.0, 2361.3333333333335], [673.0, 3480.0], [672.0, 3872.0], [687.0, 3757.5], [685.0, 3088.5], [686.0, 2447.75], [684.0, 3441.0], [683.0, 3451.0], [682.0, 3448.5], [680.0, 2892.0], [681.0, 1998.0], [695.0, 3385.0], [694.0, 3469.0], [729.0, 2806.5], [733.0, 2565.3333333333335], [734.0, 2756.0], [720.0, 1591.0], [735.0, 2240.0], [722.0, 1812.25], [721.0, 2608.25], [724.0, 3041.5], [725.0, 1147.5], [723.0, 2854.5], [732.0, 3437.0], [731.0, 2587.3333333333335], [730.0, 3547.0], [728.0, 2705.5], [711.0, 3171.0], [709.0, 2909.6666666666665], [710.0, 2291.0], [708.0, 3350.0], [706.0, 3592.0], [707.0, 2401.5], [705.0, 2751.3333333333335], [704.0, 3595.0], [719.0, 2736.0], [718.0, 3620.0], [717.0, 2593.5], [716.0, 3153.0], [715.0, 2811.0], [714.0, 3348.0], [713.0, 2788.5], [712.0, 2857.5], [727.0, 2823.0], [726.0, 2444.25], [764.0, 2671.5], [767.0, 2565.0], [753.0, 3095.0], [752.0, 2767.0], [755.0, 2378.4], [754.0, 3409.0], [757.0, 2371.6666666666665], [756.0, 3361.0], [766.0, 3277.0], [765.0, 2577.5], [763.0, 2595.5], [762.0, 2473.6666666666665], [761.0, 2928.0], [760.0, 2694.0], [751.0, 3067.0], [737.0, 2709.5], [736.0, 2916.3333333333335], [739.0, 2604.6666666666665], [738.0, 3530.0], [742.0, 2776.0], [741.0, 2215.0], [743.0, 2156.0], [740.0, 2846.0], [750.0, 2773.0], [749.0, 3019.8], [748.0, 2139.0], [747.0, 2232.0], [746.0, 2436.0], [745.0, 2670.5], [744.0, 2902.3333333333335], [759.0, 2422.0], [758.0, 3116.0], [793.0, 2860.0], [797.0, 2501.5], [799.0, 2705.5], [798.0, 1991.0], [785.0, 2904.0], [784.0, 2251.5], [787.0, 2952.0], [786.0, 2457.3333333333335], [789.0, 3219.0], [788.0, 2741.0], [796.0, 2592.5], [795.0, 3180.0], [794.0, 2791.0], [792.0, 2497.5], [775.0, 2459.0], [774.0, 2521.0], [773.0, 2825.0], [771.0, 2427.0], [772.0, 1954.0], [770.0, 2663.0], [769.0, 2354.3333333333335], [768.0, 3056.0], [783.0, 2456.0], [782.0, 2712.0], [781.0, 2228.0], [780.0, 2468.5], [779.0, 2391.5], [778.0, 2278.0], [777.0, 3289.0], [776.0, 2673.5], [791.0, 2553.0], [790.0, 2273.0], [824.0, 2803.0], [828.0, 2644.0], [831.0, 2861.0], [819.0, 2201.6], [818.0, 2621.25], [821.0, 2909.0], [820.0, 2732.0], [830.0, 2203.4], [829.0, 2555.0], [827.0, 2858.0], [826.0, 2336.3333333333335], [825.0, 2244.6666666666665], [815.0, 2488.0], [801.0, 2569.5], [800.0, 2201.1666666666665], [803.0, 2542.0], [802.0, 2568.0], [805.0, 2340.0], [804.0, 2358.5], [807.0, 2536.5], [806.0, 2431.0], [814.0, 2617.0], [813.0, 2462.0], [812.0, 2554.5], [811.0, 2234.25], [810.0, 3015.0], [809.0, 2792.0], [808.0, 1951.0], [823.0, 2384.3333333333335], [822.0, 2496.5], [860.0, 2707.0], [863.0, 2788.0], [848.0, 2663.0], [851.0, 2854.0], [850.0, 2119.0], [849.0, 2306.3333333333335], [853.0, 2610.0], [852.0, 2231.75], [862.0, 2798.0], [861.0, 2010.75], [859.0, 2405.0], [858.0, 2163.6666666666665], [857.0, 2375.0], [856.0, 2327.0], [847.0, 2185.5], [833.0, 2520.0], [832.0, 2729.0], [835.0, 2712.0], [834.0, 2526.0], [837.0, 2743.0], [836.0, 2744.0], [839.0, 2690.0], [838.0, 2926.0], [846.0, 2596.75], [843.0, 2689.0], [845.0, 2162.0], [844.0, 2153.0], [842.0, 2132.9], [841.0, 2696.0], [840.0, 2175.75], [855.0, 2109.0], [854.0, 2827.0], [892.0, 2128.5], [895.0, 2087.5], [880.0, 2167.5], [883.0, 2410.5], [882.0, 1992.0], [881.0, 2718.0], [885.0, 2039.0], [884.0, 2337.0], [894.0, 2154.5], [893.0, 2097.0], [891.0, 2658.0], [890.0, 2297.5], [889.0, 2076.5], [888.0, 2122.5], [879.0, 2213.0], [865.0, 2242.5], [864.0, 2020.5], [867.0, 2564.0], [866.0, 2298.5], [869.0, 2670.0], [868.0, 2031.6666666666667], [871.0, 2145.5], [870.0, 2094.3333333333335], [878.0, 2197.6666666666665], [877.0, 2302.0], [876.0, 2223.75], [874.0, 2161.3333333333335], [873.0, 2528.0], [872.0, 2141.0], [887.0, 2189.3333333333335], [886.0, 2458.0], [924.0, 2233.0], [915.0, 2040.8], [927.0, 2251.75], [925.0, 1956.5], [912.0, 2507.0], [921.0, 2044.0], [923.0, 2024.0], [922.0, 1915.0], [920.0, 2278.0], [911.0, 2081.5], [897.0, 2190.5], [896.0, 2087.3333333333335], [899.0, 2146.5], [898.0, 2284.0], [903.0, 2458.5], [902.0, 1962.0], [901.0, 2184.75], [910.0, 2525.0], [909.0, 2316.0], [908.0, 2029.0], [907.0, 2118.0], [906.0, 2554.0], [905.0, 2460.0], [904.0, 2072.3333333333335], [919.0, 2229.5], [918.0, 2212.0], [916.0, 2102.5], [914.0, 2503.0], [913.0, 2315.0], [952.0, 2078.5], [956.0, 2041.0], [959.0, 2172.3333333333335], [944.0, 2345.0], [946.0, 2142.0], [945.0, 2140.0], [955.0, 2049.0], [954.0, 2272.0], [953.0, 2277.0], [943.0, 2343.0], [929.0, 2443.0], [928.0, 2067.75], [931.0, 2100.3333333333335], [930.0, 2192.5], [934.0, 2093.75], [932.0, 2072.5], [942.0, 2160.0], [941.0, 2145.6666666666665], [940.0, 1939.0], [939.0, 2090.6666666666665], [938.0, 2181.0], [937.0, 2109.0], [936.0, 1964.5], [950.0, 1853.0], [949.0, 2096.0], [948.0, 2338.0], [947.0, 2138.0], [990.0, 1769.0], [991.0, 1721.0], [977.0, 2113.0], [976.0, 1882.0], [989.0, 1976.5], [987.0, 1757.0], [986.0, 1737.0], [985.0, 1796.0], [984.0, 1758.0], [967.0, 2026.6666666666667], [964.0, 1966.0], [963.0, 2177.0], [962.0, 2054.5], [960.0, 2001.0], [975.0, 1882.0], [974.0, 1890.0], [972.0, 1915.5], [970.0, 2024.0], [983.0, 1991.0], [982.0, 2006.0], [979.0, 2107.0], [978.0, 1887.0], [1000.0, 1817.4444444444443], [1.0, 7492.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[482.5990000000001, 3949.223999999998]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 783.9666666666667, "minX": 1.63090434E12, "maxY": 108228.36666666667, "series": [{"data": [[1.63090434E12, 6567.366666666667], [1.6309044E12, 108228.36666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63090434E12, 783.9666666666667], [1.6309044E12, 14347.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2166.8571428571418, "minX": 1.63090434E12, "maxY": 4054.957627118646, "series": [{"data": [[1.63090434E12, 2166.8571428571418], [1.6309044E12, 4054.957627118646]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2140.098214285714, "minX": 1.63090434E12, "maxY": 4053.680084745769, "series": [{"data": [[1.63090434E12, 2140.098214285714], [1.6309044E12, 4053.680084745769]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1475.3124999999998, "minX": 1.63090434E12, "maxY": 1496.1726694915244, "series": [{"data": [[1.63090434E12, 1475.3124999999998], [1.6309044E12, 1496.1726694915244]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 91.0, "minX": 1.63090434E12, "maxY": 7492.0, "series": [{"data": [[1.63090434E12, 2661.0], [1.6309044E12, 7492.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63090434E12, 2502.1], [1.6309044E12, 6315.700000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63090434E12, 2660.61], [1.6309044E12, 7251.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63090434E12, 2552.7], [1.6309044E12, 6861.55]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63090434E12, 1696.0], [1.6309044E12, 91.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63090434E12, 2173.5], [1.6309044E12, 3929.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 380.0, "minX": 57.0, "maxY": 6914.0, "series": [{"data": [[158.0, 4919.0], [165.0, 3889.0], [172.0, 4887.0], [169.0, 6914.0], [176.0, 2909.0], [186.0, 3891.5], [187.0, 5937.0], [194.0, 3128.0], [57.0, 380.0], [235.0, 2215.0], [91.0, 1930.0], [98.0, 5766.0], [112.0, 2173.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 235.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 380.0, "minX": 57.0, "maxY": 6914.0, "series": [{"data": [[158.0, 4912.5], [165.0, 3889.0], [172.0, 4886.5], [169.0, 6914.0], [176.0, 2909.0], [186.0, 3891.5], [187.0, 5937.0], [194.0, 3121.5], [57.0, 380.0], [235.0, 2215.0], [91.0, 1930.0], [98.0, 5761.5], [112.0, 2164.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 235.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.63090434E12, "maxY": 16.666666666666668, "series": [{"data": [[1.63090434E12, 16.666666666666668], [1.6309044E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.8666666666666667, "minX": 1.63090434E12, "maxY": 31.466666666666665, "series": [{"data": [[1.63090434E12, 1.8666666666666667], [1.6309044E12, 31.466666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309044E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.8666666666666667, "minX": 1.63090434E12, "maxY": 31.466666666666665, "series": [{"data": [[1.63090434E12, 1.8666666666666667], [1.6309044E12, 31.466666666666665]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.8666666666666667, "minX": 1.63090434E12, "maxY": 31.466666666666665, "series": [{"data": [[1.63090434E12, 1.8666666666666667], [1.6309044E12, 31.466666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309044E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

