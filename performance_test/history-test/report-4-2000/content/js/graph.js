/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 530.0, "minX": 0.0, "maxY": 26588.0, "series": [{"data": [[0.0, 530.0], [0.1, 532.0], [0.2, 533.0], [0.3, 535.0], [0.4, 1136.0], [0.5, 1242.0], [0.6, 1257.0], [0.7, 1269.0], [0.8, 1279.0], [0.9, 1286.0], [1.0, 1293.0], [1.1, 2126.0], [1.2, 2127.0], [1.3, 2129.0], [1.4, 2148.0], [1.5, 2157.0], [1.6, 3476.0], [1.7, 5370.0], [1.8, 5378.0], [1.9, 5387.0], [2.0, 5395.0], [2.1, 5400.0], [2.2, 5403.0], [2.3, 5406.0], [2.4, 5413.0], [2.5, 5417.0], [2.6, 5418.0], [2.7, 5422.0], [2.8, 5426.0], [2.9, 5434.0], [3.0, 5448.0], [3.1, 5454.0], [3.2, 5460.0], [3.3, 5467.0], [3.4, 5479.0], [3.5, 5493.0], [3.6, 5503.0], [3.7, 5509.0], [3.8, 5513.0], [3.9, 5523.0], [4.0, 5531.0], [4.1, 5547.0], [4.2, 5558.0], [4.3, 5566.0], [4.4, 5571.0], [4.5, 5583.0], [4.6, 5588.0], [4.7, 5600.0], [4.8, 5617.0], [4.9, 5640.0], [5.0, 5660.0], [5.1, 5688.0], [5.2, 5711.0], [5.3, 5750.0], [5.4, 5763.0], [5.5, 5775.0], [5.6, 5786.0], [5.7, 5815.0], [5.8, 5821.0], [5.9, 5841.0], [6.0, 5863.0], [6.1, 5891.0], [6.2, 5908.0], [6.3, 5918.0], [6.4, 5923.0], [6.5, 5942.0], [6.6, 5954.0], [6.7, 5967.0], [6.8, 5991.0], [6.9, 6006.0], [7.0, 6013.0], [7.1, 6038.0], [7.2, 6079.0], [7.3, 6108.0], [7.4, 6116.0], [7.5, 6129.0], [7.6, 6140.0], [7.7, 6158.0], [7.8, 6176.0], [7.9, 6192.0], [8.0, 6222.0], [8.1, 6257.0], [8.2, 6283.0], [8.3, 6293.0], [8.4, 6300.0], [8.5, 6309.0], [8.6, 6314.0], [8.7, 6328.0], [8.8, 6344.0], [8.9, 6356.0], [9.0, 6371.0], [9.1, 6377.0], [9.2, 6386.0], [9.3, 6387.0], [9.4, 6391.0], [9.5, 6401.0], [9.6, 6405.0], [9.7, 6409.0], [9.8, 6432.0], [9.9, 6450.0], [10.0, 6502.0], [10.1, 6535.0], [10.2, 6551.0], [10.3, 6561.0], [10.4, 6567.0], [10.5, 6599.0], [10.6, 6607.0], [10.7, 6624.0], [10.8, 6645.0], [10.9, 6653.0], [11.0, 6658.0], [11.1, 6662.0], [11.2, 6668.0], [11.3, 6678.0], [11.4, 6683.0], [11.5, 6689.0], [11.6, 6694.0], [11.7, 6698.0], [11.8, 6704.0], [11.9, 6708.0], [12.0, 6712.0], [12.1, 6714.0], [12.2, 6718.0], [12.3, 6722.0], [12.4, 6736.0], [12.5, 6742.0], [12.6, 6743.0], [12.7, 6751.0], [12.8, 6754.0], [12.9, 6757.0], [13.0, 6762.0], [13.1, 6763.0], [13.2, 6768.0], [13.3, 6769.0], [13.4, 6772.0], [13.5, 6773.0], [13.6, 6774.0], [13.7, 6774.0], [13.8, 6777.0], [13.9, 6783.0], [14.0, 6789.0], [14.1, 6792.0], [14.2, 6797.0], [14.3, 6803.0], [14.4, 6806.0], [14.5, 6818.0], [14.6, 6822.0], [14.7, 6826.0], [14.8, 6830.0], [14.9, 6836.0], [15.0, 6840.0], [15.1, 6849.0], [15.2, 6859.0], [15.3, 6870.0], [15.4, 6876.0], [15.5, 6883.0], [15.6, 6887.0], [15.7, 6894.0], [15.8, 6897.0], [15.9, 6899.0], [16.0, 6918.0], [16.1, 6921.0], [16.2, 6936.0], [16.3, 6938.0], [16.4, 6945.0], [16.5, 6952.0], [16.6, 6958.0], [16.7, 6960.0], [16.8, 6965.0], [16.9, 6971.0], [17.0, 6977.0], [17.1, 6980.0], [17.2, 6988.0], [17.3, 6992.0], [17.4, 6999.0], [17.5, 7005.0], [17.6, 7013.0], [17.7, 7020.0], [17.8, 7035.0], [17.9, 7048.0], [18.0, 7061.0], [18.1, 7079.0], [18.2, 7096.0], [18.3, 7116.0], [18.4, 7137.0], [18.5, 7144.0], [18.6, 7170.0], [18.7, 7198.0], [18.8, 7242.0], [18.9, 7298.0], [19.0, 7330.0], [19.1, 7334.0], [19.2, 7347.0], [19.3, 7381.0], [19.4, 7388.0], [19.5, 7396.0], [19.6, 7451.0], [19.7, 7473.0], [19.8, 7507.0], [19.9, 7575.0], [20.0, 7597.0], [20.1, 7624.0], [20.2, 7635.0], [20.3, 7644.0], [20.4, 7655.0], [20.5, 7670.0], [20.6, 7697.0], [20.7, 7707.0], [20.8, 7713.0], [20.9, 7719.0], [21.0, 7723.0], [21.1, 7726.0], [21.2, 7730.0], [21.3, 7734.0], [21.4, 7740.0], [21.5, 7744.0], [21.6, 7752.0], [21.7, 7764.0], [21.8, 7775.0], [21.9, 7793.0], [22.0, 7796.0], [22.1, 7798.0], [22.2, 7806.0], [22.3, 7813.0], [22.4, 7816.0], [22.5, 7822.0], [22.6, 7829.0], [22.7, 7837.0], [22.8, 7839.0], [22.9, 7842.0], [23.0, 7850.0], [23.1, 7855.0], [23.2, 7857.0], [23.3, 7858.0], [23.4, 7863.0], [23.5, 7864.0], [23.6, 7865.0], [23.7, 7867.0], [23.8, 7867.0], [23.9, 7870.0], [24.0, 7872.0], [24.1, 7874.0], [24.2, 7876.0], [24.3, 7884.0], [24.4, 7885.0], [24.5, 7890.0], [24.6, 7893.0], [24.7, 7900.0], [24.8, 7908.0], [24.9, 7917.0], [25.0, 7926.0], [25.1, 7931.0], [25.2, 7936.0], [25.3, 7951.0], [25.4, 7955.0], [25.5, 7961.0], [25.6, 7967.0], [25.7, 7972.0], [25.8, 7983.0], [25.9, 7995.0], [26.0, 7999.0], [26.1, 8002.0], [26.2, 8005.0], [26.3, 8007.0], [26.4, 8010.0], [26.5, 8013.0], [26.6, 8015.0], [26.7, 8018.0], [26.8, 8021.0], [26.9, 8024.0], [27.0, 8027.0], [27.1, 8029.0], [27.2, 8032.0], [27.3, 8038.0], [27.4, 8041.0], [27.5, 8043.0], [27.6, 8044.0], [27.7, 8045.0], [27.8, 8046.0], [27.9, 8047.0], [28.0, 8047.0], [28.1, 8050.0], [28.2, 8052.0], [28.3, 8053.0], [28.4, 8054.0], [28.5, 8056.0], [28.6, 8057.0], [28.7, 8059.0], [28.8, 8060.0], [28.9, 8062.0], [29.0, 8064.0], [29.1, 8064.0], [29.2, 8065.0], [29.3, 8069.0], [29.4, 8071.0], [29.5, 8073.0], [29.6, 8074.0], [29.7, 8075.0], [29.8, 8076.0], [29.9, 8077.0], [30.0, 8078.0], [30.1, 8079.0], [30.2, 8080.0], [30.3, 8081.0], [30.4, 8083.0], [30.5, 8085.0], [30.6, 8086.0], [30.7, 8087.0], [30.8, 8088.0], [30.9, 8089.0], [31.0, 8089.0], [31.1, 8090.0], [31.2, 8091.0], [31.3, 8091.0], [31.4, 8092.0], [31.5, 8094.0], [31.6, 8095.0], [31.7, 8095.0], [31.8, 8096.0], [31.9, 8097.0], [32.0, 8099.0], [32.1, 8101.0], [32.2, 8102.0], [32.3, 8103.0], [32.4, 8105.0], [32.5, 8107.0], [32.6, 8108.0], [32.7, 8111.0], [32.8, 8113.0], [32.9, 8116.0], [33.0, 8117.0], [33.1, 8122.0], [33.2, 8126.0], [33.3, 8135.0], [33.4, 8140.0], [33.5, 8145.0], [33.6, 8153.0], [33.7, 8157.0], [33.8, 8160.0], [33.9, 8164.0], [34.0, 8168.0], [34.1, 8173.0], [34.2, 8176.0], [34.3, 8179.0], [34.4, 8183.0], [34.5, 8186.0], [34.6, 8187.0], [34.7, 8187.0], [34.8, 8189.0], [34.9, 8191.0], [35.0, 8192.0], [35.1, 8194.0], [35.2, 8195.0], [35.3, 8199.0], [35.4, 8202.0], [35.5, 8212.0], [35.6, 8215.0], [35.7, 8218.0], [35.8, 8224.0], [35.9, 8234.0], [36.0, 8238.0], [36.1, 8248.0], [36.2, 8250.0], [36.3, 8258.0], [36.4, 8262.0], [36.5, 8269.0], [36.6, 8273.0], [36.7, 8274.0], [36.8, 8276.0], [36.9, 8281.0], [37.0, 8283.0], [37.1, 8294.0], [37.2, 8297.0], [37.3, 8302.0], [37.4, 8308.0], [37.5, 8312.0], [37.6, 8318.0], [37.7, 8321.0], [37.8, 8323.0], [37.9, 8329.0], [38.0, 8343.0], [38.1, 8347.0], [38.2, 8353.0], [38.3, 8357.0], [38.4, 8358.0], [38.5, 8363.0], [38.6, 8367.0], [38.7, 8373.0], [38.8, 8380.0], [38.9, 8385.0], [39.0, 8388.0], [39.1, 8392.0], [39.2, 8394.0], [39.3, 8395.0], [39.4, 8402.0], [39.5, 8412.0], [39.6, 8427.0], [39.7, 8434.0], [39.8, 8443.0], [39.9, 8447.0], [40.0, 8452.0], [40.1, 8462.0], [40.2, 8464.0], [40.3, 8473.0], [40.4, 8494.0], [40.5, 8573.0], [40.6, 8589.0], [40.7, 8596.0], [40.8, 8601.0], [40.9, 8610.0], [41.0, 8616.0], [41.1, 8634.0], [41.2, 8649.0], [41.3, 8654.0], [41.4, 8658.0], [41.5, 8660.0], [41.6, 8667.0], [41.7, 8671.0], [41.8, 8699.0], [41.9, 8716.0], [42.0, 8719.0], [42.1, 8723.0], [42.2, 8731.0], [42.3, 8735.0], [42.4, 8738.0], [42.5, 8750.0], [42.6, 8757.0], [42.7, 8766.0], [42.8, 8770.0], [42.9, 8776.0], [43.0, 8782.0], [43.1, 8783.0], [43.2, 8784.0], [43.3, 8813.0], [43.4, 8844.0], [43.5, 8850.0], [43.6, 8877.0], [43.7, 8882.0], [43.8, 8890.0], [43.9, 8897.0], [44.0, 8920.0], [44.1, 8920.0], [44.2, 8924.0], [44.3, 8994.0], [44.4, 9010.0], [44.5, 9013.0], [44.6, 9017.0], [44.7, 9018.0], [44.8, 9023.0], [44.9, 9039.0], [45.0, 9047.0], [45.1, 9048.0], [45.2, 9055.0], [45.3, 9074.0], [45.4, 9076.0], [45.5, 9095.0], [45.6, 9103.0], [45.7, 9108.0], [45.8, 9113.0], [45.9, 9153.0], [46.0, 9211.0], [46.1, 9218.0], [46.2, 9225.0], [46.3, 9233.0], [46.4, 9260.0], [46.5, 9267.0], [46.6, 9290.0], [46.7, 9372.0], [46.8, 9379.0], [46.9, 9381.0], [47.0, 9387.0], [47.1, 9395.0], [47.2, 9399.0], [47.3, 9407.0], [47.4, 9458.0], [47.5, 9597.0], [47.6, 9601.0], [47.7, 9604.0], [47.8, 9610.0], [47.9, 9618.0], [48.0, 9621.0], [48.1, 9629.0], [48.2, 9635.0], [48.3, 9639.0], [48.4, 9641.0], [48.5, 9644.0], [48.6, 9722.0], [48.7, 9741.0], [48.8, 9770.0], [48.9, 9783.0], [49.0, 9795.0], [49.1, 9809.0], [49.2, 9814.0], [49.3, 9816.0], [49.4, 9888.0], [49.5, 9951.0], [49.6, 9961.0], [49.7, 9978.0], [49.8, 9987.0], [49.9, 9994.0], [50.0, 9996.0], [50.1, 9999.0], [50.2, 10006.0], [50.3, 10014.0], [50.4, 10025.0], [50.5, 10031.0], [50.6, 10037.0], [50.7, 10047.0], [50.8, 10054.0], [50.9, 10056.0], [51.0, 10062.0], [51.1, 10067.0], [51.2, 10071.0], [51.3, 10085.0], [51.4, 10089.0], [51.5, 10094.0], [51.6, 10099.0], [51.7, 10105.0], [51.8, 10115.0], [51.9, 10116.0], [52.0, 10119.0], [52.1, 10123.0], [52.2, 10130.0], [52.3, 10132.0], [52.4, 10135.0], [52.5, 10144.0], [52.6, 10148.0], [52.7, 10154.0], [52.8, 10159.0], [52.9, 10162.0], [53.0, 10169.0], [53.1, 10174.0], [53.2, 10181.0], [53.3, 10184.0], [53.4, 10188.0], [53.5, 10191.0], [53.6, 10194.0], [53.7, 10207.0], [53.8, 10210.0], [53.9, 10219.0], [54.0, 10226.0], [54.1, 10233.0], [54.2, 10238.0], [54.3, 10241.0], [54.4, 10275.0], [54.5, 10278.0], [54.6, 10287.0], [54.7, 10289.0], [54.8, 10293.0], [54.9, 10295.0], [55.0, 10297.0], [55.1, 10299.0], [55.2, 10300.0], [55.3, 10303.0], [55.4, 10304.0], [55.5, 10304.0], [55.6, 10306.0], [55.7, 10308.0], [55.8, 10310.0], [55.9, 10314.0], [56.0, 10317.0], [56.1, 10319.0], [56.2, 10322.0], [56.3, 10326.0], [56.4, 10329.0], [56.5, 10331.0], [56.6, 10334.0], [56.7, 10337.0], [56.8, 10340.0], [56.9, 10342.0], [57.0, 10344.0], [57.1, 10347.0], [57.2, 10349.0], [57.3, 10352.0], [57.4, 10353.0], [57.5, 10355.0], [57.6, 10364.0], [57.7, 10366.0], [57.8, 10376.0], [57.9, 10391.0], [58.0, 10392.0], [58.1, 10397.0], [58.2, 10402.0], [58.3, 10410.0], [58.4, 10433.0], [58.5, 10443.0], [58.6, 10448.0], [58.7, 10453.0], [58.8, 10473.0], [58.9, 10480.0], [59.0, 10484.0], [59.1, 10492.0], [59.2, 10495.0], [59.3, 10500.0], [59.4, 10509.0], [59.5, 10521.0], [59.6, 10526.0], [59.7, 10529.0], [59.8, 10534.0], [59.9, 10536.0], [60.0, 10542.0], [60.1, 10548.0], [60.2, 10550.0], [60.3, 10554.0], [60.4, 10556.0], [60.5, 10559.0], [60.6, 10564.0], [60.7, 10569.0], [60.8, 10571.0], [60.9, 10576.0], [61.0, 10585.0], [61.1, 10586.0], [61.2, 10590.0], [61.3, 10592.0], [61.4, 10596.0], [61.5, 10598.0], [61.6, 10602.0], [61.7, 10603.0], [61.8, 10606.0], [61.9, 10609.0], [62.0, 10617.0], [62.1, 10622.0], [62.2, 10626.0], [62.3, 10638.0], [62.4, 10657.0], [62.5, 10661.0], [62.6, 10662.0], [62.7, 10665.0], [62.8, 10671.0], [62.9, 10674.0], [63.0, 10689.0], [63.1, 10694.0], [63.2, 10698.0], [63.3, 10701.0], [63.4, 10710.0], [63.5, 10724.0], [63.6, 10759.0], [63.7, 10767.0], [63.8, 10776.0], [63.9, 10781.0], [64.0, 10782.0], [64.1, 10786.0], [64.2, 10789.0], [64.3, 10793.0], [64.4, 10795.0], [64.5, 10797.0], [64.6, 10799.0], [64.7, 10801.0], [64.8, 10802.0], [64.9, 10805.0], [65.0, 10806.0], [65.1, 10809.0], [65.2, 10812.0], [65.3, 10815.0], [65.4, 10816.0], [65.5, 10824.0], [65.6, 10838.0], [65.7, 10847.0], [65.8, 10863.0], [65.9, 10872.0], [66.0, 10886.0], [66.1, 10904.0], [66.2, 10909.0], [66.3, 10915.0], [66.4, 10924.0], [66.5, 10929.0], [66.6, 10937.0], [66.7, 10937.0], [66.8, 10939.0], [66.9, 10946.0], [67.0, 10949.0], [67.1, 10956.0], [67.2, 10964.0], [67.3, 10985.0], [67.4, 11002.0], [67.5, 11007.0], [67.6, 11016.0], [67.7, 11020.0], [67.8, 11053.0], [67.9, 11063.0], [68.0, 11072.0], [68.1, 11084.0], [68.2, 11098.0], [68.3, 11103.0], [68.4, 11109.0], [68.5, 11121.0], [68.6, 11135.0], [68.7, 11189.0], [68.8, 11196.0], [68.9, 11227.0], [69.0, 11233.0], [69.1, 11237.0], [69.2, 11240.0], [69.3, 11244.0], [69.4, 11257.0], [69.5, 11337.0], [69.6, 11345.0], [69.7, 11367.0], [69.8, 11369.0], [69.9, 11375.0], [70.0, 11380.0], [70.1, 11386.0], [70.2, 11408.0], [70.3, 11429.0], [70.4, 11452.0], [70.5, 11486.0], [70.6, 11493.0], [70.7, 11497.0], [70.8, 11517.0], [70.9, 11565.0], [71.0, 11693.0], [71.1, 11708.0], [71.2, 11726.0], [71.3, 11766.0], [71.4, 11780.0], [71.5, 11783.0], [71.6, 11803.0], [71.7, 11862.0], [71.8, 11901.0], [71.9, 11934.0], [72.0, 11945.0], [72.1, 11951.0], [72.2, 11955.0], [72.3, 11965.0], [72.4, 12040.0], [72.5, 12054.0], [72.6, 12079.0], [72.7, 12099.0], [72.8, 12224.0], [72.9, 12230.0], [73.0, 12232.0], [73.1, 12247.0], [73.2, 12328.0], [73.3, 12338.0], [73.4, 12362.0], [73.5, 12744.0], [73.6, 12780.0], [73.7, 12783.0], [73.8, 12789.0], [73.9, 12795.0], [74.0, 12797.0], [74.1, 12836.0], [74.2, 12839.0], [74.3, 12844.0], [74.4, 12847.0], [74.5, 12856.0], [74.6, 12862.0], [74.7, 12896.0], [74.8, 12975.0], [74.9, 12980.0], [75.0, 12983.0], [75.1, 12985.0], [75.2, 12986.0], [75.3, 12989.0], [75.4, 12996.0], [75.5, 13032.0], [75.6, 13041.0], [75.7, 13049.0], [75.8, 13060.0], [75.9, 13065.0], [76.0, 13074.0], [76.1, 13084.0], [76.2, 13096.0], [76.3, 13145.0], [76.4, 13152.0], [76.5, 13160.0], [76.6, 13290.0], [76.7, 13309.0], [76.8, 13321.0], [76.9, 13353.0], [77.0, 13439.0], [77.1, 13456.0], [77.2, 13553.0], [77.3, 13584.0], [77.4, 13649.0], [77.5, 13773.0], [77.6, 13776.0], [77.7, 13784.0], [77.8, 13794.0], [77.9, 13815.0], [78.0, 13852.0], [78.1, 13856.0], [78.2, 13866.0], [78.3, 13871.0], [78.4, 13876.0], [78.5, 13878.0], [78.6, 13881.0], [78.7, 13889.0], [78.8, 13890.0], [78.9, 13896.0], [79.0, 13900.0], [79.1, 13907.0], [79.2, 13910.0], [79.3, 13913.0], [79.4, 13920.0], [79.5, 13925.0], [79.6, 13932.0], [79.7, 13937.0], [79.8, 13951.0], [79.9, 14083.0], [80.0, 14145.0], [80.1, 14170.0], [80.2, 14193.0], [80.3, 14204.0], [80.4, 14206.0], [80.5, 14225.0], [80.6, 14226.0], [80.7, 14229.0], [80.8, 14231.0], [80.9, 14233.0], [81.0, 14235.0], [81.1, 14250.0], [81.2, 14264.0], [81.3, 14276.0], [81.4, 14385.0], [81.5, 14424.0], [81.6, 14429.0], [81.7, 14460.0], [81.8, 14499.0], [81.9, 14513.0], [82.0, 14540.0], [82.1, 14577.0], [82.2, 14609.0], [82.3, 14621.0], [82.4, 14628.0], [82.5, 14632.0], [82.6, 14639.0], [82.7, 14644.0], [82.8, 14654.0], [82.9, 14659.0], [83.0, 14699.0], [83.1, 14707.0], [83.2, 14710.0], [83.3, 14716.0], [83.4, 14721.0], [83.5, 14724.0], [83.6, 14727.0], [83.7, 14734.0], [83.8, 14741.0], [83.9, 14749.0], [84.0, 14756.0], [84.1, 14795.0], [84.2, 14797.0], [84.3, 14799.0], [84.4, 14801.0], [84.5, 14804.0], [84.6, 14806.0], [84.7, 14828.0], [84.8, 14837.0], [84.9, 14853.0], [85.0, 14870.0], [85.1, 14884.0], [85.2, 14903.0], [85.3, 14923.0], [85.4, 14926.0], [85.5, 14930.0], [85.6, 14938.0], [85.7, 14951.0], [85.8, 14964.0], [85.9, 14973.0], [86.0, 14976.0], [86.1, 14981.0], [86.2, 14988.0], [86.3, 15000.0], [86.4, 15005.0], [86.5, 15012.0], [86.6, 15017.0], [86.7, 15047.0], [86.8, 15127.0], [86.9, 15185.0], [87.0, 15192.0], [87.1, 15234.0], [87.2, 15281.0], [87.3, 15281.0], [87.4, 15284.0], [87.5, 15289.0], [87.6, 15307.0], [87.7, 15319.0], [87.8, 15342.0], [87.9, 15345.0], [88.0, 15349.0], [88.1, 15352.0], [88.2, 15357.0], [88.3, 15359.0], [88.4, 15428.0], [88.5, 15491.0], [88.6, 15551.0], [88.7, 15599.0], [88.8, 15608.0], [88.9, 15614.0], [89.0, 15625.0], [89.1, 15648.0], [89.2, 15662.0], [89.3, 15669.0], [89.4, 15703.0], [89.5, 15746.0], [89.6, 15764.0], [89.7, 15801.0], [89.8, 15947.0], [89.9, 16022.0], [90.0, 16048.0], [90.1, 16228.0], [90.2, 16236.0], [90.3, 16241.0], [90.4, 16244.0], [90.5, 16251.0], [90.6, 16258.0], [90.7, 16273.0], [90.8, 16380.0], [90.9, 16392.0], [91.0, 16463.0], [91.1, 16680.0], [91.2, 16707.0], [91.3, 17025.0], [91.4, 17035.0], [91.5, 17039.0], [91.6, 17144.0], [91.7, 17150.0], [91.8, 17156.0], [91.9, 17165.0], [92.0, 17172.0], [92.1, 17178.0], [92.2, 17182.0], [92.3, 17194.0], [92.4, 17207.0], [92.5, 17304.0], [92.6, 17403.0], [92.7, 17409.0], [92.8, 17415.0], [92.9, 17425.0], [93.0, 17431.0], [93.1, 17439.0], [93.2, 17459.0], [93.3, 17529.0], [93.4, 17537.0], [93.5, 17542.0], [93.6, 17551.0], [93.7, 17553.0], [93.8, 17561.0], [93.9, 17568.0], [94.0, 17583.0], [94.1, 17586.0], [94.2, 17588.0], [94.3, 17591.0], [94.4, 17623.0], [94.5, 17892.0], [94.6, 17964.0], [94.7, 17979.0], [94.8, 17992.0], [94.9, 18000.0], [95.0, 18009.0], [95.1, 18857.0], [95.2, 18962.0], [95.3, 18966.0], [95.4, 18969.0], [95.5, 19058.0], [95.6, 19073.0], [95.7, 19081.0], [95.8, 19092.0], [95.9, 19170.0], [96.0, 19306.0], [96.1, 19318.0], [96.2, 19331.0], [96.3, 19355.0], [96.4, 19491.0], [96.5, 19516.0], [96.6, 19530.0], [96.7, 19550.0], [96.8, 19578.0], [96.9, 19583.0], [97.0, 19591.0], [97.1, 19602.0], [97.2, 20123.0], [97.3, 20166.0], [97.4, 20190.0], [97.5, 20202.0], [97.6, 20209.0], [97.7, 20240.0], [97.8, 20248.0], [97.9, 20262.0], [98.0, 20324.0], [98.1, 22866.0], [98.2, 22948.0], [98.3, 22955.0], [98.4, 22955.0], [98.5, 22959.0], [98.6, 23209.0], [98.7, 23471.0], [98.8, 26385.0], [98.9, 26491.0], [99.0, 26544.0], [99.1, 26545.0], [99.2, 26547.0], [99.3, 26549.0], [99.4, 26550.0], [99.5, 26550.0], [99.6, 26551.0], [99.7, 26553.0], [99.8, 26554.0], [99.9, 26558.0], [100.0, 26588.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 240.0, "series": [{"data": [[500.0, 13.0], [1000.0, 2.0], [1100.0, 4.0], [1200.0, 21.0], [2100.0, 23.0], [3400.0, 2.0], [5300.0, 19.0], [5400.0, 60.0], [5500.0, 44.0], [5600.0, 17.0], [5700.0, 21.0], [5800.0, 21.0], [5900.0, 27.0], [6000.0, 16.0], [6100.0, 27.0], [6200.0, 17.0], [6300.0, 45.0], [6600.0, 48.0], [6400.0, 20.0], [6500.0, 21.0], [6700.0, 101.0], [6800.0, 67.0], [6900.0, 60.0], [7100.0, 19.0], [7000.0, 33.0], [7200.0, 9.0], [7400.0, 10.0], [7300.0, 24.0], [7500.0, 10.0], [7600.0, 25.0], [7700.0, 59.0], [7800.0, 103.0], [7900.0, 53.0], [8000.0, 240.0], [8100.0, 132.0], [8200.0, 78.0], [8300.0, 85.0], [8400.0, 41.0], [8500.0, 13.0], [8600.0, 43.0], [8700.0, 57.0], [8800.0, 27.0], [8900.0, 16.0], [9000.0, 49.0], [9100.0, 16.0], [9200.0, 28.0], [9600.0, 39.0], [9500.0, 7.0], [9300.0, 24.0], [9700.0, 19.0], [9400.0, 7.0], [9800.0, 15.0], [10200.0, 61.0], [9900.0, 28.0], [10100.0, 82.0], [10000.0, 60.0], [10500.0, 90.0], [10300.0, 118.0], [10400.0, 46.0], [10600.0, 68.0], [10700.0, 55.0], [10800.0, 57.0], [10900.0, 54.0], [11000.0, 33.0], [11100.0, 24.0], [11200.0, 25.0], [11400.0, 25.0], [11500.0, 9.0], [11300.0, 27.0], [11600.0, 5.0], [11700.0, 20.0], [11800.0, 7.0], [11900.0, 22.0], [12200.0, 17.0], [12000.0, 16.0], [12100.0, 2.0], [12400.0, 1.0], [12300.0, 9.0], [12700.0, 23.0], [12800.0, 28.0], [13000.0, 31.0], [13100.0, 12.0], [12900.0, 28.0], [13200.0, 5.0], [13300.0, 12.0], [13400.0, 9.0], [13500.0, 8.0], [13600.0, 3.0], [13700.0, 16.0], [13800.0, 46.0], [14200.0, 43.0], [14100.0, 11.0], [14000.0, 6.0], [14300.0, 4.0], [13900.0, 33.0], [14400.0, 17.0], [14700.0, 54.0], [14800.0, 32.0], [14600.0, 34.0], [14500.0, 13.0], [14900.0, 45.0], [15200.0, 23.0], [15100.0, 12.0], [15300.0, 31.0], [15000.0, 17.0], [15400.0, 6.0], [15600.0, 27.0], [15500.0, 8.0], [15700.0, 11.0], [15800.0, 4.0], [15900.0, 4.0], [16000.0, 6.0], [16200.0, 31.0], [16300.0, 6.0], [16400.0, 4.0], [16600.0, 5.0], [16700.0, 3.0], [17000.0, 12.0], [17100.0, 33.0], [17300.0, 3.0], [17400.0, 26.0], [17200.0, 5.0], [17500.0, 46.0], [17600.0, 5.0], [17900.0, 15.0], [17800.0, 1.0], [18000.0, 7.0], [18400.0, 1.0], [18800.0, 2.0], [18900.0, 14.0], [19000.0, 15.0], [19100.0, 2.0], [19300.0, 14.0], [19200.0, 2.0], [19400.0, 5.0], [20200.0, 20.0], [20300.0, 1.0], [19500.0, 26.0], [20100.0, 12.0], [19600.0, 4.0], [22100.0, 2.0], [22900.0, 14.0], [22800.0, 5.0], [23200.0, 3.0], [23100.0, 2.0], [23400.0, 2.0], [26500.0, 43.0], [26300.0, 5.0], [26400.0, 4.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 40.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3960.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 40.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3960.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 260.83398437499966, "minX": 1.63133448E12, "maxY": 1259.9180107526897, "series": [{"data": [[1.63133454E12, 988.5759999999983]], "isOverall": false, "label": "listHistoryByTime", "isController": false}, {"data": [[1.63133454E12, 260.83398437499966], [1.63133448E12, 1259.9180107526897]], "isOverall": false, "label": "listHistory", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133454E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 530.0, "minX": 2.0, "maxY": 26547.2, "series": [{"data": [[2.0, 22170.0], [22.0, 19842.199999999997], [24.0, 26541.249999999996], [28.0, 26535.0], [35.0, 19592.0], [41.0, 19530.0], [40.0, 19837.41176470588], [48.0, 26547.2], [49.0, 20001.500000000004], [50.0, 26509.64705882353], [51.0, 19508.5], [53.0, 23471.0], [52.0, 26543.0], [54.0, 23432.0], [55.0, 19656.25], [59.0, 21625.666666666668], [63.0, 20324.0], [62.0, 19945.333333333332], [65.0, 20249.5], [71.0, 19170.0], [70.0, 20257.0], [72.0, 21154.0], [73.0, 19323.0], [78.0, 22933.375], [77.0, 22933.625000000004], [76.0, 22907.0], [82.0, 17150.0], [81.0, 17002.0], [80.0, 17530.0], [86.0, 19257.75], [91.0, 17029.666666666668], [90.0, 18992.299999999996], [89.0, 17025.0], [88.0, 18522.833333333332], [93.0, 17037.75], [92.0, 19306.5], [97.0, 16390.0], [96.0, 16671.333333333332], [103.0, 16412.0], [102.0, 16383.0], [101.0, 16388.0], [107.0, 16273.0], [105.0, 18015.0], [104.0, 19081.0], [111.0, 16263.0], [109.0, 16252.0], [108.0, 17568.75], [116.0, 16256.6], [117.0, 17987.0], [122.0, 16485.5], [123.0, 16237.0], [120.0, 16008.0], [124.0, 16586.0], [126.0, 18595.166666666668], [125.0, 18233.5], [135.0, 16123.5], [134.0, 17833.2], [133.0, 16222.0], [132.0, 16693.0], [131.0, 16220.0], [130.0, 17127.0], [129.0, 16243.0], [128.0, 18022.5], [141.0, 17679.5], [140.0, 17890.0], [138.0, 16234.5], [136.0, 17324.6], [143.0, 17954.0], [142.0, 17892.0], [151.0, 15758.0], [149.0, 16128.0], [146.0, 15939.333333333334], [145.0, 16458.0], [144.0, 17613.0], [158.0, 15862.0], [156.0, 15790.0], [154.0, 15805.333333333334], [167.0, 15628.0], [165.0, 15606.0], [163.0, 15747.0], [162.0, 15746.0], [161.0, 15713.0], [175.0, 15590.5], [173.0, 15652.333333333334], [183.0, 16015.75], [177.0, 15358.0], [182.0, 17588.333333333332], [181.0, 17568.0], [191.0, 15507.5], [189.0, 16385.285714285714], [188.0, 16169.0], [190.0, 17559.75], [187.0, 17552.0], [186.0, 17541.0], [185.0, 17549.5], [184.0, 17584.0], [196.0, 17244.166666666664], [195.0, 16955.88888888889], [192.0, 16933.666666666668], [197.0, 17542.454545454548], [194.0, 17588.0], [193.0, 17551.333333333336], [205.0, 15565.75], [201.0, 15865.5], [202.0, 17207.0], [200.0, 17325.0], [214.0, 14831.0], [213.0, 15128.0], [212.0, 15417.0], [211.0, 15481.0], [210.0, 15490.5], [208.0, 15608.333333333334], [223.0, 14884.0], [222.0, 14902.5], [220.0, 15230.0], [219.0, 15234.0], [218.0, 14752.75], [221.0, 17171.0], [231.0, 15312.166666666668], [225.0, 16462.2], [227.0, 17169.333333333332], [226.0, 17140.0], [224.0, 17144.0], [239.0, 17169.0], [247.0, 15342.0], [246.0, 17317.5], [245.0, 17161.0], [244.0, 17194.0], [243.0, 17250.666666666668], [241.0, 17185.0], [240.0, 17181.666666666668], [253.0, 17094.41176470588], [251.0, 15552.529411764706], [249.0, 15240.666666666666], [248.0, 16546.0], [252.0, 17417.0], [269.0, 15281.0], [268.0, 14799.916666666668], [263.0, 13937.0], [262.0, 14678.0], [261.0, 15551.0], [260.0, 16022.0], [259.0, 17304.0], [258.0, 17173.4], [275.0, 15277.0], [286.0, 14032.5], [285.0, 14090.444444444445], [284.0, 14099.0], [282.0, 14634.333333333332], [276.0, 14296.0], [274.0, 15131.9], [273.0, 14558.5], [272.0, 14976.6], [277.0, 13876.0], [302.0, 14792.624999999998], [301.0, 14520.5], [300.0, 14167.333333333334], [289.0, 14791.666666666666], [303.0, 13799.625], [294.0, 13838.0], [291.0, 14117.0], [288.0, 13910.0], [316.0, 14761.0], [318.0, 14473.0], [319.0, 14460.0], [317.0, 13332.0], [315.0, 14798.5], [314.0, 14797.0], [307.0, 14805.0], [304.0, 13914.0], [311.0, 14532.0], [310.0, 14014.0], [334.0, 13313.0], [330.0, 14756.0], [329.0, 14858.75], [328.0, 14653.5], [327.0, 14733.333333333334], [325.0, 14972.0], [346.0, 14404.785714285714], [345.0, 13686.666666666666], [343.0, 13477.5], [342.0, 13982.5], [340.0, 13292.0], [336.0, 14546.833333333332], [354.0, 14402.5], [367.0, 13606.2], [362.0, 13929.0], [358.0, 14397.25], [357.0, 14183.666666666668], [356.0, 14389.0], [355.0, 13990.2], [366.0, 14098.0], [361.0, 14616.666666666666], [383.0, 14226.0], [382.0, 14209.333333333334], [371.0, 13809.5], [384.0, 14479.333333333334], [398.0, 13472.8], [393.0, 13313.0], [391.0, 14126.083333333334], [390.0, 13079.0], [389.0, 13082.0], [387.0, 14153.07142857143], [386.0, 14571.25], [385.0, 13869.5], [401.0, 13026.0], [412.0, 12986.0], [409.0, 12981.0], [405.0, 14323.999999999998], [404.0, 13031.666666666666], [400.0, 13563.0], [413.0, 14478.0], [403.0, 14662.0], [402.0, 14746.0], [427.0, 13148.0], [425.0, 13228.857142857143], [421.0, 13145.0], [420.0, 13080.0], [419.0, 13114.0], [418.0, 12985.0], [417.0, 13095.0], [434.0, 13041.0], [446.0, 13074.5], [444.0, 13074.5], [440.0, 13516.4], [439.0, 13629.0], [433.0, 13051.2], [432.0, 13049.0], [438.0, 14231.0], [437.0, 14385.8], [463.0, 13966.1], [461.0, 12833.0], [456.0, 12843.666666666666], [453.0, 12840.57142857143], [451.0, 14362.714285714286], [450.0, 14350.333333333334], [448.0, 14762.25], [449.0, 15009.0], [478.0, 11728.0], [474.0, 11726.5], [473.0, 11834.0], [470.0, 12856.0], [469.0, 12863.0], [464.0, 13687.8], [467.0, 14548.0], [466.0, 14560.0], [492.0, 12066.0], [490.0, 12180.333333333334], [491.0, 14911.42857142857], [484.0, 14372.666666666666], [482.0, 13342.0], [481.0, 14661.666666666666], [489.0, 533.125], [486.0, 532.5], [485.0, 531.5], [483.0, 530.0], [495.0, 14889.0], [494.0, 14659.0], [493.0, 14926.5], [511.0, 12456.300000000001], [510.0, 12456.666666666666], [502.0, 12136.0], [501.0, 12153.25], [499.0, 11950.0], [498.0, 11919.0], [497.0, 13858.0], [509.0, 14713.0], [540.0, 12900.0], [542.0, 11366.666666666666], [541.0, 11367.0], [538.0, 13774.0], [537.0, 14602.0], [536.0, 14588.0], [532.0, 11489.0], [535.0, 14697.285714285714], [533.0, 14609.0], [530.0, 11433.142857142857], [528.0, 11503.0], [522.0, 12786.8], [521.0, 14748.5], [524.0, 14715.75], [523.0, 14721.0], [527.0, 13933.0], [525.0, 14710.0], [519.0, 11976.714285714286], [513.0, 11430.0], [515.0, 14725.571428571428], [517.0, 14724.0], [516.0, 14718.5], [512.0, 11337.0], [570.0, 11407.5], [574.0, 12576.125], [575.0, 11572.8], [572.0, 11318.0], [568.0, 11238.0], [551.0, 12971.0], [550.0, 12978.5], [548.0, 12982.333333333334], [547.0, 11381.0], [546.0, 11735.1], [545.0, 11565.0], [559.0, 12984.0], [558.0, 12987.0], [563.0, 11238.5], [567.0, 13219.166666666668], [561.0, 11676.375], [555.0, 11376.142857142857], [554.0, 12583.75], [583.0, 12253.333333333334], [607.0, 11784.0], [592.0, 12845.0], [606.0, 11151.0], [602.0, 11487.538461538461], [605.0, 12339.0], [593.0, 11133.25], [598.0, 12072.333333333332], [591.0, 11829.0], [585.0, 12308.714285714286], [588.0, 12788.0], [586.0, 12797.0], [582.0, 11240.0], [581.0, 11395.2], [580.0, 11251.666666666666], [578.0, 12795.0], [577.0, 13140.0], [636.0, 11048.0], [631.0, 11406.25], [629.0, 11375.142857142857], [625.0, 11653.5], [628.0, 11769.0], [637.0, 11779.5], [621.0, 11020.0], [611.0, 11795.666666666668], [612.0, 11899.0], [623.0, 12246.0], [615.0, 11010.5], [632.0, 12099.0], [635.0, 12081.5], [633.0, 11780.0], [613.0, 11220.2], [620.0, 10968.0], [619.0, 11739.333333333334], [618.0, 10982.0], [617.0, 11546.0], [616.0, 11705.0], [667.0, 10916.0], [664.0, 10867.5], [647.0, 11783.0], [662.0, 10909.75], [661.0, 11065.5], [659.0, 11262.0], [658.0, 10909.5], [657.0, 10908.5], [671.0, 10553.5], [656.0, 11611.5], [654.0, 11184.7], [648.0, 11956.555555555555], [641.0, 10937.0], [642.0, 12054.0], [640.0, 10952.25], [646.0, 10929.0], [645.0, 11401.0], [644.0, 10940.666666666666], [701.0, 10502.75], [699.0, 10802.0], [697.0, 10591.666666666666], [678.0, 10587.5], [677.0, 10507.0], [695.0, 10661.75], [693.0, 10808.4], [688.0, 10603.0], [689.0, 10615.57142857143], [685.0, 10874.916666666666], [682.0, 10620.0], [681.0, 10525.0], [673.0, 10678.833333333332], [672.0, 11016.0], [703.0, 10592.5], [722.0, 10794.0], [735.0, 10949.0], [721.0, 10050.0], [730.0, 10545.333333333334], [729.0, 10727.0], [728.0, 10813.5], [715.0, 10022.5], [705.0, 10615.5], [711.0, 10526.0], [710.0, 10555.6], [727.0, 10809.0], [725.0, 10451.5], [724.0, 10236.222222222223], [731.0, 10510.166666666668], [739.0, 10939.285714285714], [767.0, 10180.5], [766.0, 10781.0], [765.0, 9714.333333333334], [762.0, 9689.5], [755.0, 10643.0], [758.0, 9740.0], [757.0, 9679.2], [752.0, 10190.5], [751.0, 10244.6], [749.0, 10902.4], [744.0, 10391.083333333334], [747.0, 10121.666666666666], [738.0, 10942.0], [737.0, 10265.75], [736.0, 10411.2], [775.0, 9922.25], [795.0, 10768.0], [799.0, 10289.714285714284], [796.0, 10566.666666666666], [794.0, 10379.8], [793.0, 9628.0], [792.0, 9783.0], [773.0, 10301.0], [771.0, 10648.333333333334], [770.0, 10194.0], [768.0, 9970.25], [783.0, 10277.400000000001], [791.0, 10620.0], [786.0, 9932.333333333334], [785.0, 10566.0], [782.0, 10382.0], [780.0, 10731.5], [779.0, 10782.0], [777.0, 10119.0], [804.0, 10332.0], [830.0, 10465.125], [828.0, 9427.5], [824.0, 9548.333333333334], [807.0, 9182.833333333334], [822.0, 10538.714285714286], [821.0, 10339.0], [814.0, 10233.6], [813.0, 10698.0], [812.0, 10279.0], [803.0, 10327.75], [801.0, 9995.0], [800.0, 9783.0], [831.0, 8629.0], [818.0, 9290.0], [817.0, 9208.875], [856.0, 10824.0], [859.0, 8999.333333333334], [863.0, 8312.5], [855.0, 8212.0], [854.0, 8625.4], [849.0, 8904.75], [858.0, 9163.333333333334], [857.0, 10596.333333333334], [844.0, 9100.777777777777], [842.0, 10043.75], [841.0, 8674.5], [840.0, 8697.5], [839.0, 10509.333333333334], [836.0, 10590.666666666666], [833.0, 10690.333333333334], [834.0, 8712.666666666666], [845.0, 8772.0], [888.0, 8953.75], [891.0, 10564.0], [893.0, 10397.0], [890.0, 10339.0], [887.0, 10554.833333333332], [885.0, 8384.0], [883.0, 8187.0], [882.0, 8370.0], [881.0, 10661.5], [879.0, 9888.25], [878.0, 8550.0], [877.0, 8416.8], [871.0, 10373.714285714286], [870.0, 10690.8], [876.0, 10653.3], [874.0, 10795.0], [873.0, 10590.75], [872.0, 8305.25], [911.0, 9479.0], [921.0, 10654.833333333332], [920.0, 10659.0], [903.0, 8260.0], [914.0, 10587.5], [917.0, 9387.0], [916.0, 8861.1], [912.0, 10396.92857142857], [910.0, 9093.666666666668], [909.0, 9692.0], [906.0, 9165.5], [907.0, 8215.333333333334], [904.0, 10239.0], [947.0, 10135.0], [957.0, 9441.666666666666], [952.0, 10214.0], [954.0, 8275.0], [953.0, 8286.285714285714], [936.0, 10229.0], [940.0, 8158.666666666667], [943.0, 8183.0], [942.0, 8178.0], [929.0, 10574.142857142857], [928.0, 10224.0], [933.0, 10671.0], [932.0, 9610.277777777777], [935.0, 9438.0], [951.0, 10437.4], [950.0, 10518.5], [949.0, 10582.666666666666], [946.0, 9287.0], [945.0, 8919.0], [944.0, 10443.0], [959.0, 8143.0], [990.0, 10128.0], [991.0, 8775.0], [988.0, 9330.0], [985.0, 10296.8], [983.0, 10110.0], [982.0, 10115.5], [977.0, 10134.0], [980.0, 8484.285714285714], [976.0, 10509.0], [975.0, 10172.666666666668], [973.0, 8145.0], [963.0, 10192.333333333334], [967.0, 8152.0], [965.0, 8182.333333333334], [960.0, 10176.0], [971.0, 9992.5], [969.0, 9993.0], [968.0, 8050.0], [970.0, 8110.5], [999.0, 9664.857142857141], [1021.0, 10324.777777777777], [1020.0, 8150.0], [1023.0, 8149.333333333333], [1012.0, 10306.0], [1014.0, 8017.0], [1013.0, 8109.833333333334], [1011.0, 10186.333333333334], [1004.0, 10291.0], [1001.0, 10143.0], [1003.0, 8013.25], [995.0, 10295.0], [997.0, 8021.0], [996.0, 8055.2], [994.0, 10464.0], [993.0, 10127.0], [1007.0, 8067.5], [1080.0, 10289.5], [1086.0, 8410.8], [1082.0, 7944.333333333333], [1056.0, 8942.0], [1062.0, 10038.0], [1060.0, 7878.5], [1058.0, 7872.0], [1078.0, 10298.666666666666], [1076.0, 8033.5], [1072.0, 8195.0], [1036.0, 9399.4], [1030.0, 9132.0], [1034.0, 8195.5], [1032.0, 8189.0], [1052.0, 7993.5], [1050.0, 8569.25], [1048.0, 9353.0], [1046.0, 10256.75], [1040.0, 7971.0], [1068.0, 10180.333333333332], [1064.0, 10304.0], [1136.0, 10285.857142857141], [1150.0, 8546.0], [1148.0, 7064.0], [1146.0, 6888.5], [1142.0, 7079.0], [1140.0, 7168.333333333333], [1138.0, 7070.0], [1102.0, 9412.833333333334], [1100.0, 7204.0], [1098.0, 8129.0], [1096.0, 8140.0], [1094.0, 9225.181818181818], [1128.0, 9958.000000000002], [1126.0, 7137.0], [1124.0, 7659.0], [1134.0, 7361.5], [1132.0, 7223.333333333333], [1120.0, 8355.0], [1114.0, 10309.6], [1118.0, 7088.0], [1090.0, 7911.0], [1116.0, 7461.4], [1104.0, 10100.0], [1110.0, 7682.0], [1108.0, 7713.0], [1202.0, 10528.909090909092], [1184.0, 10528.0], [1188.0, 10489.0], [1212.0, 10237.333333333334], [1204.0, 6708.0], [1152.0, 10233.5], [1154.0, 7061.0], [1160.0, 7017.0], [1158.0, 6901.0], [1200.0, 7717.260869565217], [1166.0, 6886.833333333333], [1178.0, 10358.875], [1176.0, 10288.5], [1168.0, 8064.0], [1190.0, 10156.0], [1186.0, 10770.0], [1266.0, 9844.6], [1256.0, 9815.0], [1260.0, 7489.5], [1258.0, 7737.083333333332], [1274.0, 9708.5], [1270.0, 9718.0], [1220.0, 9915.0], [1218.0, 9963.0], [1246.0, 6940.0], [1244.0, 6941.0], [1242.0, 6683.0], [1240.0, 6989.0], [1224.0, 10155.0], [1222.0, 10099.0], [1230.0, 6958.714285714286], [1226.0, 1281.0], [1228.0, 4681.0], [1238.0, 10527.333333333332], [1232.0, 7984.25], [1234.0, 6731.2], [1250.0, 10021.0], [1314.0, 9228.0], [1306.0, 9314.666666666668], [1282.0, 9689.0], [1310.0, 8047.0], [1280.0, 7366.0], [1312.0, 8007.833333333333], [1304.0, 9123.5], [1300.0, 9117.0], [1326.0, 9219.5], [1322.0, 8637.846153846154], [1320.0, 9632.0], [1406.0, 8531.666666666666], [1398.0, 8885.6], [1394.0, 7102.833333333334], [1390.0, 8855.75], [1388.0, 7940.176470588236], [1386.0, 8417.2], [1384.0, 8327.5], [1378.0, 8961.0], [1376.0, 9113.0], [1348.0, 8856.0], [1346.0, 8656.5], [1372.0, 8237.5], [1368.0, 8297.0], [1366.0, 8410.5], [1364.0, 8292.75], [1468.0, 7838.333333333333], [1448.0, 8635.666666666666], [1464.0, 8731.0], [1446.0, 7644.2], [1470.0, 6992.0], [1440.0, 6829.5], [1450.0, 8782.0], [1452.0, 8830.666666666666], [1454.0, 8058.299999999999], [1466.0, 7170.5], [1462.0, 8784.25], [1458.0, 8887.5], [1456.0, 9013.5], [1438.0, 7059.0], [1436.0, 7199.5], [1430.0, 6599.0], [1426.0, 8087.0], [1424.0, 8340.166666666666], [1534.0, 8192.0], [1526.0, 7396.0], [1504.0, 8838.0], [1506.0, 8514.2], [1508.0, 8456.5], [1510.0, 8249.0], [1532.0, 8248.333333333334], [1528.0, 7910.0], [1522.0, 8218.0], [1486.0, 6754.0], [1482.0, 6852.0], [1480.0, 6955.5], [1478.0, 8370.25], [1494.0, 8300.0], [1492.0, 7979.5], [1488.0, 8613.272727272726], [1490.0, 6851.0], [1518.0, 8230.0], [1516.0, 8813.0], [1592.0, 7990.666666666667], [1596.0, 8082.5], [1572.0, 8185.142857142858], [1574.0, 7847.000000000001], [1588.0, 7519.0], [1586.0, 8081.5], [1584.0, 8095.5], [1548.0, 8448.0], [1540.0, 7950.0], [1538.0, 7992.666666666667], [1536.0, 6702.0], [1550.0, 8219.0], [1558.0, 8594.0], [1552.0, 8614.0], [1582.0, 7738.285714285715], [1578.0, 8096.666666666667], [1576.0, 7972.0], [1656.0, 8047.0], [1662.0, 7875.3], [1634.0, 8323.0], [1632.0, 7724.4], [1638.0, 6831.0], [1658.0, 7751.0], [1612.0, 8306.5], [1652.0, 6883.0], [1650.0, 7630.5], [1602.0, 8038.4], [1630.0, 8028.5], [1600.0, 7518.583333333334], [1628.0, 8024.5], [1626.0, 8249.5], [1618.0, 8365.0], [1616.0, 8412.0], [1646.0, 7440.333333333333], [1644.0, 7943.333333333333], [1640.0, 7463.875], [1642.0, 6882.0], [1712.0, 6738.0], [1716.0, 6624.0], [1722.0, 6694.75], [1714.0, 7717.0], [1678.0, 7116.0], [1676.0, 8210.333333333334], [1674.0, 7258.666666666667], [1664.0, 8102.444444444444], [1670.0, 6814.0], [1672.0, 6808.0], [1690.0, 7730.25], [1688.0, 8085.0], [1686.0, 7494.0], [1682.0, 6939.5], [1726.0, 6832.5], [1724.0, 6833.0], [1700.0, 7075.333333333333], [1698.0, 7394.875], [1702.0, 6741.0], [1706.0, 6747.0], [1704.0, 7404.5], [1720.0, 7594.909090909091], [1718.0, 7575.333333333334], [1710.0, 7310.0], [1708.0, 7521.666666666667], [1784.0, 5821.0], [1788.0, 6330.555555555556], [1790.0, 5815.0], [1786.0, 5825.0], [1782.0, 6367.0], [1734.0, 6678.0], [1730.0, 6674.4], [1758.0, 5880.0], [1754.0, 7200.4], [1752.0, 6582.333333333333], [1750.0, 5895.0], [1746.0, 7377.666666666667], [1748.0, 7269.0], [1772.0, 6363.5], [1770.0, 6391.333333333333], [1764.0, 6353.5], [1762.0, 6859.0], [1766.0, 5859.0], [1768.0, 6336.0], [1760.0, 6288.428571428572], [1850.0, 5916.0], [1854.0, 5671.0], [1828.0, 6445.0], [1826.0, 6038.0], [1824.0, 6419.333333333333], [1830.0, 6102.0], [1834.0, 5953.6], [1836.0, 5790.0], [1852.0, 5972.5], [1848.0, 5850.0], [1846.0, 6158.0], [1844.0, 5709.0], [1842.0, 5997.285714285714], [1840.0, 6013.0], [1806.0, 6116.0], [1804.0, 6113.0], [1800.0, 6205.75], [1798.0, 6269.0], [1796.0, 6710.5], [1794.0, 6402.0], [1792.0, 6612.333333333333], [1822.0, 6781.142857142857], [1818.0, 7279.333333333333], [1816.0, 5760.0], [1814.0, 6119.8], [1812.0, 6955.833333333334], [1808.0, 6106.0], [1870.0, 5589.0], [1894.0, 6234.125], [1888.0, 5579.5], [1892.0, 5570.0], [1910.0, 5509.75], [1908.0, 5908.0], [1906.0, 5682.0], [1904.0, 6131.0], [1868.0, 5597.0], [1864.0, 5608.0], [1866.0, 6377.0], [1862.0, 5638.0], [1860.0, 5641.0], [1856.0, 6403.0], [1858.0, 6408.0], [1886.0, 6050.0], [1884.0, 6300.0], [1882.0, 5574.0], [1880.0, 5547.0], [1878.0, 6300.0], [1876.0, 6100.666666666667], [1874.0, 5581.0], [1872.0, 6252.0], [1902.0, 5736.0], [1900.0, 5788.857142857143], [1898.0, 6198.0], [1976.0, 5402.0], [1974.0, 5399.5], [1954.0, 6774.0], [1952.0, 2141.6666666666665], [1956.0, 2151.0], [1958.0, 3296.75], [1960.0, 6720.666666666667], [1972.0, 5360.0], [1970.0, 5437.0], [1968.0, 6097.416666666667], [1930.0, 5420.333333333333], [1928.0, 5417.0], [1932.0, 5414.75], [1926.0, 5461.5], [1924.0, 5475.0], [1920.0, 5405.0], [1946.0, 5452.0], [1940.0, 5420.0], [1938.0, 5410.5], [1966.0, 2167.0], [1964.0, 6688.666666666667], [1962.0, 4722.777777777777], [1994.0, 5370.0], [1990.0, 5379.0], [1075.0, 9740.0], [1085.0, 10268.8], [1079.0, 8182.0], [1077.0, 7811.0], [1087.0, 8184.0], [1063.0, 8668.75], [1057.0, 10325.0], [1059.0, 10271.428571428572], [1037.0, 10253.333333333334], [1073.0, 8085.666666666667], [1035.0, 10071.0], [1029.0, 8767.5], [1031.0, 8202.0], [1027.0, 10160.666666666666], [1049.0, 10283.0], [1043.0, 8057.333333333333], [1055.0, 7863.666666666667], [1025.0, 7973.0], [1071.0, 10278.0], [1069.0, 7931.5], [1065.0, 8056.5], [1151.0, 6792.0], [1139.0, 9404.75], [1093.0, 10304.0], [1095.0, 7264.0], [1103.0, 7730.0], [1097.0, 7754.0], [1129.0, 8670.0], [1127.0, 7631.0], [1125.0, 7137.0], [1123.0, 7381.5], [1121.0, 7670.0], [1135.0, 7079.0], [1119.0, 10378.4], [1109.0, 9739.333333333334], [1107.0, 7219.5], [1105.0, 7454.5], [1111.0, 7144.0], [1149.0, 7057.0], [1147.0, 6826.0], [1141.0, 7067.0], [1211.0, 10291.666666666666], [1185.0, 10476.4], [1157.0, 10370.2], [1167.0, 6762.0], [1159.0, 6762.0], [1209.0, 7862.8], [1203.0, 6897.0], [1155.0, 10158.0], [1177.0, 8343.25], [1153.0, 6920.5], [1171.0, 7262.333333333333], [1191.0, 10687.125000000002], [1189.0, 10177.0], [1187.0, 10494.0], [1225.0, 10129.5], [1271.0, 9813.0], [1247.0, 10538.0], [1221.0, 7522.5], [1219.0, 7729.0], [1229.0, 10221.571428571428], [1231.0, 1257.0], [1227.0, 1717.2499999999998], [1245.0, 9544.333333333334], [1233.0, 1286.0], [1235.0, 2708.75], [1241.0, 6678.0], [1239.0, 6766.75], [1261.0, 9349.75], [1263.0, 6805.5], [1259.0, 9754.0], [1257.0, 9602.0], [1279.0, 6798.25], [1333.0, 8771.333333333332], [1319.0, 9406.333333333334], [1343.0, 8794.0], [1339.0, 8770.166666666666], [1287.0, 9694.5], [1285.0, 9671.666666666666], [1281.0, 8508.388888888889], [1311.0, 8016.0], [1309.0, 8067.142857142857], [1305.0, 9604.0], [1301.0, 9219.5], [1327.0, 9210.0], [1317.0, 9218.0], [1315.0, 7848.285714285716], [1359.0, 8790.25], [1403.0, 8571.6], [1393.0, 8541.0], [1377.0, 8844.0], [1385.0, 8389.0], [1383.0, 8400.5], [1355.0, 8810.0], [1353.0, 8766.8], [1347.0, 8671.0], [1373.0, 8280.666666666666], [1371.0, 8265.333333333332], [1369.0, 8373.0], [1367.0, 8193.5], [1365.0, 8158.8], [1363.0, 8034.333333333333], [1361.0, 8195.333333333334], [1447.0, 8634.333333333334], [1445.0, 8700.0], [1467.0, 7170.666666666667], [1443.0, 6966.666666666667], [1449.0, 8103.5], [1451.0, 8853.0], [1453.0, 8793.75], [1455.0, 9004.0], [1465.0, 8872.944444444445], [1463.0, 8658.0], [1459.0, 8728.0], [1429.0, 8011.944444444445], [1427.0, 7958.25], [1425.0, 8094.5], [1461.0, 7822.142857142857], [1533.0, 8155.0], [1505.0, 8293.0], [1509.0, 8257.0], [1513.0, 8243.0], [1525.0, 7689.0], [1529.0, 6703.0], [1527.0, 7841.5], [1523.0, 8194.0], [1521.0, 8445.4], [1487.0, 6743.0], [1485.0, 6753.0], [1477.0, 6964.0], [1503.0, 8646.5], [1475.0, 7906.166666666667], [1501.0, 8850.0], [1489.0, 8317.0], [1493.0, 6978.0], [1491.0, 6714.0], [1587.0, 8096.000000000001], [1597.0, 8033.666666666667], [1575.0, 8036.0], [1579.0, 6888.0], [1577.0, 7954.0], [1589.0, 8047.5], [1565.0, 8384.25], [1547.0, 8650.333333333334], [1545.0, 7433.0], [1543.0, 7908.695652173912], [1541.0, 7950.833333333334], [1539.0, 7914.25], [1537.0, 8200.6], [1549.0, 8379.75], [1551.0, 8642.0], [1585.0, 8062.0], [1561.0, 8490.75], [1583.0, 8069.5], [1581.0, 8122.0], [1659.0, 7937.5], [1663.0, 7730.333333333333], [1635.0, 8250.666666666666], [1633.0, 6898.0], [1661.0, 7817.0], [1631.0, 8029.0], [1601.0, 7867.0], [1615.0, 8389.0], [1651.0, 6885.0], [1613.0, 8110.5], [1627.0, 7909.75], [1617.0, 8388.0], [1623.0, 7857.909090909089], [1641.0, 7950.2], [1645.0, 6752.5], [1643.0, 6876.0], [1669.0, 6813.0], [1713.0, 3988.0], [1679.0, 7640.5], [1677.0, 6934.666666666667], [1693.0, 8083.0], [1691.0, 7506.5], [1689.0, 7729.25], [1681.0, 7496.785714285714], [1727.0, 7837.0], [1701.0, 7292.428571428572], [1719.0, 6996.333333333333], [1711.0, 6959.0], [1783.0, 6408.5], [1791.0, 6298.333333333333], [1789.0, 5825.0], [1787.0, 6320.0], [1777.0, 6374.6], [1739.0, 6408.0], [1737.0, 6584.666666666667], [1733.0, 6424.5], [1781.0, 7163.833333333332], [1731.0, 6851.5], [1729.0, 7702.5], [1757.0, 6380.5], [1755.0, 7055.636363636364], [1753.0, 6549.666666666667], [1749.0, 6751.0], [1761.0, 6116.5], [1765.0, 6839.0], [1769.0, 6818.0], [1847.0, 6158.0], [1851.0, 5954.0], [1825.0, 6712.0], [1833.0, 6244.0], [1829.0, 5994.0], [1835.0, 6231.5], [1839.0, 5769.666666666667], [1837.0, 6340.0], [1853.0, 5572.5], [1849.0, 5925.5], [1845.0, 5945.666666666667], [1843.0, 6189.0], [1807.0, 7383.0], [1805.0, 6821.0], [1799.0, 6786.0], [1793.0, 6769.0], [1823.0, 5817.0], [1819.0, 6417.333333333333], [1815.0, 6591.5], [1809.0, 6089.0], [1869.0, 5602.0], [1889.0, 5575.0], [1913.0, 5485.666666666667], [1915.0, 5785.5], [1891.0, 5525.0], [1893.0, 5567.0], [1909.0, 5915.0], [1911.0, 5921.333333333333], [1905.0, 5669.0], [1871.0, 5967.0], [1867.0, 5593.333333333333], [1865.0, 6389.0], [1863.0, 5588.0], [1861.0, 6395.5], [1859.0, 5777.0], [1887.0, 6307.0], [1885.0, 5545.5], [1883.0, 5547.0], [1881.0, 6146.6], [1879.0, 5554.0], [1877.0, 5544.0], [1875.0, 6379.0], [1901.0, 6132.0], [1899.0, 5512.0], [1897.0, 6680.0], [1895.0, 6414.0], [1971.0, 5443.0], [1957.0, 3678.3333333333335], [1955.0, 6697.0], [1959.0, 6786.5], [1961.0, 6767.0], [1951.0, 3239.6666666666665], [1927.0, 5421.0], [1931.0, 5418.25], [1923.0, 5473.5], [1921.0, 5461.111111111111], [1943.0, 3475.5], [1941.0, 5413.0], [1939.0, 5417.0], [1947.0, 2126.75], [1965.0, 3960.2], [1963.0, 6765.5], [1993.0, 5378.333333333333], [1985.0, 5396.333333333333]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[996.3599999999966, 10573.174250000005]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1994.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10388.316666666668, "minX": 1.63133448E12, "maxY": 153251.53333333333, "series": [{"data": [[1.63133454E12, 153251.53333333333], [1.63133448E12, 93406.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63133454E12, 19812.666666666668], [1.63133448E12, 10388.316666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133454E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9091.193548387106, "minX": 1.63133448E12, "maxY": 11451.03542993631, "series": [{"data": [[1.63133454E12, 11451.03542993631], [1.63133448E12, 9091.193548387106]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133454E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9024.52486559139, "minX": 1.63133448E12, "maxY": 10693.620621019114, "series": [{"data": [[1.63133454E12, 10693.620621019114], [1.63133448E12, 9024.52486559139]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133454E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4663.160828025473, "minX": 1.63133448E12, "maxY": 6729.155913978495, "series": [{"data": [[1.63133454E12, 4663.160828025473], [1.63133448E12, 6729.155913978495]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133454E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 530.0, "minX": 1.63133448E12, "maxY": 26588.0, "series": [{"data": [[1.63133454E12, 26588.0], [1.63133448E12, 11693.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63133454E12, 17559.7], [1.63133448E12, 10939.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63133454E12, 26550.0], [1.63133448E12, 11495.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63133454E12, 19583.0], [1.63133448E12, 11233.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63133454E12, 530.0], [1.63133448E12, 1044.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63133454E12, 10082.5], [1.63133448E12, 9815.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133454E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1137.0, "minX": 1.0, "maxY": 26547.0, "series": [{"data": [[2.0, 19849.0], [622.0, 7858.0], [40.0, 15327.0], [42.0, 11890.5], [49.0, 9770.0], [65.0, 26547.0], [70.0, 11956.5], [69.0, 19603.0], [72.0, 18969.0], [80.0, 9603.5], [84.0, 8624.0], [90.0, 10525.5], [95.0, 14745.0], [6.0, 1137.0], [108.0, 15762.0], [116.0, 17430.5], [124.0, 13119.5], [133.0, 6392.0], [179.0, 5584.0], [187.0, 6924.0], [257.0, 8115.0], [1.0, 16022.0], [281.0, 14561.0], [301.0, 8649.0], [18.0, 5939.5], [21.0, 1275.0], [357.0, 10305.0], [378.0, 10844.0], [23.0, 9273.5], [24.0, 22955.0], [25.0, 12786.0], [26.0, 9620.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 622.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1136.0, "minX": 1.0, "maxY": 19544.0, "series": [{"data": [[2.0, 17993.0], [622.0, 6876.0], [40.0, 12958.0], [42.0, 11862.0], [49.0, 9639.0], [65.0, 13331.0], [70.0, 11956.5], [69.0, 19544.0], [72.0, 18957.0], [80.0, 9400.5], [84.0, 8617.5], [90.0, 10510.0], [95.0, 14114.0], [6.0, 1136.0], [108.0, 15717.0], [116.0, 17197.0], [124.0, 13085.0], [133.0, 6392.0], [179.0, 5584.0], [187.0, 6924.0], [257.0, 8087.0], [1.0, 16022.0], [281.0, 14491.0], [301.0, 8649.0], [18.0, 5939.5], [21.0, 1275.0], [357.0, 10177.0], [378.0, 10815.0], [23.0, 7171.5], [24.0, 9734.0], [25.0, 12786.0], [26.0, 9620.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 622.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63133448E12, "maxY": 33.333333333333336, "series": [{"data": [[1.63133454E12, 33.333333333333336], [1.63133448E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133454E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 24.8, "minX": 1.63133448E12, "maxY": 41.86666666666667, "series": [{"data": [[1.63133454E12, 41.86666666666667], [1.63133448E12, 24.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63133454E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 24.8, "minX": 1.63133448E12, "maxY": 41.86666666666667, "series": [{"data": [[1.63133454E12, 41.86666666666667], [1.63133448E12, 24.8]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133454E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 24.8, "minX": 1.63133448E12, "maxY": 41.86666666666667, "series": [{"data": [[1.63133454E12, 41.86666666666667], [1.63133448E12, 24.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63133454E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

