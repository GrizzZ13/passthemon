/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 735.0, "minX": 0.0, "maxY": 21335.0, "series": [{"data": [[0.0, 735.0], [0.1, 1287.0], [0.2, 1289.0], [0.3, 1289.0], [0.4, 1292.0], [0.5, 1292.0], [0.6, 1292.0], [0.7, 1295.0], [0.8, 1296.0], [0.9, 1296.0], [1.0, 1296.0], [1.1, 1296.0], [1.2, 1296.0], [1.3, 1297.0], [1.4, 1298.0], [1.5, 1299.0], [1.6, 1299.0], [1.7, 1299.0], [1.8, 1300.0], [1.9, 1300.0], [2.0, 1301.0], [2.1, 1302.0], [2.2, 1302.0], [2.3, 1303.0], [2.4, 1303.0], [2.5, 1304.0], [2.6, 1304.0], [2.7, 1304.0], [2.8, 1305.0], [2.9, 1305.0], [3.0, 1305.0], [3.1, 1306.0], [3.2, 1308.0], [3.3, 1309.0], [3.4, 1309.0], [3.5, 1309.0], [3.6, 1309.0], [3.7, 1311.0], [3.8, 1311.0], [3.9, 1312.0], [4.0, 1313.0], [4.1, 1313.0], [4.2, 1313.0], [4.3, 1316.0], [4.4, 1316.0], [4.5, 1317.0], [4.6, 1321.0], [4.7, 1326.0], [4.8, 1326.0], [4.9, 1329.0], [5.0, 1329.0], [5.1, 1329.0], [5.2, 1330.0], [5.3, 1330.0], [5.4, 1331.0], [5.5, 1332.0], [5.6, 1335.0], [5.7, 1335.0], [5.8, 1335.0], [5.9, 1336.0], [6.0, 1337.0], [6.1, 1337.0], [6.2, 1337.0], [6.3, 1338.0], [6.4, 1342.0], [6.5, 1343.0], [6.6, 1343.0], [6.7, 1343.0], [6.8, 1344.0], [6.9, 1346.0], [7.0, 1346.0], [7.1, 1347.0], [7.2, 1349.0], [7.3, 1352.0], [7.4, 1409.0], [7.5, 1437.0], [7.6, 1438.0], [7.7, 1451.0], [7.8, 1454.0], [7.9, 1458.0], [8.0, 1459.0], [8.1, 1459.0], [8.2, 1463.0], [8.3, 1466.0], [8.4, 1467.0], [8.5, 1468.0], [8.6, 1471.0], [8.7, 1472.0], [8.8, 1473.0], [8.9, 1473.0], [9.0, 1476.0], [9.1, 1476.0], [9.2, 1483.0], [9.3, 1484.0], [9.4, 1485.0], [9.5, 1486.0], [9.6, 1490.0], [9.7, 1490.0], [9.8, 1499.0], [9.9, 1499.0], [10.0, 1502.0], [10.1, 1503.0], [10.2, 1506.0], [10.3, 1511.0], [10.4, 1519.0], [10.5, 1521.0], [10.6, 1522.0], [10.7, 1523.0], [10.8, 1524.0], [10.9, 1527.0], [11.0, 1532.0], [11.1, 1533.0], [11.2, 1536.0], [11.3, 1542.0], [11.4, 1546.0], [11.5, 1548.0], [11.6, 1550.0], [11.7, 1551.0], [11.8, 1553.0], [11.9, 1556.0], [12.0, 1560.0], [12.1, 1561.0], [12.2, 1562.0], [12.3, 1563.0], [12.4, 1565.0], [12.5, 1568.0], [12.6, 1571.0], [12.7, 1572.0], [12.8, 1573.0], [12.9, 1575.0], [13.0, 1591.0], [13.1, 1591.0], [13.2, 1592.0], [13.3, 1592.0], [13.4, 1592.0], [13.5, 1594.0], [13.6, 1596.0], [13.7, 1599.0], [13.8, 1601.0], [13.9, 1601.0], [14.0, 1604.0], [14.1, 1605.0], [14.2, 1606.0], [14.3, 1612.0], [14.4, 1618.0], [14.5, 1626.0], [14.6, 1630.0], [14.7, 1634.0], [14.8, 1635.0], [14.9, 1636.0], [15.0, 1636.0], [15.1, 1637.0], [15.2, 1638.0], [15.3, 1639.0], [15.4, 1640.0], [15.5, 1640.0], [15.6, 1640.0], [15.7, 1641.0], [15.8, 1642.0], [15.9, 1643.0], [16.0, 1644.0], [16.1, 1647.0], [16.2, 1649.0], [16.3, 1649.0], [16.4, 1650.0], [16.5, 1653.0], [16.6, 1682.0], [16.7, 1685.0], [16.8, 1689.0], [16.9, 1691.0], [17.0, 1695.0], [17.1, 1705.0], [17.2, 1706.0], [17.3, 1709.0], [17.4, 1709.0], [17.5, 1711.0], [17.6, 1713.0], [17.7, 1714.0], [17.8, 1719.0], [17.9, 1722.0], [18.0, 1724.0], [18.1, 1725.0], [18.2, 1730.0], [18.3, 1731.0], [18.4, 1731.0], [18.5, 1732.0], [18.6, 1734.0], [18.7, 1738.0], [18.8, 1739.0], [18.9, 1740.0], [19.0, 1741.0], [19.1, 1742.0], [19.2, 1742.0], [19.3, 1743.0], [19.4, 1746.0], [19.5, 1747.0], [19.6, 1749.0], [19.7, 1749.0], [19.8, 1750.0], [19.9, 1751.0], [20.0, 1752.0], [20.1, 1753.0], [20.2, 1757.0], [20.3, 1760.0], [20.4, 1765.0], [20.5, 1767.0], [20.6, 1769.0], [20.7, 1769.0], [20.8, 1769.0], [20.9, 1771.0], [21.0, 1771.0], [21.1, 1771.0], [21.2, 1772.0], [21.3, 1774.0], [21.4, 1774.0], [21.5, 1774.0], [21.6, 1775.0], [21.7, 1775.0], [21.8, 1778.0], [21.9, 1778.0], [22.0, 1779.0], [22.1, 1780.0], [22.2, 1780.0], [22.3, 1783.0], [22.4, 1784.0], [22.5, 1811.0], [22.6, 1813.0], [22.7, 1821.0], [22.8, 1821.0], [22.9, 1822.0], [23.0, 1828.0], [23.1, 1831.0], [23.2, 1834.0], [23.3, 1849.0], [23.4, 1849.0], [23.5, 1851.0], [23.6, 1859.0], [23.7, 1860.0], [23.8, 1861.0], [23.9, 1862.0], [24.0, 1868.0], [24.1, 1871.0], [24.2, 1872.0], [24.3, 1876.0], [24.4, 1895.0], [24.5, 1904.0], [24.6, 1912.0], [24.7, 1916.0], [24.8, 1926.0], [24.9, 1927.0], [25.0, 1940.0], [25.1, 1949.0], [25.2, 1952.0], [25.3, 1958.0], [25.4, 1961.0], [25.5, 1962.0], [25.6, 1972.0], [25.7, 2017.0], [25.8, 2018.0], [25.9, 2020.0], [26.0, 2022.0], [26.1, 2023.0], [26.2, 2025.0], [26.3, 2027.0], [26.4, 2029.0], [26.5, 2031.0], [26.6, 2033.0], [26.7, 2035.0], [26.8, 2037.0], [26.9, 2046.0], [27.0, 2070.0], [27.1, 2074.0], [27.2, 2090.0], [27.3, 2101.0], [27.4, 2102.0], [27.5, 2112.0], [27.6, 2112.0], [27.7, 2120.0], [27.8, 2133.0], [27.9, 2140.0], [28.0, 2142.0], [28.1, 2144.0], [28.2, 2150.0], [28.3, 2152.0], [28.4, 2152.0], [28.5, 2158.0], [28.6, 2163.0], [28.7, 2169.0], [28.8, 2172.0], [28.9, 2184.0], [29.0, 2187.0], [29.1, 2190.0], [29.2, 2194.0], [29.3, 2205.0], [29.4, 2211.0], [29.5, 2223.0], [29.6, 2231.0], [29.7, 2239.0], [29.8, 2250.0], [29.9, 2266.0], [30.0, 2271.0], [30.1, 2271.0], [30.2, 2272.0], [30.3, 2272.0], [30.4, 2295.0], [30.5, 2298.0], [30.6, 2300.0], [30.7, 2304.0], [30.8, 2309.0], [30.9, 2310.0], [31.0, 2311.0], [31.1, 2311.0], [31.2, 2312.0], [31.3, 2314.0], [31.4, 2329.0], [31.5, 2329.0], [31.6, 2342.0], [31.7, 2354.0], [31.8, 2357.0], [31.9, 2362.0], [32.0, 2363.0], [32.1, 2370.0], [32.2, 2374.0], [32.3, 2383.0], [32.4, 2389.0], [32.5, 2389.0], [32.6, 2399.0], [32.7, 2403.0], [32.8, 2407.0], [32.9, 2418.0], [33.0, 2418.0], [33.1, 2424.0], [33.2, 2430.0], [33.3, 2434.0], [33.4, 2439.0], [33.5, 2444.0], [33.6, 2462.0], [33.7, 2472.0], [33.8, 2482.0], [33.9, 2495.0], [34.0, 2502.0], [34.1, 2506.0], [34.2, 2508.0], [34.3, 2517.0], [34.4, 2521.0], [34.5, 2523.0], [34.6, 2526.0], [34.7, 2530.0], [34.8, 2539.0], [34.9, 2568.0], [35.0, 2582.0], [35.1, 2587.0], [35.2, 2588.0], [35.3, 2601.0], [35.4, 2605.0], [35.5, 2609.0], [35.6, 2609.0], [35.7, 2610.0], [35.8, 2612.0], [35.9, 2630.0], [36.0, 2646.0], [36.1, 2648.0], [36.2, 2653.0], [36.3, 2653.0], [36.4, 2674.0], [36.5, 2675.0], [36.6, 2678.0], [36.7, 2681.0], [36.8, 2682.0], [36.9, 2684.0], [37.0, 2686.0], [37.1, 2687.0], [37.2, 2693.0], [37.3, 2696.0], [37.4, 2707.0], [37.5, 2718.0], [37.6, 2723.0], [37.7, 2723.0], [37.8, 2729.0], [37.9, 2730.0], [38.0, 2738.0], [38.1, 2739.0], [38.2, 2744.0], [38.3, 2750.0], [38.4, 2752.0], [38.5, 2753.0], [38.6, 2764.0], [38.7, 2766.0], [38.8, 2771.0], [38.9, 2775.0], [39.0, 2777.0], [39.1, 2784.0], [39.2, 2786.0], [39.3, 2791.0], [39.4, 2795.0], [39.5, 2800.0], [39.6, 2804.0], [39.7, 2825.0], [39.8, 2838.0], [39.9, 2848.0], [40.0, 2850.0], [40.1, 2857.0], [40.2, 2865.0], [40.3, 2867.0], [40.4, 2871.0], [40.5, 2874.0], [40.6, 2891.0], [40.7, 2907.0], [40.8, 2912.0], [40.9, 2920.0], [41.0, 2930.0], [41.1, 2944.0], [41.2, 2951.0], [41.3, 2951.0], [41.4, 2956.0], [41.5, 2957.0], [41.6, 2959.0], [41.7, 2961.0], [41.8, 2963.0], [41.9, 2977.0], [42.0, 2984.0], [42.1, 3013.0], [42.2, 3013.0], [42.3, 3016.0], [42.4, 3021.0], [42.5, 3022.0], [42.6, 3030.0], [42.7, 3030.0], [42.8, 3031.0], [42.9, 3035.0], [43.0, 3052.0], [43.1, 3062.0], [43.2, 3064.0], [43.3, 3068.0], [43.4, 3074.0], [43.5, 3077.0], [43.6, 3078.0], [43.7, 3088.0], [43.8, 3094.0], [43.9, 3108.0], [44.0, 3111.0], [44.1, 3117.0], [44.2, 3124.0], [44.3, 3127.0], [44.4, 3159.0], [44.5, 3160.0], [44.6, 3163.0], [44.7, 3171.0], [44.8, 3176.0], [44.9, 3184.0], [45.0, 3185.0], [45.1, 3187.0], [45.2, 3199.0], [45.3, 3201.0], [45.4, 3205.0], [45.5, 3211.0], [45.6, 3230.0], [45.7, 3240.0], [45.8, 3243.0], [45.9, 3244.0], [46.0, 3245.0], [46.1, 3245.0], [46.2, 3256.0], [46.3, 3257.0], [46.4, 3265.0], [46.5, 3267.0], [46.6, 3270.0], [46.7, 3278.0], [46.8, 3278.0], [46.9, 3282.0], [47.0, 3288.0], [47.1, 3301.0], [47.2, 3302.0], [47.3, 3303.0], [47.4, 3308.0], [47.5, 3317.0], [47.6, 3319.0], [47.7, 3322.0], [47.8, 3334.0], [47.9, 3336.0], [48.0, 3339.0], [48.1, 3350.0], [48.2, 3357.0], [48.3, 3360.0], [48.4, 3363.0], [48.5, 3402.0], [48.6, 3403.0], [48.7, 3404.0], [48.8, 3409.0], [48.9, 3428.0], [49.0, 3437.0], [49.1, 3441.0], [49.2, 3449.0], [49.3, 3450.0], [49.4, 3450.0], [49.5, 3450.0], [49.6, 3467.0], [49.7, 3470.0], [49.8, 3474.0], [49.9, 3480.0], [50.0, 3485.0], [50.1, 3487.0], [50.2, 3498.0], [50.3, 3505.0], [50.4, 3524.0], [50.5, 3526.0], [50.6, 3530.0], [50.7, 3531.0], [50.8, 3534.0], [50.9, 3539.0], [51.0, 3564.0], [51.1, 3570.0], [51.2, 3580.0], [51.3, 3580.0], [51.4, 3593.0], [51.5, 3603.0], [51.6, 3608.0], [51.7, 3609.0], [51.8, 3612.0], [51.9, 3614.0], [52.0, 3627.0], [52.1, 3630.0], [52.2, 3633.0], [52.3, 3655.0], [52.4, 3656.0], [52.5, 3667.0], [52.6, 3667.0], [52.7, 3669.0], [52.8, 3677.0], [52.9, 3678.0], [53.0, 3688.0], [53.1, 3692.0], [53.2, 3695.0], [53.3, 3695.0], [53.4, 3704.0], [53.5, 3706.0], [53.6, 3710.0], [53.7, 3715.0], [53.8, 3720.0], [53.9, 3733.0], [54.0, 3733.0], [54.1, 3733.0], [54.2, 3739.0], [54.3, 3740.0], [54.4, 3740.0], [54.5, 3746.0], [54.6, 3755.0], [54.7, 3765.0], [54.8, 3772.0], [54.9, 3776.0], [55.0, 3783.0], [55.1, 3785.0], [55.2, 3793.0], [55.3, 3800.0], [55.4, 3800.0], [55.5, 3817.0], [55.6, 3818.0], [55.7, 3818.0], [55.8, 3820.0], [55.9, 3821.0], [56.0, 3836.0], [56.1, 3838.0], [56.2, 3840.0], [56.3, 3844.0], [56.4, 3846.0], [56.5, 3847.0], [56.6, 3871.0], [56.7, 3875.0], [56.8, 3878.0], [56.9, 3884.0], [57.0, 3890.0], [57.1, 3892.0], [57.2, 3893.0], [57.3, 3899.0], [57.4, 3903.0], [57.5, 3906.0], [57.6, 3909.0], [57.7, 3914.0], [57.8, 3917.0], [57.9, 3925.0], [58.0, 3926.0], [58.1, 3938.0], [58.2, 3945.0], [58.3, 3952.0], [58.4, 3962.0], [58.5, 3965.0], [58.6, 3980.0], [58.7, 3982.0], [58.8, 3992.0], [58.9, 3998.0], [59.0, 4000.0], [59.1, 4003.0], [59.2, 4006.0], [59.3, 4019.0], [59.4, 4022.0], [59.5, 4027.0], [59.6, 4037.0], [59.7, 4037.0], [59.8, 4043.0], [59.9, 4044.0], [60.0, 4044.0], [60.1, 4068.0], [60.2, 4071.0], [60.3, 4080.0], [60.4, 4110.0], [60.5, 4111.0], [60.6, 4112.0], [60.7, 4116.0], [60.8, 4116.0], [60.9, 4121.0], [61.0, 4126.0], [61.1, 4126.0], [61.2, 4131.0], [61.3, 4139.0], [61.4, 4144.0], [61.5, 4148.0], [61.6, 4158.0], [61.7, 4170.0], [61.8, 4171.0], [61.9, 4185.0], [62.0, 4188.0], [62.1, 4188.0], [62.2, 4190.0], [62.3, 4197.0], [62.4, 4201.0], [62.5, 4206.0], [62.6, 4215.0], [62.7, 4219.0], [62.8, 4220.0], [62.9, 4225.0], [63.0, 4230.0], [63.1, 4232.0], [63.2, 4232.0], [63.3, 4236.0], [63.4, 4246.0], [63.5, 4254.0], [63.6, 4263.0], [63.7, 4271.0], [63.8, 4291.0], [63.9, 4303.0], [64.0, 4312.0], [64.1, 4324.0], [64.2, 4330.0], [64.3, 4330.0], [64.4, 4336.0], [64.5, 4336.0], [64.6, 4341.0], [64.7, 4351.0], [64.8, 4359.0], [64.9, 4360.0], [65.0, 4362.0], [65.1, 4362.0], [65.2, 4381.0], [65.3, 4385.0], [65.4, 4385.0], [65.5, 4391.0], [65.6, 4393.0], [65.7, 4398.0], [65.8, 4410.0], [65.9, 4416.0], [66.0, 4418.0], [66.1, 4424.0], [66.2, 4426.0], [66.3, 4426.0], [66.4, 4432.0], [66.5, 4434.0], [66.6, 4449.0], [66.7, 4451.0], [66.8, 4452.0], [66.9, 4454.0], [67.0, 4454.0], [67.1, 4467.0], [67.2, 4468.0], [67.3, 4468.0], [67.4, 4472.0], [67.5, 4478.0], [67.6, 4479.0], [67.7, 4481.0], [67.8, 4491.0], [67.9, 4493.0], [68.0, 4495.0], [68.1, 4498.0], [68.2, 4500.0], [68.3, 4502.0], [68.4, 4504.0], [68.5, 4506.0], [68.6, 4511.0], [68.7, 4513.0], [68.8, 4517.0], [68.9, 4530.0], [69.0, 4531.0], [69.1, 4545.0], [69.2, 4546.0], [69.3, 4551.0], [69.4, 4563.0], [69.5, 4566.0], [69.6, 4569.0], [69.7, 4579.0], [69.8, 4580.0], [69.9, 4580.0], [70.0, 4581.0], [70.1, 4585.0], [70.2, 4593.0], [70.3, 4600.0], [70.4, 4602.0], [70.5, 4605.0], [70.6, 4611.0], [70.7, 4616.0], [70.8, 4623.0], [70.9, 4627.0], [71.0, 4628.0], [71.1, 4650.0], [71.2, 4654.0], [71.3, 4657.0], [71.4, 4661.0], [71.5, 4666.0], [71.6, 4666.0], [71.7, 4670.0], [71.8, 4684.0], [71.9, 4689.0], [72.0, 4700.0], [72.1, 4705.0], [72.2, 4707.0], [72.3, 4713.0], [72.4, 4720.0], [72.5, 4733.0], [72.6, 4738.0], [72.7, 4738.0], [72.8, 4740.0], [72.9, 4741.0], [73.0, 4745.0], [73.1, 4748.0], [73.2, 4748.0], [73.3, 4782.0], [73.4, 4783.0], [73.5, 4783.0], [73.6, 4812.0], [73.7, 4817.0], [73.8, 4831.0], [73.9, 4838.0], [74.0, 4842.0], [74.1, 4851.0], [74.2, 4853.0], [74.3, 4855.0], [74.4, 4862.0], [74.5, 4878.0], [74.6, 4884.0], [74.7, 4901.0], [74.8, 4914.0], [74.9, 4928.0], [75.0, 4935.0], [75.1, 4935.0], [75.2, 4952.0], [75.3, 4953.0], [75.4, 4957.0], [75.5, 4976.0], [75.6, 4979.0], [75.7, 4990.0], [75.8, 4996.0], [75.9, 5015.0], [76.0, 5017.0], [76.1, 5018.0], [76.2, 5033.0], [76.3, 5045.0], [76.4, 5049.0], [76.5, 5054.0], [76.6, 5057.0], [76.7, 5058.0], [76.8, 5060.0], [76.9, 5067.0], [77.0, 5068.0], [77.1, 5072.0], [77.2, 5081.0], [77.3, 5084.0], [77.4, 5106.0], [77.5, 5108.0], [77.6, 5109.0], [77.7, 5121.0], [77.8, 5121.0], [77.9, 5131.0], [78.0, 5133.0], [78.1, 5139.0], [78.2, 5152.0], [78.3, 5152.0], [78.4, 5160.0], [78.5, 5166.0], [78.6, 5167.0], [78.7, 5171.0], [78.8, 5171.0], [78.9, 5175.0], [79.0, 5175.0], [79.1, 5176.0], [79.2, 5183.0], [79.3, 5185.0], [79.4, 5185.0], [79.5, 5190.0], [79.6, 5202.0], [79.7, 5206.0], [79.8, 5209.0], [79.9, 5225.0], [80.0, 5235.0], [80.1, 5248.0], [80.2, 5253.0], [80.3, 5265.0], [80.4, 5268.0], [80.5, 5269.0], [80.6, 5280.0], [80.7, 5284.0], [80.8, 5286.0], [80.9, 5314.0], [81.0, 5320.0], [81.1, 5322.0], [81.2, 5333.0], [81.3, 5333.0], [81.4, 5338.0], [81.5, 5359.0], [81.6, 5362.0], [81.7, 5374.0], [81.8, 5377.0], [81.9, 5378.0], [82.0, 5408.0], [82.1, 5410.0], [82.2, 5418.0], [82.3, 5434.0], [82.4, 5438.0], [82.5, 5441.0], [82.6, 5442.0], [82.7, 5442.0], [82.8, 5456.0], [82.9, 5462.0], [83.0, 5471.0], [83.1, 5482.0], [83.2, 5483.0], [83.3, 5490.0], [83.4, 5499.0], [83.5, 5504.0], [83.6, 5516.0], [83.7, 5522.0], [83.8, 5523.0], [83.9, 5530.0], [84.0, 5539.0], [84.1, 5541.0], [84.2, 5542.0], [84.3, 5545.0], [84.4, 5556.0], [84.5, 5564.0], [84.6, 5568.0], [84.7, 5574.0], [84.8, 5575.0], [84.9, 5588.0], [85.0, 5597.0], [85.1, 5598.0], [85.2, 5598.0], [85.3, 5607.0], [85.4, 5609.0], [85.5, 5610.0], [85.6, 5614.0], [85.7, 5614.0], [85.8, 5617.0], [85.9, 5623.0], [86.0, 5631.0], [86.1, 5638.0], [86.2, 5646.0], [86.3, 5646.0], [86.4, 5652.0], [86.5, 5652.0], [86.6, 5660.0], [86.7, 5676.0], [86.8, 5681.0], [86.9, 5687.0], [87.0, 5688.0], [87.1, 5696.0], [87.2, 5696.0], [87.3, 5703.0], [87.4, 5714.0], [87.5, 5715.0], [87.6, 5723.0], [87.7, 5731.0], [87.8, 5731.0], [87.9, 5733.0], [88.0, 5738.0], [88.1, 5741.0], [88.2, 5747.0], [88.3, 5747.0], [88.4, 5755.0], [88.5, 5755.0], [88.6, 5765.0], [88.7, 5778.0], [88.8, 5802.0], [88.9, 5803.0], [89.0, 5810.0], [89.1, 5812.0], [89.2, 5819.0], [89.3, 5823.0], [89.4, 5827.0], [89.5, 5829.0], [89.6, 5832.0], [89.7, 5846.0], [89.8, 5847.0], [89.9, 5847.0], [90.0, 5866.0], [90.1, 5867.0], [90.2, 5880.0], [90.3, 5904.0], [90.4, 5909.0], [90.5, 5912.0], [90.6, 5913.0], [90.7, 5916.0], [90.8, 5923.0], [90.9, 5925.0], [91.0, 5937.0], [91.1, 5952.0], [91.2, 5953.0], [91.3, 5954.0], [91.4, 5961.0], [91.5, 5973.0], [91.6, 5973.0], [91.7, 6015.0], [91.8, 6015.0], [91.9, 6015.0], [92.0, 6016.0], [92.1, 6026.0], [92.2, 6029.0], [92.3, 6032.0], [92.4, 6033.0], [92.5, 6033.0], [92.6, 6042.0], [92.7, 6056.0], [92.8, 6061.0], [92.9, 6062.0], [93.0, 6074.0], [93.1, 6080.0], [93.2, 6092.0], [93.3, 6101.0], [93.4, 6110.0], [93.5, 6115.0], [93.6, 6129.0], [93.7, 6130.0], [93.8, 6131.0], [93.9, 6152.0], [94.0, 6153.0], [94.1, 6160.0], [94.2, 6160.0], [94.3, 6167.0], [94.4, 6170.0], [94.5, 6170.0], [94.6, 6175.0], [94.7, 6183.0], [94.8, 6184.0], [94.9, 6188.0], [95.0, 6196.0], [95.1, 6200.0], [95.2, 6203.0], [95.3, 6237.0], [95.4, 6243.0], [95.5, 6246.0], [95.6, 6265.0], [95.7, 6266.0], [95.8, 6266.0], [95.9, 6283.0], [96.0, 6285.0], [96.1, 6293.0], [96.2, 6293.0], [96.3, 6302.0], [96.4, 6303.0], [96.5, 6327.0], [96.6, 6341.0], [96.7, 6353.0], [96.8, 6395.0], [96.9, 6413.0], [97.0, 6424.0], [97.1, 6445.0], [97.2, 6461.0], [97.3, 6465.0], [97.4, 6480.0], [97.5, 6487.0], [97.6, 6492.0], [97.7, 6528.0], [97.8, 6528.0], [97.9, 6548.0], [98.0, 6549.0], [98.1, 6567.0], [98.2, 6579.0], [98.3, 6582.0], [98.4, 6588.0], [98.5, 6597.0], [98.6, 6605.0], [98.7, 6611.0], [98.8, 6668.0], [98.9, 6700.0], [99.0, 21028.0], [99.1, 21028.0], [99.2, 21029.0], [99.3, 21029.0], [99.4, 21030.0], [99.5, 21032.0], [99.6, 21295.0], [99.7, 21304.0], [99.8, 21335.0], [99.9, 21335.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 57.0, "series": [{"data": [[700.0, 1.0], [1200.0, 16.0], [1300.0, 57.0], [1400.0, 26.0], [1500.0, 38.0], [1600.0, 33.0], [1700.0, 53.0], [1800.0, 20.0], [1900.0, 12.0], [2000.0, 16.0], [2100.0, 20.0], [2200.0, 13.0], [2300.0, 21.0], [2400.0, 13.0], [2500.0, 13.0], [2600.0, 21.0], [2700.0, 21.0], [2800.0, 12.0], [2900.0, 14.0], [3000.0, 18.0], [3100.0, 14.0], [3200.0, 18.0], [3300.0, 14.0], [3400.0, 18.0], [3500.0, 12.0], [3600.0, 19.0], [3700.0, 19.0], [3800.0, 21.0], [3900.0, 16.0], [4000.0, 14.0], [4100.0, 20.0], [4200.0, 15.0], [4300.0, 19.0], [4400.0, 24.0], [4500.0, 21.0], [4600.0, 17.0], [4700.0, 16.0], [4800.0, 11.0], [4900.0, 12.0], [5000.0, 16.0], [5100.0, 22.0], [5200.0, 13.0], [5300.0, 11.0], [5400.0, 15.0], [5500.0, 18.0], [5600.0, 20.0], [5800.0, 15.0], [5700.0, 15.0], [5900.0, 14.0], [6000.0, 16.0], [6100.0, 18.0], [6200.0, 12.0], [6300.0, 6.0], [6400.0, 8.0], [6500.0, 9.0], [6600.0, 3.0], [6700.0, 1.0], [21000.0, 6.0], [21300.0, 3.0], [21200.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 861.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 15.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 861.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 124.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 252.07799999999997, "minX": 1.63046298E12, "maxY": 252.09000000000006, "series": [{"data": [[1.63046298E12, 252.07799999999997]], "isOverall": false, "label": "listHistoryByTime", "isController": false}, {"data": [[1.63046298E12, 252.09000000000006]], "isOverall": false, "label": "listHistory", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046298E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 735.0, "minX": 10.0, "maxY": 21144.5, "series": [{"data": [[10.0, 21144.5], [11.0, 6130.0], [12.0, 6170.0], [14.0, 6227.0], [15.0, 6115.0], [16.0, 6700.0], [17.0, 6203.0], [19.0, 6386.0], [21.0, 6608.5], [22.0, 6597.0], [23.0, 6153.0], [24.0, 6588.0], [25.0, 6582.0], [26.0, 6283.0], [27.0, 6152.0], [28.0, 6196.0], [29.0, 6611.0], [30.0, 6528.0], [31.0, 6528.0], [33.0, 6129.0], [32.0, 6074.0], [34.0, 6056.0], [37.0, 6567.0], [36.0, 6335.5], [39.0, 6480.0], [38.0, 6487.0], [41.0, 6047.0], [43.0, 6548.0], [42.0, 6029.0], [45.0, 6015.0], [44.0, 6015.0], [47.0, 6445.0], [46.0, 6461.0], [49.0, 5916.0], [48.0, 6492.0], [51.0, 6424.0], [50.0, 6353.0], [53.0, 6033.0], [52.0, 6341.0], [54.0, 6413.0], [57.0, 5973.0], [56.0, 6219.0], [59.0, 6015.0], [58.0, 5867.0], [61.0, 5954.0], [60.0, 6302.0], [63.0, 5961.0], [62.0, 5953.0], [67.0, 6395.0], [66.0, 5904.0], [65.0, 6285.0], [64.0, 6327.0], [71.0, 6266.0], [70.0, 6293.0], [69.0, 5866.0], [68.0, 5880.0], [75.0, 6243.0], [74.0, 6246.0], [73.0, 6232.5], [79.0, 5827.0], [78.0, 6074.5], [76.0, 6237.0], [83.0, 5733.0], [82.0, 5803.0], [81.0, 5731.0], [80.0, 6293.0], [87.0, 6179.5], [85.0, 5936.5], [91.0, 5747.0], [90.0, 5714.0], [89.0, 5638.0], [88.0, 6160.0], [94.0, 5688.0], [93.0, 6131.0], [92.0, 6101.0], [99.0, 5652.0], [98.0, 5741.0], [97.0, 5696.0], [96.0, 6112.5], [103.0, 6080.0], [102.0, 5696.0], [101.0, 6033.0], [100.0, 6160.0], [107.0, 5631.0], [106.0, 6016.0], [105.0, 6061.0], [104.0, 5556.0], [111.0, 5609.0], [110.0, 5607.0], [109.0, 6110.0], [108.0, 5623.0], [115.0, 5574.0], [114.0, 5504.0], [113.0, 6026.0], [112.0, 5913.0], [119.0, 5610.0], [118.0, 5545.0], [117.0, 5937.0], [116.0, 5575.0], [123.0, 5541.0], [122.0, 5923.0], [121.0, 5925.0], [120.0, 5597.0], [127.0, 5912.0], [126.0, 5516.0], [125.0, 5564.0], [124.0, 5952.0], [134.0, 5802.0], [133.0, 5812.0], [132.0, 5823.0], [131.0, 5456.0], [130.0, 5681.0], [129.0, 5490.0], [128.0, 5568.0], [143.0, 5755.0], [142.0, 5755.0], [141.0, 5778.0], [140.0, 5824.0], [138.0, 5765.0], [137.0, 5909.0], [136.0, 5644.5], [151.0, 5362.0], [150.0, 5731.0], [149.0, 5785.0], [147.0, 5742.5], [145.0, 5676.0], [144.0, 5410.0], [158.0, 5322.0], [157.0, 5646.0], [156.0, 5338.0], [155.0, 5810.0], [154.0, 5359.0], [153.0, 5715.0], [152.0, 5832.0], [167.0, 5253.0], [166.0, 5652.0], [165.0, 5268.0], [164.0, 5245.0], [162.0, 5286.0], [161.0, 5265.0], [160.0, 5447.0], [175.0, 5614.0], [174.0, 5176.0], [173.0, 5185.0], [172.0, 5593.0], [170.0, 5598.0], [169.0, 5617.0], [168.0, 5660.0], [182.0, 5209.0], [181.0, 5522.0], [180.0, 5542.0], [179.0, 5225.0], [178.0, 5171.0], [177.0, 5687.0], [176.0, 5614.0], [191.0, 5483.0], [190.0, 5530.0], [189.0, 5523.0], [188.0, 5539.0], [187.0, 5171.0], [186.0, 5185.0], [185.0, 5121.0], [184.0, 5161.0], [197.0, 5265.5], [195.0, 5302.5], [193.0, 5067.0], [192.0, 5121.0], [207.0, 5442.0], [206.0, 5084.0], [205.0, 5018.0], [204.0, 5108.0], [203.0, 5166.0], [202.0, 5109.0], [201.0, 5471.0], [200.0, 5203.333333333333], [215.0, 5462.0], [214.0, 4957.0], [213.0, 5033.0], [212.0, 4976.0], [211.0, 4996.0], [210.0, 5058.0], [209.0, 5418.0], [208.0, 4990.0], [223.0, 5320.0], [222.0, 5408.0], [221.0, 5314.0], [220.0, 4953.0], [219.0, 5438.0], [218.0, 5441.0], [217.0, 5378.0], [216.0, 5333.0], [231.0, 5202.0], [230.0, 5333.0], [229.0, 5235.0], [228.0, 5280.0], [227.0, 4884.0], [226.0, 5374.0], [225.0, 5377.0], [224.0, 5269.0], [239.0, 5175.0], [238.0, 5133.0], [237.0, 4720.0], [236.0, 5152.0], [235.0, 5190.0], [234.0, 4831.0], [233.0, 5175.0], [232.0, 4901.0], [247.0, 4703.0], [245.0, 5152.0], [244.0, 4914.25], [240.0, 5060.0], [255.0, 5072.0], [254.0, 4705.0], [253.0, 5160.0], [252.0, 4616.0], [251.0, 5057.0], [250.0, 4707.0], [249.0, 4654.0], [248.0, 4748.0], [270.0, 4952.0], [271.0, 4935.0], [269.0, 5081.0], [268.0, 4928.0], [267.0, 4979.0], [266.0, 4657.0], [265.0, 4650.0], [264.0, 4851.0], [263.0, 4579.0], [256.0, 5077.0], [262.0, 4605.0], [261.0, 5054.0], [260.0, 4758.25], [285.0, 4531.0], [284.0, 4454.0], [283.0, 4468.0], [282.0, 4468.0], [281.0, 4546.0], [280.0, 4479.0], [279.0, 4886.5], [277.0, 4848.5], [275.0, 5017.0], [274.0, 4569.0], [273.0, 4504.0], [272.0, 4545.0], [302.0, 4434.0], [303.0, 4478.0], [301.0, 4498.0], [300.0, 4432.0], [299.0, 4733.0], [298.0, 4817.0], [297.0, 4381.0], [296.0, 4451.0], [295.0, 4391.0], [288.0, 4865.0], [291.0, 4759.5], [289.0, 4426.0], [294.0, 4812.0], [293.0, 4410.0], [292.0, 4495.0], [318.0, 4611.0], [319.0, 4324.0], [317.0, 4486.5], [307.0, 4740.0], [306.0, 4741.0], [305.0, 4842.0], [304.0, 4341.0], [315.0, 4700.0], [314.0, 4666.0], [313.0, 4782.0], [312.0, 4330.0], [311.0, 4783.0], [310.0, 4713.0], [309.0, 4385.0], [308.0, 4738.0], [334.0, 4517.0], [335.0, 4351.0], [333.0, 4585.0], [332.0, 4580.0], [331.0, 4364.0], [329.0, 4600.0], [328.0, 4602.0], [327.0, 4551.0], [323.0, 4243.0], [321.0, 4608.0], [326.0, 4627.0], [325.0, 4597.0], [350.0, 4472.0], [351.0, 4454.0], [349.0, 4116.0], [348.0, 4481.0], [347.0, 4493.0], [346.0, 4509.5], [344.0, 4511.0], [343.0, 4232.0], [337.0, 4563.0], [336.0, 4530.0], [339.0, 4502.0], [338.0, 4230.0], [342.0, 4483.5], [340.0, 4491.0], [360.0, 4037.0], [367.0, 4369.25], [363.0, 4044.0], [362.0, 4336.0], [361.0, 4398.0], [359.0, 4385.0], [358.0, 4219.0], [357.0, 4375.8], [352.0, 4452.0], [382.0, 3914.0], [383.0, 4197.0], [381.0, 3938.0], [380.0, 4236.0], [379.0, 4279.0], [377.0, 4080.0], [376.0, 3890.0], [375.0, 4263.0], [369.0, 4022.0], [368.0, 4185.0], [371.0, 3998.0], [370.0, 4116.0], [374.0, 4291.0], [373.0, 4330.0], [372.0, 4424.0], [398.0, 4158.0], [399.0, 4190.0], [397.0, 4194.5], [387.0, 4336.0], [386.0, 4254.0], [385.0, 4359.0], [384.0, 3945.0], [395.0, 4139.0], [394.0, 4206.0], [393.0, 4225.0], [392.0, 4232.0], [391.0, 3906.0], [390.0, 3952.0], [389.0, 3884.0], [388.0, 4220.0], [403.0, 4171.0], [414.0, 3836.0], [415.0, 4111.0], [413.0, 4019.0], [410.0, 4096.0], [408.0, 4111.0], [406.0, 3823.0], [404.0, 3820.0], [402.0, 4144.0], [401.0, 4126.0], [400.0, 4188.0], [430.0, 3992.0], [431.0, 4000.0], [429.0, 3678.0], [428.0, 4006.0], [427.0, 3821.0], [426.0, 4003.0], [425.0, 3695.0], [424.0, 4043.0], [423.0, 4019.0], [417.0, 4037.0], [416.0, 4044.0], [419.0, 4068.0], [418.0, 3733.0], [422.0, 4004.5], [420.0, 3704.0], [446.0, 3917.0], [447.0, 3903.0], [445.0, 3904.0], [435.0, 3962.0], [434.0, 3980.0], [433.0, 3965.0], [432.0, 3893.0], [443.0, 3614.0], [442.0, 3926.0], [441.0, 3655.0], [440.0, 3603.0], [439.0, 3925.0], [438.0, 3815.5], [436.0, 3847.0], [462.0, 3746.0], [463.0, 3783.0], [461.0, 3755.0], [460.0, 3785.0], [459.0, 3818.0], [458.0, 3627.0], [457.0, 3818.0], [456.0, 3844.0], [455.0, 3817.0], [451.0, 3871.0], [450.0, 3878.0], [449.0, 3875.0], [448.0, 3838.0], [454.0, 3691.0], [478.0, 3441.0], [479.0, 3706.0], [477.0, 3733.0], [476.0, 3715.0], [475.0, 3698.0], [473.0, 3733.0], [472.0, 3740.0], [471.0, 3710.0], [465.0, 3659.5], [467.0, 3720.0], [466.0, 3765.0], [470.0, 3776.0], [469.0, 3638.5], [492.0, 3515.0], [494.0, 3609.0], [495.0, 3593.0], [493.0, 3612.0], [490.0, 3580.0], [489.0, 3631.5], [487.0, 3608.0], [481.0, 3692.0], [480.0, 3667.0], [483.0, 3667.0], [482.0, 3695.0], [486.0, 3677.0], [485.0, 3450.0], [484.0, 3688.0], [510.0, 3184.0], [511.0, 3450.0], [509.0, 3240.0], [508.0, 3350.0], [507.0, 3339.0], [506.0, 3367.5], [504.0, 3530.0], [503.0, 3474.0], [497.0, 3531.0], [496.0, 3570.0], [499.0, 3524.0], [498.0, 3257.0], [502.0, 3487.0], [501.0, 3539.0], [500.0, 3467.0], [536.0, 3078.0], [540.0, 3319.0], [543.0, 3301.0], [530.0, 3334.0], [529.0, 3343.5], [533.0, 3187.0], [532.0, 3348.0], [542.0, 3243.0], [541.0, 3245.0], [539.0, 3302.0], [538.0, 3160.0], [537.0, 3317.0], [527.0, 3288.0], [513.0, 3485.0], [512.0, 3498.0], [517.0, 3450.6666666666665], [514.0, 3428.0], [519.0, 3437.0], [518.0, 3404.0], [526.0, 3308.0], [525.0, 3270.0], [524.0, 3303.0], [523.0, 3403.0], [522.0, 3117.0], [521.0, 3449.0], [520.0, 3363.0], [535.0, 3322.0], [534.0, 3357.0], [572.0, 3111.0], [575.0, 2891.0], [561.0, 3088.0], [560.0, 3094.0], [563.0, 3127.0], [562.0, 3199.0], [565.0, 3171.0], [564.0, 3185.0], [574.0, 2777.0], [573.0, 3052.0], [571.0, 3074.0], [570.0, 2951.0], [569.0, 3108.0], [568.0, 3124.0], [559.0, 3163.0], [545.0, 3282.0], [544.0, 3267.0], [547.0, 3256.0], [546.0, 3278.0], [549.0, 3211.0], [548.0, 3068.0], [551.0, 2930.0], [550.0, 3265.0], [558.0, 3031.0], [557.0, 3230.0], [556.0, 3190.5], [554.0, 3244.0], [553.0, 3030.0], [552.0, 3245.0], [567.0, 3159.0], [566.0, 2961.0], [604.0, 2723.0], [607.0, 2681.0], [593.0, 2925.5], [595.0, 2963.0], [594.0, 2984.0], [597.0, 2865.0], [596.0, 2871.0], [606.0, 2850.0], [605.0, 2912.0], [603.0, 2753.0], [602.0, 2920.0], [601.0, 2784.0], [600.0, 2857.0], [591.0, 2730.0], [577.0, 3062.0], [576.0, 3016.0], [579.0, 3077.0], [578.0, 2867.0], [581.0, 3064.0], [580.0, 3021.0], [583.0, 2956.0], [582.0, 3035.0], [590.0, 2951.0], [589.0, 3013.0], [588.0, 2825.0], [587.0, 3013.0], [586.0, 3022.0], [585.0, 3030.0], [584.0, 2977.0], [599.0, 2959.0], [598.0, 2957.0], [636.0, 2723.0], [639.0, 2718.0], [625.0, 2763.3333333333335], [627.0, 2764.0], [626.0, 2786.0], [629.0, 2771.0], [628.0, 2766.0], [638.0, 2707.0], [637.0, 2729.0], [635.0, 2582.0], [634.0, 2739.0], [633.0, 2738.0], [632.0, 2744.0], [622.0, 2693.0], [609.0, 2696.0], [608.0, 2684.0], [611.0, 2874.0], [610.0, 2682.0], [613.0, 2791.0], [612.0, 2775.0], [615.0, 2848.0], [614.0, 2795.0], [621.0, 2609.0], [620.0, 2631.5], [618.0, 2750.0], [617.0, 2838.0], [616.0, 2630.0], [631.0, 2752.0], [630.0, 2601.0], [665.0, 2539.0], [669.0, 2508.0], [671.0, 2514.5], [657.0, 2521.0], [656.0, 2587.0], [659.0, 2482.0], [658.0, 2444.0], [661.0, 2568.0], [660.0, 2495.0], [668.0, 2434.0], [667.0, 2329.0], [666.0, 2357.0], [664.0, 2526.0], [647.0, 2648.0], [646.0, 2675.0], [645.0, 2674.0], [644.0, 2502.0], [643.0, 2682.5], [641.0, 2612.0], [640.0, 2517.0], [655.0, 2605.0], [654.0, 2424.0], [653.0, 2609.0], [652.0, 2418.0], [651.0, 2646.0], [650.0, 2653.0], [649.0, 2530.0], [648.0, 2588.0], [663.0, 2374.0], [662.0, 2439.0], [700.0, 2231.0], [703.0, 2312.0], [689.0, 2194.0], [688.0, 2250.0], [691.0, 2295.0], [690.0, 2310.0], [693.0, 2389.0], [692.0, 2389.0], [702.0, 2266.0], [701.0, 2239.0], [699.0, 2271.0], [698.0, 2342.0], [697.0, 2362.0], [696.0, 2271.0], [687.0, 2407.0], [672.0, 2329.0], [674.0, 2311.0], [673.0, 2403.0], [676.0, 2304.0], [675.0, 2472.0], [679.0, 2399.0], [678.0, 2416.0], [686.0, 2314.0], [685.0, 2418.0], [684.0, 2430.0], [683.0, 2272.0], [682.0, 2383.0], [681.0, 2354.0], [680.0, 2298.0], [695.0, 2172.0], [694.0, 2363.0], [729.0, 2092.5], [734.0, 1987.5], [735.0, 2090.0], [722.0, 2187.0], [721.0, 2109.5], [732.0, 2112.0], [731.0, 2133.0], [730.0, 2152.0], [719.0, 2070.0], [705.0, 2311.0], [704.0, 2101.0], [707.0, 2190.0], [706.0, 2309.0], [711.0, 2209.0], [708.0, 2300.0], [718.0, 2211.0], [717.0, 2223.0], [716.0, 2142.0], [715.0, 2120.0], [714.0, 2169.0], [713.0, 2112.0], [712.0, 2144.0], [727.0, 2158.0], [726.0, 2093.0], [724.0, 2163.0], [723.0, 2031.0], [764.0, 1895.0], [767.0, 1722.0], [753.0, 1904.0], [752.0, 1813.0], [755.0, 1783.0], [754.0, 1962.0], [757.0, 1912.0], [756.0, 1972.0], [766.0, 1834.0], [765.0, 1714.0], [763.0, 1916.0], [762.0, 1731.0], [761.0, 1739.0], [760.0, 1757.0], [751.0, 1927.0], [738.0, 2019.6666666666667], [741.0, 1961.0], [740.0, 2047.0], [743.0, 1958.0], [742.0, 2025.0], [750.0, 2018.0], [749.0, 2022.0], [748.0, 1993.0], [746.0, 2027.0], [745.0, 1945.0], [759.0, 1784.0], [758.0, 1926.0], [773.0, 1769.0], [785.0, 1689.0], [775.0, 1765.0], [774.0, 1859.0], [772.0, 1868.0], [771.0, 1871.0], [770.0, 1711.0], [769.0, 1876.0], [768.0, 1706.0], [820.0, 1303.0], [831.0, 1296.0], [828.0, 1349.0], [826.0, 1473.0], [825.0, 1468.0], [823.0, 1760.0], [822.0, 1292.0], [821.0, 1780.0], [818.0, 1779.8181818181818], [817.0, 1354.0], [816.0, 1557.0], [850.0, 1323.3333333333333], [863.0, 1338.0], [860.0, 1345.0], [859.0, 1308.5], [857.0, 1291.0], [846.0, 1309.8], [835.0, 1298.0], [832.0, 1534.5], [838.0, 1399.5], [837.0, 1314.5], [844.0, 1541.0], [843.0, 1299.0], [840.0, 1421.2], [855.0, 1451.0], [854.0, 1347.0], [853.0, 1322.4], [848.0, 1304.0], [880.0, 1498.3333333333333], [895.0, 1773.6666666666667], [893.0, 1465.3333333333333], [890.0, 1428.3333333333333], [871.0, 1330.0], [869.0, 1310.0], [868.0, 1300.0], [867.0, 1287.0], [865.0, 1310.3333333333333], [864.0, 1316.0], [887.0, 1412.5], [885.0, 1469.6666666666667], [882.0, 1481.0], [881.0, 1780.0], [879.0, 1296.0], [878.0, 1342.0], [877.0, 1563.0], [874.0, 1552.5], [873.0, 1507.0], [872.0, 1321.0], [923.0, 1724.0], [926.0, 1628.0], [922.0, 1664.5], [921.0, 1683.5], [918.0, 1636.0], [917.0, 1596.0], [916.0, 1707.2], [911.0, 1750.0], [898.0, 1851.0], [896.0, 1712.6], [900.0, 1530.75], [899.0, 1775.0], [903.0, 1485.0], [901.0, 1769.0], [910.0, 1610.5], [908.0, 1737.6666666666667], [906.0, 1771.0], [905.0, 1689.0], [904.0, 1773.0], [953.0, 1605.0], [951.0, 1593.5], [950.0, 1524.0], [939.0, 1595.6], [934.0, 1650.3333333333333], [931.0, 1533.0], [930.0, 1648.5], [928.0, 1627.0], [987.0, 1546.5], [991.0, 1515.0], [990.0, 1513.888888888889], [988.0, 1480.5], [986.0, 1522.0], [966.0, 1643.0], [965.0, 1644.0], [962.0, 1521.0], [961.0, 1578.3333333333333], [960.0, 1603.5], [982.0, 1548.0], [979.0, 1600.0], [975.0, 1552.3333333333333], [974.0, 1584.6666666666667], [973.0, 1732.0], [972.0, 1508.5], [971.0, 1612.142857142857], [1000.0, 735.0], [999.0, 1491.5], [997.0, 1437.0], [996.0, 1548.0], [995.0, 1495.5], [993.0, 1467.0], [992.0, 1562.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[503.77500000000066, 3699.7729999999992]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6616.833333333333, "minX": 1.63046298E12, "maxY": 55506.7, "series": [{"data": [[1.63046298E12, 55506.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63046298E12, 6616.833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046298E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3699.7729999999992, "minX": 1.63046298E12, "maxY": 3699.7729999999992, "series": [{"data": [[1.63046298E12, 3699.7729999999992]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046298E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3322.238999999999, "minX": 1.63046298E12, "maxY": 3322.238999999999, "series": [{"data": [[1.63046298E12, 3322.238999999999]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046298E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1270.1130000000019, "minX": 1.63046298E12, "maxY": 1270.1130000000019, "series": [{"data": [[1.63046298E12, 1270.1130000000019]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046298E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 735.0, "minX": 1.63046298E12, "maxY": 6700.0, "series": [{"data": [[1.63046298E12, 6700.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63046298E12, 5887.200000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63046298E12, 6569.76]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63046298E12, 6176.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63046298E12, 735.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63046298E12, 3796.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046298E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 735.0, "minX": 1.0, "maxY": 21031.0, "series": [{"data": [[1.0, 735.0], [288.0, 1708.5], [157.0, 5079.0], [161.0, 2686.0], [165.0, 3695.0], [61.0, 6266.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[288.0, 1335.0], [10.0, 21031.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 288.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 6266.0, "series": [{"data": [[1.0, 733.0], [288.0, 1708.0], [157.0, 5079.0], [161.0, 2686.0], [165.0, 3695.0], [61.0, 6266.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[288.0, 0.0], [10.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 288.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.63046298E12, "maxY": 16.666666666666668, "series": [{"data": [[1.63046298E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046298E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.63046298E12, "maxY": 14.6, "series": [{"data": [[1.63046298E12, 14.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63046298E12, 0.16666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.63046298E12, 1.9]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046298E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.066666666666667, "minX": 1.63046298E12, "maxY": 14.6, "series": [{"data": [[1.63046298E12, 2.066666666666667]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63046298E12, 14.6]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046298E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.066666666666667, "minX": 1.63046298E12, "maxY": 14.6, "series": [{"data": [[1.63046298E12, 14.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63046298E12, 2.066666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046298E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

