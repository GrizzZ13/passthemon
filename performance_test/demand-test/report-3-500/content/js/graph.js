/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 17.0, "minX": 0.0, "maxY": 25039.0, "series": [{"data": [[0.0, 17.0], [0.1, 18.0], [0.2, 18.0], [0.3, 18.0], [0.4, 18.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 20.0], [1.9, 20.0], [2.0, 20.0], [2.1, 20.0], [2.2, 20.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 21.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 21.0], [4.7, 21.0], [4.8, 22.0], [4.9, 22.0], [5.0, 22.0], [5.1, 22.0], [5.2, 22.0], [5.3, 22.0], [5.4, 22.0], [5.5, 22.0], [5.6, 22.0], [5.7, 22.0], [5.8, 23.0], [5.9, 23.0], [6.0, 23.0], [6.1, 23.0], [6.2, 23.0], [6.3, 23.0], [6.4, 23.0], [6.5, 23.0], [6.6, 24.0], [6.7, 24.0], [6.8, 24.0], [6.9, 24.0], [7.0, 24.0], [7.1, 25.0], [7.2, 25.0], [7.3, 25.0], [7.4, 25.0], [7.5, 25.0], [7.6, 26.0], [7.7, 26.0], [7.8, 26.0], [7.9, 26.0], [8.0, 27.0], [8.1, 27.0], [8.2, 27.0], [8.3, 28.0], [8.4, 28.0], [8.5, 28.0], [8.6, 29.0], [8.7, 29.0], [8.8, 29.0], [8.9, 30.0], [9.0, 30.0], [9.1, 32.0], [9.2, 32.0], [9.3, 32.0], [9.4, 33.0], [9.5, 35.0], [9.6, 36.0], [9.7, 37.0], [9.8, 38.0], [9.9, 39.0], [10.0, 39.0], [10.1, 40.0], [10.2, 41.0], [10.3, 41.0], [10.4, 42.0], [10.5, 43.0], [10.6, 44.0], [10.7, 45.0], [10.8, 45.0], [10.9, 47.0], [11.0, 51.0], [11.1, 55.0], [11.2, 57.0], [11.3, 60.0], [11.4, 60.0], [11.5, 60.0], [11.6, 61.0], [11.7, 62.0], [11.8, 63.0], [11.9, 64.0], [12.0, 66.0], [12.1, 68.0], [12.2, 69.0], [12.3, 70.0], [12.4, 72.0], [12.5, 74.0], [12.6, 76.0], [12.7, 77.0], [12.8, 78.0], [12.9, 80.0], [13.0, 82.0], [13.1, 84.0], [13.2, 84.0], [13.3, 87.0], [13.4, 90.0], [13.5, 92.0], [13.6, 93.0], [13.7, 95.0], [13.8, 96.0], [13.9, 97.0], [14.0, 98.0], [14.1, 99.0], [14.2, 103.0], [14.3, 106.0], [14.4, 109.0], [14.5, 109.0], [14.6, 111.0], [14.7, 114.0], [14.8, 115.0], [14.9, 119.0], [15.0, 120.0], [15.1, 123.0], [15.2, 127.0], [15.3, 131.0], [15.4, 133.0], [15.5, 137.0], [15.6, 142.0], [15.7, 144.0], [15.8, 147.0], [15.9, 148.0], [16.0, 149.0], [16.1, 153.0], [16.2, 153.0], [16.3, 155.0], [16.4, 159.0], [16.5, 161.0], [16.6, 162.0], [16.7, 165.0], [16.8, 168.0], [16.9, 170.0], [17.0, 174.0], [17.1, 177.0], [17.2, 178.0], [17.3, 180.0], [17.4, 184.0], [17.5, 186.0], [17.6, 189.0], [17.7, 192.0], [17.8, 198.0], [17.9, 200.0], [18.0, 202.0], [18.1, 203.0], [18.2, 203.0], [18.3, 205.0], [18.4, 208.0], [18.5, 209.0], [18.6, 212.0], [18.7, 214.0], [18.8, 217.0], [18.9, 218.0], [19.0, 219.0], [19.1, 222.0], [19.2, 224.0], [19.3, 225.0], [19.4, 227.0], [19.5, 228.0], [19.6, 230.0], [19.7, 235.0], [19.8, 237.0], [19.9, 238.0], [20.0, 243.0], [20.1, 249.0], [20.2, 250.0], [20.3, 250.0], [20.4, 251.0], [20.5, 256.0], [20.6, 257.0], [20.7, 259.0], [20.8, 262.0], [20.9, 264.0], [21.0, 266.0], [21.1, 270.0], [21.2, 271.0], [21.3, 273.0], [21.4, 274.0], [21.5, 277.0], [21.6, 279.0], [21.7, 279.0], [21.8, 280.0], [21.9, 282.0], [22.0, 284.0], [22.1, 285.0], [22.2, 289.0], [22.3, 291.0], [22.4, 292.0], [22.5, 293.0], [22.6, 293.0], [22.7, 294.0], [22.8, 297.0], [22.9, 298.0], [23.0, 299.0], [23.1, 300.0], [23.2, 301.0], [23.3, 306.0], [23.4, 307.0], [23.5, 310.0], [23.6, 313.0], [23.7, 316.0], [23.8, 317.0], [23.9, 320.0], [24.0, 321.0], [24.1, 323.0], [24.2, 327.0], [24.3, 329.0], [24.4, 332.0], [24.5, 333.0], [24.6, 335.0], [24.7, 335.0], [24.8, 337.0], [24.9, 338.0], [25.0, 341.0], [25.1, 343.0], [25.2, 344.0], [25.3, 345.0], [25.4, 346.0], [25.5, 347.0], [25.6, 348.0], [25.7, 351.0], [25.8, 355.0], [25.9, 358.0], [26.0, 360.0], [26.1, 360.0], [26.2, 361.0], [26.3, 363.0], [26.4, 367.0], [26.5, 369.0], [26.6, 371.0], [26.7, 373.0], [26.8, 374.0], [26.9, 379.0], [27.0, 380.0], [27.1, 383.0], [27.2, 384.0], [27.3, 386.0], [27.4, 391.0], [27.5, 394.0], [27.6, 395.0], [27.7, 399.0], [27.8, 402.0], [27.9, 404.0], [28.0, 406.0], [28.1, 409.0], [28.2, 411.0], [28.3, 415.0], [28.4, 417.0], [28.5, 418.0], [28.6, 420.0], [28.7, 424.0], [28.8, 427.0], [28.9, 431.0], [29.0, 432.0], [29.1, 434.0], [29.2, 437.0], [29.3, 439.0], [29.4, 442.0], [29.5, 445.0], [29.6, 448.0], [29.7, 449.0], [29.8, 450.0], [29.9, 454.0], [30.0, 456.0], [30.1, 458.0], [30.2, 464.0], [30.3, 468.0], [30.4, 469.0], [30.5, 470.0], [30.6, 471.0], [30.7, 475.0], [30.8, 477.0], [30.9, 483.0], [31.0, 484.0], [31.1, 488.0], [31.2, 492.0], [31.3, 494.0], [31.4, 496.0], [31.5, 498.0], [31.6, 499.0], [31.7, 500.0], [31.8, 502.0], [31.9, 502.0], [32.0, 505.0], [32.1, 506.0], [32.2, 508.0], [32.3, 508.0], [32.4, 511.0], [32.5, 513.0], [32.6, 515.0], [32.7, 515.0], [32.8, 517.0], [32.9, 518.0], [33.0, 520.0], [33.1, 521.0], [33.2, 523.0], [33.3, 524.0], [33.4, 527.0], [33.5, 529.0], [33.6, 529.0], [33.7, 530.0], [33.8, 534.0], [33.9, 536.0], [34.0, 538.0], [34.1, 540.0], [34.2, 540.0], [34.3, 541.0], [34.4, 543.0], [34.5, 545.0], [34.6, 546.0], [34.7, 548.0], [34.8, 550.0], [34.9, 551.0], [35.0, 553.0], [35.1, 555.0], [35.2, 556.0], [35.3, 557.0], [35.4, 558.0], [35.5, 561.0], [35.6, 563.0], [35.7, 564.0], [35.8, 565.0], [35.9, 566.0], [36.0, 567.0], [36.1, 568.0], [36.2, 570.0], [36.3, 571.0], [36.4, 572.0], [36.5, 573.0], [36.6, 574.0], [36.7, 575.0], [36.8, 576.0], [36.9, 577.0], [37.0, 578.0], [37.1, 579.0], [37.2, 579.0], [37.3, 582.0], [37.4, 583.0], [37.5, 584.0], [37.6, 587.0], [37.7, 589.0], [37.8, 590.0], [37.9, 591.0], [38.0, 592.0], [38.1, 594.0], [38.2, 598.0], [38.3, 599.0], [38.4, 602.0], [38.5, 603.0], [38.6, 605.0], [38.7, 606.0], [38.8, 609.0], [38.9, 612.0], [39.0, 613.0], [39.1, 615.0], [39.2, 617.0], [39.3, 618.0], [39.4, 621.0], [39.5, 622.0], [39.6, 624.0], [39.7, 626.0], [39.8, 626.0], [39.9, 627.0], [40.0, 628.0], [40.1, 633.0], [40.2, 633.0], [40.3, 637.0], [40.4, 639.0], [40.5, 640.0], [40.6, 641.0], [40.7, 642.0], [40.8, 644.0], [40.9, 645.0], [41.0, 647.0], [41.1, 649.0], [41.2, 652.0], [41.3, 654.0], [41.4, 656.0], [41.5, 658.0], [41.6, 660.0], [41.7, 665.0], [41.8, 665.0], [41.9, 667.0], [42.0, 669.0], [42.1, 672.0], [42.2, 674.0], [42.3, 676.0], [42.4, 678.0], [42.5, 680.0], [42.6, 682.0], [42.7, 685.0], [42.8, 685.0], [42.9, 688.0], [43.0, 691.0], [43.1, 692.0], [43.2, 692.0], [43.3, 694.0], [43.4, 696.0], [43.5, 698.0], [43.6, 699.0], [43.7, 700.0], [43.8, 703.0], [43.9, 705.0], [44.0, 709.0], [44.1, 711.0], [44.2, 711.0], [44.3, 717.0], [44.4, 718.0], [44.5, 720.0], [44.6, 723.0], [44.7, 726.0], [44.8, 727.0], [44.9, 729.0], [45.0, 730.0], [45.1, 732.0], [45.2, 732.0], [45.3, 733.0], [45.4, 736.0], [45.5, 737.0], [45.6, 738.0], [45.7, 740.0], [45.8, 743.0], [45.9, 746.0], [46.0, 748.0], [46.1, 750.0], [46.2, 752.0], [46.3, 754.0], [46.4, 756.0], [46.5, 757.0], [46.6, 760.0], [46.7, 761.0], [46.8, 762.0], [46.9, 764.0], [47.0, 766.0], [47.1, 769.0], [47.2, 770.0], [47.3, 772.0], [47.4, 773.0], [47.5, 775.0], [47.6, 776.0], [47.7, 777.0], [47.8, 781.0], [47.9, 787.0], [48.0, 788.0], [48.1, 790.0], [48.2, 792.0], [48.3, 793.0], [48.4, 796.0], [48.5, 797.0], [48.6, 799.0], [48.7, 800.0], [48.8, 805.0], [48.9, 809.0], [49.0, 812.0], [49.1, 815.0], [49.2, 817.0], [49.3, 818.0], [49.4, 819.0], [49.5, 821.0], [49.6, 823.0], [49.7, 825.0], [49.8, 828.0], [49.9, 828.0], [50.0, 831.0], [50.1, 833.0], [50.2, 834.0], [50.3, 836.0], [50.4, 838.0], [50.5, 839.0], [50.6, 842.0], [50.7, 842.0], [50.8, 844.0], [50.9, 847.0], [51.0, 848.0], [51.1, 851.0], [51.2, 853.0], [51.3, 855.0], [51.4, 856.0], [51.5, 857.0], [51.6, 861.0], [51.7, 862.0], [51.8, 864.0], [51.9, 866.0], [52.0, 867.0], [52.1, 868.0], [52.2, 874.0], [52.3, 875.0], [52.4, 877.0], [52.5, 879.0], [52.6, 882.0], [52.7, 884.0], [52.8, 888.0], [52.9, 897.0], [53.0, 897.0], [53.1, 901.0], [53.2, 907.0], [53.3, 909.0], [53.4, 911.0], [53.5, 916.0], [53.6, 922.0], [53.7, 924.0], [53.8, 926.0], [53.9, 930.0], [54.0, 933.0], [54.1, 936.0], [54.2, 940.0], [54.3, 948.0], [54.4, 951.0], [54.5, 953.0], [54.6, 956.0], [54.7, 957.0], [54.8, 959.0], [54.9, 963.0], [55.0, 964.0], [55.1, 969.0], [55.2, 972.0], [55.3, 977.0], [55.4, 979.0], [55.5, 981.0], [55.6, 982.0], [55.7, 983.0], [55.8, 985.0], [55.9, 991.0], [56.0, 994.0], [56.1, 999.0], [56.2, 1000.0], [56.3, 1000.0], [56.4, 1004.0], [56.5, 1008.0], [56.6, 1012.0], [56.7, 1014.0], [56.8, 1017.0], [56.9, 1021.0], [57.0, 1022.0], [57.1, 1022.0], [57.2, 1023.0], [57.3, 1024.0], [57.4, 1025.0], [57.5, 1027.0], [57.6, 1031.0], [57.7, 1035.0], [57.8, 1039.0], [57.9, 1040.0], [58.0, 1045.0], [58.1, 1046.0], [58.2, 1049.0], [58.3, 1052.0], [58.4, 1053.0], [58.5, 1058.0], [58.6, 1063.0], [58.7, 1064.0], [58.8, 1065.0], [58.9, 1067.0], [59.0, 1077.0], [59.1, 1078.0], [59.2, 1083.0], [59.3, 1085.0], [59.4, 1087.0], [59.5, 1090.0], [59.6, 1094.0], [59.7, 1096.0], [59.8, 1098.0], [59.9, 1102.0], [60.0, 1104.0], [60.1, 1105.0], [60.2, 1108.0], [60.3, 1112.0], [60.4, 1114.0], [60.5, 1117.0], [60.6, 1120.0], [60.7, 1123.0], [60.8, 1125.0], [60.9, 1127.0], [61.0, 1130.0], [61.1, 1137.0], [61.2, 1146.0], [61.3, 1147.0], [61.4, 1148.0], [61.5, 1150.0], [61.6, 1151.0], [61.7, 1155.0], [61.8, 1158.0], [61.9, 1160.0], [62.0, 1163.0], [62.1, 1165.0], [62.2, 1168.0], [62.3, 1170.0], [62.4, 1171.0], [62.5, 1179.0], [62.6, 1180.0], [62.7, 1187.0], [62.8, 1189.0], [62.9, 1195.0], [63.0, 1202.0], [63.1, 1209.0], [63.2, 1212.0], [63.3, 1215.0], [63.4, 1220.0], [63.5, 1223.0], [63.6, 1225.0], [63.7, 1231.0], [63.8, 1232.0], [63.9, 1234.0], [64.0, 1236.0], [64.1, 1242.0], [64.2, 1248.0], [64.3, 1250.0], [64.4, 1253.0], [64.5, 1256.0], [64.6, 1259.0], [64.7, 1264.0], [64.8, 1270.0], [64.9, 1276.0], [65.0, 1285.0], [65.1, 1290.0], [65.2, 1299.0], [65.3, 1305.0], [65.4, 1307.0], [65.5, 1313.0], [65.6, 1317.0], [65.7, 1321.0], [65.8, 1324.0], [65.9, 1328.0], [66.0, 1338.0], [66.1, 1346.0], [66.2, 1354.0], [66.3, 1362.0], [66.4, 1366.0], [66.5, 1371.0], [66.6, 1384.0], [66.7, 1388.0], [66.8, 1418.0], [66.9, 1440.0], [67.0, 1474.0], [67.1, 1493.0], [67.2, 1540.0], [67.3, 1558.0], [67.4, 1576.0], [67.5, 1591.0], [67.6, 1604.0], [67.7, 1625.0], [67.8, 1651.0], [67.9, 1670.0], [68.0, 1682.0], [68.1, 1710.0], [68.2, 1719.0], [68.3, 1733.0], [68.4, 1746.0], [68.5, 1754.0], [68.6, 1763.0], [68.7, 1769.0], [68.8, 1778.0], [68.9, 1783.0], [69.0, 1808.0], [69.1, 1832.0], [69.2, 1863.0], [69.3, 1870.0], [69.4, 1877.0], [69.5, 1886.0], [69.6, 1900.0], [69.7, 1917.0], [69.8, 1943.0], [69.9, 1951.0], [70.0, 1958.0], [70.1, 2013.0], [70.2, 2056.0], [70.3, 2067.0], [70.4, 2073.0], [70.5, 2086.0], [70.6, 2094.0], [70.7, 2097.0], [70.8, 2106.0], [70.9, 2116.0], [71.0, 2125.0], [71.1, 2127.0], [71.2, 2180.0], [71.3, 2191.0], [71.4, 2197.0], [71.5, 2204.0], [71.6, 2229.0], [71.7, 2236.0], [71.8, 2251.0], [71.9, 2262.0], [72.0, 2281.0], [72.1, 2296.0], [72.2, 2319.0], [72.3, 2332.0], [72.4, 2356.0], [72.5, 2377.0], [72.6, 2387.0], [72.7, 2399.0], [72.8, 2409.0], [72.9, 2430.0], [73.0, 2432.0], [73.1, 2444.0], [73.2, 2448.0], [73.3, 2470.0], [73.4, 2488.0], [73.5, 2509.0], [73.6, 2526.0], [73.7, 2539.0], [73.8, 2541.0], [73.9, 2585.0], [74.0, 2619.0], [74.1, 2679.0], [74.2, 2878.0], [74.3, 2947.0], [74.4, 2970.0], [74.5, 3002.0], [74.6, 3020.0], [74.7, 3040.0], [74.8, 3058.0], [74.9, 3073.0], [75.0, 3079.0], [75.1, 3092.0], [75.2, 3116.0], [75.3, 3129.0], [75.4, 3159.0], [75.5, 3175.0], [75.6, 3189.0], [75.7, 3193.0], [75.8, 3209.0], [75.9, 3213.0], [76.0, 3217.0], [76.1, 3238.0], [76.2, 3243.0], [76.3, 3257.0], [76.4, 3267.0], [76.5, 3277.0], [76.6, 3286.0], [76.7, 3297.0], [76.8, 3316.0], [76.9, 3320.0], [77.0, 3334.0], [77.1, 3341.0], [77.2, 3356.0], [77.3, 3364.0], [77.4, 3371.0], [77.5, 3395.0], [77.6, 3411.0], [77.7, 3419.0], [77.8, 3427.0], [77.9, 3433.0], [78.0, 3443.0], [78.1, 3451.0], [78.2, 3460.0], [78.3, 3478.0], [78.4, 3487.0], [78.5, 3496.0], [78.6, 3506.0], [78.7, 3511.0], [78.8, 3516.0], [78.9, 3521.0], [79.0, 3527.0], [79.1, 3538.0], [79.2, 3550.0], [79.3, 3554.0], [79.4, 3562.0], [79.5, 3573.0], [79.6, 3588.0], [79.7, 3602.0], [79.8, 3604.0], [79.9, 3618.0], [80.0, 3625.0], [80.1, 3627.0], [80.2, 3629.0], [80.3, 3646.0], [80.4, 3667.0], [80.5, 3671.0], [80.6, 3687.0], [80.7, 3702.0], [80.8, 3710.0], [80.9, 3718.0], [81.0, 3729.0], [81.1, 3747.0], [81.2, 3757.0], [81.3, 3765.0], [81.4, 3778.0], [81.5, 3801.0], [81.6, 3827.0], [81.7, 3836.0], [81.8, 3839.0], [81.9, 3853.0], [82.0, 3862.0], [82.1, 3875.0], [82.2, 3890.0], [82.3, 3896.0], [82.4, 3906.0], [82.5, 3915.0], [82.6, 3933.0], [82.7, 3938.0], [82.8, 3948.0], [82.9, 3958.0], [83.0, 3964.0], [83.1, 3978.0], [83.2, 3985.0], [83.3, 4010.0], [83.4, 4024.0], [83.5, 4048.0], [83.6, 4057.0], [83.7, 4074.0], [83.8, 4081.0], [83.9, 4090.0], [84.0, 4100.0], [84.1, 4113.0], [84.2, 4127.0], [84.3, 4141.0], [84.4, 4157.0], [84.5, 4175.0], [84.6, 4213.0], [84.7, 4219.0], [84.8, 4228.0], [84.9, 4232.0], [85.0, 4246.0], [85.1, 4255.0], [85.2, 4269.0], [85.3, 4419.0], [85.4, 4465.0], [85.5, 4656.0], [85.6, 4816.0], [85.7, 4973.0], [85.8, 5262.0], [85.9, 5382.0], [86.0, 5552.0], [86.1, 5812.0], [86.2, 5929.0], [86.3, 6172.0], [86.4, 6429.0], [86.5, 6789.0], [86.6, 6888.0], [86.7, 7029.0], [86.8, 7144.0], [86.9, 7414.0], [87.0, 7613.0], [87.1, 7787.0], [87.2, 7880.0], [87.3, 7954.0], [87.4, 8077.0], [87.5, 8322.0], [87.6, 8528.0], [87.7, 8661.0], [87.8, 8898.0], [87.9, 9004.0], [88.0, 9226.0], [88.1, 9367.0], [88.2, 9481.0], [88.3, 9581.0], [88.4, 9768.0], [88.5, 10009.0], [88.6, 10042.0], [88.7, 10093.0], [88.8, 10256.0], [88.9, 10385.0], [89.0, 10508.0], [89.1, 10682.0], [89.2, 10745.0], [89.3, 10985.0], [89.4, 11298.0], [89.5, 11444.0], [89.6, 11579.0], [89.7, 11856.0], [89.8, 11879.0], [89.9, 12073.0], [90.0, 12113.0], [90.1, 12398.0], [90.2, 12514.0], [90.3, 12578.0], [90.4, 12798.0], [90.5, 12950.0], [90.6, 13014.0], [90.7, 13208.0], [90.8, 13258.0], [90.9, 13354.0], [91.0, 13441.0], [91.1, 13605.0], [91.2, 13745.0], [91.3, 13892.0], [91.4, 14028.0], [91.5, 14147.0], [91.6, 14267.0], [91.7, 14387.0], [91.8, 14555.0], [91.9, 14630.0], [92.0, 14862.0], [92.1, 14936.0], [92.2, 15072.0], [92.3, 15182.0], [92.4, 15305.0], [92.5, 15343.0], [92.6, 15469.0], [92.7, 15619.0], [92.8, 15778.0], [92.9, 15944.0], [93.0, 16103.0], [93.1, 16211.0], [93.2, 16397.0], [93.3, 16444.0], [93.4, 16576.0], [93.5, 16668.0], [93.6, 16757.0], [93.7, 17061.0], [93.8, 17140.0], [93.9, 17220.0], [94.0, 17422.0], [94.1, 17486.0], [94.2, 17621.0], [94.3, 17845.0], [94.4, 17981.0], [94.5, 18094.0], [94.6, 18172.0], [94.7, 18290.0], [94.8, 18374.0], [94.9, 18536.0], [95.0, 18643.0], [95.1, 18751.0], [95.2, 18925.0], [95.3, 18969.0], [95.4, 19154.0], [95.5, 19223.0], [95.6, 19330.0], [95.7, 19390.0], [95.8, 19551.0], [95.9, 19590.0], [96.0, 19775.0], [96.1, 19939.0], [96.2, 20109.0], [96.3, 20236.0], [96.4, 20337.0], [96.5, 20484.0], [96.6, 20603.0], [96.7, 20683.0], [96.8, 20729.0], [96.9, 20935.0], [97.0, 21052.0], [97.1, 21120.0], [97.2, 21227.0], [97.3, 21358.0], [97.4, 21648.0], [97.5, 21788.0], [97.6, 21939.0], [97.7, 22105.0], [97.8, 22207.0], [97.9, 22310.0], [98.0, 22381.0], [98.1, 22436.0], [98.2, 22649.0], [98.3, 22706.0], [98.4, 22796.0], [98.5, 22831.0], [98.6, 22927.0], [98.7, 23248.0], [98.8, 23273.0], [98.9, 23302.0], [99.0, 23462.0], [99.1, 23610.0], [99.2, 23706.0], [99.3, 23841.0], [99.4, 23959.0], [99.5, 24162.0], [99.6, 24310.0], [99.7, 24417.0], [99.8, 24442.0], [99.9, 24820.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 424.0, "series": [{"data": [[0.0, 424.0], [100.0, 111.0], [200.0, 156.0], [300.0, 140.0], [400.0, 118.0], [500.0, 201.0], [600.0, 158.0], [700.0, 152.0], [800.0, 130.0], [900.0, 95.0], [1000.0, 109.0], [1100.0, 93.0], [1200.0, 69.0], [1300.0, 47.0], [1400.0, 10.0], [1500.0, 14.0], [1600.0, 13.0], [1700.0, 29.0], [1800.0, 18.0], [1900.0, 13.0], [2000.0, 21.0], [2100.0, 23.0], [2200.0, 20.0], [2300.0, 18.0], [2400.0, 22.0], [2500.0, 14.0], [2600.0, 6.0], [2800.0, 3.0], [2900.0, 7.0], [3000.0, 20.0], [3100.0, 18.0], [3200.0, 30.0], [3300.0, 25.0], [3400.0, 29.0], [3500.0, 34.0], [3600.0, 31.0], [3700.0, 24.0], [3800.0, 26.0], [3900.0, 27.0], [4000.0, 22.0], [4100.0, 17.0], [4200.0, 21.0], [4300.0, 1.0], [4400.0, 5.0], [4600.0, 1.0], [4500.0, 1.0], [4700.0, 2.0], [4800.0, 1.0], [4900.0, 3.0], [5100.0, 2.0], [5200.0, 1.0], [5300.0, 3.0], [5400.0, 1.0], [5500.0, 2.0], [5600.0, 1.0], [5700.0, 1.0], [5800.0, 2.0], [5900.0, 2.0], [6100.0, 3.0], [6200.0, 2.0], [6600.0, 1.0], [6400.0, 2.0], [6800.0, 3.0], [6900.0, 2.0], [6700.0, 1.0], [7000.0, 2.0], [7100.0, 2.0], [7300.0, 2.0], [7400.0, 2.0], [7600.0, 2.0], [7500.0, 1.0], [7700.0, 3.0], [7800.0, 2.0], [7900.0, 4.0], [8000.0, 2.0], [8100.0, 2.0], [8300.0, 1.0], [8500.0, 3.0], [8600.0, 3.0], [8400.0, 1.0], [8700.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [9000.0, 2.0], [9100.0, 1.0], [9200.0, 4.0], [9400.0, 3.0], [9500.0, 3.0], [9600.0, 1.0], [9700.0, 2.0], [9300.0, 1.0], [9800.0, 1.0], [9900.0, 1.0], [10000.0, 7.0], [10200.0, 4.0], [10100.0, 1.0], [10400.0, 1.0], [10500.0, 3.0], [10300.0, 1.0], [10600.0, 2.0], [10700.0, 5.0], [11200.0, 3.0], [10900.0, 1.0], [11300.0, 1.0], [11500.0, 3.0], [11700.0, 1.0], [11400.0, 2.0], [11600.0, 1.0], [11800.0, 5.0], [12000.0, 4.0], [12100.0, 1.0], [12300.0, 3.0], [12500.0, 5.0], [12600.0, 1.0], [12700.0, 2.0], [12400.0, 1.0], [12900.0, 4.0], [13200.0, 4.0], [12800.0, 1.0], [13300.0, 5.0], [13000.0, 2.0], [13100.0, 1.0], [13400.0, 2.0], [13700.0, 2.0], [13500.0, 1.0], [13600.0, 2.0], [13800.0, 3.0], [14000.0, 2.0], [13900.0, 2.0], [14100.0, 4.0], [14200.0, 1.0], [14300.0, 3.0], [14500.0, 3.0], [14400.0, 1.0], [14700.0, 2.0], [14800.0, 2.0], [14600.0, 2.0], [14900.0, 3.0], [15000.0, 3.0], [15100.0, 2.0], [15300.0, 5.0], [15200.0, 2.0], [15500.0, 2.0], [15400.0, 2.0], [15600.0, 3.0], [15800.0, 1.0], [15700.0, 1.0], [16100.0, 3.0], [15900.0, 4.0], [16200.0, 3.0], [16300.0, 1.0], [16600.0, 4.0], [16400.0, 5.0], [17000.0, 1.0], [17400.0, 5.0], [16800.0, 2.0], [17200.0, 2.0], [17600.0, 1.0], [18200.0, 1.0], [17800.0, 2.0], [18000.0, 3.0], [18400.0, 1.0], [18600.0, 3.0], [18800.0, 1.0], [19000.0, 2.0], [19200.0, 2.0], [19400.0, 2.0], [20400.0, 2.0], [20200.0, 1.0], [19600.0, 2.0], [20000.0, 1.0], [21000.0, 3.0], [20600.0, 5.0], [21200.0, 2.0], [21400.0, 1.0], [21600.0, 2.0], [21800.0, 2.0], [22400.0, 3.0], [22200.0, 3.0], [22000.0, 1.0], [22600.0, 3.0], [22800.0, 4.0], [23000.0, 1.0], [23400.0, 3.0], [23200.0, 6.0], [23600.0, 3.0], [23800.0, 3.0], [24200.0, 2.0], [24400.0, 6.0], [25000.0, 1.0], [24800.0, 2.0], [16500.0, 1.0], [17100.0, 5.0], [16700.0, 2.0], [18300.0, 4.0], [17500.0, 2.0], [17700.0, 2.0], [18100.0, 5.0], [17900.0, 2.0], [18700.0, 3.0], [18900.0, 4.0], [18500.0, 2.0], [19100.0, 3.0], [19300.0, 5.0], [19500.0, 4.0], [20100.0, 4.0], [19900.0, 3.0], [19700.0, 1.0], [20300.0, 5.0], [20700.0, 4.0], [20900.0, 2.0], [20500.0, 1.0], [21100.0, 3.0], [21300.0, 3.0], [21500.0, 1.0], [21900.0, 2.0], [21700.0, 2.0], [22300.0, 5.0], [22100.0, 3.0], [22500.0, 1.0], [22700.0, 4.0], [22900.0, 2.0], [23100.0, 1.0], [23300.0, 1.0], [23500.0, 2.0], [23700.0, 2.0], [23900.0, 2.0], [24100.0, 3.0], [24300.0, 3.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1061.0, "series": [{"data": [[0.0, 952.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1061.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 984.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.63089564E12, "maxY": 251.05400000000026, "series": [{"data": [[1.63089564E12, 251.05400000000026]], "isOverall": false, "label": "addDemand", "isController": false}, {"data": [[1.63089576E12, 35.474]], "isOverall": false, "label": "getDemandByIde", "isController": false}, {"data": [[1.63089576E12, 169.152]], "isOverall": false, "label": "editDemand", "isController": false}, {"data": [[1.63089576E12, 1.0], [1.6308957E12, 171.47494989979953]], "isOverall": false, "label": "listOnesDemandsByPage", "isController": false}, {"data": [[1.63089564E12, 186.5010020040081], [1.6308957E12, 1.0]], "isOverall": false, "label": "removeDemand", "isController": false}, {"data": [[1.6308957E12, 250.14999999999978]], "isOverall": false, "label": "listAllDemandsByPage", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089576E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 403.1428571428571, "minX": 1.0, "maxY": 15602.833333333334, "series": [{"data": [[2.0, 5534.0], [3.0, 6611.75], [4.0, 6297.666666666667], [5.0, 5392.666666666667], [6.0, 5667.4], [7.0, 5574.8], [8.0, 4794.111111111111], [9.0, 4513.571428571429], [10.0, 990.25], [11.0, 1578.6923076923074], [12.0, 430.1948051948053], [13.0, 489.4558823529411], [14.0, 681.75], [15.0, 845.3513513513514], [16.0, 1698.2777777777778], [17.0, 2875.0833333333335], [18.0, 6307.4], [19.0, 2578.249999999999], [20.0, 3634.222222222223], [21.0, 3495.444444444444], [22.0, 3811.0], [23.0, 2967.727272727273], [24.0, 6725.25], [25.0, 2039.2], [26.0, 8043.428571428572], [27.0, 7388.75], [28.0, 3233.5], [29.0, 5688.6], [30.0, 2269.5833333333335], [31.0, 7553.249999999999], [32.0, 2437.8461538461534], [33.0, 683.4], [35.0, 648.4285714285713], [34.0, 493.16666666666663], [37.0, 5551.1481481481505], [36.0, 1197.5], [39.0, 5141.666666666666], [38.0, 2813.0909090909086], [41.0, 3078.1999999999994], [40.0, 5069.000000000001], [43.0, 5112.166666666666], [42.0, 4233.857142857144], [45.0, 1967.133333333334], [44.0, 4984.500000000001], [47.0, 7154.0], [46.0, 2411.307692307692], [49.0, 3028.7], [48.0, 4414.142857142857], [51.0, 5999.599999999999], [50.0, 5126.5], [53.0, 4089.571428571428], [52.0, 3425.6666666666665], [55.0, 2404.846153846154], [54.0, 3701.75], [56.0, 2742.909090909091], [57.0, 3659.0], [59.0, 3188.3749999999995], [58.0, 6508.0], [61.0, 4301.874999999999], [60.0, 403.1428571428571], [63.0, 7390.571428571428], [62.0, 861.6250000000002], [67.0, 3247.555555555555], [66.0, 3731.499999999999], [65.0, 4159.75], [64.0, 5258.2], [70.0, 7075.750000000001], [71.0, 4331.833333333333], [69.0, 4248.333333333333], [68.0, 5013.4], [75.0, 4054.375], [73.0, 5720.4], [72.0, 4534.888888888889], [74.0, 4947.0], [79.0, 6728.0], [78.0, 2404.166666666666], [77.0, 3651.25], [76.0, 4740.666666666667], [83.0, 1927.5625000000002], [82.0, 3896.2857142857147], [81.0, 2272.333333333334], [80.0, 4219.166666666667], [87.0, 5273.166666666667], [85.0, 6939.75], [84.0, 5608.000000000001], [86.0, 2343.090909090909], [91.0, 4074.142857142857], [90.0, 5430.199999999999], [89.0, 5345.4], [88.0, 3147.8888888888887], [94.0, 3890.8888888888887], [95.0, 3755.5], [93.0, 3921.5], [92.0, 3129.125], [99.0, 2810.6], [98.0, 6853.000000000001], [97.0, 5795.666666666667], [96.0, 2938.6666666666665], [103.0, 3436.7499999999995], [102.0, 3831.9999999999995], [101.0, 3869.571428571429], [100.0, 2232.846153846154], [107.0, 2728.3000000000006], [106.0, 2302.153846153846], [105.0, 2570.083333333333], [104.0, 1922.4615384615379], [111.0, 6566.999999999999], [110.0, 5266.6], [109.0, 5846.4], [108.0, 5698.5], [115.0, 5432.799999999999], [114.0, 4399.999999999999], [113.0, 4398.5], [112.0, 2200.5714285714294], [119.0, 4342.833333333334], [118.0, 6294.5], [117.0, 5144.8], [116.0, 5280.6], [123.0, 3540.875], [122.0, 4215.5], [121.0, 3726.1428571428573], [120.0, 3909.5714285714284], [127.0, 4023.0], [126.0, 4971.4], [125.0, 6320.25], [124.0, 2658.3999999999996], [135.0, 2295.75], [134.0, 6105.5], [133.0, 3723.1428571428573], [132.0, 6011.0], [131.0, 5007.4], [130.0, 5169.8], [129.0, 3843.1428571428564], [128.0, 3169.375], [143.0, 3544.142857142857], [142.0, 4251.333333333333], [141.0, 4323.166666666667], [140.0, 5104.8], [139.0, 3249.0], [138.0, 4480.0], [137.0, 4225.666666666666], [136.0, 3798.5714285714284], [151.0, 3631.142857142857], [150.0, 4102.166666666667], [149.0, 3636.7000000000003], [148.0, 4112.142857142857], [145.0, 2227.1818181818185], [146.0, 1939.4166666666663], [147.0, 3692.166666666667], [144.0, 3556.1666666666665], [157.0, 3152.6250000000005], [156.0, 2913.0], [155.0, 3638.714285714286], [154.0, 6570.1], [152.0, 848.75], [159.0, 1801.1538461538462], [158.0, 4118.4], [153.0, 797.6666666666666], [167.0, 2915.0000000000005], [165.0, 3243.5], [164.0, 5678.75], [163.0, 2583.2999999999997], [162.0, 1952.0666666666666], [161.0, 3478.499999999999], [166.0, 4075.2], [160.0, 3583.5], [174.0, 3148.625], [173.0, 3004.875], [172.0, 2505.4], [171.0, 2498.3999999999996], [170.0, 3054.25], [169.0, 3190.125], [168.0, 3062.875], [175.0, 4031.6], [183.0, 1515.6666666666667], [182.0, 2800.2222222222217], [181.0, 2528.0], [180.0, 3348.0], [179.0, 4028.833333333333], [178.0, 5653.0], [177.0, 6771.833333333334], [176.0, 1451.4285714285713], [191.0, 3669.9999999999995], [190.0, 3798.1428571428573], [188.0, 3063.222222222222], [186.0, 3908.833333333333], [185.0, 4062.5000000000005], [184.0, 2476.5], [189.0, 4881.75], [187.0, 6059.666666666666], [199.0, 3394.7142857142853], [198.0, 2744.9999999999995], [197.0, 5629.0], [196.0, 4442.0], [195.0, 4471.2], [194.0, 3755.25], [193.0, 3131.8571428571427], [192.0, 3197.1666666666665], [207.0, 4108.5], [206.0, 1391.142857142857], [204.0, 2950.25], [203.0, 4229.666666666666], [201.0, 6767.0], [200.0, 2875.4999999999995], [205.0, 3236.1666666666665], [202.0, 3355.833333333333], [215.0, 4462.4], [214.0, 3154.428571428571], [213.0, 4220.0], [212.0, 4292.2], [211.0, 3654.333333333333], [210.0, 3667.1666666666665], [209.0, 2206.3636363636365], [208.0, 2002.9999999999998], [222.0, 3151.2857142857138], [221.0, 2514.7777777777774], [220.0, 4171.4], [219.0, 2590.222222222222], [218.0, 2385.6], [217.0, 3515.3333333333335], [216.0, 3202.5714285714284], [223.0, 3659.0], [231.0, 2520.3333333333335], [230.0, 2549.9], [228.0, 2161.6363636363635], [227.0, 3141.5714285714284], [226.0, 3745.6363636363635], [224.0, 3578.285714285714], [225.0, 620.1428571428572], [229.0, 1852.363636363636], [239.0, 1952.2499999999998], [238.0, 2553.6666666666665], [237.0, 3354.5], [236.0, 3439.333333333333], [235.0, 2611.875], [234.0, 4051.8], [233.0, 3068.2499999999995], [232.0, 3192.666666666667], [247.0, 2354.8888888888887], [246.0, 2435.8888888888887], [245.0, 6247.333333333333], [244.0, 2464.5555555555557], [243.0, 2471.3846153846157], [242.0, 5290.333333333334], [241.0, 2141.222222222222], [240.0, 5316.0], [253.0, 3269.833333333333], [252.0, 3918.6], [251.0, 2973.0], [250.0, 2644.0000000000005], [248.0, 2509.75], [255.0, 2967.8333333333335], [254.0, 3162.2000000000003], [249.0, 2606.428571428571], [270.0, 1986.909090909091], [271.0, 2799.714285714286], [269.0, 1416.0], [268.0, 2088.6666666666665], [266.0, 2630.625], [267.0, 2501.5714285714284], [265.0, 1963.7272727272725], [264.0, 2206.9000000000005], [263.0, 1506.6250000000005], [257.0, 2151.3333333333335], [256.0, 3995.5000000000005], [259.0, 3224.6666666666665], [258.0, 2881.4285714285716], [262.0, 1416.8888888888891], [261.0, 2275.0], [260.0, 2793.1666666666665], [286.0, 2640.0], [287.0, 2449.125], [285.0, 4302.25], [284.0, 4265.5], [283.0, 2719.5], [282.0, 3820.25], [281.0, 2758.4285714285716], [280.0, 3078.1428571428573], [278.0, 3713.6], [279.0, 2584.8333333333335], [273.0, 2611.714285714286], [272.0, 3174.166666666667], [275.0, 1609.6666666666667], [274.0, 1555.533333333333], [277.0, 3157.166666666667], [276.0, 1696.923076923077], [302.0, 2225.6666666666665], [303.0, 2982.3333333333335], [301.0, 2652.285714285714], [300.0, 2621.285714285714], [299.0, 3405.6000000000004], [298.0, 2746.25], [296.0, 4204.0], [297.0, 3622.75], [295.0, 4229.25], [288.0, 2632.8571428571427], [290.0, 3074.1666666666665], [291.0, 3178.0], [289.0, 3080.0], [294.0, 3050.1666666666665], [293.0, 3485.2], [292.0, 3905.8], [318.0, 3688.0], [319.0, 2359.285714285714], [317.0, 3182.0], [316.0, 4783.0], [315.0, 5007.0], [314.0, 3096.833333333333], [312.0, 2270.5], [313.0, 4089.0], [311.0, 2717.8333333333335], [305.0, 2382.9999999999995], [304.0, 2932.5999999999995], [307.0, 3356.6], [306.0, 3936.0000000000005], [310.0, 2831.1666666666665], [309.0, 2731.8333333333335], [308.0, 2858.666666666667], [334.0, 6160.5], [335.0, 6374.5], [333.0, 6374.5], [332.0, 6464.5], [331.0, 6382.0], [330.0, 6322.5], [329.0, 6515.0], [328.0, 6505.0], [327.0, 6447.0], [321.0, 3017.6], [320.0, 4655.333333333334], [323.0, 4635.666666666666], [322.0, 3032.2], [326.0, 3034.4], [325.0, 2955.8], [324.0, 4727.0], [350.0, 5896.0], [351.0, 5980.5], [349.0, 6031.0], [348.0, 6056.5], [347.0, 5883.0], [346.0, 5973.5], [345.0, 6046.5], [344.0, 6178.0], [343.0, 6226.5], [337.0, 6325.5], [336.0, 6233.0], [339.0, 6243.5], [338.0, 6257.5], [342.0, 6088.0], [341.0, 6226.0], [340.0, 6237.0], [366.0, 5529.5], [367.0, 5469.5], [365.0, 5388.5], [364.0, 6725.0], [363.0, 2331.0], [362.0, 5499.5], [361.0, 5636.0], [360.0, 5672.5], [359.0, 5772.5], [353.0, 5726.0], [355.0, 9293.0], [354.0, 9409.0], [352.0, 5943.5], [358.0, 4647.666666666666], [356.0, 4059.75], [357.0, 9226.0], [382.0, 5075.5], [383.0, 4862.5], [381.0, 4987.5], [380.0, 5112.0], [379.0, 5135.0], [378.0, 5179.5], [377.0, 5969.333333333333], [376.0, 2283.0], [375.0, 5099.0], [369.0, 5432.5], [368.0, 5351.0], [371.0, 5435.5], [370.0, 5419.0], [374.0, 5286.5], [373.0, 5071.0], [372.0, 5203.0], [398.0, 4616.5], [399.0, 4585.5], [397.0, 3793.666666666667], [396.0, 6789.0], [387.0, 7787.0], [386.0, 4782.0], [385.0, 4066.0], [384.0, 7823.0], [395.0, 4417.0], [394.0, 4735.0], [393.0, 4590.0], [392.0, 4477.5], [391.0, 4613.0], [390.0, 5829.0], [389.0, 1783.0], [388.0, 3908.333333333333], [414.0, 5812.0], [402.0, 4456.5], [404.0, 4989.666666666667], [405.0, 6298.0], [407.0, 6202.0], [406.0, 6669.0], [403.0, 2094.0], [401.0, 4502.0], [400.0, 4490.0], [415.0, 5761.0], [409.0, 6156.0], [408.0, 6172.0], [411.0, 5927.0], [410.0, 6102.0], [413.0, 5876.0], [412.0, 5929.0], [429.0, 2551.333333333333], [430.0, 3453.0], [428.0, 3282.0], [419.0, 5507.0], [418.0, 5552.0], [427.0, 2960.6666666666665], [426.0, 4816.0], [425.0, 2463.9999999999995], [424.0, 3646.5], [431.0, 4523.0], [422.0, 3725.0], [421.0, 2883.5], [420.0, 5427.0], [417.0, 2406.6666666666665], [416.0, 3872.0], [423.0, 5262.0], [446.0, 2849.0], [447.0, 2816.0], [445.0, 3002.5], [444.0, 2988.0], [443.0, 2883.5], [442.0, 3046.5], [441.0, 3074.5], [440.0, 3138.0], [439.0, 3175.25], [435.0, 2950.0], [434.0, 2828.3333333333335], [432.0, 2819.0], [433.0, 4471.0], [437.0, 2704.6666666666665], [436.0, 4465.0], [438.0, 834.5], [462.0, 2165.6666666666665], [463.0, 1727.0], [460.0, 2447.0], [461.0, 3162.0], [451.0, 2727.0], [450.0, 2845.0], [449.0, 2818.5], [448.0, 2873.0], [459.0, 2535.5], [458.0, 2528.0], [457.0, 2583.5], [456.0, 2607.5], [455.0, 2694.0], [454.0, 2664.0], [453.0, 2772.0], [452.0, 2735.0], [477.0, 1838.5], [478.0, 1794.0], [476.0, 1728.6666666666667], [467.0, 2218.0], [466.0, 2318.0], [465.0, 2316.5], [464.0, 2540.3333333333335], [474.0, 1985.5], [475.0, 2259.0], [473.0, 2026.0], [472.0, 2039.0], [479.0, 1946.0], [471.0, 2094.5], [470.0, 2092.0], [469.0, 2149.5], [468.0, 1974.0], [494.0, 1272.0], [495.0, 1303.5], [493.0, 1266.0], [492.0, 1332.5], [491.0, 1384.0], [490.0, 1330.5], [489.0, 1363.0], [488.0, 1268.6666666666667], [487.0, 1573.3333333333333], [481.0, 1387.0], [480.0, 1434.0], [486.0, 1604.0], [483.0, 1481.5], [482.0, 1703.6], [485.0, 1614.5], [484.0, 1550.0], [500.0, 1569.8], [496.0, 1031.0], [1.0, 15602.833333333334]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[177.18233333333362, 3161.2266666666687]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5386.35, "minX": 1.63089564E12, "maxY": 35905.76666666667, "series": [{"data": [[1.63089576E12, 6624.2], [1.63089564E12, 5386.35], [1.6308957E12, 35905.76666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63089576E12, 8352.85], [1.63089564E12, 8625.8], [1.6308957E12, 7237.183333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089576E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 425.044955044955, "minX": 1.63089564E12, "maxY": 7130.686000000008, "series": [{"data": [[1.63089576E12, 425.044955044955], [1.63089564E12, 1929.4534534534473], [1.6308957E12, 7130.686000000008]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089576E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 379.74625374625356, "minX": 1.63089564E12, "maxY": 7107.8569999999945, "series": [{"data": [[1.63089576E12, 379.74625374625356], [1.63089564E12, 1916.3163163163197], [1.6308957E12, 7107.8569999999945]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089576E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 29.671999999999976, "minX": 1.63089564E12, "maxY": 60.64964964964963, "series": [{"data": [[1.63089576E12, 51.33566433566429], [1.63089564E12, 60.64964964964963], [1.6308957E12, 29.671999999999976]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089576E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.63089564E12, "maxY": 25039.0, "series": [{"data": [[1.63089576E12, 1622.0], [1.63089564E12, 4261.0], [1.6308957E12, 25039.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63089576E12, 1023.0], [1.63089564E12, 3827.0], [1.6308957E12, 20541.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63089576E12, 1362.0], [1.63089564E12, 4230.0], [1.6308957E12, 24362.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63089576E12, 1147.0], [1.63089564E12, 4028.0], [1.6308957E12, 22752.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63089576E12, 17.0], [1.63089564E12, 87.0], [1.6308957E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63089576E12, 202.0], [1.63089564E12, 1474.0], [1.6308957E12, 1064.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089576E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21.0, "minX": 1.0, "maxY": 22384.0, "series": [{"data": [[54.0, 1292.0], [65.0, 21.0], [92.0, 3174.0], [114.0, 1065.5], [130.0, 277.0], [181.0, 2075.0], [190.0, 518.0], [200.0, 667.0], [13.0, 2939.0], [14.0, 1047.5], [237.0, 3719.0], [245.0, 1025.0], [16.0, 5709.0], [257.0, 748.0], [17.0, 3356.0], [18.0, 9330.0], [299.0, 427.0], [19.0, 9653.5], [20.0, 10531.0], [21.0, 13659.0], [22.0, 19434.5], [24.0, 17439.5], [25.0, 22384.0], [26.0, 19331.0], [435.0, 32.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 21038.0], [130.0, 21052.0], [435.0, 21064.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 435.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 22384.0, "series": [{"data": [[54.0, 1286.5], [65.0, 21.0], [92.0, 3126.5], [114.0, 1057.5], [130.0, 269.0], [181.0, 2070.0], [190.0, 506.5], [200.0, 660.5], [13.0, 2939.0], [14.0, 1026.5], [237.0, 3708.0], [245.0, 1017.0], [16.0, 5709.0], [257.0, 744.0], [17.0, 3356.0], [18.0, 9330.0], [299.0, 427.0], [19.0, 9653.0], [20.0, 10531.0], [21.0, 13659.0], [22.0, 19434.5], [24.0, 17439.5], [25.0, 22384.0], [26.0, 19331.0], [435.0, 32.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [130.0, 0.0], [435.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 435.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.63089564E12, "maxY": 16.666666666666668, "series": [{"data": [[1.63089576E12, 16.666666666666668], [1.63089564E12, 16.666666666666668], [1.6308957E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089576E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63089564E12, "maxY": 16.65, "series": [{"data": [[1.63089576E12, 16.65], [1.63089564E12, 16.65], [1.6308957E12, 16.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63089576E12, 0.03333333333333333], [1.6308957E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089576E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63089564E12, "maxY": 16.65, "series": [{"data": [[1.63089576E12, 0.03333333333333333], [1.6308957E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63089576E12, 16.65], [1.63089564E12, 16.65], [1.6308957E12, 16.65]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089576E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63089564E12, "maxY": 16.65, "series": [{"data": [[1.63089576E12, 16.65], [1.63089564E12, 16.65], [1.6308957E12, 16.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63089576E12, 0.03333333333333333], [1.6308957E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089576E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

