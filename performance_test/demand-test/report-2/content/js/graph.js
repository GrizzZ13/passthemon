/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1057.0, "minX": 0.0, "maxY": 34109.0, "series": [{"data": [[0.0, 1057.0], [0.1, 1207.0], [0.2, 1264.0], [0.3, 1330.0], [0.4, 1353.0], [0.5, 1357.0], [0.6, 1395.0], [0.7, 1404.0], [0.8, 1441.0], [0.9, 1455.0], [1.0, 1500.0], [1.1, 1525.0], [1.2, 1592.0], [1.3, 1604.0], [1.4, 1727.0], [1.5, 1773.0], [1.6, 1866.0], [1.7, 1925.0], [1.8, 1948.0], [1.9, 2218.0], [2.0, 2240.0], [2.1, 2252.0], [2.2, 2257.0], [2.3, 2293.0], [2.4, 2319.0], [2.5, 2483.0], [2.6, 2537.0], [2.7, 2561.0], [2.8, 2845.0], [2.9, 2993.0], [3.0, 3056.0], [3.1, 3078.0], [3.2, 3113.0], [3.3, 3241.0], [3.4, 3247.0], [3.5, 3271.0], [3.6, 3326.0], [3.7, 3346.0], [3.8, 3413.0], [3.9, 3428.0], [4.0, 3433.0], [4.1, 3447.0], [4.2, 3473.0], [4.3, 3518.0], [4.4, 3589.0], [4.5, 3631.0], [4.6, 3718.0], [4.7, 3738.0], [4.8, 3763.0], [4.9, 3889.0], [5.0, 3962.0], [5.1, 3974.0], [5.2, 4000.0], [5.3, 4060.0], [5.4, 4145.0], [5.5, 4260.0], [5.6, 4330.0], [5.7, 4374.0], [5.8, 4421.0], [5.9, 4470.0], [6.0, 4501.0], [6.1, 4619.0], [6.2, 4665.0], [6.3, 4699.0], [6.4, 4759.0], [6.5, 4820.0], [6.6, 4889.0], [6.7, 4917.0], [6.8, 4968.0], [6.9, 4997.0], [7.0, 5110.0], [7.1, 5195.0], [7.2, 5236.0], [7.3, 5298.0], [7.4, 5382.0], [7.5, 5399.0], [7.6, 5409.0], [7.7, 5439.0], [7.8, 5509.0], [7.9, 5588.0], [8.0, 5643.0], [8.1, 5664.0], [8.2, 5684.0], [8.3, 5717.0], [8.4, 5727.0], [8.5, 5807.0], [8.6, 5861.0], [8.7, 5897.0], [8.8, 5972.0], [8.9, 6036.0], [9.0, 6067.0], [9.1, 6149.0], [9.2, 6208.0], [9.3, 6242.0], [9.4, 6271.0], [9.5, 6434.0], [9.6, 6456.0], [9.7, 6502.0], [9.8, 6590.0], [9.9, 6709.0], [10.0, 6788.0], [10.1, 6842.0], [10.2, 6859.0], [10.3, 6876.0], [10.4, 6898.0], [10.5, 6928.0], [10.6, 7047.0], [10.7, 7085.0], [10.8, 7261.0], [10.9, 7393.0], [11.0, 7440.0], [11.1, 7502.0], [11.2, 7566.0], [11.3, 7601.0], [11.4, 7687.0], [11.5, 7784.0], [11.6, 7855.0], [11.7, 7886.0], [11.8, 7960.0], [11.9, 8003.0], [12.0, 8026.0], [12.1, 8142.0], [12.2, 8188.0], [12.3, 8211.0], [12.4, 8257.0], [12.5, 8269.0], [12.6, 8295.0], [12.7, 8327.0], [12.8, 8416.0], [12.9, 8506.0], [13.0, 8540.0], [13.1, 8579.0], [13.2, 8634.0], [13.3, 8689.0], [13.4, 8734.0], [13.5, 8767.0], [13.6, 8802.0], [13.7, 8828.0], [13.8, 8858.0], [13.9, 8886.0], [14.0, 8982.0], [14.1, 9017.0], [14.2, 9029.0], [14.3, 9071.0], [14.4, 9122.0], [14.5, 9206.0], [14.6, 9271.0], [14.7, 9309.0], [14.8, 9338.0], [14.9, 9386.0], [15.0, 9446.0], [15.1, 9478.0], [15.2, 9542.0], [15.3, 9572.0], [15.4, 9613.0], [15.5, 9638.0], [15.6, 9669.0], [15.7, 9719.0], [15.8, 9777.0], [15.9, 9784.0], [16.0, 9795.0], [16.1, 9812.0], [16.2, 9823.0], [16.3, 9860.0], [16.4, 9936.0], [16.5, 9964.0], [16.6, 9994.0], [16.7, 10016.0], [16.8, 10067.0], [16.9, 10100.0], [17.0, 10126.0], [17.1, 10164.0], [17.2, 10223.0], [17.3, 10247.0], [17.4, 10340.0], [17.5, 10371.0], [17.6, 10411.0], [17.7, 10467.0], [17.8, 10508.0], [17.9, 10563.0], [18.0, 10579.0], [18.1, 10654.0], [18.2, 10759.0], [18.3, 10820.0], [18.4, 10994.0], [18.5, 11022.0], [18.6, 11073.0], [18.7, 11084.0], [18.8, 11131.0], [18.9, 11193.0], [19.0, 11246.0], [19.1, 11273.0], [19.2, 11290.0], [19.3, 11296.0], [19.4, 11328.0], [19.5, 11358.0], [19.6, 11468.0], [19.7, 11530.0], [19.8, 11547.0], [19.9, 11596.0], [20.0, 11640.0], [20.1, 11706.0], [20.2, 11770.0], [20.3, 11821.0], [20.4, 11842.0], [20.5, 11965.0], [20.6, 11983.0], [20.7, 11995.0], [20.8, 12021.0], [20.9, 12046.0], [21.0, 12057.0], [21.1, 12091.0], [21.2, 12113.0], [21.3, 12159.0], [21.4, 12189.0], [21.5, 12205.0], [21.6, 12334.0], [21.7, 12369.0], [21.8, 12439.0], [21.9, 12483.0], [22.0, 12495.0], [22.1, 12513.0], [22.2, 12523.0], [22.3, 12589.0], [22.4, 12630.0], [22.5, 12682.0], [22.6, 12737.0], [22.7, 12798.0], [22.8, 12850.0], [22.9, 12892.0], [23.0, 12919.0], [23.1, 12972.0], [23.2, 13003.0], [23.3, 13044.0], [23.4, 13065.0], [23.5, 13104.0], [23.6, 13122.0], [23.7, 13156.0], [23.8, 13233.0], [23.9, 13264.0], [24.0, 13270.0], [24.1, 13300.0], [24.2, 13316.0], [24.3, 13371.0], [24.4, 13390.0], [24.5, 13406.0], [24.6, 13438.0], [24.7, 13524.0], [24.8, 13537.0], [24.9, 13637.0], [25.0, 13648.0], [25.1, 13670.0], [25.2, 13699.0], [25.3, 13754.0], [25.4, 13773.0], [25.5, 13821.0], [25.6, 13910.0], [25.7, 14003.0], [25.8, 14016.0], [25.9, 14058.0], [26.0, 14122.0], [26.1, 14151.0], [26.2, 14153.0], [26.3, 14226.0], [26.4, 14268.0], [26.5, 14318.0], [26.6, 14363.0], [26.7, 14390.0], [26.8, 14415.0], [26.9, 14511.0], [27.0, 14544.0], [27.1, 14570.0], [27.2, 14633.0], [27.3, 14664.0], [27.4, 14697.0], [27.5, 14726.0], [27.6, 14774.0], [27.7, 14801.0], [27.8, 14809.0], [27.9, 14835.0], [28.0, 14876.0], [28.1, 14949.0], [28.2, 14954.0], [28.3, 15093.0], [28.4, 15137.0], [28.5, 15342.0], [28.6, 15395.0], [28.7, 15471.0], [28.8, 15506.0], [28.9, 15571.0], [29.0, 15631.0], [29.1, 15636.0], [29.2, 15687.0], [29.3, 15718.0], [29.4, 15744.0], [29.5, 15776.0], [29.6, 15860.0], [29.7, 15894.0], [29.8, 15919.0], [29.9, 15978.0], [30.0, 16105.0], [30.1, 16142.0], [30.2, 16222.0], [30.3, 16293.0], [30.4, 16319.0], [30.5, 16419.0], [30.6, 16536.0], [30.7, 16594.0], [30.8, 16651.0], [30.9, 16687.0], [31.0, 16733.0], [31.1, 16800.0], [31.2, 16861.0], [31.3, 16884.0], [31.4, 16926.0], [31.5, 16980.0], [31.6, 16992.0], [31.7, 17030.0], [31.8, 17058.0], [31.9, 17076.0], [32.0, 17124.0], [32.1, 17143.0], [32.2, 17179.0], [32.3, 17236.0], [32.4, 17268.0], [32.5, 17382.0], [32.6, 17467.0], [32.7, 17522.0], [32.8, 17586.0], [32.9, 17642.0], [33.0, 17678.0], [33.1, 17688.0], [33.2, 17733.0], [33.3, 17777.0], [33.4, 17805.0], [33.5, 17844.0], [33.6, 17876.0], [33.7, 17891.0], [33.8, 17918.0], [33.9, 17951.0], [34.0, 17977.0], [34.1, 18004.0], [34.2, 18073.0], [34.3, 18103.0], [34.4, 18183.0], [34.5, 18235.0], [34.6, 18292.0], [34.7, 18363.0], [34.8, 18371.0], [34.9, 18392.0], [35.0, 18421.0], [35.1, 18437.0], [35.2, 18492.0], [35.3, 18505.0], [35.4, 18541.0], [35.5, 18622.0], [35.6, 18627.0], [35.7, 18676.0], [35.8, 18764.0], [35.9, 18826.0], [36.0, 18878.0], [36.1, 18911.0], [36.2, 18924.0], [36.3, 18997.0], [36.4, 19091.0], [36.5, 19210.0], [36.6, 19277.0], [36.7, 19287.0], [36.8, 19316.0], [36.9, 19335.0], [37.0, 19349.0], [37.1, 19386.0], [37.2, 19442.0], [37.3, 19505.0], [37.4, 19511.0], [37.5, 19516.0], [37.6, 19536.0], [37.7, 19567.0], [37.8, 19586.0], [37.9, 19609.0], [38.0, 19631.0], [38.1, 19761.0], [38.2, 19777.0], [38.3, 19826.0], [38.4, 19867.0], [38.5, 19889.0], [38.6, 19924.0], [38.7, 19943.0], [38.8, 19970.0], [38.9, 19975.0], [39.0, 20012.0], [39.1, 20078.0], [39.2, 20109.0], [39.3, 20158.0], [39.4, 20242.0], [39.5, 20326.0], [39.6, 20338.0], [39.7, 20359.0], [39.8, 20380.0], [39.9, 20400.0], [40.0, 20413.0], [40.1, 20499.0], [40.2, 20578.0], [40.3, 20628.0], [40.4, 20652.0], [40.5, 20690.0], [40.6, 20693.0], [40.7, 20712.0], [40.8, 20734.0], [40.9, 20760.0], [41.0, 20763.0], [41.1, 20770.0], [41.2, 20784.0], [41.3, 20799.0], [41.4, 20845.0], [41.5, 20862.0], [41.6, 20882.0], [41.7, 20897.0], [41.8, 20904.0], [41.9, 20915.0], [42.0, 20923.0], [42.1, 20941.0], [42.2, 20944.0], [42.3, 20947.0], [42.4, 20951.0], [42.5, 20957.0], [42.6, 20966.0], [42.7, 20982.0], [42.8, 21042.0], [42.9, 21071.0], [43.0, 21085.0], [43.1, 21103.0], [43.2, 21108.0], [43.3, 21135.0], [43.4, 21147.0], [43.5, 21169.0], [43.6, 21175.0], [43.7, 21192.0], [43.8, 21229.0], [43.9, 21246.0], [44.0, 21265.0], [44.1, 21286.0], [44.2, 21294.0], [44.3, 21333.0], [44.4, 21346.0], [44.5, 21354.0], [44.6, 21377.0], [44.7, 21394.0], [44.8, 21398.0], [44.9, 21408.0], [45.0, 21414.0], [45.1, 21437.0], [45.2, 21444.0], [45.3, 21488.0], [45.4, 21567.0], [45.5, 21587.0], [45.6, 21593.0], [45.7, 21635.0], [45.8, 21686.0], [45.9, 21692.0], [46.0, 21721.0], [46.1, 21768.0], [46.2, 21774.0], [46.3, 21832.0], [46.4, 21860.0], [46.5, 21889.0], [46.6, 21914.0], [46.7, 21924.0], [46.8, 21946.0], [46.9, 21976.0], [47.0, 21978.0], [47.1, 22001.0], [47.2, 22013.0], [47.3, 22025.0], [47.4, 22042.0], [47.5, 22052.0], [47.6, 22075.0], [47.7, 22130.0], [47.8, 22156.0], [47.9, 22178.0], [48.0, 22191.0], [48.1, 22199.0], [48.2, 22205.0], [48.3, 22212.0], [48.4, 22220.0], [48.5, 22225.0], [48.6, 22232.0], [48.7, 22243.0], [48.8, 22276.0], [48.9, 22289.0], [49.0, 22342.0], [49.1, 22348.0], [49.2, 22371.0], [49.3, 22373.0], [49.4, 22378.0], [49.5, 22390.0], [49.6, 22399.0], [49.7, 22409.0], [49.8, 22424.0], [49.9, 22433.0], [50.0, 22472.0], [50.1, 22534.0], [50.2, 22564.0], [50.3, 22625.0], [50.4, 22656.0], [50.5, 22659.0], [50.6, 22675.0], [50.7, 22710.0], [50.8, 22747.0], [50.9, 22753.0], [51.0, 22768.0], [51.1, 22769.0], [51.2, 22774.0], [51.3, 22781.0], [51.4, 22794.0], [51.5, 22828.0], [51.6, 22859.0], [51.7, 22863.0], [51.8, 22873.0], [51.9, 22909.0], [52.0, 22948.0], [52.1, 22957.0], [52.2, 22985.0], [52.3, 23023.0], [52.4, 23024.0], [52.5, 23040.0], [52.6, 23051.0], [52.7, 23073.0], [52.8, 23077.0], [52.9, 23077.0], [53.0, 23095.0], [53.1, 23098.0], [53.2, 23113.0], [53.3, 23125.0], [53.4, 23126.0], [53.5, 23131.0], [53.6, 23137.0], [53.7, 23148.0], [53.8, 23157.0], [53.9, 23165.0], [54.0, 23170.0], [54.1, 23181.0], [54.2, 23191.0], [54.3, 23204.0], [54.4, 23206.0], [54.5, 23212.0], [54.6, 23229.0], [54.7, 23237.0], [54.8, 23252.0], [54.9, 23259.0], [55.0, 23311.0], [55.1, 23359.0], [55.2, 23366.0], [55.3, 23372.0], [55.4, 23385.0], [55.5, 23410.0], [55.6, 23432.0], [55.7, 23446.0], [55.8, 23469.0], [55.9, 23560.0], [56.0, 23576.0], [56.1, 23604.0], [56.2, 23620.0], [56.3, 23632.0], [56.4, 23643.0], [56.5, 23676.0], [56.6, 23705.0], [56.7, 23727.0], [56.8, 23747.0], [56.9, 23749.0], [57.0, 23756.0], [57.1, 23778.0], [57.2, 23796.0], [57.3, 23798.0], [57.4, 23818.0], [57.5, 23835.0], [57.6, 23851.0], [57.7, 23855.0], [57.8, 23878.0], [57.9, 23914.0], [58.0, 23937.0], [58.1, 23967.0], [58.2, 23996.0], [58.3, 24022.0], [58.4, 24208.0], [58.5, 24271.0], [58.6, 24304.0], [58.7, 24337.0], [58.8, 24356.0], [58.9, 24379.0], [59.0, 24400.0], [59.1, 24418.0], [59.2, 24461.0], [59.3, 24464.0], [59.4, 24492.0], [59.5, 24500.0], [59.6, 24516.0], [59.7, 24528.0], [59.8, 24542.0], [59.9, 24604.0], [60.0, 24644.0], [60.1, 24706.0], [60.2, 24724.0], [60.3, 24826.0], [60.4, 24881.0], [60.5, 24890.0], [60.6, 24909.0], [60.7, 24951.0], [60.8, 24961.0], [60.9, 24970.0], [61.0, 24978.0], [61.1, 24981.0], [61.2, 24985.0], [61.3, 24991.0], [61.4, 25001.0], [61.5, 25021.0], [61.6, 25035.0], [61.7, 25061.0], [61.8, 25069.0], [61.9, 25076.0], [62.0, 25102.0], [62.1, 25132.0], [62.2, 25149.0], [62.3, 25159.0], [62.4, 25176.0], [62.5, 25186.0], [62.6, 25194.0], [62.7, 25209.0], [62.8, 25215.0], [62.9, 25226.0], [63.0, 25278.0], [63.1, 25331.0], [63.2, 25341.0], [63.3, 25355.0], [63.4, 25406.0], [63.5, 25432.0], [63.6, 25524.0], [63.7, 25539.0], [63.8, 25549.0], [63.9, 25615.0], [64.0, 25646.0], [64.1, 25650.0], [64.2, 25666.0], [64.3, 25677.0], [64.4, 25689.0], [64.5, 25698.0], [64.6, 25716.0], [64.7, 25738.0], [64.8, 25783.0], [64.9, 25816.0], [65.0, 25852.0], [65.1, 25858.0], [65.2, 25876.0], [65.3, 25888.0], [65.4, 25893.0], [65.5, 25913.0], [65.6, 25944.0], [65.7, 25958.0], [65.8, 25981.0], [65.9, 25989.0], [66.0, 26010.0], [66.1, 26020.0], [66.2, 26075.0], [66.3, 26109.0], [66.4, 26137.0], [66.5, 26145.0], [66.6, 26174.0], [66.7, 26263.0], [66.8, 26301.0], [66.9, 26339.0], [67.0, 26377.0], [67.1, 26390.0], [67.2, 26442.0], [67.3, 26488.0], [67.4, 26508.0], [67.5, 26522.0], [67.6, 26536.0], [67.7, 26542.0], [67.8, 26554.0], [67.9, 26567.0], [68.0, 26588.0], [68.1, 26591.0], [68.2, 26597.0], [68.3, 26606.0], [68.4, 26616.0], [68.5, 26617.0], [68.6, 26619.0], [68.7, 26622.0], [68.8, 26631.0], [68.9, 26634.0], [69.0, 26642.0], [69.1, 26643.0], [69.2, 26660.0], [69.3, 26672.0], [69.4, 26684.0], [69.5, 26692.0], [69.6, 26702.0], [69.7, 26704.0], [69.8, 26739.0], [69.9, 26746.0], [70.0, 26757.0], [70.1, 26763.0], [70.2, 26768.0], [70.3, 26791.0], [70.4, 26807.0], [70.5, 26846.0], [70.6, 26848.0], [70.7, 26863.0], [70.8, 26872.0], [70.9, 26889.0], [71.0, 26942.0], [71.1, 26965.0], [71.2, 26979.0], [71.3, 26991.0], [71.4, 26994.0], [71.5, 27012.0], [71.6, 27061.0], [71.7, 27160.0], [71.8, 27215.0], [71.9, 27224.0], [72.0, 27338.0], [72.1, 27369.0], [72.2, 27428.0], [72.3, 27435.0], [72.4, 27445.0], [72.5, 27469.0], [72.6, 27487.0], [72.7, 27528.0], [72.8, 27535.0], [72.9, 27556.0], [73.0, 27573.0], [73.1, 27625.0], [73.2, 27653.0], [73.3, 27682.0], [73.4, 27704.0], [73.5, 27716.0], [73.6, 27741.0], [73.7, 27751.0], [73.8, 27797.0], [73.9, 27808.0], [74.0, 27857.0], [74.1, 27884.0], [74.2, 27907.0], [74.3, 27952.0], [74.4, 27976.0], [74.5, 28005.0], [74.6, 28017.0], [74.7, 28030.0], [74.8, 28057.0], [74.9, 28059.0], [75.0, 28068.0], [75.1, 28090.0], [75.2, 28109.0], [75.3, 28166.0], [75.4, 28226.0], [75.5, 28238.0], [75.6, 28276.0], [75.7, 28316.0], [75.8, 28357.0], [75.9, 28378.0], [76.0, 28423.0], [76.1, 28429.0], [76.2, 28437.0], [76.3, 28448.0], [76.4, 28456.0], [76.5, 28474.0], [76.6, 28479.0], [76.7, 28493.0], [76.8, 28510.0], [76.9, 28523.0], [77.0, 28557.0], [77.1, 28587.0], [77.2, 28624.0], [77.3, 28666.0], [77.4, 28705.0], [77.5, 28730.0], [77.6, 28749.0], [77.7, 28760.0], [77.8, 28773.0], [77.9, 28785.0], [78.0, 28819.0], [78.1, 28837.0], [78.2, 28864.0], [78.3, 28956.0], [78.4, 28996.0], [78.5, 29058.0], [78.6, 29079.0], [78.7, 29115.0], [78.8, 29122.0], [78.9, 29142.0], [79.0, 29178.0], [79.1, 29203.0], [79.2, 29213.0], [79.3, 29221.0], [79.4, 29247.0], [79.5, 29268.0], [79.6, 29272.0], [79.7, 29283.0], [79.8, 29293.0], [79.9, 29297.0], [80.0, 29304.0], [80.1, 29307.0], [80.2, 29332.0], [80.3, 29352.0], [80.4, 29392.0], [80.5, 29408.0], [80.6, 29448.0], [80.7, 29448.0], [80.8, 29475.0], [80.9, 29502.0], [81.0, 29512.0], [81.1, 29528.0], [81.2, 29615.0], [81.3, 29618.0], [81.4, 29634.0], [81.5, 29653.0], [81.6, 29662.0], [81.7, 29688.0], [81.8, 29736.0], [81.9, 29738.0], [82.0, 29777.0], [82.1, 29794.0], [82.2, 29820.0], [82.3, 29835.0], [82.4, 29854.0], [82.5, 29878.0], [82.6, 29928.0], [82.7, 29947.0], [82.8, 29990.0], [82.9, 30002.0], [83.0, 30025.0], [83.1, 30046.0], [83.2, 30146.0], [83.3, 30218.0], [83.4, 30246.0], [83.5, 30264.0], [83.6, 30288.0], [83.7, 30296.0], [83.8, 30342.0], [83.9, 30344.0], [84.0, 30363.0], [84.1, 30418.0], [84.2, 30439.0], [84.3, 30466.0], [84.4, 30467.0], [84.5, 30487.0], [84.6, 30545.0], [84.7, 30579.0], [84.8, 30583.0], [84.9, 30591.0], [85.0, 30598.0], [85.1, 30618.0], [85.2, 30660.0], [85.3, 30695.0], [85.4, 30715.0], [85.5, 30731.0], [85.6, 30741.0], [85.7, 30766.0], [85.8, 30809.0], [85.9, 30829.0], [86.0, 30836.0], [86.1, 30849.0], [86.2, 30858.0], [86.3, 30869.0], [86.4, 30884.0], [86.5, 30888.0], [86.6, 30900.0], [86.7, 30925.0], [86.8, 30934.0], [86.9, 31001.0], [87.0, 31020.0], [87.1, 31038.0], [87.2, 31047.0], [87.3, 31053.0], [87.4, 31059.0], [87.5, 31065.0], [87.6, 31086.0], [87.7, 31106.0], [87.8, 31120.0], [87.9, 31126.0], [88.0, 31149.0], [88.1, 31161.0], [88.2, 31171.0], [88.3, 31178.0], [88.4, 31200.0], [88.5, 31208.0], [88.6, 31245.0], [88.7, 31275.0], [88.8, 31285.0], [88.9, 31297.0], [89.0, 31359.0], [89.1, 31391.0], [89.2, 31456.0], [89.3, 31476.0], [89.4, 31485.0], [89.5, 31495.0], [89.6, 31551.0], [89.7, 31580.0], [89.8, 31590.0], [89.9, 31608.0], [90.0, 31620.0], [90.1, 31633.0], [90.2, 31646.0], [90.3, 31661.0], [90.4, 31679.0], [90.5, 31685.0], [90.6, 31691.0], [90.7, 31699.0], [90.8, 31704.0], [90.9, 31721.0], [91.0, 31724.0], [91.1, 31732.0], [91.2, 31741.0], [91.3, 31750.0], [91.4, 31763.0], [91.5, 31771.0], [91.6, 31778.0], [91.7, 31785.0], [91.8, 31791.0], [91.9, 31794.0], [92.0, 31801.0], [92.1, 31802.0], [92.2, 31815.0], [92.3, 31820.0], [92.4, 31823.0], [92.5, 31826.0], [92.6, 31838.0], [92.7, 31842.0], [92.8, 31854.0], [92.9, 31867.0], [93.0, 31893.0], [93.1, 31902.0], [93.2, 31907.0], [93.3, 31910.0], [93.4, 31915.0], [93.5, 31920.0], [93.6, 31929.0], [93.7, 31942.0], [93.8, 31951.0], [93.9, 31969.0], [94.0, 31979.0], [94.1, 31995.0], [94.2, 32004.0], [94.3, 32026.0], [94.4, 32046.0], [94.5, 32055.0], [94.6, 32084.0], [94.7, 32147.0], [94.8, 32172.0], [94.9, 32193.0], [95.0, 32199.0], [95.1, 32209.0], [95.2, 32210.0], [95.3, 32236.0], [95.4, 32248.0], [95.5, 32250.0], [95.6, 32263.0], [95.7, 32265.0], [95.8, 32276.0], [95.9, 32296.0], [96.0, 32343.0], [96.1, 32369.0], [96.2, 32413.0], [96.3, 32456.0], [96.4, 32477.0], [96.5, 32501.0], [96.6, 32506.0], [96.7, 32510.0], [96.8, 32528.0], [96.9, 32535.0], [97.0, 32539.0], [97.1, 32559.0], [97.2, 32591.0], [97.3, 32601.0], [97.4, 32621.0], [97.5, 32630.0], [97.6, 32637.0], [97.7, 32641.0], [97.8, 32647.0], [97.9, 32652.0], [98.0, 32664.0], [98.1, 32689.0], [98.2, 32691.0], [98.3, 32708.0], [98.4, 32715.0], [98.5, 32726.0], [98.6, 32728.0], [98.7, 32732.0], [98.8, 32762.0], [98.9, 32826.0], [99.0, 32839.0], [99.1, 33077.0], [99.2, 33138.0], [99.3, 33182.0], [99.4, 33417.0], [99.5, 33510.0], [99.6, 33653.0], [99.7, 33712.0], [99.8, 33800.0], [99.9, 34081.0], [100.0, 34109.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 26.0, "series": [{"data": [[32900.0, 1.0], [33300.0, 1.0], [33700.0, 2.0], [34100.0, 1.0], [1000.0, 1.0], [1100.0, 1.0], [1200.0, 3.0], [1300.0, 8.0], [1400.0, 7.0], [1500.0, 5.0], [1600.0, 2.0], [1700.0, 4.0], [1800.0, 3.0], [1900.0, 3.0], [2000.0, 1.0], [2200.0, 9.0], [2300.0, 3.0], [2400.0, 1.0], [2500.0, 4.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 3.0], [3000.0, 4.0], [3100.0, 1.0], [3200.0, 7.0], [3300.0, 3.0], [3400.0, 11.0], [3500.0, 4.0], [3600.0, 2.0], [3700.0, 6.0], [3800.0, 1.0], [3900.0, 5.0], [4000.0, 4.0], [4100.0, 1.0], [4200.0, 2.0], [4300.0, 5.0], [4400.0, 4.0], [4500.0, 1.0], [4600.0, 6.0], [4700.0, 2.0], [4800.0, 4.0], [4900.0, 6.0], [5000.0, 1.0], [5100.0, 3.0], [5200.0, 4.0], [5300.0, 4.0], [5400.0, 5.0], [5500.0, 3.0], [5600.0, 6.0], [5700.0, 5.0], [5800.0, 5.0], [5900.0, 3.0], [6000.0, 3.0], [6100.0, 3.0], [6200.0, 5.0], [6400.0, 5.0], [6500.0, 3.0], [6600.0, 1.0], [6800.0, 9.0], [6700.0, 3.0], [6900.0, 2.0], [7000.0, 3.0], [7200.0, 3.0], [7300.0, 1.0], [7400.0, 3.0], [7500.0, 4.0], [7600.0, 3.0], [7700.0, 2.0], [7800.0, 5.0], [7900.0, 2.0], [8000.0, 3.0], [8100.0, 5.0], [8200.0, 7.0], [8300.0, 3.0], [8400.0, 2.0], [8500.0, 6.0], [8600.0, 3.0], [8700.0, 5.0], [8800.0, 7.0], [8900.0, 3.0], [9000.0, 6.0], [9100.0, 2.0], [9200.0, 4.0], [9300.0, 5.0], [9400.0, 5.0], [9500.0, 4.0], [9600.0, 6.0], [9700.0, 7.0], [9800.0, 6.0], [10000.0, 5.0], [9900.0, 6.0], [10100.0, 6.0], [10200.0, 3.0], [10300.0, 5.0], [10400.0, 4.0], [10500.0, 6.0], [10600.0, 1.0], [10700.0, 3.0], [10800.0, 1.0], [10900.0, 2.0], [11000.0, 6.0], [11100.0, 4.0], [11200.0, 9.0], [11300.0, 3.0], [11500.0, 5.0], [11400.0, 3.0], [11600.0, 3.0], [11700.0, 3.0], [11800.0, 4.0], [11900.0, 6.0], [12000.0, 8.0], [12100.0, 6.0], [12200.0, 3.0], [12300.0, 4.0], [12400.0, 5.0], [12600.0, 4.0], [12500.0, 6.0], [12700.0, 4.0], [12800.0, 4.0], [12900.0, 5.0], [13000.0, 6.0], [13200.0, 7.0], [13100.0, 5.0], [13300.0, 8.0], [13500.0, 4.0], [13400.0, 4.0], [13600.0, 8.0], [13700.0, 5.0], [13800.0, 2.0], [14000.0, 5.0], [13900.0, 2.0], [14100.0, 7.0], [14200.0, 3.0], [14300.0, 6.0], [14400.0, 3.0], [14500.0, 5.0], [14600.0, 6.0], [14700.0, 5.0], [14800.0, 8.0], [14900.0, 3.0], [15000.0, 2.0], [15100.0, 2.0], [15300.0, 4.0], [15400.0, 2.0], [15500.0, 5.0], [15700.0, 6.0], [15600.0, 5.0], [15800.0, 4.0], [15900.0, 4.0], [16100.0, 4.0], [16200.0, 4.0], [16300.0, 2.0], [16000.0, 1.0], [17200.0, 4.0], [16600.0, 4.0], [16800.0, 5.0], [16400.0, 1.0], [17000.0, 6.0], [17400.0, 2.0], [18200.0, 4.0], [17600.0, 7.0], [17800.0, 7.0], [18000.0, 4.0], [18400.0, 6.0], [18600.0, 5.0], [18800.0, 5.0], [19000.0, 2.0], [19200.0, 5.0], [19400.0, 3.0], [19600.0, 4.0], [19800.0, 6.0], [20000.0, 4.0], [20200.0, 2.0], [20400.0, 5.0], [20600.0, 8.0], [20800.0, 9.0], [21000.0, 7.0], [21200.0, 10.0], [21400.0, 9.0], [21600.0, 6.0], [21800.0, 6.0], [22000.0, 12.0], [22200.0, 16.0], [22400.0, 8.0], [22600.0, 8.0], [23000.0, 18.0], [22800.0, 7.0], [23200.0, 14.0], [23400.0, 9.0], [23800.0, 11.0], [23600.0, 10.0], [24000.0, 3.0], [24200.0, 4.0], [24400.0, 10.0], [25000.0, 12.0], [24600.0, 4.0], [24800.0, 7.0], [25200.0, 7.0], [25400.0, 3.0], [25600.0, 13.0], [26000.0, 7.0], [25800.0, 12.0], [26200.0, 2.0], [26600.0, 26.0], [26400.0, 4.0], [26800.0, 13.0], [27600.0, 7.0], [27000.0, 4.0], [27200.0, 4.0], [27400.0, 10.0], [27800.0, 7.0], [28000.0, 15.0], [28400.0, 16.0], [28600.0, 5.0], [28200.0, 6.0], [28800.0, 7.0], [29200.0, 17.0], [29400.0, 8.0], [29600.0, 11.0], [29000.0, 5.0], [29800.0, 8.0], [30000.0, 5.0], [30200.0, 10.0], [30400.0, 11.0], [30600.0, 7.0], [30800.0, 16.0], [31000.0, 15.0], [31200.0, 11.0], [31400.0, 8.0], [31600.0, 17.0], [31800.0, 22.0], [32000.0, 9.0], [32200.0, 18.0], [32600.0, 20.0], [32400.0, 6.0], [32800.0, 3.0], [33600.0, 2.0], [34000.0, 3.0], [33100.0, 3.0], [33500.0, 2.0], [16500.0, 4.0], [16700.0, 3.0], [16900.0, 7.0], [17100.0, 5.0], [17300.0, 3.0], [17500.0, 3.0], [17700.0, 4.0], [17900.0, 7.0], [18100.0, 3.0], [18300.0, 6.0], [18700.0, 2.0], [18900.0, 5.0], [18500.0, 5.0], [19300.0, 8.0], [19100.0, 1.0], [19700.0, 3.0], [19500.0, 12.0], [19900.0, 9.0], [20100.0, 4.0], [20300.0, 8.0], [20500.0, 2.0], [20700.0, 14.0], [20900.0, 19.0], [21100.0, 13.0], [21300.0, 13.0], [21500.0, 6.0], [21700.0, 7.0], [21900.0, 10.0], [22100.0, 9.0], [22300.0, 14.0], [22500.0, 6.0], [22700.0, 16.0], [22900.0, 8.0], [23100.0, 23.0], [23300.0, 9.0], [23500.0, 4.0], [23700.0, 15.0], [23900.0, 7.0], [24300.0, 8.0], [24500.0, 8.0], [24900.0, 16.0], [24700.0, 3.0], [25300.0, 7.0], [25100.0, 14.0], [25500.0, 7.0], [25700.0, 6.0], [26300.0, 7.0], [25900.0, 10.0], [26100.0, 8.0], [26500.0, 18.0], [26700.0, 16.0], [26900.0, 9.0], [27500.0, 8.0], [27100.0, 3.0], [27300.0, 3.0], [27700.0, 9.0], [27900.0, 5.0], [28100.0, 5.0], [28300.0, 5.0], [28500.0, 8.0], [28700.0, 11.0], [28900.0, 3.0], [29300.0, 11.0], [29500.0, 6.0], [29100.0, 8.0], [29900.0, 7.0], [30100.0, 2.0], [30300.0, 6.0], [29700.0, 8.0], [30500.0, 9.0], [30700.0, 8.0], [30900.0, 6.0], [31100.0, 15.0], [31300.0, 4.0], [31500.0, 7.0], [31700.0, 24.0], [31900.0, 23.0], [32500.0, 15.0], [32700.0, 13.0], [32100.0, 8.0], [32300.0, 5.0], [33000.0, 2.0], [33400.0, 2.0], [33800.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1983.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 21.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1983.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.63068084E12, "maxY": 482.5, "series": [{"data": [[1.63068084E12, 2.0], [1.6306809E12, 1.0]], "isOverall": false, "label": "addDemand", "isController": false}, {"data": [[1.63068084E12, 482.5], [1.6306809E12, 232.5517241379309]], "isOverall": false, "label": "getDemandByIde", "isController": false}, {"data": [[1.6306809E12, 1.5]], "isOverall": false, "label": "editDemand", "isController": false}, {"data": [[1.63068084E12, 429.0139860139861], [1.6306809E12, 179.07002801120453]], "isOverall": false, "label": "listOnesDemandsByPage", "isController": false}, {"data": [[1.63068084E12, 388.03111111111104], [1.6306809E12, 138.0181818181818]], "isOverall": false, "label": "removeDemand", "isController": false}, {"data": [[1.63068084E12, 379.0123456790123], [1.6306809E12, 129.01945525291842]], "isOverall": false, "label": "listAllDemandsByPage", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306809E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1057.0, "minX": 1.0, "maxY": 34109.0, "series": [{"data": [[2.0, 34098.0], [3.0, 33138.0], [4.0, 34061.0], [5.0, 33182.0], [6.0, 34081.0], [7.0, 33077.0], [8.0, 33800.0], [9.0, 32826.0], [10.0, 33735.0], [11.0, 32787.0], [12.0, 33712.0], [13.0, 32726.0], [15.0, 32692.5], [16.0, 32708.0], [17.0, 32732.0], [18.0, 32702.0], [19.0, 32712.0], [20.0, 33655.0], [21.0, 32690.0], [22.0, 32652.0], [23.0, 33653.0], [24.0, 32740.0], [25.0, 32731.0], [26.0, 32638.0], [27.0, 32636.0], [28.0, 32647.0], [30.0, 32647.0], [33.0, 32622.0], [32.0, 32629.0], [35.0, 32689.0], [34.0, 32547.0], [37.0, 32663.0], [36.0, 32600.0], [39.0, 33510.0], [38.0, 32531.0], [41.0, 33539.0], [40.0, 32646.0], [43.0, 32641.0], [42.0, 32506.0], [45.0, 32991.0], [47.0, 32473.0], [46.0, 32559.0], [49.0, 32528.0], [48.0, 32482.0], [51.0, 32505.0], [50.0, 32568.0], [53.0, 32441.0], [52.0, 32456.0], [55.0, 33417.0], [54.0, 32477.0], [57.0, 32510.0], [56.0, 33390.0], [59.0, 32343.0], [58.0, 32364.0], [61.0, 32413.0], [60.0, 32398.0], [63.0, 32276.0], [62.0, 32369.0], [65.0, 32275.0], [64.0, 32312.0], [71.0, 32238.0], [70.0, 32249.0], [69.0, 32250.0], [68.0, 32273.333333333332], [75.0, 32193.0], [74.0, 32248.0], [73.0, 32230.0], [72.0, 32265.0], [79.0, 32199.0], [78.0, 32534.666666666668], [83.0, 33078.0], [82.0, 32210.0], [81.0, 32172.0], [80.0, 32197.0], [87.0, 32193.0], [86.0, 32147.0], [85.0, 32147.0], [84.0, 32210.0], [91.0, 32264.0], [90.0, 32046.0], [89.0, 32171.0], [88.0, 32051.0], [95.0, 31951.0], [94.0, 31917.0], [93.0, 32004.0], [92.0, 32026.0], [99.0, 31966.0], [98.0, 31941.5], [96.0, 31907.0], [103.0, 31969.0], [102.0, 31945.0], [101.0, 31920.0], [100.0, 32934.0], [106.0, 31914.0], [105.0, 31854.0], [104.0, 31990.0], [111.0, 31909.0], [110.0, 31942.0], [109.0, 31841.0], [108.0, 31878.5], [115.0, 31924.0], [114.0, 31865.0], [112.0, 31828.0], [118.0, 31803.0], [117.0, 32364.5], [123.0, 31902.0], [122.0, 31823.0], [121.0, 32179.666666666668], [127.0, 31893.0], [126.0, 31815.0], [125.0, 31867.0], [124.0, 31818.0], [135.0, 31773.0], [134.0, 31806.5], [132.0, 31814.0], [130.0, 31942.0], [129.0, 31792.0], [128.0, 31802.0], [142.0, 31801.0], [141.0, 32355.0], [139.0, 31771.0], [138.0, 32762.0], [137.0, 32728.0], [136.0, 31784.0], [151.0, 31753.0], [149.0, 31794.0], [148.0, 31717.0], [147.0, 32728.0], [146.0, 31741.0], [145.0, 31793.333333333332], [159.0, 31704.666666666668], [156.0, 31688.0], [155.0, 31764.0], [154.0, 32343.0], [152.0, 31739.0], [167.0, 32166.5], [165.0, 31695.5], [163.0, 31724.0], [162.0, 31704.0], [161.0, 31741.0], [160.0, 31699.0], [175.0, 31633.0], [174.0, 32606.0], [173.0, 31696.0], [172.0, 31703.0], [171.0, 31646.0], [170.0, 31651.0], [168.0, 31721.0], [183.0, 32539.0], [182.0, 32508.0], [181.0, 31732.0], [180.0, 31590.0], [179.0, 32601.0], [178.0, 31615.0], [177.0, 32535.0], [176.0, 32591.0], [191.0, 31885.0], [188.0, 31551.0], [187.0, 32539.0], [186.0, 31596.0], [185.0, 31601.5], [199.0, 31359.0], [198.0, 32291.0], [197.0, 31418.0], [196.0, 31476.0], [195.0, 31485.0], [194.0, 31487.0], [193.0, 31495.0], [192.0, 31661.0], [207.0, 31280.0], [206.0, 31154.0], [205.0, 31297.0], [204.0, 31293.0], [203.0, 31245.0], [202.0, 31259.0], [201.0, 31275.0], [200.0, 32209.0], [215.0, 32084.0], [214.0, 31171.0], [213.0, 31211.0], [210.0, 31194.0], [209.0, 31131.0], [208.0, 31203.0], [223.0, 32055.0], [222.0, 32078.0], [221.0, 31120.0], [220.0, 32027.0], [219.0, 31391.0], [218.0, 31161.0], [217.0, 31200.0], [216.0, 31178.0], [231.0, 31047.0], [230.0, 31057.0], [229.0, 32004.0], [228.0, 31086.0], [227.0, 31025.0], [226.0, 31126.0], [225.0, 31169.0], [224.0, 31065.0], [239.0, 31060.0], [238.0, 30926.0], [237.0, 31950.5], [235.0, 31047.0], [234.0, 30992.0], [233.0, 31149.0], [232.0, 31003.0], [247.0, 30966.0], [245.0, 30883.0], [243.0, 30934.0], [242.0, 31861.0], [241.0, 30884.0], [240.0, 30888.0], [255.0, 30854.0], [254.0, 30868.0], [253.0, 30900.0], [252.0, 30849.0], [251.0, 31038.0], [250.0, 31791.0], [249.0, 31826.0], [248.0, 31838.0], [270.0, 30739.0], [271.0, 30742.0], [269.0, 31218.5], [259.0, 31059.0], [258.0, 30869.0], [257.0, 30887.0], [256.0, 31763.0], [267.0, 30692.0], [266.0, 31691.0], [265.0, 30741.0], [264.0, 30839.0], [263.0, 30879.0], [262.0, 30832.0], [261.0, 30829.0], [260.0, 30809.0], [286.0, 30583.0], [287.0, 31456.0], [285.0, 30578.0], [284.0, 30609.0], [283.0, 30728.0], [282.0, 31041.5], [280.0, 30591.0], [279.0, 30580.0], [273.0, 31620.0], [272.0, 30660.0], [275.0, 30695.0], [274.0, 30773.0], [278.0, 31540.0], [277.0, 30651.0], [276.0, 30715.0], [302.0, 30761.0], [303.0, 30288.0], [300.0, 30348.0], [291.0, 30466.0], [290.0, 30497.0], [289.0, 30472.0], [288.0, 31465.0], [299.0, 31285.0], [298.0, 30342.0], [297.0, 30363.0], [296.0, 30344.0], [295.0, 30429.0], [294.0, 31374.0], [293.0, 30439.0], [292.0, 30461.0], [318.0, 30046.0], [319.0, 29991.0], [317.0, 31001.0], [316.0, 31020.0], [315.0, 30264.0], [314.0, 30201.0], [313.0, 30268.0], [312.0, 31053.0], [311.0, 30235.0], [304.0, 31208.0], [307.0, 31106.5], [305.0, 30246.0], [310.0, 31096.0], [308.0, 30218.0], [334.0, 29774.0], [335.0, 29794.0], [333.0, 29840.0], [332.0, 29777.0], [331.0, 29831.0], [330.0, 30697.0], [329.0, 30766.0], [328.0, 29854.0], [327.0, 29835.0], [320.0, 30025.0], [322.0, 30925.0], [321.0, 30010.0], [326.0, 30002.0], [325.0, 30295.0], [324.0, 30783.5], [350.0, 29668.0], [351.0, 29624.0], [349.0, 30579.0], [348.0, 29653.0], [347.0, 30418.0], [346.0, 29658.0], [345.0, 30545.0], [344.0, 29736.0], [343.0, 29688.0], [337.0, 30618.0], [336.0, 29738.0], [339.0, 29703.0], [338.0, 29945.0], [342.0, 30590.0], [341.0, 29785.0], [340.0, 30597.0], [365.0, 29497.0], [366.0, 30344.0], [364.0, 29448.0], [355.0, 29553.0], [354.0, 29643.0], [353.0, 30487.0], [352.0, 29736.0], [363.0, 30323.0], [362.0, 29502.0], [361.0, 29512.0], [360.0, 29475.0], [359.0, 30406.0], [358.0, 29513.0], [357.0, 30467.0], [356.0, 30466.0], [382.0, 30139.0], [383.0, 29286.0], [381.0, 29269.0], [380.0, 29283.0], [379.0, 29634.0], [378.0, 29304.0], [377.0, 29662.0], [376.0, 29408.0], [375.0, 29376.5], [369.0, 29615.0], [368.0, 29475.5], [371.0, 30257.0], [370.0, 29397.0], [373.0, 29345.0], [372.0, 29352.0], [398.0, 29156.0], [399.0, 29079.0], [397.0, 29141.0], [396.0, 29224.0], [395.0, 29213.0], [394.0, 29122.0], [393.0, 29142.0], [392.0, 30028.0], [391.0, 29178.0], [384.0, 29332.0], [387.0, 29257.5], [385.0, 29297.0], [390.0, 30146.0], [389.0, 29272.0], [388.0, 29221.0], [414.0, 28996.0], [415.0, 29058.0], [413.0, 29117.0], [412.0, 29928.0], [411.0, 29213.0], [410.0, 29906.0], [409.0, 29077.0], [408.0, 29014.0], [407.0, 29088.0], [400.0, 29191.0], [402.0, 29947.0], [401.0, 29965.0], [406.0, 29448.0], [405.0, 29115.0], [404.0, 29641.5], [430.0, 28730.0], [431.0, 29618.0], [429.0, 28803.0], [428.0, 28752.0], [427.0, 29617.0], [426.0, 28879.0], [425.0, 28819.0], [424.0, 28783.0], [423.0, 28858.0], [416.0, 29878.0], [418.0, 29820.0], [417.0, 29297.0], [422.0, 28819.0], [421.0, 28837.0], [420.0, 29841.5], [444.0, 28578.0], [446.0, 28493.0], [447.0, 28537.0], [445.0, 28507.0], [443.0, 29431.0], [442.0, 29201.333333333332], [439.0, 28587.0], [432.0, 28749.0], [435.0, 28713.0], [433.0, 28769.0], [438.0, 28644.0], [437.0, 28610.0], [436.0, 28730.0], [462.0, 28523.0], [463.0, 29304.0], [461.0, 29263.0], [460.0, 28423.0], [459.0, 29276.0], [458.0, 28461.0], [457.0, 28479.0], [456.0, 28456.0], [455.0, 28437.0], [448.0, 29327.0], [451.0, 28890.5], [450.0, 28436.0], [454.0, 28448.0], [453.0, 28908.5], [477.0, 28276.0], [478.0, 28956.0], [476.0, 28985.0], [467.0, 29221.0], [466.0, 28425.0], [465.0, 28411.0], [464.0, 28429.0], [475.0, 28357.0], [474.0, 28238.0], [473.0, 28226.0], [472.0, 28324.0], [471.0, 28359.0], [470.0, 28489.0], [469.0, 29203.0], [468.0, 28378.0], [494.0, 28348.0], [495.0, 28005.0], [492.0, 28102.0], [483.0, 28230.0], [482.0, 28085.0], [481.0, 28057.0], [480.0, 28174.5], [491.0, 28067.0], [490.0, 28017.0], [489.0, 28059.0], [488.0, 28864.0], [487.0, 28068.0], [486.0, 28022.0], [485.0, 28090.0], [484.0, 28282.0], [509.0, 28705.0], [510.0, 27891.0], [508.0, 27884.0], [499.0, 28766.5], [497.0, 28785.0], [496.0, 28001.0], [507.0, 27976.0], [506.0, 27952.0], [505.0, 27907.0], [504.0, 27940.0], [503.0, 28168.0], [501.0, 28074.0], [500.0, 27883.0], [538.0, 27537.0], [542.0, 27434.0], [528.0, 27625.0], [530.0, 27716.0], [532.0, 27535.0], [540.0, 27808.0], [518.0, 28514.0], [516.0, 27726.0], [514.0, 27749.0], [512.0, 27943.5], [526.0, 27716.0], [524.0, 28062.5], [522.0, 27741.0], [534.0, 27507.0], [568.0, 27012.0], [560.0, 27160.0], [562.0, 27061.0], [572.0, 27166.0], [546.0, 27428.0], [548.0, 27474.0], [550.0, 27294.0], [558.0, 27369.0], [556.0, 27224.0], [566.0, 26979.0], [564.0, 27001.5], [604.0, 26958.0], [606.0, 26702.0], [592.0, 27606.0], [596.0, 26762.0], [602.0, 26671.0], [600.0, 26684.0], [582.0, 26843.0], [580.0, 26869.0], [578.0, 26872.0], [576.0, 26863.0], [588.0, 26899.0], [586.0, 26848.0], [584.0, 26846.0], [598.0, 26822.0], [632.0, 26600.0], [636.0, 26554.0], [626.0, 26692.0], [638.0, 26617.0], [634.0, 26597.0], [608.0, 26721.5], [612.0, 26630.0], [614.0, 26683.0], [622.0, 26702.0], [620.0, 26631.0], [618.0, 26673.5], [616.0, 26657.5], [630.0, 26606.5], [628.0, 26589.0], [668.0, 26084.0], [656.0, 26442.0], [658.0, 26374.0], [660.0, 26588.0], [670.0, 26109.0], [666.0, 26174.0], [664.0, 26185.0], [640.0, 26776.0], [642.0, 26536.0], [644.0, 26488.0], [646.0, 26642.0], [654.0, 26672.0], [652.0, 26522.0], [650.0, 26488.0], [648.0, 26542.0], [662.0, 26390.0], [700.0, 26050.0], [688.0, 25858.0], [690.0, 26263.0], [692.0, 25852.0], [702.0, 25677.0], [698.0, 25818.0], [696.0, 25816.0], [672.0, 26075.0], [674.0, 26137.0], [676.0, 26020.0], [678.0, 25958.0], [686.0, 25889.0], [684.0, 25911.0], [682.0, 25939.0], [680.0, 25955.0], [694.0, 25879.5], [732.0, 25549.0], [720.0, 25537.0], [724.0, 25665.0], [734.0, 25355.0], [730.0, 25334.0], [728.0, 25406.0], [704.0, 25913.0], [708.0, 25650.0], [710.0, 25698.0], [718.0, 25750.0], [716.0, 26033.0], [714.0, 25539.0], [712.0, 25981.0], [726.0, 26018.0], [764.0, 25106.0], [766.0, 24979.0], [752.0, 25176.0], [754.0, 25136.0], [738.0, 25153.0], [740.0, 25130.0], [750.0, 25061.0], [748.0, 25688.0], [744.0, 25176.0], [758.0, 25022.0], [756.0, 25073.0], [796.0, 24644.0], [784.0, 24951.0], [786.0, 24890.0], [788.0, 25020.0], [794.0, 25341.0], [792.0, 24826.0], [774.0, 25216.0], [772.0, 24985.0], [770.0, 25166.0], [782.0, 24946.0], [780.0, 24958.0], [778.0, 24970.0], [776.0, 25035.0], [790.0, 24909.0], [824.0, 24400.0], [828.0, 24265.0], [818.0, 24356.0], [820.0, 24664.0], [830.0, 24379.0], [826.0, 24304.0], [800.0, 24641.0], [802.0, 24577.0], [804.0, 24497.0], [806.0, 24620.0], [814.0, 24461.0], [812.0, 24466.0], [810.0, 24542.0], [808.0, 24492.0], [822.0, 24281.0], [860.0, 23756.0], [856.0, 23800.0], [848.0, 23796.0], [852.0, 23879.5], [850.0, 23835.0], [862.0, 23755.0], [858.0, 23786.0], [832.0, 24271.0], [834.0, 24208.0], [836.0, 23967.0], [838.0, 23931.0], [846.0, 23851.0], [844.0, 23829.0], [842.0, 23937.0], [840.0, 23986.0], [854.0, 23868.0], [892.0, 23469.0], [880.0, 23560.0], [882.0, 23462.0], [884.0, 23441.0], [894.0, 23359.0], [890.0, 23364.0], [888.0, 23633.0], [864.0, 23764.0], [866.0, 23632.0], [868.0, 23747.0], [870.0, 23692.0], [876.0, 23625.0], [874.0, 23576.0], [886.0, 23427.0], [898.0, 23256.0], [926.0, 23157.0], [924.0, 23126.0], [896.0, 23234.0], [902.0, 23237.0], [910.0, 23140.0], [908.0, 23165.0], [906.0, 23181.0], [904.0, 23297.5], [918.0, 23202.0], [916.0, 23191.0], [914.0, 23446.0], [956.0, 23100.0], [944.0, 23023.0], [946.0, 23170.0], [948.0, 23125.0], [958.0, 23023.0], [954.0, 23162.0], [952.0, 22948.0], [928.0, 23290.0], [930.0, 23131.0], [932.0, 23077.0], [942.0, 23038.0], [940.0, 23040.0], [938.0, 23148.0], [950.0, 22951.0], [988.0, 22534.0], [976.0, 22710.0], [978.0, 22768.0], [990.0, 22625.0], [986.0, 22794.0], [984.0, 22734.0], [960.0, 22828.0], [964.0, 22859.0], [966.0, 22985.0], [974.0, 22774.0], [972.0, 22752.0], [970.0, 22864.0], [968.0, 22774.0], [982.0, 22656.0], [1018.0, 22395.0], [1022.0, 22348.0], [1008.0, 22346.0], [1010.0, 22414.0], [1012.0, 22311.0], [1020.0, 22769.0], [1016.0, 22283.0], [998.0, 22550.0], [996.0, 22462.0], [994.0, 22399.0], [992.0, 22585.0], [1006.0, 22621.0], [1004.0, 22362.0], [1002.0, 22373.0], [1000.0, 22373.0], [1014.0, 22390.0], [1080.0, 21589.0], [1084.0, 21587.0], [1056.0, 21977.0], [1060.0, 22272.0], [1076.0, 21686.0], [1024.0, 22232.0], [1028.0, 22212.0], [1032.0, 22289.0], [1036.0, 22675.0], [1052.0, 21976.0], [1048.0, 22075.0], [1044.0, 21997.0], [1040.0, 22205.0], [1068.0, 21774.0], [1064.0, 21773.0], [1140.0, 21333.0], [1148.0, 21110.0], [1120.0, 21392.0], [1124.0, 21583.0], [1128.0, 20923.0], [1144.0, 20915.0], [1100.0, 21414.0], [1096.0, 21884.0], [1092.0, 21377.0], [1088.0, 21978.0], [1116.0, 21721.0], [1112.0, 21167.0], [1108.0, 21635.0], [1104.0, 21603.5], [1132.0, 20966.0], [1204.0, 20328.0], [1192.0, 20499.0], [1184.0, 20690.0], [1196.0, 20578.0], [1200.0, 20862.0], [1164.0, 21286.0], [1156.0, 20760.0], [1152.0, 21192.0], [1180.0, 20867.0], [1172.0, 20712.0], [1168.0, 21126.0], [1272.0, 19511.0], [1268.0, 19156.0], [1276.0, 18676.0], [1248.0, 19631.0], [1252.0, 19386.0], [1256.0, 19259.0], [1260.0, 19349.0], [1264.0, 19609.0], [1220.0, 20187.2], [1224.0, 20152.0], [1228.0, 19773.5], [1244.0, 19973.0], [1236.0, 19516.0], [1232.0, 19614.0], [1340.0, 17891.0], [1312.0, 18004.0], [1316.0, 18400.0], [1320.0, 18183.0], [1324.0, 17805.0], [1332.0, 17697.0], [1328.0, 18073.0], [1280.0, 18826.0], [1284.0, 18924.0], [1288.0, 18914.0], [1292.0, 18599.0], [1304.0, 18059.0], [1300.0, 18622.0], [1296.0, 18671.0], [1400.0, 16222.0], [1396.0, 16232.0], [1404.0, 15869.0], [1380.0, 16926.0], [1384.0, 16687.0], [1388.0, 16685.0], [1392.0, 16515.0], [1344.0, 17535.0], [1348.0, 17586.0], [1352.0, 17522.0], [1356.0, 17179.0], [1372.0, 16998.0], [1368.0, 17201.0], [1364.0, 17328.0], [1360.0, 16884.0], [1464.0, 14752.0], [1460.0, 14628.0], [1468.0, 14181.0], [1440.0, 14726.0], [1444.0, 14774.0], [1448.0, 14902.5], [1452.0, 14694.0], [1456.0, 14415.0], [1408.0, 15906.0], [1412.0, 15820.0], [1416.0, 15744.0], [1420.0, 15324.0], [1436.0, 15125.0], [1432.0, 15395.0], [1428.0, 15505.0], [1424.0, 15776.0], [1528.0, 13079.0], [1524.0, 13371.0], [1532.0, 13065.0], [1508.0, 13524.0], [1512.0, 13200.0], [1516.0, 13122.0], [1520.0, 13104.0], [1472.0, 14459.0], [1480.0, 14253.0], [1484.0, 14004.0], [1500.0, 13692.0], [1496.0, 13537.0], [1492.0, 14003.0], [1488.0, 13910.0], [1592.0, 11985.0], [1596.0, 11921.0], [1568.0, 12495.0], [1572.0, 12398.0], [1576.0, 11969.0], [1580.0, 12083.0], [1588.0, 12183.0], [1584.0, 12112.0], [1548.0, 12737.0], [1544.0, 12947.0], [1540.0, 13025.0], [1536.0, 13132.0], [1564.0, 12523.0], [1560.0, 12506.0], [1556.0, 12711.0], [1552.0, 12892.0], [1652.0, 10371.0], [1660.0, 9932.0], [1632.0, 11081.0], [1636.0, 10994.0], [1640.0, 10820.0], [1644.0, 10577.0], [1648.0, 10359.0], [1612.0, 11275.0], [1608.0, 11534.0], [1604.0, 11835.0], [1600.0, 11965.0], [1624.0, 11246.0], [1620.0, 11530.0], [1616.0, 11339.0], [1720.0, 9029.0], [1716.0, 8858.0], [1724.0, 9029.0], [1696.0, 9784.0], [1700.0, 9478.0], [1704.0, 9572.0], [1708.0, 9428.0], [1712.0, 9220.0], [1664.0, 10013.0], [1668.0, 10112.0], [1672.0, 10126.0], [1676.0, 9936.0], [1692.0, 9386.0], [1688.0, 9647.0], [1684.0, 9809.0], [1680.0, 9969.0], [1784.0, 7393.0], [1780.0, 7566.0], [1788.0, 7536.0], [1760.0, 7960.0], [1764.0, 8188.0], [1768.0, 8142.0], [1772.0, 8026.0], [1776.0, 7440.0], [1728.0, 8802.0], [1732.0, 8886.0], [1736.0, 8689.0], [1740.0, 8725.0], [1756.0, 8257.0], [1752.0, 8172.0], [1748.0, 8451.0], [1744.0, 8634.0], [1848.0, 5479.0], [1844.0, 5647.0], [1852.0, 5382.0], [1824.0, 6173.0], [1832.0, 5983.0], [1836.0, 5861.0], [1840.0, 5531.0], [1804.0, 6668.0], [1796.0, 7084.0], [1792.0, 6952.0], [1820.0, 5972.0], [1816.0, 6407.0], [1812.0, 6439.0], [1808.0, 6491.0], [1912.0, 3735.0], [1908.0, 3761.0], [1916.0, 3241.0], [1888.0, 4618.0], [1892.0, 4501.0], [1896.0, 3974.0], [1900.0, 4060.0], [1904.0, 3980.0], [1856.0, 5399.0], [1860.0, 5389.0], [1864.0, 5298.0], [1868.0, 4917.0], [1884.0, 4330.0], [1880.0, 4759.0], [1876.0, 4812.0], [1872.0, 4997.0], [1972.0, 1866.0], [1976.0, 1727.0], [1960.0, 2252.0], [1952.0, 2388.0], [1964.0, 1948.0], [1968.0, 1773.0], [1920.0, 3589.0], [1924.0, 3560.0], [1928.0, 3518.0], [1932.0, 3432.0], [1948.0, 2751.0], [1944.0, 3056.0], [1940.0, 3226.0], [1936.0, 3428.0], [1984.0, 1712.0], [1988.0, 1252.0], [2000.0, 1395.0], [1996.0, 1441.0], [1992.0, 1407.0], [1081.0, 22145.0], [1057.0, 21914.0], [1061.0, 22381.0], [1065.0, 21846.0], [1077.0, 21672.0], [1073.0, 21650.0], [1037.0, 22243.0], [1025.0, 22225.0], [1053.0, 22659.0], [1045.0, 21976.0], [1041.0, 22156.0], [1069.0, 22013.0], [1137.0, 21142.0], [1149.0, 20897.0], [1129.0, 20946.0], [1121.0, 21042.0], [1125.0, 20944.0], [1101.0, 21408.0], [1097.0, 21437.0], [1093.0, 21921.0], [1089.0, 21891.0], [1117.0, 21135.0], [1113.0, 21206.0], [1109.0, 21229.0], [1105.0, 21368.0], [1133.0, 21398.0], [1213.0, 20189.5], [1185.0, 20652.0], [1189.0, 20681.0], [1193.0, 20478.0], [1197.0, 20378.0], [1205.0, 20404.0], [1201.0, 20856.0], [1165.0, 20784.0], [1161.0, 21032.0], [1157.0, 20872.0], [1153.0, 21144.0], [1181.0, 20691.0], [1177.0, 21060.0], [1173.0, 20799.0], [1169.0, 20750.0], [1273.0, 19505.0], [1277.0, 19047.0], [1253.0, 19815.0], [1257.0, 19277.0], [1261.0, 19536.0], [1269.0, 19586.0], [1265.0, 19567.0], [1221.0, 20381.0], [1225.0, 20359.0], [1229.0, 20181.0], [1245.0, 19316.0], [1241.0, 19477.5], [1237.0, 20064.0], [1233.0, 20012.0], [1341.0, 17876.0], [1313.0, 17987.0], [1317.0, 18103.0], [1321.0, 17901.0], [1325.0, 17977.0], [1337.0, 17520.5], [1333.0, 17492.0], [1329.0, 17918.0], [1281.0, 18911.0], [1285.0, 18878.0], [1289.0, 18527.0], [1293.0, 18968.0], [1309.0, 18397.5], [1305.0, 18371.0], [1301.0, 18375.0], [1297.0, 18437.0], [1401.0, 16319.0], [1405.0, 16181.0], [1377.0, 16959.0], [1381.0, 16419.0], [1385.0, 16594.0], [1389.0, 16293.0], [1397.0, 16041.0], [1393.0, 16562.0], [1345.0, 17793.0], [1349.0, 17777.0], [1353.0, 17467.0], [1357.0, 17076.0], [1373.0, 17079.0], [1369.0, 17143.0], [1365.0, 17054.0], [1361.0, 17176.0], [1465.0, 14559.0], [1469.0, 14390.0], [1441.0, 14954.0], [1445.0, 14776.0], [1449.0, 14808.0], [1453.0, 14697.0], [1461.0, 14544.0], [1457.0, 14703.0], [1409.0, 15687.0], [1413.0, 15966.0], [1421.0, 15634.0], [1437.0, 15093.0], [1433.0, 15594.0], [1429.0, 15743.0], [1425.0, 15386.0], [1529.0, 13267.0], [1533.0, 13316.0], [1505.0, 13677.5], [1509.0, 13651.0], [1517.0, 13406.0], [1525.0, 13355.0], [1521.0, 13438.0], [1473.0, 14318.0], [1477.0, 14232.0], [1501.0, 13757.0], [1497.0, 13779.0], [1489.0, 13713.0], [1597.0, 11842.0], [1573.0, 12369.0], [1577.0, 11983.0], [1581.0, 12159.0], [1593.0, 12091.0], [1589.0, 11640.0], [1585.0, 12113.0], [1549.0, 12513.0], [1545.0, 12913.0], [1541.0, 13046.0], [1537.0, 13120.0], [1565.0, 12682.0], [1561.0, 12518.0], [1557.0, 12643.0], [1553.0, 12782.0], [1661.0, 10452.0], [1633.0, 10701.0], [1637.0, 11073.0], [1641.0, 10591.0], [1645.0, 10563.0], [1657.0, 10446.0], [1653.0, 10508.0], [1649.0, 10508.0], [1613.0, 11596.0], [1609.0, 11297.0], [1605.0, 11290.0], [1601.0, 11761.0], [1629.0, 11193.0], [1625.0, 11296.0], [1621.0, 11012.0], [1617.0, 11271.0], [1721.0, 9122.0], [1725.0, 8858.0], [1697.0, 9795.0], [1701.0, 9553.0], [1705.0, 9613.0], [1709.0, 9542.0], [1717.0, 9271.0], [1713.0, 8996.0], [1665.0, 10067.0], [1669.0, 10189.0], [1673.0, 10016.0], [1677.0, 9818.0], [1689.0, 9669.0], [1685.0, 9684.0], [1681.0, 9591.0], [1785.0, 7085.0], [1789.0, 6788.0], [1761.0, 8241.0], [1765.0, 8003.0], [1769.0, 7784.0], [1773.0, 7821.0], [1781.0, 7575.0], [1777.0, 7733.0], [1729.0, 8767.0], [1733.0, 9017.0], [1737.0, 8490.0], [1741.0, 8354.0], [1757.0, 8327.0], [1753.0, 8009.0], [1749.0, 8269.0], [1745.0, 8593.0], [1849.0, 5643.0], [1853.0, 5354.0], [1825.0, 5807.0], [1829.0, 6092.5], [1833.0, 6036.0], [1837.0, 5726.0], [1845.0, 5727.0], [1805.0, 6896.0], [1801.0, 6665.5], [1797.0, 6898.0], [1793.0, 6898.0], [1821.0, 6208.0], [1817.0, 6434.0], [1813.0, 6502.0], [1809.0, 6824.0], [1913.0, 3447.0], [1917.0, 3460.0], [1889.0, 4470.0], [1893.0, 4260.0], [1897.0, 3962.0], [1901.0, 4010.0], [1909.0, 3768.0], [1905.0, 3889.0], [1857.0, 5127.0], [1861.0, 5236.0], [1865.0, 4986.0], [1885.0, 4686.0], [1881.0, 4465.0], [1877.0, 4665.0], [1873.0, 4941.0], [1973.0, 1943.0], [1977.0, 1355.0], [1953.0, 2561.0], [1957.0, 2350.5], [1961.0, 2539.0], [1965.0, 2319.0], [1969.0, 1887.0], [1921.0, 3271.0], [1925.0, 3247.0], [1929.0, 3113.0], [1933.0, 3326.0], [1949.0, 2993.0], [1945.0, 2845.0], [1941.0, 3341.0], [1937.0, 3413.0], [1989.0, 1525.0], [2001.0, 1184.0], [1993.0, 1336.0], [541.0, 27435.0], [543.0, 27419.0], [529.0, 27653.0], [531.0, 28439.0], [533.0, 27535.0], [539.0, 27528.0], [537.0, 27901.5], [519.0, 27838.0], [517.0, 27797.0], [515.0, 28557.0], [527.0, 27573.0], [525.0, 27652.0], [521.0, 28079.5], [535.0, 27573.0], [571.0, 27777.5], [573.0, 27121.0], [575.0, 26957.5], [561.0, 27338.0], [569.0, 26991.0], [559.0, 27967.0], [545.0, 27441.5], [547.0, 27469.0], [549.0, 27450.0], [551.0, 28122.0], [557.0, 28012.0], [555.0, 27216.5], [553.0, 27704.5], [567.0, 26994.0], [565.0, 26993.0], [601.0, 26757.0], [605.0, 26643.0], [593.0, 26766.0], [595.0, 26736.5], [603.0, 26739.0], [583.0, 27691.0], [581.0, 26888.0], [579.0, 27041.0], [577.0, 27704.0], [591.0, 27152.5], [589.0, 26763.0], [587.0, 26965.0], [585.0, 26847.0], [599.0, 26889.0], [637.0, 26622.0], [639.0, 26540.0], [625.0, 26611.0], [627.0, 26621.0], [635.0, 26564.0], [633.0, 26567.0], [623.0, 26743.0], [609.0, 26655.0], [613.0, 26807.0], [621.0, 26591.0], [619.0, 26634.0], [669.0, 26145.0], [671.0, 26285.0], [657.0, 26606.0], [659.0, 26381.0], [661.0, 26339.0], [667.0, 26145.0], [665.0, 26163.0], [655.0, 26320.0], [641.0, 26529.0], [643.0, 26508.0], [645.0, 26508.0], [647.0, 26542.0], [653.0, 26437.0], [651.0, 26617.0], [649.0, 26501.0], [663.0, 26301.0], [701.0, 25779.0], [703.0, 25700.0], [689.0, 26704.0], [691.0, 25986.0], [699.0, 25893.0], [697.0, 25876.0], [687.0, 25860.0], [673.0, 26746.0], [675.0, 26117.0], [677.0, 26010.0], [679.0, 25989.0], [683.0, 25967.0], [681.0, 26004.0], [695.0, 25888.0], [733.0, 25347.0], [735.0, 25188.0], [723.0, 25578.0], [721.0, 25579.0], [725.0, 25738.0], [731.0, 25383.0], [729.0, 25432.0], [719.0, 25540.0], [707.0, 25706.5], [705.0, 25666.0], [709.0, 25716.0], [711.0, 25647.0], [713.0, 25669.0], [727.0, 25521.0], [763.0, 25179.0], [761.0, 25316.0], [767.0, 25783.0], [753.0, 25092.0], [765.0, 25199.0], [751.0, 25209.0], [737.0, 25229.0], [739.0, 25331.0], [743.0, 25218.5], [741.0, 25194.0], [749.0, 25102.0], [747.0, 25254.0], [759.0, 25046.0], [757.0, 25065.0], [797.0, 24812.0], [793.0, 24891.0], [799.0, 24655.0], [785.0, 25021.0], [787.0, 24978.0], [789.0, 24887.0], [795.0, 24724.0], [775.0, 24981.0], [773.0, 24983.0], [771.0, 24995.0], [769.0, 24976.0], [783.0, 24881.0], [781.0, 25615.0], [779.0, 24963.0], [777.0, 24970.0], [791.0, 24851.0], [829.0, 24505.0], [831.0, 24418.0], [817.0, 24376.5], [821.0, 24425.0], [827.0, 24396.0], [825.0, 24379.0], [815.0, 24463.0], [801.0, 24528.0], [803.0, 24464.0], [807.0, 24674.0], [813.0, 24522.0], [811.0, 24531.0], [809.0, 24500.0], [823.0, 24325.0], [859.0, 23840.0], [863.0, 23705.0], [849.0, 23798.0], [861.0, 23656.0], [857.0, 23889.0], [847.0, 23851.0], [833.0, 25069.0], [835.0, 23996.0], [837.0, 24017.0], [839.0, 23914.0], [845.0, 23855.0], [843.0, 24022.0], [841.0, 24044.0], [855.0, 23778.0], [893.0, 23488.0], [895.0, 23221.0], [881.0, 23562.0], [883.0, 23410.0], [885.0, 23409.0], [891.0, 23375.0], [889.0, 23372.0], [879.0, 23626.5], [865.0, 23731.0], [867.0, 23747.0], [869.0, 23727.0], [871.0, 23706.0], [877.0, 23620.0], [875.0, 23676.0], [873.0, 23674.0], [887.0, 23385.0], [923.0, 23171.0], [921.0, 23093.333333333332], [927.0, 23604.0], [913.0, 23159.5], [925.0, 23131.0], [911.0, 23133.0], [897.0, 23432.0], [899.0, 23212.0], [901.0, 23227.5], [909.0, 23311.0], [907.0, 23259.0], [905.0, 23355.0], [915.0, 23170.0], [957.0, 23371.0], [959.0, 22957.0], [947.0, 23126.0], [949.0, 23045.0], [955.0, 23077.0], [953.0, 22981.0], [943.0, 23016.0], [929.0, 23098.0], [931.0, 23818.0], [935.0, 23074.666666666668], [941.0, 23194.0], [939.0, 23209.0], [937.0, 23040.5], [951.0, 23181.0], [989.0, 22564.0], [991.0, 22909.0], [977.0, 22861.0], [981.0, 22664.0], [979.0, 21944.0], [987.0, 22680.0], [985.0, 23113.0], [975.0, 22768.0], [963.0, 22878.5], [961.0, 22863.0], [965.0, 22793.0], [967.0, 22781.0], [973.0, 22939.0], [971.0, 22873.0], [969.0, 22766.0], [983.0, 22747.0], [1021.0, 22230.0], [1023.0, 22648.0], [1009.0, 22431.0], [1011.0, 22776.0], [1013.0, 22342.0], [1019.0, 22371.0], [999.0, 22398.0], [997.0, 22403.0], [993.0, 23051.0], [1007.0, 22433.0], [1003.0, 22472.0], [1001.0, 22376.0], [1015.0, 22424.0], [1074.0, 21692.0], [1082.0, 21614.0], [1058.0, 21946.0], [1062.0, 22025.0], [1078.0, 22006.0], [1054.0, 22191.0], [1026.0, 22192.0], [1030.0, 22483.0], [1034.0, 22213.5], [1038.0, 22178.0], [1050.0, 22059.666666666668], [1046.0, 22052.0], [1042.0, 22199.0], [1070.0, 21727.0], [1066.0, 21832.0], [1146.0, 21112.5], [1150.0, 21408.0], [1122.0, 20937.0], [1126.0, 20951.0], [1130.0, 20883.0], [1142.0, 20871.0], [1138.0, 20953.0], [1102.0, 21437.0], [1098.0, 22019.0], [1094.0, 21450.0], [1090.0, 21399.0], [1118.0, 21061.0], [1114.0, 21172.0], [1110.0, 21169.0], [1106.0, 21783.0], [1134.0, 20982.0], [1210.0, 20220.5], [1206.0, 20078.0], [1190.0, 20957.0], [1186.0, 21105.0], [1194.0, 20918.0], [1198.0, 20768.0], [1214.0, 19924.0], [1202.0, 20623.0], [1166.0, 20774.0], [1158.0, 21344.0], [1154.0, 20763.0], [1182.0, 21108.0], [1178.0, 20693.0], [1174.0, 21265.0], [1170.0, 20787.0], [1274.0, 19210.0], [1258.0, 19347.0], [1262.0, 19277.0], [1278.0, 18541.0], [1270.0, 19400.0], [1266.0, 19534.0], [1222.0, 19867.0], [1226.0, 20097.0], [1230.0, 19873.0], [1246.0, 19323.0], [1242.0, 19826.0], [1234.0, 20158.0], [1338.0, 17387.0], [1330.0, 17883.0], [1314.0, 18392.0], [1318.0, 18282.0], [1322.0, 18104.0], [1326.0, 18082.0], [1334.0, 17844.0], [1286.0, 18764.0], [1290.0, 18817.0], [1294.0, 18492.0], [1310.0, 18292.0], [1306.0, 18363.0], [1302.0, 18348.0], [1298.0, 18622.0], [1406.0, 16122.0], [1378.0, 17058.0], [1386.0, 16619.0], [1390.0, 16759.0], [1402.0, 16295.0], [1398.0, 16142.0], [1394.0, 16105.0], [1346.0, 17688.0], [1350.0, 17733.0], [1354.0, 16985.0], [1358.0, 17236.0], [1374.0, 16867.0], [1366.0, 16823.0], [1362.0, 17237.0], [1470.0, 14058.0], [1442.0, 14531.0], [1446.0, 14570.0], [1450.0, 14809.0], [1454.0, 14801.0], [1466.0, 14386.0], [1462.0, 14664.0], [1458.0, 14656.0], [1410.0, 15894.0], [1414.0, 15860.0], [1418.0, 15710.0], [1422.0, 15342.0], [1438.0, 15137.0], [1434.0, 15471.0], [1430.0, 15718.0], [1426.0, 15571.0], [1534.0, 13264.0], [1506.0, 13646.0], [1510.0, 13300.0], [1514.0, 13311.5], [1518.0, 13434.0], [1530.0, 13303.0], [1526.0, 12997.0], [1522.0, 13396.0], [1474.0, 14321.0], [1478.0, 14122.0], [1482.0, 14210.5], [1486.0, 13962.5], [1502.0, 13670.0], [1498.0, 13821.0], [1494.0, 13944.0], [1490.0, 14043.0], [1598.0, 12006.0], [1570.0, 12255.5], [1574.0, 12334.0], [1578.0, 12439.0], [1582.0, 12037.0], [1590.0, 12046.0], [1586.0, 12205.0], [1546.0, 12887.0], [1542.0, 13003.0], [1538.0, 13044.0], [1566.0, 12126.0], [1562.0, 12483.0], [1558.0, 12530.0], [1554.0, 12630.0], [1662.0, 10133.0], [1634.0, 11084.0], [1638.0, 10941.0], [1642.0, 10781.0], [1646.0, 10164.0], [1658.0, 10340.0], [1654.0, 10235.0], [1650.0, 10579.0], [1614.0, 11608.0], [1610.0, 11647.0], [1606.0, 11496.0], [1602.0, 11706.0], [1630.0, 11131.0], [1626.0, 11217.0], [1622.0, 11022.0], [1618.0, 11294.0], [1726.0, 8734.0], [1702.0, 9719.0], [1706.0, 9351.0], [1710.0, 9446.0], [1722.0, 9174.0], [1718.0, 8796.0], [1714.0, 9273.0], [1666.0, 10247.0], [1670.0, 9860.0], [1674.0, 9994.0], [1678.0, 9638.0], [1694.0, 9644.5], [1690.0, 9854.0], [1686.0, 9738.0], [1682.0, 10039.0], [1790.0, 7289.0], [1762.0, 8211.0], [1766.0, 8279.0], [1770.0, 7644.0], [1774.0, 7990.0], [1786.0, 7258.0], [1782.0, 7425.0], [1778.0, 7687.0], [1730.0, 8540.0], [1734.0, 8982.0], [1738.0, 8828.0], [1742.0, 8743.0], [1758.0, 8261.0], [1754.0, 8416.0], [1750.0, 8512.0], [1746.0, 8671.0], [1854.0, 5279.0], [1826.0, 5873.0], [1830.0, 6125.0], [1834.0, 5949.0], [1838.0, 5717.0], [1850.0, 5638.0], [1846.0, 5716.0], [1842.0, 5718.0], [1806.0, 6756.0], [1802.0, 6709.0], [1798.0, 6928.0], [1794.0, 6876.0], [1822.0, 5835.0], [1818.0, 6271.0], [1814.0, 6590.0], [1810.0, 6530.0], [1918.0, 3439.0], [1890.0, 4321.0], [1894.0, 4421.0], [1898.0, 4221.0], [1902.0, 4145.0], [1914.0, 3718.0], [1910.0, 3738.0], [1906.0, 4000.0], [1858.0, 5406.0], [1862.0, 5217.0], [1866.0, 5195.0], [1870.0, 4976.0], [1886.0, 4382.0], [1882.0, 4619.0], [1878.0, 4654.0], [1874.0, 4834.0], [1978.0, 1602.0], [1954.0, 2312.0], [1958.0, 2269.0], [1962.0, 2257.0], [1966.0, 2221.0], [1974.0, 1848.0], [1970.0, 2067.0], [1922.0, 3473.0], [1926.0, 3413.0], [1930.0, 3491.0], [1934.0, 3346.0], [1950.0, 2537.0], [1946.0, 2993.0], [1942.0, 3285.0], [1938.0, 2987.0], [1990.0, 1057.0], [1986.0, 1394.5], [2002.0, 1264.0], [1998.0, 1357.5], [1994.0, 1353.0], [1083.0, 21488.0], [1075.0, 21689.0], [1087.0, 21710.0], [1059.0, 21889.0], [1063.0, 22378.0], [1067.0, 21924.0], [1079.0, 22001.0], [1039.0, 22169.0], [1035.0, 22220.0], [1031.0, 22204.0], [1027.0, 22223.0], [1055.0, 22071.0], [1051.0, 22205.0], [1043.0, 22130.0], [1071.0, 21768.0], [1143.0, 21175.0], [1151.0, 20882.0], [1123.0, 21085.0], [1127.0, 20947.0], [1139.0, 21346.0], [1099.0, 21444.0], [1095.0, 21354.0], [1091.0, 21397.0], [1119.0, 21103.0], [1115.0, 21097.0], [1111.0, 21147.0], [1107.0, 21247.0], [1135.0, 20941.0], [1131.0, 21394.0], [1215.0, 20338.0], [1211.0, 19986.0], [1187.0, 20951.0], [1191.0, 20966.0], [1195.0, 20970.0], [1199.0, 20652.0], [1203.0, 20109.0], [1167.0, 21042.0], [1163.0, 20972.5], [1159.0, 21288.0], [1155.0, 20904.0], [1183.0, 21071.0], [1171.0, 20718.0], [1275.0, 18899.0], [1279.0, 19091.0], [1251.0, 19469.666666666668], [1255.0, 19320.0], [1259.0, 19588.0], [1263.0, 19559.0], [1271.0, 19632.0], [1267.0, 19574.0], [1247.0, 19889.0], [1223.0, 20257.0], [1231.0, 20242.0], [1243.0, 19827.0], [1239.0, 19690.0], [1235.0, 19511.0], [1343.0, 17749.0], [1339.0, 17642.0], [1315.0, 17951.0], [1319.0, 17872.0], [1323.0, 18200.0], [1327.0, 17966.0], [1335.0, 17772.0], [1331.0, 17918.0], [1311.0, 18235.0], [1283.0, 18505.0], [1287.0, 18997.0], [1291.0, 18835.0], [1295.0, 18701.0], [1307.0, 18488.0], [1303.0, 18421.0], [1299.0, 18627.0], [1403.0, 15978.0], [1407.0, 15547.0], [1379.0, 16903.0], [1383.0, 16752.0], [1387.0, 16733.0], [1391.0, 16651.0], [1399.0, 16347.0], [1395.0, 16536.0], [1375.0, 16980.0], [1347.0, 17604.0], [1351.0, 17681.0], [1355.0, 17124.0], [1359.0, 17135.0], [1371.0, 17053.0], [1367.0, 17268.0], [1363.0, 16861.0], [1467.0, 14633.0], [1471.0, 14511.0], [1443.0, 14895.0], [1451.0, 14810.0], [1455.0, 14876.0], [1463.0, 14408.0], [1459.0, 14835.0], [1439.0, 15072.0], [1411.0, 15919.0], [1415.0, 15631.0], [1419.0, 15708.0], [1423.0, 15506.0], [1435.0, 14949.0], [1431.0, 15435.0], [1427.0, 15636.0], [1531.0, 13386.0], [1535.0, 12823.0], [1507.0, 13754.0], [1511.0, 13270.0], [1515.0, 13156.0], [1519.0, 13447.0], [1527.0, 13260.0], [1523.0, 13534.0], [1503.0, 13648.0], [1475.0, 14153.0], [1479.0, 14363.0], [1483.0, 14115.0], [1487.0, 14140.0], [1499.0, 13637.0], [1495.0, 13668.0], [1491.0, 13956.0], [1595.0, 11691.5], [1587.0, 12051.0], [1599.0, 11821.0], [1571.0, 12021.0], [1575.0, 12189.0], [1579.0, 12363.0], [1583.0, 12203.0], [1591.0, 11995.0], [1551.0, 12642.0], [1547.0, 12919.0], [1543.0, 12972.0], [1539.0, 13277.0], [1567.0, 12601.0], [1563.0, 12256.0], [1559.0, 12589.0], [1555.0, 12850.0], [1659.0, 10100.0], [1651.0, 10302.0], [1663.0, 10397.0], [1635.0, 11182.0], [1639.0, 10759.0], [1643.0, 10467.0], [1647.0, 10654.0], [1655.0, 10223.0], [1615.0, 11465.0], [1611.0, 11547.0], [1607.0, 11770.0], [1603.0, 11358.0], [1631.0, 11034.0], [1627.0, 11193.0], [1623.0, 11328.0], [1619.0, 11468.0], [1723.0, 9071.0], [1727.0, 9091.0], [1699.0, 9400.0], [1703.0, 9338.0], [1707.0, 9071.0], [1711.0, 8884.0], [1719.0, 9323.0], [1715.0, 9206.0], [1695.0, 9788.0], [1667.0, 10073.0], [1671.0, 9964.0], [1675.0, 9637.0], [1679.0, 9936.0], [1691.0, 9778.0], [1687.0, 9823.0], [1683.0, 9777.0], [1787.0, 7502.0], [1791.0, 7261.0], [1763.0, 7856.0], [1767.0, 8194.0], [1771.0, 7855.0], [1775.0, 7891.0], [1783.0, 7470.0], [1779.0, 7601.0], [1759.0, 7886.0], [1731.0, 8506.0], [1735.0, 8964.0], [1739.0, 8807.0], [1743.0, 8295.0], [1755.0, 8104.0], [1751.0, 8558.0], [1851.0, 5588.0], [1855.0, 5439.0], [1827.0, 5897.0], [1831.0, 5684.0], [1835.0, 5434.0], [1839.0, 5509.0], [1847.0, 5409.0], [1843.0, 5673.0], [1807.0, 6847.0], [1803.0, 6842.0], [1799.0, 6859.0], [1795.0, 7047.0], [1823.0, 6067.0], [1819.0, 6239.0], [1815.0, 6242.0], [1811.0, 6271.0], [1915.0, 3694.0], [1919.0, 3250.0], [1891.0, 4470.0], [1895.0, 3967.0], [1899.0, 3903.0], [1903.0, 4065.0], [1911.0, 3763.0], [1907.0, 3631.0], [1887.0, 4371.0], [1859.0, 5110.0], [1863.0, 4820.0], [1867.0, 4968.0], [1871.0, 4889.0], [1883.0, 4704.0], [1879.0, 4374.0], [1875.0, 4699.0], [1975.0, 1500.0], [1983.0, 1576.6], [1955.0, 2293.0], [1959.0, 2255.0], [1963.0, 2240.0], [1967.0, 2249.0], [1971.0, 1925.0], [1951.0, 2505.0], [1927.0, 3412.0], [1931.0, 3093.0], [1935.0, 3433.0], [1947.0, 3078.0], [1943.0, 3244.0], [1939.0, 3073.0], [1987.0, 1449.0], [1995.0, 1455.0], [2003.0, 1207.0], [1999.0, 1400.0], [1991.0, 1508.0], [1.0, 34109.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[1002.6022954091804, 20708.077345309324]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2003.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4639.5, "minX": 1.63068084E12, "maxY": 27134.033333333333, "series": [{"data": [[1.63068084E12, 15336.516666666666], [1.6306809E12, 27134.033333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63068084E12, 4639.5], [1.6306809E12, 9577.183333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306809E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9558.549382716044, "minX": 1.63068084E12, "maxY": 26036.170353982292, "series": [{"data": [[1.63068084E12, 9558.549382716044], [1.6306809E12, 26036.170353982292]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306809E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9550.270061728394, "minX": 1.63068084E12, "maxY": 26030.61799410027, "series": [{"data": [[1.63068084E12, 9550.270061728394], [1.6306809E12, 26030.61799410027]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306809E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 130.24382716049388, "minX": 1.63068084E12, "maxY": 828.5331858407078, "series": [{"data": [[1.63068084E12, 130.24382716049388], [1.6306809E12, 828.5331858407078]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306809E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1057.0, "minX": 1.63068084E12, "maxY": 34109.0, "series": [{"data": [[1.63068084E12, 17328.0], [1.6306809E12, 34109.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63068084E12, 15638.800000000001], [1.6306809E12, 31909.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63068084E12, 17159.829999999998], [1.6306809E12, 33401.61]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63068084E12, 16607.75], [1.6306809E12, 32508.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63068084E12, 1057.0], [1.6306809E12, 16985.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63068084E12, 9820.5], [1.6306809E12, 26062.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306809E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1264.0, "minX": 5.0, "maxY": 32689.0, "series": [{"data": [[32.0, 15697.5], [38.0, 4731.5], [41.0, 3589.0], [40.0, 11628.0], [43.0, 16544.0], [46.0, 11733.5], [49.0, 14776.5], [48.0, 12662.5], [53.0, 13648.0], [57.0, 32689.0], [68.0, 20699.0], [69.0, 30288.0], [72.0, 24033.0], [76.0, 26079.5], [5.0, 1264.0], [87.0, 22346.0], [85.0, 25153.0], [84.0, 29277.5], [90.0, 21372.5], [89.0, 28238.0], [97.0, 31060.0], [104.0, 26870.5], [108.0, 23159.5], [138.0, 31909.5], [25.0, 2751.0], [29.0, 6824.0], [31.0, 7821.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 138.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1249.0, "minX": 5.0, "maxY": 32684.0, "series": [{"data": [[32.0, 15689.5], [38.0, 4725.0], [41.0, 3577.0], [40.0, 11622.0], [43.0, 16531.5], [46.0, 11724.5], [49.0, 14763.0], [48.0, 12655.5], [53.0, 13642.0], [57.0, 32684.0], [68.0, 20695.5], [69.0, 30284.0], [72.0, 24028.0], [76.0, 26072.5], [5.0, 1249.0], [87.0, 22339.0], [85.0, 25150.0], [84.0, 29273.0], [90.0, 21362.5], [89.0, 28228.0], [97.0, 31050.0], [104.0, 26868.0], [108.0, 23153.0], [138.0, 31905.0], [25.0, 2738.0], [29.0, 6815.0], [31.0, 7815.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 138.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.4, "minX": 1.63068084E12, "maxY": 33.4, "series": [{"data": [[1.63068084E12, 33.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068084E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.8, "minX": 1.63068084E12, "maxY": 22.6, "series": [{"data": [[1.63068084E12, 10.8], [1.6306809E12, 22.6]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6306809E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.8, "minX": 1.63068084E12, "maxY": 22.6, "series": [{"data": [[1.63068084E12, 10.8], [1.6306809E12, 22.6]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306809E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.8, "minX": 1.63068084E12, "maxY": 22.6, "series": [{"data": [[1.63068084E12, 10.8], [1.6306809E12, 22.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6306809E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

