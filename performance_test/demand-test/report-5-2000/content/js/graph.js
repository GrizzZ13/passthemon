/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "maxY": 101872.0, "series": [{"data": [[0.0, 21.0], [0.1, 23.0], [0.2, 24.0], [0.3, 24.0], [0.4, 24.0], [0.5, 25.0], [0.6, 25.0], [0.7, 25.0], [0.8, 25.0], [0.9, 26.0], [1.0, 26.0], [1.1, 26.0], [1.2, 26.0], [1.3, 26.0], [1.4, 27.0], [1.5, 27.0], [1.6, 27.0], [1.7, 27.0], [1.8, 27.0], [1.9, 27.0], [2.0, 27.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 28.0], [2.9, 29.0], [3.0, 29.0], [3.1, 29.0], [3.2, 29.0], [3.3, 29.0], [3.4, 29.0], [3.5, 29.0], [3.6, 30.0], [3.7, 30.0], [3.8, 30.0], [3.9, 30.0], [4.0, 30.0], [4.1, 30.0], [4.2, 30.0], [4.3, 31.0], [4.4, 31.0], [4.5, 31.0], [4.6, 31.0], [4.7, 31.0], [4.8, 31.0], [4.9, 32.0], [5.0, 32.0], [5.1, 32.0], [5.2, 32.0], [5.3, 32.0], [5.4, 32.0], [5.5, 32.0], [5.6, 32.0], [5.7, 32.0], [5.8, 32.0], [5.9, 33.0], [6.0, 33.0], [6.1, 33.0], [6.2, 33.0], [6.3, 33.0], [6.4, 33.0], [6.5, 33.0], [6.6, 33.0], [6.7, 33.0], [6.8, 33.0], [6.9, 33.0], [7.0, 33.0], [7.1, 33.0], [7.2, 33.0], [7.3, 34.0], [7.4, 34.0], [7.5, 34.0], [7.6, 34.0], [7.7, 34.0], [7.8, 34.0], [7.9, 34.0], [8.0, 34.0], [8.1, 34.0], [8.2, 34.0], [8.3, 34.0], [8.4, 34.0], [8.5, 34.0], [8.6, 34.0], [8.7, 34.0], [8.8, 34.0], [8.9, 34.0], [9.0, 34.0], [9.1, 34.0], [9.2, 35.0], [9.3, 35.0], [9.4, 35.0], [9.5, 35.0], [9.6, 35.0], [9.7, 35.0], [9.8, 35.0], [9.9, 35.0], [10.0, 35.0], [10.1, 35.0], [10.2, 35.0], [10.3, 35.0], [10.4, 35.0], [10.5, 35.0], [10.6, 35.0], [10.7, 35.0], [10.8, 35.0], [10.9, 35.0], [11.0, 35.0], [11.1, 35.0], [11.2, 35.0], [11.3, 35.0], [11.4, 35.0], [11.5, 35.0], [11.6, 35.0], [11.7, 36.0], [11.8, 36.0], [11.9, 36.0], [12.0, 36.0], [12.1, 36.0], [12.2, 36.0], [12.3, 36.0], [12.4, 36.0], [12.5, 36.0], [12.6, 36.0], [12.7, 36.0], [12.8, 36.0], [12.9, 36.0], [13.0, 36.0], [13.1, 36.0], [13.2, 36.0], [13.3, 36.0], [13.4, 36.0], [13.5, 36.0], [13.6, 36.0], [13.7, 36.0], [13.8, 36.0], [13.9, 36.0], [14.0, 36.0], [14.1, 36.0], [14.2, 36.0], [14.3, 36.0], [14.4, 36.0], [14.5, 36.0], [14.6, 37.0], [14.7, 37.0], [14.8, 37.0], [14.9, 37.0], [15.0, 37.0], [15.1, 37.0], [15.2, 37.0], [15.3, 37.0], [15.4, 37.0], [15.5, 37.0], [15.6, 37.0], [15.7, 37.0], [15.8, 37.0], [15.9, 37.0], [16.0, 37.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 37.0], [16.5, 37.0], [16.6, 37.0], [16.7, 37.0], [16.8, 37.0], [16.9, 37.0], [17.0, 37.0], [17.1, 37.0], [17.2, 37.0], [17.3, 37.0], [17.4, 38.0], [17.5, 38.0], [17.6, 38.0], [17.7, 38.0], [17.8, 38.0], [17.9, 38.0], [18.0, 38.0], [18.1, 38.0], [18.2, 38.0], [18.3, 38.0], [18.4, 38.0], [18.5, 38.0], [18.6, 38.0], [18.7, 38.0], [18.8, 38.0], [18.9, 38.0], [19.0, 38.0], [19.1, 38.0], [19.2, 38.0], [19.3, 38.0], [19.4, 38.0], [19.5, 38.0], [19.6, 38.0], [19.7, 38.0], [19.8, 38.0], [19.9, 38.0], [20.0, 38.0], [20.1, 38.0], [20.2, 38.0], [20.3, 38.0], [20.4, 39.0], [20.5, 39.0], [20.6, 39.0], [20.7, 39.0], [20.8, 39.0], [20.9, 39.0], [21.0, 39.0], [21.1, 39.0], [21.2, 39.0], [21.3, 39.0], [21.4, 39.0], [21.5, 39.0], [21.6, 39.0], [21.7, 39.0], [21.8, 39.0], [21.9, 39.0], [22.0, 39.0], [22.1, 39.0], [22.2, 39.0], [22.3, 39.0], [22.4, 39.0], [22.5, 39.0], [22.6, 39.0], [22.7, 39.0], [22.8, 39.0], [22.9, 39.0], [23.0, 39.0], [23.1, 39.0], [23.2, 39.0], [23.3, 39.0], [23.4, 40.0], [23.5, 40.0], [23.6, 40.0], [23.7, 40.0], [23.8, 40.0], [23.9, 40.0], [24.0, 40.0], [24.1, 40.0], [24.2, 40.0], [24.3, 40.0], [24.4, 40.0], [24.5, 40.0], [24.6, 40.0], [24.7, 40.0], [24.8, 40.0], [24.9, 40.0], [25.0, 40.0], [25.1, 40.0], [25.2, 40.0], [25.3, 40.0], [25.4, 40.0], [25.5, 40.0], [25.6, 40.0], [25.7, 40.0], [25.8, 41.0], [25.9, 41.0], [26.0, 41.0], [26.1, 41.0], [26.2, 41.0], [26.3, 41.0], [26.4, 41.0], [26.5, 41.0], [26.6, 41.0], [26.7, 41.0], [26.8, 41.0], [26.9, 41.0], [27.0, 41.0], [27.1, 41.0], [27.2, 41.0], [27.3, 41.0], [27.4, 41.0], [27.5, 41.0], [27.6, 41.0], [27.7, 41.0], [27.8, 41.0], [27.9, 41.0], [28.0, 41.0], [28.1, 41.0], [28.2, 42.0], [28.3, 42.0], [28.4, 42.0], [28.5, 42.0], [28.6, 42.0], [28.7, 42.0], [28.8, 42.0], [28.9, 42.0], [29.0, 42.0], [29.1, 42.0], [29.2, 42.0], [29.3, 42.0], [29.4, 42.0], [29.5, 42.0], [29.6, 42.0], [29.7, 42.0], [29.8, 42.0], [29.9, 42.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 43.0], [30.4, 43.0], [30.5, 43.0], [30.6, 43.0], [30.7, 43.0], [30.8, 43.0], [30.9, 43.0], [31.0, 43.0], [31.1, 43.0], [31.2, 43.0], [31.3, 43.0], [31.4, 43.0], [31.5, 43.0], [31.6, 43.0], [31.7, 43.0], [31.8, 43.0], [31.9, 43.0], [32.0, 43.0], [32.1, 44.0], [32.2, 44.0], [32.3, 44.0], [32.4, 44.0], [32.5, 44.0], [32.6, 44.0], [32.7, 44.0], [32.8, 44.0], [32.9, 44.0], [33.0, 44.0], [33.1, 44.0], [33.2, 44.0], [33.3, 44.0], [33.4, 44.0], [33.5, 44.0], [33.6, 44.0], [33.7, 45.0], [33.8, 45.0], [33.9, 45.0], [34.0, 45.0], [34.1, 45.0], [34.2, 45.0], [34.3, 45.0], [34.4, 45.0], [34.5, 45.0], [34.6, 45.0], [34.7, 45.0], [34.8, 45.0], [34.9, 45.0], [35.0, 45.0], [35.1, 46.0], [35.2, 46.0], [35.3, 46.0], [35.4, 46.0], [35.5, 46.0], [35.6, 46.0], [35.7, 46.0], [35.8, 46.0], [35.9, 46.0], [36.0, 46.0], [36.1, 47.0], [36.2, 47.0], [36.3, 47.0], [36.4, 47.0], [36.5, 47.0], [36.6, 47.0], [36.7, 47.0], [36.8, 47.0], [36.9, 48.0], [37.0, 48.0], [37.1, 48.0], [37.2, 48.0], [37.3, 48.0], [37.4, 48.0], [37.5, 48.0], [37.6, 48.0], [37.7, 49.0], [37.8, 49.0], [37.9, 49.0], [38.0, 49.0], [38.1, 49.0], [38.2, 49.0], [38.3, 49.0], [38.4, 50.0], [38.5, 50.0], [38.6, 50.0], [38.7, 50.0], [38.8, 50.0], [38.9, 50.0], [39.0, 51.0], [39.1, 51.0], [39.2, 51.0], [39.3, 51.0], [39.4, 51.0], [39.5, 51.0], [39.6, 52.0], [39.7, 52.0], [39.8, 52.0], [39.9, 52.0], [40.0, 52.0], [40.1, 52.0], [40.2, 52.0], [40.3, 53.0], [40.4, 53.0], [40.5, 53.0], [40.6, 53.0], [40.7, 54.0], [40.8, 54.0], [40.9, 54.0], [41.0, 54.0], [41.1, 54.0], [41.2, 55.0], [41.3, 55.0], [41.4, 55.0], [41.5, 55.0], [41.6, 56.0], [41.7, 56.0], [41.8, 56.0], [41.9, 56.0], [42.0, 56.0], [42.1, 57.0], [42.2, 57.0], [42.3, 57.0], [42.4, 57.0], [42.5, 58.0], [42.6, 58.0], [42.7, 58.0], [42.8, 59.0], [42.9, 59.0], [43.0, 59.0], [43.1, 59.0], [43.2, 59.0], [43.3, 60.0], [43.4, 60.0], [43.5, 60.0], [43.6, 60.0], [43.7, 60.0], [43.8, 61.0], [43.9, 61.0], [44.0, 61.0], [44.1, 61.0], [44.2, 62.0], [44.3, 62.0], [44.4, 62.0], [44.5, 62.0], [44.6, 62.0], [44.7, 63.0], [44.8, 63.0], [44.9, 63.0], [45.0, 63.0], [45.1, 64.0], [45.2, 64.0], [45.3, 64.0], [45.4, 64.0], [45.5, 65.0], [45.6, 65.0], [45.7, 65.0], [45.8, 65.0], [45.9, 65.0], [46.0, 66.0], [46.1, 66.0], [46.2, 66.0], [46.3, 66.0], [46.4, 67.0], [46.5, 67.0], [46.6, 67.0], [46.7, 67.0], [46.8, 67.0], [46.9, 68.0], [47.0, 68.0], [47.1, 68.0], [47.2, 68.0], [47.3, 68.0], [47.4, 69.0], [47.5, 69.0], [47.6, 69.0], [47.7, 69.0], [47.8, 69.0], [47.9, 70.0], [48.0, 70.0], [48.1, 70.0], [48.2, 70.0], [48.3, 71.0], [48.4, 71.0], [48.5, 71.0], [48.6, 71.0], [48.7, 72.0], [48.8, 72.0], [48.9, 72.0], [49.0, 72.0], [49.1, 72.0], [49.2, 73.0], [49.3, 73.0], [49.4, 73.0], [49.5, 74.0], [49.6, 74.0], [49.7, 74.0], [49.8, 74.0], [49.9, 74.0], [50.0, 75.0], [50.1, 75.0], [50.2, 75.0], [50.3, 75.0], [50.4, 76.0], [50.5, 76.0], [50.6, 76.0], [50.7, 77.0], [50.8, 77.0], [50.9, 78.0], [51.0, 78.0], [51.1, 78.0], [51.2, 79.0], [51.3, 79.0], [51.4, 79.0], [51.5, 80.0], [51.6, 80.0], [51.7, 80.0], [51.8, 81.0], [51.9, 81.0], [52.0, 81.0], [52.1, 82.0], [52.2, 82.0], [52.3, 83.0], [52.4, 83.0], [52.5, 83.0], [52.6, 84.0], [52.7, 84.0], [52.8, 84.0], [52.9, 85.0], [53.0, 85.0], [53.1, 86.0], [53.2, 86.0], [53.3, 87.0], [53.4, 87.0], [53.5, 87.0], [53.6, 88.0], [53.7, 88.0], [53.8, 89.0], [53.9, 89.0], [54.0, 89.0], [54.1, 90.0], [54.2, 90.0], [54.3, 91.0], [54.4, 91.0], [54.5, 91.0], [54.6, 92.0], [54.7, 92.0], [54.8, 93.0], [54.9, 93.0], [55.0, 93.0], [55.1, 94.0], [55.2, 94.0], [55.3, 95.0], [55.4, 95.0], [55.5, 96.0], [55.6, 96.0], [55.7, 97.0], [55.8, 97.0], [55.9, 98.0], [56.0, 98.0], [56.1, 99.0], [56.2, 99.0], [56.3, 100.0], [56.4, 101.0], [56.5, 101.0], [56.6, 102.0], [56.7, 102.0], [56.8, 102.0], [56.9, 103.0], [57.0, 104.0], [57.1, 104.0], [57.2, 105.0], [57.3, 105.0], [57.4, 106.0], [57.5, 106.0], [57.6, 107.0], [57.7, 108.0], [57.8, 109.0], [57.9, 110.0], [58.0, 110.0], [58.1, 111.0], [58.2, 111.0], [58.3, 112.0], [58.4, 112.0], [58.5, 113.0], [58.6, 114.0], [58.7, 115.0], [58.8, 115.0], [58.9, 115.0], [59.0, 116.0], [59.1, 117.0], [59.2, 117.0], [59.3, 118.0], [59.4, 118.0], [59.5, 119.0], [59.6, 119.0], [59.7, 120.0], [59.8, 120.0], [59.9, 121.0], [60.0, 121.0], [60.1, 122.0], [60.2, 122.0], [60.3, 122.0], [60.4, 123.0], [60.5, 124.0], [60.6, 124.0], [60.7, 125.0], [60.8, 125.0], [60.9, 126.0], [61.0, 127.0], [61.1, 127.0], [61.2, 128.0], [61.3, 128.0], [61.4, 129.0], [61.5, 130.0], [61.6, 130.0], [61.7, 131.0], [61.8, 131.0], [61.9, 132.0], [62.0, 132.0], [62.1, 133.0], [62.2, 134.0], [62.3, 134.0], [62.4, 135.0], [62.5, 135.0], [62.6, 136.0], [62.7, 137.0], [62.8, 138.0], [62.9, 139.0], [63.0, 139.0], [63.1, 140.0], [63.2, 141.0], [63.3, 141.0], [63.4, 142.0], [63.5, 142.0], [63.6, 143.0], [63.7, 144.0], [63.8, 145.0], [63.9, 145.0], [64.0, 146.0], [64.1, 146.0], [64.2, 148.0], [64.3, 149.0], [64.4, 150.0], [64.5, 151.0], [64.6, 152.0], [64.7, 152.0], [64.8, 153.0], [64.9, 154.0], [65.0, 155.0], [65.1, 156.0], [65.2, 156.0], [65.3, 157.0], [65.4, 158.0], [65.5, 159.0], [65.6, 160.0], [65.7, 161.0], [65.8, 161.0], [65.9, 162.0], [66.0, 163.0], [66.1, 164.0], [66.2, 164.0], [66.3, 165.0], [66.4, 165.0], [66.5, 166.0], [66.6, 167.0], [66.7, 168.0], [66.8, 168.0], [66.9, 169.0], [67.0, 170.0], [67.1, 171.0], [67.2, 172.0], [67.3, 173.0], [67.4, 174.0], [67.5, 175.0], [67.6, 176.0], [67.7, 177.0], [67.8, 178.0], [67.9, 179.0], [68.0, 180.0], [68.1, 182.0], [68.2, 183.0], [68.3, 184.0], [68.4, 186.0], [68.5, 187.0], [68.6, 188.0], [68.7, 189.0], [68.8, 190.0], [68.9, 191.0], [69.0, 192.0], [69.1, 193.0], [69.2, 195.0], [69.3, 196.0], [69.4, 197.0], [69.5, 199.0], [69.6, 200.0], [69.7, 201.0], [69.8, 202.0], [69.9, 205.0], [70.0, 207.0], [70.1, 210.0], [70.2, 212.0], [70.3, 215.0], [70.4, 217.0], [70.5, 218.0], [70.6, 220.0], [70.7, 223.0], [70.8, 225.0], [70.9, 229.0], [71.0, 230.0], [71.1, 233.0], [71.2, 235.0], [71.3, 237.0], [71.4, 242.0], [71.5, 244.0], [71.6, 249.0], [71.7, 252.0], [71.8, 256.0], [71.9, 259.0], [72.0, 262.0], [72.1, 268.0], [72.2, 270.0], [72.3, 274.0], [72.4, 275.0], [72.5, 278.0], [72.6, 280.0], [72.7, 282.0], [72.8, 286.0], [72.9, 291.0], [73.0, 295.0], [73.1, 299.0], [73.2, 302.0], [73.3, 304.0], [73.4, 307.0], [73.5, 311.0], [73.6, 315.0], [73.7, 318.0], [73.8, 323.0], [73.9, 327.0], [74.0, 329.0], [74.1, 335.0], [74.2, 339.0], [74.3, 345.0], [74.4, 350.0], [74.5, 353.0], [74.6, 357.0], [74.7, 360.0], [74.8, 365.0], [74.9, 369.0], [75.0, 373.0], [75.1, 378.0], [75.2, 383.0], [75.3, 388.0], [75.4, 392.0], [75.5, 396.0], [75.6, 402.0], [75.7, 408.0], [75.8, 410.0], [75.9, 417.0], [76.0, 423.0], [76.1, 432.0], [76.2, 437.0], [76.3, 443.0], [76.4, 448.0], [76.5, 453.0], [76.6, 462.0], [76.7, 469.0], [76.8, 489.0], [76.9, 497.0], [77.0, 518.0], [77.1, 538.0], [77.2, 553.0], [77.3, 570.0], [77.4, 580.0], [77.5, 590.0], [77.6, 597.0], [77.7, 608.0], [77.8, 614.0], [77.9, 622.0], [78.0, 631.0], [78.1, 641.0], [78.2, 654.0], [78.3, 667.0], [78.4, 679.0], [78.5, 688.0], [78.6, 695.0], [78.7, 710.0], [78.8, 730.0], [78.9, 741.0], [79.0, 754.0], [79.1, 766.0], [79.2, 773.0], [79.3, 780.0], [79.4, 786.0], [79.5, 793.0], [79.6, 802.0], [79.7, 812.0], [79.8, 819.0], [79.9, 826.0], [80.0, 833.0], [80.1, 839.0], [80.2, 851.0], [80.3, 869.0], [80.4, 878.0], [80.5, 888.0], [80.6, 902.0], [80.7, 918.0], [80.8, 931.0], [80.9, 942.0], [81.0, 947.0], [81.1, 958.0], [81.2, 971.0], [81.3, 980.0], [81.4, 991.0], [81.5, 1017.0], [81.6, 1038.0], [81.7, 1048.0], [81.8, 1053.0], [81.9, 1057.0], [82.0, 1063.0], [82.1, 1066.0], [82.2, 1071.0], [82.3, 1078.0], [82.4, 1083.0], [82.5, 1104.0], [82.6, 1115.0], [82.7, 1125.0], [82.8, 1164.0], [82.9, 2080.0], [83.0, 2287.0], [83.1, 2958.0], [83.2, 4111.0], [83.3, 4584.0], [83.4, 5175.0], [83.5, 5600.0], [83.6, 6456.0], [83.7, 7022.0], [83.8, 7744.0], [83.9, 8417.0], [84.0, 9079.0], [84.1, 9608.0], [84.2, 10027.0], [84.3, 10537.0], [84.4, 11113.0], [84.5, 11852.0], [84.6, 12327.0], [84.7, 12839.0], [84.8, 13360.0], [84.9, 13611.0], [85.0, 13967.0], [85.1, 14499.0], [85.2, 14946.0], [85.3, 15322.0], [85.4, 15721.0], [85.5, 16351.0], [85.6, 16920.0], [85.7, 17344.0], [85.8, 18038.0], [85.9, 18477.0], [86.0, 18848.0], [86.1, 19327.0], [86.2, 19724.0], [86.3, 20009.0], [86.4, 20371.0], [86.5, 20701.0], [86.6, 21034.0], [86.7, 21038.0], [86.8, 21039.0], [86.9, 21041.0], [87.0, 21044.0], [87.1, 21048.0], [87.2, 21438.0], [87.3, 22200.0], [87.4, 22680.0], [87.5, 23394.0], [87.6, 23857.0], [87.7, 24110.0], [87.8, 24715.0], [87.9, 25114.0], [88.0, 25437.0], [88.1, 25926.0], [88.2, 26314.0], [88.3, 26921.0], [88.4, 27557.0], [88.5, 28267.0], [88.6, 28605.0], [88.7, 29083.0], [88.8, 29518.0], [88.9, 30017.0], [89.0, 30537.0], [89.1, 30861.0], [89.2, 31234.0], [89.3, 31718.0], [89.4, 32321.0], [89.5, 32797.0], [89.6, 33495.0], [89.7, 33860.0], [89.8, 34457.0], [89.9, 34821.0], [90.0, 35320.0], [90.1, 35697.0], [90.2, 36070.0], [90.3, 36508.0], [90.4, 36980.0], [90.5, 37389.0], [90.6, 38023.0], [90.7, 38855.0], [90.8, 39315.0], [90.9, 39598.0], [91.0, 40120.0], [91.1, 40448.0], [91.2, 41019.0], [91.3, 41316.0], [91.4, 41613.0], [91.5, 42110.0], [91.6, 42771.0], [91.7, 43255.0], [91.8, 43778.0], [91.9, 44367.0], [92.0, 44886.0], [92.1, 45417.0], [92.2, 45639.0], [92.3, 46238.0], [92.4, 46575.0], [92.5, 47037.0], [92.6, 47453.0], [92.7, 47919.0], [92.8, 48538.0], [92.9, 49227.0], [93.0, 49738.0], [93.1, 50145.0], [93.2, 50670.0], [93.3, 50954.0], [93.4, 51374.0], [93.5, 51657.0], [93.6, 52135.0], [93.7, 52425.0], [93.8, 52977.0], [93.9, 53557.0], [94.0, 54204.0], [94.1, 54732.0], [94.2, 55288.0], [94.3, 55716.0], [94.4, 55952.0], [94.5, 56497.0], [94.6, 56732.0], [94.7, 56989.0], [94.8, 57387.0], [94.9, 57715.0], [95.0, 58225.0], [95.1, 58736.0], [95.2, 59556.0], [95.3, 60097.0], [95.4, 60577.0], [95.5, 65133.0], [95.6, 65234.0], [95.7, 65289.0], [95.8, 65396.0], [95.9, 66349.0], [96.0, 70265.0], [96.1, 70510.0], [96.2, 70543.0], [96.3, 70573.0], [96.4, 70613.0], [96.5, 75436.0], [96.6, 75650.0], [96.7, 75718.0], [96.8, 75777.0], [96.9, 75838.0], [97.0, 76301.0], [97.1, 80840.0], [97.2, 81001.0], [97.3, 81131.0], [97.4, 81296.0], [97.5, 81635.0], [97.6, 86095.0], [97.7, 86281.0], [97.8, 86386.0], [97.9, 86547.0], [98.0, 86755.0], [98.1, 90053.0], [98.2, 90096.0], [98.3, 91602.0], [98.4, 91783.0], [98.5, 91916.0], [98.6, 92056.0], [98.7, 92697.0], [98.8, 96686.0], [98.9, 96994.0], [99.0, 97148.0], [99.1, 97255.0], [99.2, 97454.0], [99.3, 100608.0], [99.4, 100713.0], [99.5, 100774.0], [99.6, 100810.0], [99.7, 100864.0], [99.8, 101711.0], [99.9, 101740.0], [100.0, 101872.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6748.0, "series": [{"data": [[0.0, 6748.0], [66700.0, 2.0], [76300.0, 2.0], [81100.0, 7.0], [85900.0, 2.0], [92300.0, 2.0], [97100.0, 7.0], [100.0, 1602.0], [32900.0, 1.0], [33700.0, 4.0], [34500.0, 3.0], [35300.0, 4.0], [36100.0, 3.0], [36900.0, 4.0], [37700.0, 2.0], [38500.0, 1.0], [39300.0, 5.0], [40100.0, 5.0], [40900.0, 3.0], [41700.0, 2.0], [42500.0, 2.0], [43300.0, 2.0], [44900.0, 1.0], [44100.0, 2.0], [45700.0, 3.0], [46500.0, 4.0], [47300.0, 4.0], [48900.0, 3.0], [49700.0, 4.0], [50500.0, 3.0], [51300.0, 2.0], [52100.0, 3.0], [52900.0, 3.0], [200.0, 428.0], [53700.0, 1.0], [54500.0, 4.0], [55300.0, 1.0], [56100.0, 3.0], [56900.0, 5.0], [57700.0, 2.0], [58500.0, 3.0], [59300.0, 2.0], [60100.0, 2.0], [60900.0, 1.0], [70600.0, 10.0], [75400.0, 2.0], [300.0, 290.0], [81800.0, 1.0], [86600.0, 3.0], [91400.0, 4.0], [97800.0, 4.0], [101000.0, 5.0], [400.0, 162.0], [500.0, 86.0], [600.0, 118.0], [700.0, 114.0], [800.0, 121.0], [900.0, 102.0], [1000.0, 126.0], [1100.0, 40.0], [1300.0, 5.0], [1400.0, 1.0], [1500.0, 1.0], [1900.0, 1.0], [2000.0, 5.0], [2100.0, 6.0], [2200.0, 5.0], [2300.0, 1.0], [2400.0, 2.0], [2500.0, 4.0], [2600.0, 1.0], [2800.0, 2.0], [2900.0, 1.0], [3200.0, 1.0], [3300.0, 1.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 2.0], [3700.0, 1.0], [3800.0, 2.0], [4100.0, 2.0], [4300.0, 1.0], [4200.0, 1.0], [4400.0, 6.0], [4500.0, 3.0], [4600.0, 1.0], [4700.0, 2.0], [4800.0, 1.0], [76100.0, 1.0], [4900.0, 4.0], [5000.0, 2.0], [5100.0, 3.0], [80900.0, 4.0], [5200.0, 3.0], [5300.0, 4.0], [5400.0, 2.0], [5600.0, 3.0], [5500.0, 1.0], [87300.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [92100.0, 3.0], [5900.0, 2.0], [6000.0, 1.0], [6100.0, 2.0], [96900.0, 6.0], [6300.0, 1.0], [101700.0, 16.0], [6400.0, 3.0], [6500.0, 1.0], [6600.0, 4.0], [6700.0, 2.0], [6800.0, 1.0], [6900.0, 2.0], [7100.0, 2.0], [7000.0, 1.0], [7200.0, 3.0], [7400.0, 2.0], [7500.0, 1.0], [7600.0, 2.0], [7700.0, 3.0], [7900.0, 2.0], [8000.0, 2.0], [8200.0, 3.0], [8400.0, 6.0], [8600.0, 2.0], [9000.0, 2.0], [9400.0, 1.0], [9600.0, 6.0], [9800.0, 3.0], [10000.0, 7.0], [10200.0, 1.0], [10400.0, 1.0], [10600.0, 2.0], [10800.0, 2.0], [11000.0, 4.0], [11200.0, 2.0], [11400.0, 1.0], [11600.0, 4.0], [11800.0, 5.0], [12000.0, 1.0], [12200.0, 1.0], [12400.0, 2.0], [12600.0, 2.0], [12800.0, 3.0], [13200.0, 2.0], [13400.0, 3.0], [13600.0, 5.0], [13800.0, 3.0], [14000.0, 2.0], [14200.0, 2.0], [14400.0, 6.0], [14600.0, 3.0], [14800.0, 2.0], [15000.0, 3.0], [15200.0, 1.0], [15400.0, 4.0], [15600.0, 3.0], [15800.0, 2.0], [16200.0, 1.0], [17200.0, 3.0], [16400.0, 3.0], [16800.0, 3.0], [17600.0, 2.0], [18000.0, 4.0], [18400.0, 4.0], [18800.0, 4.0], [19200.0, 3.0], [19600.0, 4.0], [20400.0, 2.0], [20000.0, 2.0], [20800.0, 3.0], [21200.0, 1.0], [21600.0, 3.0], [22400.0, 2.0], [22000.0, 1.0], [22800.0, 1.0], [23200.0, 2.0], [23600.0, 7.0], [24000.0, 7.0], [24400.0, 3.0], [24800.0, 1.0], [25200.0, 4.0], [25600.0, 3.0], [26000.0, 2.0], [26400.0, 5.0], [26800.0, 3.0], [27200.0, 1.0], [27600.0, 1.0], [28000.0, 3.0], [28400.0, 2.0], [28800.0, 1.0], [29200.0, 2.0], [29600.0, 2.0], [30000.0, 3.0], [30800.0, 3.0], [31200.0, 8.0], [32000.0, 3.0], [32400.0, 4.0], [32800.0, 3.0], [33600.0, 2.0], [34400.0, 1.0], [35200.0, 2.0], [36000.0, 7.0], [36800.0, 3.0], [37600.0, 1.0], [38400.0, 1.0], [39200.0, 4.0], [40000.0, 1.0], [40800.0, 2.0], [41600.0, 2.0], [42400.0, 1.0], [43200.0, 5.0], [44000.0, 2.0], [44800.0, 6.0], [45600.0, 3.0], [46400.0, 3.0], [48000.0, 2.0], [49600.0, 2.0], [50400.0, 3.0], [51200.0, 2.0], [52000.0, 5.0], [52800.0, 2.0], [53600.0, 2.0], [54400.0, 1.0], [55200.0, 3.0], [56000.0, 1.0], [56800.0, 5.0], [57600.0, 4.0], [59200.0, 2.0], [58400.0, 2.0], [60000.0, 3.0], [60800.0, 1.0], [70400.0, 3.0], [81600.0, 3.0], [86400.0, 5.0], [91200.0, 1.0], [92800.0, 1.0], [97600.0, 2.0], [100800.0, 18.0], [70300.0, 3.0], [81500.0, 3.0], [86300.0, 12.0], [92700.0, 2.0], [100700.0, 23.0], [33900.0, 1.0], [33100.0, 1.0], [34700.0, 5.0], [35500.0, 5.0], [36300.0, 4.0], [37100.0, 1.0], [37900.0, 4.0], [38700.0, 1.0], [39500.0, 4.0], [40300.0, 5.0], [41100.0, 2.0], [41900.0, 3.0], [42700.0, 1.0], [43500.0, 2.0], [44300.0, 3.0], [45100.0, 1.0], [46700.0, 3.0], [47500.0, 3.0], [48300.0, 3.0], [49100.0, 2.0], [49900.0, 3.0], [50700.0, 3.0], [51500.0, 6.0], [52300.0, 4.0], [53100.0, 1.0], [53900.0, 1.0], [54700.0, 2.0], [55500.0, 1.0], [57100.0, 3.0], [57900.0, 1.0], [58700.0, 2.0], [59500.0, 2.0], [60300.0, 4.0], [65100.0, 9.0], [66200.0, 4.0], [75800.0, 14.0], [82200.0, 1.0], [87000.0, 2.0], [91800.0, 10.0], [96600.0, 3.0], [81300.0, 3.0], [86100.0, 3.0], [92500.0, 1.0], [97300.0, 4.0], [100500.0, 2.0], [16500.0, 2.0], [16900.0, 4.0], [17300.0, 2.0], [17700.0, 4.0], [18100.0, 1.0], [18500.0, 2.0], [19300.0, 3.0], [18900.0, 1.0], [19700.0, 3.0], [20100.0, 3.0], [20500.0, 5.0], [20900.0, 2.0], [21300.0, 3.0], [22100.0, 3.0], [22500.0, 1.0], [22900.0, 3.0], [23300.0, 1.0], [23700.0, 2.0], [24100.0, 3.0], [24900.0, 5.0], [25300.0, 5.0], [25700.0, 2.0], [26100.0, 7.0], [26500.0, 3.0], [26900.0, 4.0], [27300.0, 1.0], [27700.0, 1.0], [28100.0, 1.0], [28500.0, 3.0], [28900.0, 1.0], [29700.0, 1.0], [30500.0, 7.0], [30100.0, 1.0], [30900.0, 1.0], [31300.0, 2.0], [31700.0, 2.0], [32500.0, 4.0], [32100.0, 1.0], [33000.0, 1.0], [33800.0, 2.0], [34600.0, 3.0], [35400.0, 3.0], [36200.0, 2.0], [37000.0, 3.0], [37800.0, 2.0], [38600.0, 1.0], [39400.0, 5.0], [40200.0, 3.0], [41000.0, 6.0], [41800.0, 2.0], [42600.0, 4.0], [43400.0, 2.0], [45000.0, 4.0], [44200.0, 1.0], [45800.0, 3.0], [46600.0, 5.0], [47400.0, 4.0], [48200.0, 3.0], [49800.0, 1.0], [50600.0, 4.0], [51400.0, 4.0], [52200.0, 3.0], [53000.0, 3.0], [53800.0, 2.0], [54600.0, 4.0], [55400.0, 3.0], [56200.0, 1.0], [57800.0, 3.0], [60200.0, 1.0], [59400.0, 1.0], [65000.0, 5.0], [75600.0, 14.0], [86800.0, 2.0], [90000.0, 17.0], [91600.0, 4.0], [96400.0, 1.0], [98000.0, 2.0], [70700.0, 5.0], [75500.0, 4.0], [81900.0, 1.0], [86700.0, 4.0], [91500.0, 4.0], [33300.0, 2.0], [34100.0, 2.0], [34900.0, 2.0], [35700.0, 2.0], [36500.0, 3.0], [37300.0, 4.0], [38100.0, 1.0], [40500.0, 2.0], [41300.0, 5.0], [42100.0, 3.0], [42900.0, 2.0], [43700.0, 6.0], [44500.0, 1.0], [45300.0, 2.0], [46100.0, 2.0], [46900.0, 2.0], [48500.0, 2.0], [49300.0, 4.0], [50100.0, 3.0], [50900.0, 4.0], [51700.0, 1.0], [53300.0, 2.0], [54100.0, 3.0], [54900.0, 2.0], [55700.0, 4.0], [56500.0, 3.0], [57300.0, 7.0], [58100.0, 2.0], [58900.0, 2.0], [60500.0, 4.0], [59700.0, 2.0], [65300.0, 11.0], [81000.0, 8.0], [85800.0, 1.0], [92200.0, 3.0], [97000.0, 9.0], [101800.0, 9.0], [70500.0, 33.0], [81700.0, 1.0], [86500.0, 11.0], [91300.0, 1.0], [92900.0, 1.0], [100900.0, 3.0], [8300.0, 2.0], [8500.0, 1.0], [8700.0, 3.0], [8900.0, 1.0], [9100.0, 7.0], [9300.0, 1.0], [9500.0, 1.0], [9700.0, 2.0], [9900.0, 1.0], [10100.0, 2.0], [10300.0, 1.0], [10500.0, 1.0], [10700.0, 3.0], [11100.0, 1.0], [11500.0, 2.0], [11700.0, 1.0], [11900.0, 3.0], [12100.0, 2.0], [12300.0, 2.0], [12500.0, 4.0], [12700.0, 3.0], [12900.0, 2.0], [13100.0, 4.0], [13300.0, 5.0], [13500.0, 5.0], [13700.0, 2.0], [13900.0, 3.0], [14100.0, 1.0], [14300.0, 1.0], [14500.0, 1.0], [14700.0, 3.0], [14900.0, 5.0], [15100.0, 4.0], [15300.0, 3.0], [15500.0, 2.0], [15700.0, 2.0], [15900.0, 6.0], [16300.0, 2.0], [16100.0, 1.0], [16600.0, 1.0], [17400.0, 3.0], [17000.0, 1.0], [18200.0, 4.0], [18600.0, 3.0], [19400.0, 2.0], [19800.0, 4.0], [20200.0, 2.0], [20600.0, 3.0], [21400.0, 4.0], [21000.0, 71.0], [22200.0, 3.0], [22600.0, 2.0], [23000.0, 2.0], [23800.0, 2.0], [24200.0, 3.0], [24600.0, 1.0], [25000.0, 4.0], [25400.0, 2.0], [25800.0, 4.0], [26200.0, 1.0], [27000.0, 1.0], [27400.0, 1.0], [28200.0, 1.0], [28600.0, 4.0], [29000.0, 5.0], [29400.0, 4.0], [29800.0, 2.0], [30200.0, 2.0], [30600.0, 2.0], [31000.0, 4.0], [31400.0, 2.0], [32200.0, 2.0], [31800.0, 1.0], [32600.0, 2.0], [33200.0, 3.0], [34000.0, 1.0], [34800.0, 4.0], [35600.0, 1.0], [36400.0, 1.0], [37200.0, 2.0], [38000.0, 1.0], [38800.0, 2.0], [39600.0, 3.0], [40400.0, 1.0], [41200.0, 3.0], [42000.0, 2.0], [42800.0, 3.0], [44400.0, 3.0], [45200.0, 2.0], [46000.0, 1.0], [46800.0, 1.0], [47600.0, 2.0], [48400.0, 1.0], [49200.0, 2.0], [50000.0, 4.0], [50800.0, 6.0], [51600.0, 3.0], [52400.0, 6.0], [53200.0, 2.0], [54000.0, 1.0], [54800.0, 3.0], [55600.0, 5.0], [56400.0, 4.0], [57200.0, 4.0], [58000.0, 4.0], [58800.0, 1.0], [59600.0, 2.0], [60400.0, 2.0], [65200.0, 18.0], [66400.0, 2.0], [76000.0, 2.0], [80800.0, 13.0], [87200.0, 1.0], [92000.0, 9.0], [96800.0, 3.0], [66300.0, 7.0], [75900.0, 1.0], [80700.0, 4.0], [87100.0, 1.0], [91900.0, 6.0], [96700.0, 3.0], [33500.0, 4.0], [34300.0, 2.0], [35900.0, 2.0], [36700.0, 1.0], [37500.0, 2.0], [38300.0, 3.0], [39100.0, 3.0], [39900.0, 2.0], [40700.0, 2.0], [41500.0, 4.0], [42300.0, 2.0], [43100.0, 2.0], [43900.0, 3.0], [44700.0, 2.0], [45500.0, 6.0], [46300.0, 2.0], [47100.0, 4.0], [47900.0, 4.0], [49500.0, 1.0], [50300.0, 1.0], [51100.0, 3.0], [51900.0, 1.0], [52700.0, 2.0], [53500.0, 4.0], [55100.0, 4.0], [55900.0, 7.0], [56700.0, 4.0], [57500.0, 3.0], [58300.0, 5.0], [59100.0, 2.0], [59900.0, 2.0], [65500.0, 1.0], [70200.0, 7.0], [81400.0, 4.0], [86200.0, 11.0], [92600.0, 1.0], [97400.0, 4.0], [100600.0, 11.0], [66100.0, 1.0], [70900.0, 2.0], [75700.0, 22.0], [91700.0, 10.0], [94900.0, 1.0], [96500.0, 3.0], [16700.0, 2.0], [17100.0, 3.0], [17900.0, 1.0], [18300.0, 2.0], [18700.0, 4.0], [19100.0, 4.0], [19500.0, 4.0], [19900.0, 5.0], [20300.0, 7.0], [20700.0, 1.0], [21100.0, 2.0], [21500.0, 2.0], [22300.0, 5.0], [23100.0, 2.0], [22700.0, 1.0], [23500.0, 1.0], [23900.0, 4.0], [24300.0, 2.0], [24700.0, 1.0], [25100.0, 4.0], [25500.0, 1.0], [26300.0, 1.0], [25900.0, 2.0], [27100.0, 3.0], [27500.0, 3.0], [28300.0, 6.0], [27900.0, 4.0], [29100.0, 5.0], [28700.0, 2.0], [29500.0, 2.0], [29900.0, 5.0], [30300.0, 4.0], [30700.0, 3.0], [31100.0, 4.0], [31500.0, 1.0], [31900.0, 3.0], [32300.0, 3.0], [32700.0, 1.0], [33400.0, 1.0], [34200.0, 5.0], [35000.0, 4.0], [35800.0, 2.0], [36600.0, 4.0], [38200.0, 2.0], [39000.0, 3.0], [39800.0, 4.0], [40600.0, 1.0], [41400.0, 5.0], [42200.0, 1.0], [43000.0, 1.0], [44600.0, 1.0], [45400.0, 5.0], [46200.0, 5.0], [47000.0, 1.0], [47800.0, 4.0], [48600.0, 5.0], [49400.0, 3.0], [51000.0, 3.0], [50200.0, 1.0], [51800.0, 3.0], [52600.0, 2.0], [53400.0, 1.0], [54200.0, 2.0], [55000.0, 1.0], [55800.0, 5.0], [56600.0, 7.0], [57400.0, 2.0], [58200.0, 2.0], [59800.0, 2.0], [60600.0, 2.0], [65400.0, 3.0], [76400.0, 1.0], [81200.0, 10.0], [86000.0, 4.0], [97200.0, 12.0], [100400.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 101800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 92.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9230.0, "series": [{"data": [[0.0, 9230.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 713.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1965.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 92.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 39.85099999999999, "minX": 1.63137696E12, "maxY": 1341.4064665127003, "series": [{"data": [[1.63137708E12, 57.37899999999996]], "isOverall": false, "label": "addDemand", "isController": false}, {"data": [[1.63137708E12, 40.40845070422535], [1.63137702E12, 688.9999999999987]], "isOverall": false, "label": "getDemandByIde", "isController": false}, {"data": [[1.63137708E12, 153.018]], "isOverall": false, "label": "editDemand", "isController": false}, {"data": [[1.63137702E12, 82.07149999999983]], "isOverall": false, "label": "listOnesDemandsByPage", "isController": false}, {"data": [[1.63137708E12, 39.85099999999999]], "isOverall": false, "label": "removeDemand", "isController": false}, {"data": [[1.63137702E12, 351.28815977175486], [1.63137696E12, 1341.4064665127003]], "isOverall": false, "label": "listAllDemandsByPage", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137708E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 41.5, "minX": 1.0, "maxY": 87162.0, "series": [{"data": [[2.0, 20715.2], [3.0, 26143.750000000004], [4.0, 51587.0], [5.0, 41.5], [6.0, 32306.285714285717], [7.0, 30987.5], [8.0, 25579.66666666667], [9.0, 34034.33333333333], [10.0, 450.2], [11.0, 168.0], [12.0, 24785.8], [13.0, 423.0], [14.0, 51144.50000000001], [15.0, 25011.2], [16.0, 50918.50000000001], [17.0, 15518.625000000004], [18.0, 13814.222222222223], [19.0, 4310.266666666667], [20.0, 7408.214285714286], [21.0, 3873.4814814814836], [22.0, 12937.1875], [23.0, 4780.909090909091], [24.0, 12786.85714285714], [25.0, 4629.703703703705], [26.0, 3097.300000000002], [27.0, 5561.311111111112], [28.0, 83.54838709677419], [29.0, 2453.3176470588255], [30.0, 64.80263157894736], [31.0, 2544.646341463415], [33.0, 1031.6666666666665], [32.0, 2015.7837837837833], [35.0, 1235.541176470588], [34.0, 925.9059829059827], [36.0, 687.8653846153843], [37.0, 43.751351351351374], [39.0, 535.3073170731709], [38.0, 1170.1333333333332], [41.0, 477.98723404255355], [40.0, 431.6124031007749], [43.0, 397.64137931034435], [42.0, 676.020547945207], [45.0, 752.8153846153849], [44.0, 538.9919028340082], [47.0, 1366.4497041420138], [46.0, 137.75308641975315], [49.0, 687.7484276729557], [48.0, 759.4360465116281], [51.0, 1035.6504854368923], [50.0, 1195.1818181818182], [52.0, 2339.923076923077], [53.0, 52.78313253012048], [55.0, 1205.4090909090908], [54.0, 1957.6698113207558], [57.0, 1919.0185185185187], [56.0, 1713.4838709677422], [59.0, 1486.3380281690138], [58.0, 2716.2105263157905], [60.0, 1697.7580645161272], [61.0, 1316.2058823529412], [63.0, 4645.555555555555], [62.0, 4106.699999999999], [67.0, 8372.740740740737], [65.0, 3056.073170731707], [64.0, 5212.583333333334], [66.0, 659.6], [71.0, 6609.736842105265], [70.0, 9508.615384615387], [69.0, 4121.000000000001], [68.0, 4959.52], [75.0, 4163.4800000000005], [74.0, 7094.448275862066], [72.0, 4765.954545454545], [73.0, 256.4375], [79.0, 2898.527777777777], [78.0, 5454.05263157895], [77.0, 5589.729729729731], [76.0, 210.25000000000003], [83.0, 11976.64705882353], [82.0, 2873.3333333333317], [80.0, 3178.3939393939404], [81.0, 169.66666666666669], [86.0, 16961.22222222222], [84.0, 147.2820512820513], [87.0, 132.53846153846152], [85.0, 142.3333333333333], [91.0, 3636.750000000001], [90.0, 8310.416666666666], [89.0, 7139.285714285716], [88.0, 15600.307692307697], [95.0, 2783.6944444444443], [94.0, 14132.214285714286], [92.0, 3226.0645161290327], [93.0, 105.10526315789475], [99.0, 2326.59090909091], [98.0, 4189.541666666667], [97.0, 2793.8611111111118], [96.0, 4405.260869565217], [103.0, 3725.888888888889], [102.0, 3701.3333333333344], [101.0, 2708.4594594594596], [100.0, 2386.116279069768], [107.0, 10568.25], [104.0, 4783.142857142858], [106.0, 129.046875], [105.0, 114.71428571428571], [111.0, 4780.047619047617], [110.0, 5279.894736842104], [109.0, 3711.4444444444453], [108.0, 3567.678571428573], [115.0, 7233.4285714285725], [114.0, 11608.411764705881], [112.0, 5493.666666666667], [113.0, 133.5263157894737], [119.0, 3732.0000000000014], [118.0, 8587.173913043476], [117.0, 3648.428571428571], [116.0, 134.41379310344826], [123.0, 4177.708333333332], [122.0, 2344.9777777777776], [121.0, 2704.1578947368425], [120.0, 2926.3428571428567], [126.0, 9820.8], [125.0, 4497.136363636365], [124.0, 3521.1379310344832], [127.0, 145.0], [135.0, 7567.692307692307], [134.0, 10299.947368421053], [132.0, 6124.187499999999], [131.0, 5194.473684210525], [130.0, 6165.500000000001], [129.0, 7565.846153846154], [128.0, 10303.842105263158], [133.0, 81.55555555555556], [143.0, 10820.22222222222], [142.0, 5193.0], [141.0, 24277.75], [140.0, 10849.222222222223], [139.0, 7021.928571428572], [138.0, 12208.875], [137.0, 4511.727272727274], [136.0, 9779.1], [151.0, 13857.0], [150.0, 13877.42857142857], [149.0, 13892.428571428572], [148.0, 6518.266666666667], [147.0, 8142.916666666666], [146.0, 6529.2666666666655], [145.0, 10808.111111111111], [144.0, 19424.6], [159.0, 3412.1785714285725], [158.0, 10369.555555555557], [157.0, 15553.5], [156.0, 5889.5625], [155.0, 18630.4], [153.0, 4808.799999999999], [152.0, 11940.375], [154.0, 140.0], [167.0, 5556.2941176470595], [166.0, 7830.749999999999], [165.0, 4682.75], [164.0, 15444.0], [163.0, 11674.625], [162.0, 20586.222222222223], [160.0, 5525.470588235294], [161.0, 104.47999999999999], [175.0, 4523.190476190473], [174.0, 7776.499999999998], [173.0, 7750.000000000001], [172.0, 18483.6], [171.0, 9301.8], [170.0, 7768.666666666668], [169.0, 7187.461538461536], [168.0, 11583.875], [183.0, 5237.2222222222235], [182.0, 4507.714285714285], [181.0, 3004.937499999999], [180.0, 4115.652173913043], [179.0, 5897.500000000001], [178.0, 9358.2], [177.0, 5209.833333333335], [176.0, 4746.550000000002], [191.0, 6231.7333333333345], [190.0, 6693.285714285715], [189.0, 10291.000000000002], [188.0, 7807.833333333334], [187.0, 8452.545454545452], [186.0, 5244.833333333334], [185.0, 6688.357142857142], [184.0, 4075.000000000001], [198.0, 5231.666666666666], [197.0, 4103.782608695652], [196.0, 2690.3611111111113], [195.0, 7826.25], [194.0, 5543.764705882354], [193.0, 5234.444444444444], [192.0, 6709.785714285715], [199.0, 151.20000000000002], [207.0, 5834.374999999999], [206.0, 3562.6666666666656], [205.0, 2632.432432432434], [204.0, 4724.750000000001], [203.0, 3432.3571428571413], [202.0, 3238.433333333335], [201.0, 4476.428571428571], [200.0, 10303.777777777777], [215.0, 9251.900000000001], [214.0, 3414.6428571428573], [213.0, 6235.866666666666], [212.0, 7781.25], [211.0, 3809.520000000002], [210.0, 5200.88888888889], [209.0, 8852.428571428572], [208.0, 161.67499999999998], [223.0, 15121.833333333332], [222.0, 6154.9333333333325], [221.0, 8321.636363636364], [220.0, 10105.111111111111], [219.0, 7075.153846153847], [218.0, 5466.64705882353], [217.0, 7675.833333333334], [216.0, 7683.916666666668], [231.0, 9188.499999999998], [230.0, 5437.588235294118], [229.0, 13065.142857142855], [228.0, 5421.411764705881], [227.0, 10180.777777777777], [226.0, 4240.045454545454], [225.0, 6131.400000000001], [224.0, 4893.947368421054], [239.0, 34766.6], [237.0, 87162.0], [236.0, 58224.0], [235.0, 43729.0], [233.0, 7409.25], [232.0, 22800.25], [238.0, 129.0], [234.0, 238.0], [247.0, 12491.142857142857], [246.0, 10975.5], [245.0, 21716.5], [244.0, 28904.333333333336], [243.0, 29009.333333333336], [242.0, 10955.750000000002], [241.0, 5200.294117647059], [240.0, 17483.6], [255.0, 43306.0], [254.0, 28891.166666666668], [252.0, 86562.0], [251.0, 21845.25], [250.0, 43369.5], [249.0, 11041.375], [248.0, 8842.999999999998], [253.0, 402.0], [270.0, 43254.75], [271.0, 17305.0], [268.0, 43468.0], [269.0, 129.16666666666666], [259.0, 4116.818181818183], [258.0, 10981.625], [257.0, 43342.0], [256.0, 14696.666666666668], [267.0, 14616.0], [266.0, 21831.0], [265.0, 17541.8], [264.0, 11026.874999999998], [263.0, 28789.333333333336], [262.0, 5901.333333333333], [261.0, 7998.454545454546], [260.0, 3462.6923076923076], [285.0, 86095.0], [287.0, 34578.0], [284.0, 43089.5], [275.0, 28899.0], [274.0, 21659.25], [273.0, 28930.333333333336], [272.0, 28903.666666666664], [283.0, 43220.0], [282.0, 28830.0], [281.0, 28819.0], [280.0, 28827.666666666664], [279.0, 17341.8], [278.0, 9718.333333333336], [277.0, 21762.25], [276.0, 28885.666666666664], [302.0, 81499.0], [303.0, 81789.0], [301.0, 81564.0], [300.0, 81616.0], [299.0, 81828.0], [298.0, 16625.8], [297.0, 81935.0], [296.0, 41325.0], [295.0, 57467.33333333333], [294.0, 397.6666666666667], [289.0, 86281.0], [288.0, 17427.6], [291.0, 28831.666666666664], [290.0, 9778.222222222223], [293.0, 17564.8], [292.0, 43016.5], [318.0, 81215.0], [319.0, 40758.5], [317.0, 40735.0], [316.0, 40725.0], [315.0, 54288.0], [314.0, 395.0], [313.0, 11889.0], [312.0, 27186.0], [311.0, 27447.666666666664], [304.0, 20582.75], [305.0, 334.6666666666667], [307.0, 20482.0], [306.0, 41023.25], [310.0, 20526.5], [309.0, 13796.333333333332], [308.0, 40625.5], [334.0, 40598.0], [335.0, 40543.5], [333.0, 11634.714285714284], [332.0, 40512.5], [331.0, 40594.0], [330.0, 81131.0], [329.0, 81001.0], [328.0, 81115.0], [327.0, 81384.0], [321.0, 20516.25], [320.0, 27231.666666666664], [323.0, 81223.0], [322.0, 40544.5], [326.0, 81220.0], [325.0, 81331.5], [350.0, 80838.0], [351.0, 80796.0], [349.0, 80872.5], [339.0, 40454.0], [338.0, 81094.0], [337.0, 20286.25], [336.0, 40476.0], [347.0, 80800.0], [346.0, 80869.0], [345.0, 81204.0], [344.0, 80893.0], [343.0, 80903.0], [341.0, 16215.0], [340.0, 40672.0], [366.0, 75871.0], [367.0, 75873.0], [365.0, 75865.0], [364.0, 76084.0], [363.0, 76183.0], [362.0, 76049.0], [361.0, 76301.0], [360.0, 76320.0], [359.0, 76402.0], [352.0, 80799.0], [354.0, 80889.0], [353.0, 80891.0], [358.0, 80710.5], [356.0, 80868.5], [382.0, 75762.0], [383.0, 75697.0], [381.0, 75711.5], [371.0, 75888.0], [370.0, 75873.0], [369.0, 75759.0], [368.0, 75944.0], [379.0, 75838.0], [378.0, 75832.0], [377.0, 75734.0], [376.0, 75834.0], [375.0, 75723.0], [374.0, 75870.0], [373.0, 75854.0], [372.0, 75761.0], [398.0, 75777.0], [399.0, 75806.0], [397.0, 75795.0], [396.0, 75738.0], [395.0, 75714.5], [394.0, 63.0], [393.0, 37925.5], [392.0, 75795.5], [390.0, 75717.5], [386.0, 75829.0], [387.0, 58.666666666666664], [385.0, 37878.0], [384.0, 25316.333333333336], [388.0, 75721.0], [414.0, 75652.0], [413.0, 75602.5], [412.0, 60.55555555555555], [402.0, 75645.0], [400.0, 75700.0], [411.0, 18944.75], [410.0, 37876.0], [409.0, 75633.0], [408.0, 75715.5], [406.0, 75714.0], [405.0, 75713.0], [404.0, 75737.5], [418.0, 75644.0], [429.0, 70799.0], [430.0, 70658.66666666667], [428.0, 70705.0], [425.0, 70712.0], [424.0, 70559.0], [423.0, 70929.0], [422.0, 70962.0], [421.0, 75513.0], [417.0, 75576.0], [416.0, 75639.5], [446.0, 70464.5], [447.0, 70587.0], [444.0, 70617.0], [435.0, 70621.0], [434.0, 70598.0], [433.0, 35366.0], [432.0, 70616.5], [442.0, 70316.0], [441.0, 70575.0], [440.0, 70382.0], [439.0, 70549.0], [438.0, 8877.625], [437.0, 70587.0], [436.0, 70572.0], [462.0, 70265.0], [463.0, 70571.0], [461.0, 70601.0], [460.0, 70278.0], [459.0, 70600.0], [458.0, 70593.0], [457.0, 70540.0], [456.0, 70597.0], [455.0, 70572.5], [448.0, 70271.0], [451.0, 70510.0], [449.0, 70297.0], [454.0, 23595.0], [453.0, 35354.5], [478.0, 70377.0], [479.0, 35311.0], [477.0, 70557.0], [475.0, 70543.0], [474.0, 70532.0], [468.0, 70568.0], [467.0, 70545.0], [466.0, 70462.0], [465.0, 70537.5], [494.0, 65369.0], [495.0, 3176.04347826087], [493.0, 65401.0], [492.0, 65396.0], [491.0, 66443.5], [489.0, 65424.0], [488.0, 13154.0], [487.0, 21906.0], [481.0, 7136.1], [480.0, 106.5], [483.0, 28198.6], [482.0, 35318.5], [486.0, 33398.0], [485.0, 33430.5], [484.0, 58738.5], [510.0, 65267.0], [511.0, 11083.5], [508.0, 66349.0], [499.0, 65360.0], [496.0, 5280.923076923078], [507.0, 66353.0], [505.0, 3154.478260869565], [504.0, 66352.0], [503.0, 65312.5], [502.0, 65335.0], [501.0, 65350.5], [500.0, 65336.0], [540.0, 21764.666666666664], [542.0, 65077.0], [528.0, 32636.5], [530.0, 32635.5], [532.0, 21811.333333333336], [536.0, 21929.5], [538.0, 81.5], [516.0, 13326.2], [514.0, 22200.666666666664], [512.0, 7408.222222222223], [526.0, 18693.999999999996], [524.0, 43574.66666666667], [520.0, 43989.0], [522.0, 527.5], [534.0, 66270.0], [572.0, 60359.0], [574.0, 58526.0], [560.0, 60583.0], [562.0, 60546.0], [564.0, 60526.0], [568.0, 58934.0], [550.0, 59977.0], [548.0, 60045.0], [546.0, 65071.0], [544.0, 13110.399999999998], [558.0, 59667.0], [556.0, 60689.0], [554.0, 59731.0], [552.0, 59943.0], [566.0, 60472.0], [604.0, 8465.57142857143], [592.0, 8568.142857142859], [594.0, 19426.0], [596.0, 28961.5], [606.0, 29814.5], [602.0, 19790.666666666664], [600.0, 14925.500000000002], [576.0, 60321.0], [578.0, 60302.0], [580.0, 58432.0], [582.0, 59155.0], [590.0, 59854.0], [588.0, 58131.0], [586.0, 60105.0], [584.0, 58344.0], [598.0, 20203.333333333336], [636.0, 56684.0], [624.0, 19039.666666666664], [626.0, 19270.666666666664], [628.0, 28470.0], [638.0, 56683.0], [634.0, 57491.0], [632.0, 9661.499999999998], [608.0, 29990.5], [610.0, 58333.0], [612.0, 7425.875000000003], [614.0, 19328.333333333332], [622.0, 28589.5], [620.0, 9574.0], [618.0, 58070.0], [616.0, 57242.0], [630.0, 14261.499999999998], [668.0, 55874.0], [656.0, 14181.250000000002], [658.0, 11345.400000000001], [660.0, 28762.5], [670.0, 56475.0], [666.0, 56690.0], [664.0, 56732.0], [640.0, 57388.0], [642.0, 56656.0], [644.0, 19337.0], [646.0, 56590.0], [654.0, 7082.0], [652.0, 9460.166666666666], [650.0, 11555.0], [648.0, 14359.000000000002], [662.0, 37321.0], [700.0, 37200.66666666667], [702.0, 27716.5], [688.0, 5352.454545454544], [692.0, 14020.249999999998], [690.0, 576.5], [698.0, 27672.0], [696.0, 37427.0], [678.0, 14279.25], [676.0, 55642.0], [674.0, 56434.0], [672.0, 55759.0], [686.0, 55132.0], [684.0, 55818.0], [682.0, 56045.0], [680.0, 55961.0], [694.0, 2494.56], [730.0, 53233.0], [734.0, 17950.333333333336], [720.0, 14204.999999999998], [722.0, 27038.0], [724.0, 18256.333333333336], [732.0, 13706.5], [710.0, 11582.199999999999], [708.0, 28074.5], [706.0, 55355.0], [704.0, 11543.4], [718.0, 54844.0], [716.0, 54152.0], [714.0, 54204.0], [712.0, 18751.0], [726.0, 27393.0], [764.0, 51850.0], [752.0, 26332.5], [754.0, 18078.0], [756.0, 52181.0], [766.0, 26322.0], [762.0, 17992.333333333336], [760.0, 26176.5], [736.0, 26869.5], [738.0, 53634.0], [740.0, 14001.750000000002], [742.0, 18253.666666666664], [750.0, 26499.0], [748.0, 26622.5], [746.0, 53300.0], [744.0, 13355.75], [758.0, 8960.333333333334], [796.0, 51449.0], [784.0, 26109.0], [786.0, 26062.0], [798.0, 13191.499999999998], [794.0, 25605.5], [792.0, 51535.0], [768.0, 52208.0], [782.0, 815.0], [770.0, 26718.0], [772.0, 52425.0], [774.0, 10993.2], [780.0, 25928.0], [778.0, 26190.5], [776.0, 17700.333333333336], [790.0, 26245.0], [788.0, 652.5], [828.0, 25475.0], [816.0, 13160.25], [818.0, 51085.0], [820.0, 13131.499999999998], [830.0, 50937.0], [826.0, 25341.5], [824.0, 16891.333333333332], [800.0, 25693.0], [802.0, 17465.0], [804.0, 13169.500000000002], [806.0, 51141.0], [814.0, 30745.8], [810.0, 25549.0], [812.0, 853.75], [808.0, 50458.0], [822.0, 25513.5], [862.0, 24329.333333333332], [848.0, 25074.5], [850.0, 12836.75], [852.0, 16863.0], [858.0, 47867.0], [860.0, 267.0], [856.0, 16540.0], [838.0, 49375.0], [836.0, 49388.0], [834.0, 12829.25], [832.0, 13101.000000000002], [846.0, 49920.0], [844.0, 17078.333333333336], [842.0, 50098.5], [840.0, 25413.5], [854.0, 16280.666666666668], [890.0, 15790.0], [894.0, 46705.0], [880.0, 24392.0], [882.0, 618.0], [884.0, 16391.333333333332], [892.0, 5537.777777777777], [870.0, 12659.25], [888.0, 275.0], [868.0, 47915.0], [866.0, 24132.5], [864.0, 16563.0], [878.0, 24473.0], [876.0, 48357.0], [874.0, 47502.0], [872.0, 24379.0], [886.0, 16245.666666666668], [924.0, 45726.0], [912.0, 23200.5], [914.0, 47178.0], [916.0, 47159.0], [926.0, 15890.0], [922.0, 23413.0], [920.0, 15646.0], [896.0, 16429.666666666668], [898.0, 23832.0], [902.0, 47112.5], [900.0, 16064.0], [910.0, 8113.666666666667], [908.0, 47622.0], [906.0, 31598.666666666668], [904.0, 231.5], [918.0, 45865.0], [954.0, 45207.0], [958.0, 44441.0], [944.0, 45616.0], [946.0, 45684.0], [948.0, 44780.0], [952.0, 45476.0], [934.0, 45474.0], [932.0, 45511.0], [930.0, 46467.0], [928.0, 46603.0], [942.0, 45058.0], [940.0, 44819.0], [938.0, 45233.0], [936.0, 46172.0], [950.0, 45571.0], [962.0, 45054.0], [990.0, 1247.9298245614034], [972.0, 44092.0], [970.0, 44130.0], [968.0, 44883.0], [960.0, 44421.0], [964.0, 44894.0], [966.0, 44835.0], [974.0, 44886.0], [976.0, 45058.0], [978.0, 44935.0], [988.0, 43236.0], [986.0, 164.33333333333334], [982.0, 44508.333333333336], [1018.0, 14429.666666666668], [994.0, 811.0], [992.0, 14813.0], [1004.0, 7473.333333333333], [1006.0, 176.0], [1002.0, 43363.0], [1000.0, 42652.0], [1012.0, 5443.375], [1010.0, 10913.0], [1008.0, 43205.0], [1022.0, 164.0], [1020.0, 158.2], [1016.0, 20840.0], [998.0, 22278.0], [996.0, 11052.5], [1014.0, 21126.5], [1072.0, 30899.25], [1080.0, 40254.0], [1056.0, 10398.0], [1060.0, 41446.0], [1084.0, 39545.0], [1076.0, 10325.75], [1024.0, 5477.374999999999], [1028.0, 10336.5], [1032.0, 21199.5], [1036.0, 42103.0], [1052.0, 6840.0], [1048.0, 10623.500000000002], [1044.0, 41590.0], [1040.0, 21056.0], [1064.0, 10480.875], [1144.0, 9895.75], [1148.0, 18641.5], [1124.0, 8235.4], [1120.0, 26136.333333333332], [1132.0, 939.1287128712872], [1140.0, 37389.0], [1136.0, 19307.5], [1100.0, 39906.0], [1096.0, 39448.0], [1092.0, 39309.0], [1088.0, 40108.0], [1116.0, 39361.0], [1112.0, 39160.0], [1108.0, 39234.0], [1104.0, 39261.0], [1208.0, 34729.0], [1204.0, 34868.0], [1212.0, 34766.0], [1184.0, 35813.0], [1188.0, 35515.0], [1196.0, 35508.0], [1200.0, 35480.0], [1152.0, 24903.333333333336], [1156.0, 9594.5], [1160.0, 7731.4], [1164.0, 35784.0], [1172.0, 35509.0], [1168.0, 36591.0], [1272.0, 32272.5], [1276.0, 32427.0], [1248.0, 33855.0], [1252.0, 33580.0], [1256.0, 33028.0], [1260.0, 32922.0], [1268.0, 32355.0], [1264.0, 32797.0], [1228.0, 34343.0], [1224.0, 34872.0], [1220.0, 34674.0], [1216.0, 34821.0], [1244.0, 33256.0], [1240.0, 33134.0], [1236.0, 33581.0], [1232.0, 34457.0], [1336.0, 30044.0], [1332.0, 29927.0], [1340.0, 29976.0], [1312.0, 30131.0], [1316.0, 30645.0], [1320.0, 30769.0], [1324.0, 31016.0], [1328.0, 30501.0], [1280.0, 31714.0], [1284.0, 31663.0], [1292.0, 31412.0], [1308.0, 31141.0], [1304.0, 30362.0], [1300.0, 31200.0], [1296.0, 30540.0], [1400.0, 27182.0], [1404.0, 26921.0], [1376.0, 28052.0], [1380.0, 27990.0], [1384.0, 28267.0], [1388.0, 28120.5], [1396.0, 27282.0], [1392.0, 27598.0], [1356.0, 29119.0], [1352.0, 29017.0], [1348.0, 29461.0], [1344.0, 29887.0], [1372.0, 28993.0], [1368.0, 28565.0], [1364.0, 29067.0], [1360.0, 29163.0], [1464.0, 24923.0], [1444.0, 25367.0], [1448.0, 25655.0], [1452.0, 25178.666666666668], [1468.0, 24921.0], [1460.0, 24629.0], [1456.0, 24973.5], [1420.0, 26135.0], [1416.0, 26116.0], [1412.0, 26170.0], [1408.0, 26956.0], [1436.0, 25631.0], [1432.0, 25811.0], [1424.0, 26401.0], [1524.0, 22147.5], [1528.0, 22330.0], [1508.0, 22906.0], [1512.0, 22612.0], [1516.0, 22348.0], [1520.0, 22721.5], [1472.0, 24064.0], [1476.0, 24016.0], [1480.0, 24479.0], [1484.0, 24228.0], [1496.0, 23987.0], [1492.0, 23267.0], [1488.0, 23967.5], [1596.0, 19842.0], [1576.0, 19861.0], [1572.0, 19673.0], [1568.0, 20601.0], [1580.0, 19898.0], [1592.0, 19435.0], [1588.0, 19668.0], [1584.0, 20183.0], [1536.0, 21364.0], [1544.0, 20584.0], [1548.0, 20870.0], [1564.0, 20328.0], [1560.0, 20155.0], [1556.0, 20365.0], [1552.0, 20384.0], [1656.0, 16951.0], [1652.0, 17037.0], [1660.0, 16109.0], [1632.0, 18303.0], [1636.0, 18099.0], [1640.0, 17604.0], [1644.0, 17344.0], [1648.0, 17209.0], [1600.0, 18985.0], [1604.0, 18895.0], [1608.0, 19261.0], [1612.0, 18702.0], [1628.0, 18287.0], [1620.0, 18200.0], [1676.0, 16266.0], [1712.0, 14637.0], [1724.0, 14435.0], [1720.0, 14660.0], [1672.0, 15909.0], [1668.0, 16333.0], [1664.0, 16841.0], [1692.0, 15287.0], [1688.0, 15672.0], [1684.0, 15570.0], [1680.0, 15647.0], [1784.0, 11946.0], [1788.0, 11900.5], [1760.0, 13193.0], [1764.0, 12872.0], [1768.0, 12839.0], [1772.0, 12682.0], [1780.0, 12327.0], [1728.0, 13800.0], [1732.0, 13659.0], [1736.0, 14096.0], [1740.0, 13568.0], [1756.0, 13426.0], [1752.0, 13506.5], [1748.0, 12869.0], [1744.0, 13396.0], [1848.0, 9110.0], [1852.0, 9102.0], [1824.0, 10027.0], [1828.0, 9866.0], [1832.0, 9706.0], [1836.0, 8725.0], [1844.0, 9179.0], [1840.0, 9608.0], [1792.0, 11715.0], [1796.0, 11632.0], [1800.0, 11497.0], [1804.0, 11220.0], [1820.0, 10240.0], [1816.0, 10087.0], [1812.0, 10683.0], [1808.0, 10824.0], [1912.0, 5428.0], [1916.0, 5344.0], [1888.0, 6946.0], [1892.0, 6753.0], [1900.0, 6190.0], [1908.0, 5802.0], [1904.0, 5993.0], [1868.0, 8038.0], [1864.0, 8229.0], [1860.0, 8487.0], [1856.0, 8768.0], [1884.0, 7297.0], [1880.0, 7628.0], [1876.0, 7022.0], [1872.0, 7979.0], [1976.0, 2287.0], [1980.0, 2110.0], [1952.0, 3647.0], [1960.0, 2420.0], [1968.0, 2380.0], [1920.0, 5241.0], [1924.0, 4984.5], [1932.0, 4745.0], [1948.0, 3832.0], [1944.0, 4438.5], [1940.0, 4432.5], [1025.0, 41573.0], [1077.0, 10547.0], [1033.0, 20779.5], [1029.0, 41391.0], [1053.0, 13745.666666666668], [1073.0, 7351.333333333333], [1037.0, 151.0], [1045.0, 6229.0], [1041.0, 8346.6], [1049.0, 20324.0], [1057.0, 14184.0], [1065.0, 2867.625], [1061.0, 20555.5], [1069.0, 10766.0], [1085.0, 39826.0], [1081.0, 40230.0], [1145.0, 4200.4], [1125.0, 19607.0], [1121.0, 38452.0], [1129.0, 38125.0], [1133.0, 6898.166666666666], [1149.0, 18717.0], [1137.0, 19170.0], [1141.0, 661.0], [1089.0, 39857.0], [1093.0, 39581.0], [1097.0, 39093.0], [1101.0, 39694.0], [1117.0, 39185.0], [1113.0, 1046.9666666666665], [1109.0, 39402.0], [1105.0, 39315.0], [1209.0, 34944.0], [1213.0, 35044.0], [1185.0, 35736.0], [1189.0, 35876.0], [1193.0, 36339.0], [1197.0, 35320.0], [1205.0, 34799.0], [1201.0, 35402.0], [1153.0, 9773.5], [1157.0, 1241.5576923076926], [1161.0, 36274.0], [1165.0, 36623.0], [1181.0, 36136.0], [1177.0, 36087.0], [1173.0, 36456.0], [1169.0, 36021.0], [1277.0, 32525.0], [1249.0, 33289.0], [1253.0, 33619.0], [1261.0, 32611.0], [1273.0, 31989.0], [1269.0, 32433.0], [1265.0, 32597.0], [1229.0, 34579.0], [1225.0, 34248.0], [1217.0, 34231.0], [1245.0, 33793.0], [1241.0, 33495.0], [1237.0, 33534.0], [1233.0, 34035.0], [1337.0, 30044.0], [1341.0, 29628.0], [1313.0, 31276.0], [1317.0, 30818.0], [1321.0, 30861.0], [1325.0, 30312.0], [1333.0, 30268.0], [1329.0, 30555.0], [1281.0, 32321.0], [1285.0, 31416.0], [1289.0, 31765.0], [1293.0, 31030.0], [1309.0, 30757.0], [1305.0, 31304.0], [1301.0, 31061.0], [1297.0, 31156.0], [1405.0, 26879.0], [1377.0, 28079.0], [1381.0, 28136.0], [1385.0, 28341.0], [1389.0, 27682.0], [1401.0, 27063.0], [1397.0, 27100.0], [1393.0, 28073.0], [1357.0, 29083.0], [1353.0, 29248.0], [1349.0, 29464.0], [1345.0, 29518.0], [1373.0, 28344.0], [1369.0, 28677.0], [1365.0, 29120.0], [1361.0, 28504.0], [1469.0, 24276.0], [1441.0, 25604.0], [1445.0, 25438.0], [1449.0, 25101.0], [1453.0, 25149.0], [1465.0, 24715.0], [1461.0, 25332.0], [1457.0, 25090.0], [1421.0, 26429.0], [1413.0, 26989.0], [1409.0, 26464.0], [1437.0, 26033.0], [1433.0, 25323.0], [1429.0, 26021.0], [1529.0, 21690.0], [1525.0, 22200.0], [1509.0, 23180.0], [1505.0, 22680.0], [1513.0, 23180.0], [1533.0, 21934.5], [1521.0, 22198.0], [1473.0, 23990.0], [1481.0, 24068.0], [1485.0, 24197.0], [1501.0, 23775.5], [1497.0, 23566.0], [1493.0, 23767.0], [1597.0, 19136.0], [1589.0, 19937.0], [1577.0, 20321.0], [1573.0, 19952.0], [1569.0, 20264.0], [1581.0, 19878.0], [1593.0, 19461.0], [1537.0, 21569.0], [1541.0, 21489.0], [1545.0, 20588.0], [1549.0, 20986.0], [1565.0, 20371.0], [1561.0, 20342.0], [1557.0, 20642.0], [1657.0, 16856.0], [1661.0, 16663.0], [1633.0, 17987.0], [1637.0, 18038.0], [1641.0, 17443.0], [1653.0, 17286.0], [1649.0, 17209.0], [1601.0, 19202.0], [1605.0, 19327.0], [1609.0, 18848.0], [1613.0, 18403.0], [1629.0, 18570.0], [1625.0, 18422.5], [1621.0, 18734.0], [1617.0, 18642.0], [1725.0, 14470.0], [1697.0, 15200.0], [1701.0, 15177.666666666666], [1709.0, 14864.5], [1721.0, 14489.0], [1717.0, 14736.5], [1713.0, 15042.0], [1677.0, 15721.0], [1673.0, 15932.0], [1669.0, 16351.0], [1665.0, 16417.0], [1693.0, 14990.0], [1689.0, 15616.0], [1685.0, 15878.0], [1681.0, 15915.0], [1785.0, 11924.0], [1761.0, 13190.0], [1765.0, 12184.0], [1769.0, 12787.0], [1789.0, 11862.0], [1781.0, 12164.0], [1777.0, 12536.5], [1729.0, 14447.0], [1733.0, 13360.0], [1737.0, 13651.0], [1741.0, 13247.0], [1757.0, 13335.0], [1753.0, 13549.0], [1749.0, 13572.0], [1745.0, 13771.0], [1845.0, 9154.0], [1829.0, 9901.0], [1833.0, 9665.0], [1853.0, 8901.0], [1841.0, 9586.0], [1793.0, 11696.0], [1797.0, 11563.0], [1801.0, 11098.0], [1805.0, 11022.0], [1821.0, 10100.0], [1817.0, 10407.0], [1813.0, 10537.0], [1809.0, 10759.0], [1917.0, 5330.0], [1889.0, 6851.0], [1893.0, 6676.0], [1897.0, 6648.5], [1901.0, 6315.0], [1913.0, 5442.0], [1909.0, 5730.0], [1905.0, 5921.0], [1869.0, 8224.0], [1865.0, 8417.0], [1861.0, 8460.0], [1857.0, 8673.0], [1881.0, 7294.0], [1877.0, 7711.0], [1873.0, 7455.0], [1973.0, 2245.5], [1977.0, 2213.0], [1953.0, 3503.0], [1957.0, 3330.0], [1961.0, 2852.0], [1969.0, 2293.0], [1921.0, 5175.0], [1925.0, 5068.0], [1933.0, 4722.0], [1949.0, 3816.0], [1937.0, 4600.0], [1985.0, 2089.0], [539.0, 43529.66666666667], [537.0, 21765.666666666664], [519.0, 257.0], [543.0, 65091.0], [529.0, 22152.666666666664], [531.0, 43556.33333333333], [541.0, 32599.5], [517.0, 65186.0], [515.0, 32753.5], [513.0, 33197.5], [527.0, 32672.5], [525.0, 604.5], [523.0, 9876.142857142857], [521.0, 65258.0], [533.0, 16641.75], [535.0, 80.0], [571.0, 59148.5], [569.0, 60372.0], [575.0, 58523.0], [561.0, 60577.0], [563.0, 59319.0], [565.0, 59471.0], [573.0, 58534.0], [551.0, 60981.0], [549.0, 60007.0], [547.0, 66128.0], [545.0, 32581.5], [559.0, 11972.600000000002], [557.0, 60685.0], [555.0, 59705.0], [553.0, 60808.0], [567.0, 60465.0], [605.0, 19545.0], [607.0, 19870.0], [593.0, 19986.0], [595.0, 20063.333333333336], [597.0, 11752.000000000002], [603.0, 29631.5], [601.0, 28976.5], [591.0, 20089.666666666664], [577.0, 58850.0], [579.0, 60283.0], [581.0, 59155.0], [583.0, 60138.0], [589.0, 58073.0], [587.0, 60097.0], [585.0, 58328.0], [599.0, 15022.75], [637.0, 56688.0], [639.0, 56657.0], [625.0, 28512.0], [627.0, 19017.666666666664], [629.0, 57601.0], [635.0, 57503.0], [633.0, 57624.0], [623.0, 57795.0], [609.0, 29204.5], [611.0, 8418.285714285714], [615.0, 58054.0], [621.0, 58017.0], [619.0, 57151.0], [617.0, 57228.0], [631.0, 18986.0], [669.0, 56924.0], [671.0, 56463.0], [657.0, 56815.0], [659.0, 56724.0], [667.0, 56599.0], [665.0, 56752.0], [655.0, 9634.833333333332], [641.0, 57541.0], [643.0, 57389.0], [645.0, 56602.0], [647.0, 56583.0], [653.0, 19015.666666666664], [651.0, 28691.5], [649.0, 19284.0], [663.0, 55923.0], [661.0, 55.5], [697.0, 55552.0], [703.0, 27600.5], [689.0, 16312.28571428571], [691.0, 37423.66666666667], [701.0, 54697.0], [699.0, 752.0], [679.0, 55681.0], [677.0, 27769.0], [675.0, 27917.0], [673.0, 55727.0], [683.0, 55178.0], [687.0, 914.0], [681.0, 55968.0], [695.0, 19117.0], [693.0, 1070.0], [733.0, 18201.0], [735.0, 27258.0], [721.0, 54705.0], [723.0, 54628.0], [725.0, 13706.500000000002], [731.0, 53913.0], [729.0, 15750.714285714283], [711.0, 54431.0], [709.0, 14065.999999999998], [707.0, 27706.5], [705.0, 54592.0], [719.0, 14034.250000000002], [717.0, 27978.0], [715.0, 9831.666666666666], [713.0, 54996.0], [727.0, 18542.666666666664], [765.0, 52366.0], [767.0, 11056.400000000001], [753.0, 52283.0], [755.0, 10958.600000000002], [757.0, 52135.0], [763.0, 11043.599999999999], [761.0, 51947.0], [751.0, 27045.5], [737.0, 27250.5], [739.0, 13819.249999999998], [741.0, 52754.0], [743.0, 52658.0], [749.0, 26742.0], [747.0, 17856.333333333336], [745.0, 13544.0], [759.0, 52738.0], [797.0, 26129.5], [799.0, 50774.0], [785.0, 51545.0], [789.0, 51502.5], [787.0, 17625.333333333336], [795.0, 10790.8], [793.0, 25598.0], [783.0, 26507.750000000004], [769.0, 52308.0], [771.0, 11085.2], [773.0, 26438.5], [775.0, 52248.0], [781.0, 26292.0], [779.0, 17488.666666666664], [777.0, 52060.0], [791.0, 17364.0], [829.0, 17498.333333333336], [831.0, 17467.333333333336], [817.0, 50954.0], [819.0, 25002.0], [821.0, 25761.0], [827.0, 51037.0], [825.0, 7376.4285714285725], [815.0, 17104.0], [801.0, 51409.0], [803.0, 50670.0], [805.0, 50606.0], [807.0, 8942.333333333332], [811.0, 25412.5], [809.0, 25508.5], [823.0, 50816.0], [857.0, 16345.0], [863.0, 48935.0], [849.0, 25405.5], [851.0, 25305.5], [853.0, 25411.0], [859.0, 49194.0], [839.0, 12711.75], [837.0, 12885.249999999998], [835.0, 24834.5], [833.0, 49520.0], [847.0, 17117.0], [845.0, 33366.333333333336], [843.0, 763.0], [841.0, 546.0], [855.0, 48538.0], [893.0, 47453.0], [895.0, 16158.0], [883.0, 32086.666666666664], [881.0, 12261.75], [885.0, 23656.5], [891.0, 47452.0], [889.0, 23768.5], [871.0, 24476.5], [869.0, 12535.5], [867.0, 48633.0], [865.0, 126.0], [879.0, 9803.4], [877.0, 8152.499999999999], [875.0, 24211.0], [873.0, 12172.5], [887.0, 24384.0], [925.0, 23337.0], [927.0, 45581.0], [913.0, 251.0], [915.0, 15898.833333333334], [917.0, 16103.333333333332], [923.0, 15762.666666666668], [921.0, 22855.0], [911.0, 23533.0], [897.0, 23431.5], [899.0, 23385.5], [903.0, 581.0], [901.0, 211.5], [909.0, 23583.0], [907.0, 23293.0], [905.0, 257.5], [919.0, 7939.666666666667], [955.0, 45593.0], [953.0, 45193.0], [959.0, 45442.0], [945.0, 46052.0], [947.0, 45639.0], [949.0, 45417.0], [957.0, 44901.5], [935.0, 46624.0], [933.0, 46368.0], [931.0, 46288.0], [929.0, 45552.0], [943.0, 45596.0], [941.0, 45088.0], [939.0, 46191.0], [937.0, 45862.0], [951.0, 45752.0], [961.0, 44367.0], [985.0, 43895.5], [973.0, 22238.0], [971.0, 43760.0], [969.0, 44143.0], [975.0, 44811.0], [963.0, 45344.0], [965.0, 43917.0], [967.0, 44212.0], [991.0, 4489.818181818182], [977.0, 43786.0], [979.0, 44074.0], [989.0, 1499.717391304348], [987.0, 14931.666666666666], [983.0, 44688.0], [1023.0, 28271.666666666664], [1019.0, 14742.0], [1007.0, 42998.0], [1005.0, 22077.5], [1003.0, 42526.0], [1001.0, 7429.666666666666], [1013.0, 8666.4], [1011.0, 14400.0], [1009.0, 21429.0], [1021.0, 27931.333333333336], [1017.0, 7275.999999999999], [999.0, 21885.5], [997.0, 42678.0], [995.0, 26109.6], [993.0, 705.6666666666666], [1015.0, 6221.571428571428], [1082.0, 39598.0], [1086.0, 40393.0], [1058.0, 4730.333333333332], [1062.0, 41443.0], [1078.0, 40292.0], [1074.0, 962.2580645161289], [1054.0, 10409.75], [1026.0, 41068.0], [1030.0, 20730.0], [1034.0, 40894.0], [1038.0, 41332.0], [1050.0, 4760.555555555556], [1046.0, 10609.25], [1042.0, 41128.0], [1070.0, 40332.0], [1066.0, 814.0], [1150.0, 9543.0], [1126.0, 19592.5], [1122.0, 38369.0], [1130.0, 19372.0], [1134.0, 5094.25], [1146.0, 24988.0], [1142.0, 126.0], [1138.0, 38357.0], [1102.0, 39516.0], [1098.0, 39468.0], [1094.0, 40163.0], [1090.0, 40132.0], [1114.0, 4721.555555555556], [1110.0, 39401.0], [1106.0, 39010.0], [1214.0, 34756.0], [1186.0, 35065.0], [1190.0, 36050.0], [1194.0, 35883.5], [1198.0, 35511.0], [1210.0, 35223.0], [1206.0, 35571.0], [1202.0, 35331.0], [1154.0, 36980.0], [1158.0, 9707.75], [1162.0, 36313.0], [1166.0, 36159.0], [1182.0, 35999.0], [1178.0, 36084.0], [1174.0, 36138.0], [1170.0, 36788.0], [1278.0, 32500.0], [1250.0, 33390.0], [1254.0, 32863.0], [1258.0, 33126.5], [1262.0, 32315.0], [1274.0, 32043.0], [1270.0, 31718.0], [1266.0, 32669.0], [1230.0, 34263.0], [1226.0, 33651.0], [1222.0, 34605.0], [1218.0, 34609.0], [1242.0, 33972.0], [1238.0, 33785.0], [1234.0, 34201.0], [1338.0, 30507.0], [1322.0, 30801.0], [1326.0, 29961.0], [1342.0, 29683.0], [1334.0, 30017.0], [1330.0, 30532.0], [1282.0, 32224.0], [1286.0, 32025.0], [1290.0, 31183.0], [1294.0, 31234.0], [1310.0, 30365.0], [1306.0, 30267.0], [1302.0, 31038.0], [1298.0, 31200.0], [1402.0, 27113.0], [1406.0, 26892.0], [1378.0, 28605.0], [1382.0, 28499.0], [1390.0, 27434.0], [1398.0, 26817.0], [1394.0, 27798.0], [1358.0, 29006.0], [1354.0, 28752.0], [1350.0, 28762.0], [1346.0, 29426.0], [1374.0, 28598.0], [1370.0, 29061.0], [1366.0, 28380.0], [1362.0, 28864.0], [1466.0, 24394.0], [1470.0, 23940.0], [1446.0, 25055.0], [1454.0, 25275.0], [1462.0, 24954.0], [1458.0, 25041.0], [1422.0, 26524.0], [1418.0, 26118.0], [1414.0, 25926.0], [1410.0, 26515.0], [1438.0, 25241.0], [1430.0, 26072.5], [1526.0, 22066.0], [1534.0, 21386.0], [1506.0, 23340.5], [1510.0, 22334.0], [1514.0, 22366.0], [1518.0, 22489.0], [1522.0, 22281.0], [1482.0, 23696.0], [1486.0, 23656.0], [1502.0, 23236.0], [1498.0, 23394.0], [1494.0, 23608.0], [1490.0, 23692.0], [1598.0, 19696.0], [1578.0, 1367.0], [1574.0, 19998.0], [1570.0, 20024.0], [1582.0, 19724.0], [1594.0, 19524.0], [1590.0, 19515.0], [1586.0, 19700.5], [1538.0, 21369.0], [1542.0, 21153.0], [1546.0, 20806.0], [1550.0, 21438.0], [1566.0, 20701.0], [1562.0, 20424.0], [1558.0, 20908.0], [1554.0, 20491.5], [1662.0, 16722.0], [1634.0, 17681.0], [1638.0, 17704.0], [1642.0, 17761.0], [1658.0, 17168.0], [1654.0, 17160.0], [1650.0, 17320.0], [1602.0, 19177.0], [1606.0, 18796.0], [1610.0, 18535.0], [1614.0, 18873.0], [1630.0, 18477.0], [1626.0, 18630.0], [1622.0, 18180.0], [1618.0, 18355.0], [1722.0, 14001.0], [1726.0, 5641.666666666667], [1698.0, 15429.0], [1706.0, 15022.666666666666], [1710.0, 14499.0], [1718.0, 14441.0], [1714.0, 14885.0], [1678.0, 15702.0], [1670.0, 16570.0], [1666.0, 16744.0], [1694.0, 14939.0], [1690.0, 15106.0], [1686.0, 15887.0], [1682.0, 15926.0], [1790.0, 11884.0], [1762.0, 13127.0], [1766.0, 12936.0], [1774.0, 12604.5], [1786.0, 11851.0], [1782.0, 12242.0], [1778.0, 12458.0], [1730.0, 13724.0], [1734.0, 13611.0], [1738.0, 13967.0], [1758.0, 13369.0], [1754.0, 13472.0], [1750.0, 13543.0], [1746.0, 13386.0], [1854.0, 8789.0], [1830.0, 9657.0], [1834.0, 9664.0], [1838.0, 9147.0], [1850.0, 9111.333333333334], [1846.0, 9119.0], [1794.0, 11668.0], [1798.0, 11113.0], [1802.0, 11065.0], [1806.0, 11006.0], [1822.0, 10154.0], [1818.0, 10060.0], [1814.0, 10615.0], [1810.0, 10703.0], [1918.0, 5386.0], [1890.0, 6456.0], [1894.0, 6627.0], [1898.0, 6511.0], [1902.0, 6162.0], [1914.0, 5184.0], [1910.0, 5611.0], [1906.0, 5591.0], [1870.0, 8053.0], [1866.0, 8326.0], [1862.0, 8418.0], [1858.0, 8453.0], [1886.0, 7181.5], [1882.0, 7428.0], [1874.0, 7744.0], [1974.0, 2231.0], [1958.0, 2858.0], [1954.0, 3439.0], [1962.0, 2588.0], [1966.0, 2559.0], [1978.0, 2193.0], [1922.0, 5255.0], [1926.0, 4995.0], [1934.0, 4544.0], [1950.0, 3738.0], [1946.0, 4113.0], [1938.0, 4393.0], [1035.0, 10588.75], [1039.0, 10734.75], [1031.0, 14198.333333333332], [1027.0, 13900.666666666668], [1055.0, 13623.666666666668], [1075.0, 39498.0], [1051.0, 21214.0], [1043.0, 167.0], [1087.0, 40120.0], [1071.0, 20525.0], [1067.0, 629.0], [1063.0, 430.0], [1059.0, 544.0], [1083.0, 39976.0], [1079.0, 6984.333333333333], [1147.0, 28173.25], [1123.0, 9894.0], [1131.0, 19331.5], [1135.0, 19237.5], [1139.0, 19145.5], [1143.0, 292.0], [1119.0, 38855.0], [1091.0, 39290.0], [1095.0, 39872.0], [1099.0, 40014.0], [1103.0, 39265.0], [1115.0, 20074.0], [1111.0, 39368.0], [1107.0, 39162.0], [1211.0, 35374.0], [1215.0, 34874.0], [1191.0, 36350.0], [1195.0, 35587.0], [1199.0, 35057.0], [1207.0, 34926.0], [1203.0, 35369.0], [1183.0, 35270.0], [1155.0, 36868.0], [1159.0, 7790.6], [1163.0, 36644.0], [1167.0, 36616.0], [1179.0, 36011.0], [1175.0, 35445.0], [1171.0, 36398.0], [1275.0, 32272.0], [1267.0, 32486.0], [1279.0, 31864.0], [1251.0, 33224.0], [1255.0, 32851.0], [1259.0, 33522.0], [1263.0, 32595.0], [1231.0, 34355.0], [1227.0, 34563.0], [1223.0, 34213.0], [1219.0, 34796.0], [1247.0, 33912.0], [1243.0, 33744.0], [1239.0, 33860.0], [1235.0, 34125.0], [1339.0, 29735.0], [1343.0, 29539.0], [1315.0, 30558.5], [1319.0, 30479.5], [1323.0, 30567.0], [1335.0, 29938.0], [1331.0, 29864.0], [1311.0, 31153.0], [1287.0, 31937.0], [1291.0, 31271.0], [1295.0, 31239.0], [1307.0, 30700.0], [1303.0, 31332.0], [1299.0, 31254.0], [1399.0, 27557.0], [1395.0, 27314.0], [1403.0, 26551.0], [1379.0, 28355.0], [1383.0, 27997.0], [1387.0, 27989.0], [1391.0, 27527.0], [1359.0, 28638.0], [1355.0, 29467.0], [1351.0, 29179.0], [1347.0, 29258.0], [1375.0, 28359.0], [1371.0, 29156.0], [1367.0, 28631.0], [1363.0, 28436.0], [1423.0, 26478.0], [1463.0, 24916.0], [1459.0, 25033.0], [1467.0, 24430.0], [1443.0, 25199.0], [1447.0, 25348.0], [1419.0, 26208.5], [1415.0, 26437.0], [1411.0, 26198.0], [1439.0, 25437.0], [1435.0, 25729.0], [1431.0, 25829.0], [1427.0, 25970.333333333332], [1527.0, 22418.0], [1507.0, 23025.0], [1515.0, 23019.0], [1531.0, 21546.5], [1503.0, 22846.0], [1475.0, 24393.0], [1479.0, 24059.0], [1483.0, 23955.0], [1499.0, 23817.0], [1495.0, 24230.0], [1491.0, 23859.0], [1599.0, 19331.0], [1575.0, 20009.0], [1571.0, 19752.0], [1579.0, 20021.5], [1583.0, 19932.0], [1595.0, 19286.0], [1591.0, 19581.0], [1587.0, 19901.0], [1567.0, 20104.0], [1543.0, 21169.0], [1547.0, 20879.0], [1551.0, 20561.0], [1563.0, 20556.0], [1559.0, 20254.0], [1555.0, 20422.0], [1659.0, 16931.0], [1663.0, 16417.0], [1635.0, 18253.0], [1639.0, 17738.0], [1643.0, 17786.0], [1647.0, 17349.0], [1655.0, 16920.0], [1651.0, 16893.0], [1631.0, 18018.0], [1603.0, 19309.0], [1607.0, 19157.0], [1611.0, 19164.0], [1615.0, 18486.0], [1627.0, 18039.0], [1623.0, 18694.0], [1619.0, 18793.0], [1723.0, 14590.0], [1715.0, 14353.0], [1727.0, 14100.0], [1703.0, 15134.0], [1707.0, 15159.0], [1711.0, 14703.0], [1719.0, 14255.0], [1679.0, 15487.0], [1675.0, 16206.0], [1671.0, 16515.0], [1667.0, 16984.0], [1695.0, 15527.0], [1691.0, 15309.0], [1687.0, 15401.0], [1683.0, 15936.0], [1791.0, 11852.0], [1779.0, 12320.0], [1763.0, 13113.0], [1767.0, 12952.0], [1771.0, 12610.0], [1775.0, 12512.0], [1783.0, 12090.0], [1759.0, 13269.0], [1731.0, 14272.0], [1735.0, 13953.0], [1739.0, 13846.0], [1743.0, 13729.5], [1755.0, 12775.0], [1747.0, 13691.0], [1843.0, 9396.5], [1831.0, 9809.0], [1855.0, 8364.0], [1827.0, 10049.666666666666], [1835.0, 9700.0], [1839.0, 9609.0], [1823.0, 10097.0], [1803.0, 11298.0], [1807.0, 10822.0], [1819.0, 9847.0], [1815.0, 10387.0], [1811.0, 10701.0], [1915.0, 5408.0], [1907.0, 5676.0], [1919.0, 5304.0], [1891.0, 6718.0], [1895.0, 6474.0], [1899.0, 6403.0], [1903.0, 6048.0], [1871.0, 7975.0], [1867.0, 8258.0], [1863.0, 8413.0], [1859.0, 8566.0], [1887.0, 6923.0], [1883.0, 7263.0], [1875.0, 7799.0], [1979.0, 2109.0], [1955.0, 3402.0], [1959.0, 2958.0], [1963.0, 2518.0], [1967.0, 1907.0], [1975.0, 2141.0], [1951.0, 3600.0], [1927.0, 5070.0], [1931.0, 4780.25], [1947.0, 3501.0], [1.0, 50956.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[332.109916666665, 7984.580416666645]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1985.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.63137696E12, "maxY": 109367.4, "series": [{"data": [[1.63137708E12, 35383.76666666667], [1.63137702E12, 109367.4], [1.63137696E12, 43898.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63137708E12, 54209.78333333333], [1.63137702E12, 13202.666666666666], [1.63137696E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137708E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 329.2291220556744, "minX": 1.63137696E12, "maxY": 29012.9376443418, "series": [{"data": [[1.63137708E12, 329.2291220556744], [1.63137702E12, 12122.766522678234], [1.63137696E12, 29012.9376443418]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137708E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 83.15137539120403, "minX": 1.63137696E12, "maxY": 29012.371824480397, "series": [{"data": [[1.63137708E12, 83.15137539120403], [1.63137702E12, 12122.58380129585], [1.63137696E12, 29012.371824480397]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137708E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63137696E12, "maxY": 258.7827376050079, "series": [{"data": [[1.63137708E12, 258.7827376050079], [1.63137702E12, 53.597192224622], [1.63137696E12, 0.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137708E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.63137696E12, "maxY": 101872.0, "series": [{"data": [[1.63137708E12, 647.0], [1.63137702E12, 101872.0], [1.63137696E12, 55355.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63137708E12, 171.0], [1.63137702E12, 70275.9], [1.63137696E12, 50069.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63137708E12, 409.9899999999998], [1.63137702E12, 100817.09], [1.63137696E12, 54628.57]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63137708E12, 233.0], [1.63137702E12, 86579.34999999999], [1.63137696E12, 52213.99999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63137708E12, 29.0], [1.63137702E12, 21.0], [1.63137696E12, 664.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63137708E12, 47.0], [1.63137702E12, 101.0], [1.63137696E12, 29171.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137708E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 35.0, "minX": 1.0, "maxY": 100788.5, "series": [{"data": [[32.0, 20447.5], [33.0, 68928.5], [2.0, 82088.0], [35.0, 20183.0], [34.0, 53519.0], [36.0, 36077.0], [601.0, 53.0], [658.0, 83.0], [44.0, 57388.5], [3.0, 92811.0], [777.0, 62.0], [53.0, 81151.0], [52.0, 97152.0], [54.0, 75725.5], [55.0, 86350.0], [923.0, 41.0], [911.0, 41.0], [58.0, 100788.5], [950.0, 38.0], [973.0, 35.0], [63.0, 70559.0], [1063.0, 44.0], [1152.0, 404.5], [1162.0, 135.0], [5.0, 98592.5], [6.0, 97871.0], [124.0, 1071.0], [8.0, 83815.5], [9.0, 76084.0], [12.0, 840.0], [13.0, 3600.0], [15.0, 6676.0], [16.0, 2473.5], [17.0, 28045.5], [18.0, 33332.0], [20.0, 29893.5], [327.0, 153.0], [21.0, 23926.5], [22.0, 17332.0], [23.0, 8566.0], [24.0, 24083.0], [25.0, 46495.5], [404.0, 45.5], [26.0, 42416.5], [27.0, 46231.0], [28.0, 44249.5], [29.0, 52403.0], [31.0, 34263.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 94997.0], [17.0, 90078.0], [658.0, 21040.0], [23.0, 43533.0], [27.0, 30801.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1162.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 100788.0, "series": [{"data": [[32.0, 20447.5], [33.0, 68928.5], [2.0, 82086.5], [35.0, 20183.0], [34.0, 53519.0], [36.0, 36077.0], [601.0, 53.0], [658.0, 83.0], [44.0, 57388.5], [3.0, 92811.0], [777.0, 62.0], [53.0, 81150.0], [52.0, 97152.0], [54.0, 75725.5], [55.0, 86350.0], [923.0, 41.0], [911.0, 41.0], [58.0, 100788.0], [950.0, 38.0], [973.0, 35.0], [63.0, 70559.0], [1063.0, 44.0], [1152.0, 404.5], [1162.0, 135.0], [5.0, 98592.5], [6.0, 97871.0], [124.0, 1071.0], [8.0, 83815.0], [9.0, 76084.0], [12.0, 839.5], [13.0, 3600.0], [15.0, 6676.0], [16.0, 2472.0], [17.0, 28045.0], [18.0, 33332.0], [20.0, 29893.5], [327.0, 153.0], [21.0, 23926.5], [22.0, 17331.5], [23.0, 8566.0], [24.0, 24083.0], [25.0, 46495.5], [404.0, 45.5], [26.0, 42416.5], [27.0, 46231.0], [28.0, 44249.5], [29.0, 52403.0], [31.0, 34263.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 94997.0], [17.0, 90078.0], [658.0, 0.0], [23.0, 43532.5], [27.0, 30801.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1162.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63137696E12, "maxY": 100.0, "series": [{"data": [[1.63137708E12, 100.0], [1.63137702E12, 66.66666666666667], [1.63137696E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137708E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.63137696E12, "maxY": 100.0, "series": [{"data": [[1.63137708E12, 100.0], [1.63137702E12, 76.86666666666666], [1.63137696E12, 21.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63137702E12, 0.3], [1.63137696E12, 0.05]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.63137708E12, 1.1833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137708E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.63137696E12, "maxY": 100.0, "series": [{"data": [[1.63137708E12, 1.1833333333333333], [1.63137702E12, 0.3], [1.63137696E12, 0.05]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63137708E12, 100.0], [1.63137702E12, 76.86666666666666], [1.63137696E12, 21.6]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137708E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.63137696E12, "maxY": 100.0, "series": [{"data": [[1.63137708E12, 100.0], [1.63137702E12, 76.86666666666666], [1.63137696E12, 21.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63137708E12, 1.1833333333333333], [1.63137702E12, 0.3], [1.63137696E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137708E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

