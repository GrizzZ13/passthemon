/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 513.0, "minX": 0.0, "maxY": 25246.0, "series": [{"data": [[0.0, 513.0], [0.1, 1170.0], [0.2, 1177.0], [0.3, 1223.0], [0.4, 1253.0], [0.5, 1292.0], [0.6, 1330.0], [0.7, 1333.0], [0.8, 1374.0], [0.9, 1384.0], [1.0, 1391.0], [1.1, 1396.0], [1.2, 1425.0], [1.3, 1446.0], [1.4, 1454.0], [1.5, 1462.0], [1.6, 1465.0], [1.7, 1472.0], [1.8, 1509.0], [1.9, 1521.0], [2.0, 1541.0], [2.1, 1554.0], [2.2, 1563.0], [2.3, 1575.0], [2.4, 1591.0], [2.5, 1603.0], [2.6, 1616.0], [2.7, 1628.0], [2.8, 1633.0], [2.9, 1636.0], [3.0, 1639.0], [3.1, 1665.0], [3.2, 1672.0], [3.3, 1678.0], [3.4, 1691.0], [3.5, 1696.0], [3.6, 1700.0], [3.7, 1702.0], [3.8, 1706.0], [3.9, 1708.0], [4.0, 1714.0], [4.1, 1718.0], [4.2, 1729.0], [4.3, 1735.0], [4.4, 1784.0], [4.5, 1787.0], [4.6, 1812.0], [4.7, 1832.0], [4.8, 1846.0], [4.9, 1873.0], [5.0, 1884.0], [5.1, 1890.0], [5.2, 1903.0], [5.3, 1956.0], [5.4, 1971.0], [5.5, 2006.0], [5.6, 2030.0], [5.7, 2326.0], [5.8, 2397.0], [5.9, 2457.0], [6.0, 2493.0], [6.1, 2552.0], [6.2, 2563.0], [6.3, 2592.0], [6.4, 2621.0], [6.5, 2634.0], [6.6, 2649.0], [6.7, 2655.0], [6.8, 2678.0], [6.9, 2696.0], [7.0, 2770.0], [7.1, 2813.0], [7.2, 2976.0], [7.3, 2992.0], [7.4, 3240.0], [7.5, 3250.0], [7.6, 3302.0], [7.7, 3306.0], [7.8, 3329.0], [7.9, 3364.0], [8.0, 3413.0], [8.1, 3429.0], [8.2, 3450.0], [8.3, 3458.0], [8.4, 3489.0], [8.5, 3510.0], [8.6, 3518.0], [8.7, 3530.0], [8.8, 3572.0], [8.9, 3586.0], [9.0, 3593.0], [9.1, 3605.0], [9.2, 3622.0], [9.3, 3655.0], [9.4, 3686.0], [9.5, 3695.0], [9.6, 3724.0], [9.7, 3743.0], [9.8, 3785.0], [9.9, 3790.0], [10.0, 3846.0], [10.1, 3861.0], [10.2, 3902.0], [10.3, 3932.0], [10.4, 3960.0], [10.5, 4031.0], [10.6, 4119.0], [10.7, 4148.0], [10.8, 4178.0], [10.9, 4192.0], [11.0, 4210.0], [11.1, 4228.0], [11.2, 4251.0], [11.3, 4272.0], [11.4, 4282.0], [11.5, 4317.0], [11.6, 4359.0], [11.7, 4384.0], [11.8, 4397.0], [11.9, 4459.0], [12.0, 4475.0], [12.1, 4514.0], [12.2, 4535.0], [12.3, 4548.0], [12.4, 4581.0], [12.5, 4629.0], [12.6, 4688.0], [12.7, 4706.0], [12.8, 4736.0], [12.9, 4757.0], [13.0, 4765.0], [13.1, 4765.0], [13.2, 4848.0], [13.3, 4900.0], [13.4, 4904.0], [13.5, 4921.0], [13.6, 4972.0], [13.7, 5012.0], [13.8, 5027.0], [13.9, 5131.0], [14.0, 5154.0], [14.1, 5182.0], [14.2, 5231.0], [14.3, 5254.0], [14.4, 5274.0], [14.5, 5281.0], [14.6, 5297.0], [14.7, 5307.0], [14.8, 5309.0], [14.9, 5319.0], [15.0, 5325.0], [15.1, 5345.0], [15.2, 5365.0], [15.3, 5387.0], [15.4, 5426.0], [15.5, 5503.0], [15.6, 5514.0], [15.7, 5550.0], [15.8, 5566.0], [15.9, 5607.0], [16.0, 5658.0], [16.1, 5702.0], [16.2, 5769.0], [16.3, 5773.0], [16.4, 5830.0], [16.5, 5859.0], [16.6, 5894.0], [16.7, 5962.0], [16.8, 6012.0], [16.9, 6064.0], [17.0, 6091.0], [17.1, 6101.0], [17.2, 6119.0], [17.3, 6138.0], [17.4, 6159.0], [17.5, 6165.0], [17.6, 6182.0], [17.7, 6194.0], [17.8, 6198.0], [17.9, 6212.0], [18.0, 6249.0], [18.1, 6261.0], [18.2, 6263.0], [18.3, 6286.0], [18.4, 6312.0], [18.5, 6331.0], [18.6, 6353.0], [18.7, 6400.0], [18.8, 6437.0], [18.9, 6478.0], [19.0, 6503.0], [19.1, 6508.0], [19.2, 6515.0], [19.3, 6547.0], [19.4, 6641.0], [19.5, 6692.0], [19.6, 6736.0], [19.7, 6749.0], [19.8, 6760.0], [19.9, 6808.0], [20.0, 6823.0], [20.1, 6845.0], [20.2, 6863.0], [20.3, 6917.0], [20.4, 6927.0], [20.5, 7006.0], [20.6, 7010.0], [20.7, 7076.0], [20.8, 7138.0], [20.9, 7212.0], [21.0, 7261.0], [21.1, 7272.0], [21.2, 7322.0], [21.3, 7345.0], [21.4, 7374.0], [21.5, 7419.0], [21.6, 7447.0], [21.7, 7460.0], [21.8, 7480.0], [21.9, 7532.0], [22.0, 7591.0], [22.1, 7615.0], [22.2, 7634.0], [22.3, 7669.0], [22.4, 7671.0], [22.5, 7680.0], [22.6, 7687.0], [22.7, 7715.0], [22.8, 7735.0], [22.9, 7751.0], [23.0, 7772.0], [23.1, 7804.0], [23.2, 7843.0], [23.3, 7845.0], [23.4, 7862.0], [23.5, 7890.0], [23.6, 7908.0], [23.7, 7921.0], [23.8, 7988.0], [23.9, 8024.0], [24.0, 8051.0], [24.1, 8076.0], [24.2, 8130.0], [24.3, 8162.0], [24.4, 8165.0], [24.5, 8195.0], [24.6, 8231.0], [24.7, 8283.0], [24.8, 8307.0], [24.9, 8356.0], [25.0, 8375.0], [25.1, 8390.0], [25.2, 8399.0], [25.3, 8446.0], [25.4, 8465.0], [25.5, 8483.0], [25.6, 8504.0], [25.7, 8543.0], [25.8, 8572.0], [25.9, 8584.0], [26.0, 8599.0], [26.1, 8620.0], [26.2, 8625.0], [26.3, 8643.0], [26.4, 8648.0], [26.5, 8701.0], [26.6, 8722.0], [26.7, 8732.0], [26.8, 8739.0], [26.9, 8765.0], [27.0, 8802.0], [27.1, 8812.0], [27.2, 8819.0], [27.3, 8826.0], [27.4, 8840.0], [27.5, 8881.0], [27.6, 8898.0], [27.7, 8920.0], [27.8, 8946.0], [27.9, 8958.0], [28.0, 8987.0], [28.1, 9016.0], [28.2, 9023.0], [28.3, 9042.0], [28.4, 9061.0], [28.5, 9093.0], [28.6, 9103.0], [28.7, 9144.0], [28.8, 9162.0], [28.9, 9185.0], [29.0, 9217.0], [29.1, 9225.0], [29.2, 9270.0], [29.3, 9300.0], [29.4, 9342.0], [29.5, 9360.0], [29.6, 9390.0], [29.7, 9394.0], [29.8, 9402.0], [29.9, 9421.0], [30.0, 9433.0], [30.1, 9492.0], [30.2, 9504.0], [30.3, 9516.0], [30.4, 9557.0], [30.5, 9578.0], [30.6, 9598.0], [30.7, 9624.0], [30.8, 9632.0], [30.9, 9664.0], [31.0, 9681.0], [31.1, 9699.0], [31.2, 9740.0], [31.3, 9758.0], [31.4, 9779.0], [31.5, 9833.0], [31.6, 9867.0], [31.7, 9892.0], [31.8, 9931.0], [31.9, 9950.0], [32.0, 9965.0], [32.1, 9977.0], [32.2, 10010.0], [32.3, 10034.0], [32.4, 10038.0], [32.5, 10044.0], [32.6, 10095.0], [32.7, 10099.0], [32.8, 10123.0], [32.9, 10135.0], [33.0, 10178.0], [33.1, 10219.0], [33.2, 10245.0], [33.3, 10256.0], [33.4, 10304.0], [33.5, 10341.0], [33.6, 10366.0], [33.7, 10379.0], [33.8, 10409.0], [33.9, 10448.0], [34.0, 10456.0], [34.1, 10460.0], [34.2, 10494.0], [34.3, 10517.0], [34.4, 10553.0], [34.5, 10586.0], [34.6, 10611.0], [34.7, 10649.0], [34.8, 10670.0], [34.9, 10693.0], [35.0, 10702.0], [35.1, 10736.0], [35.2, 10752.0], [35.3, 10758.0], [35.4, 10760.0], [35.5, 10785.0], [35.6, 10817.0], [35.7, 10819.0], [35.8, 10831.0], [35.9, 10842.0], [36.0, 10853.0], [36.1, 10867.0], [36.2, 10911.0], [36.3, 10937.0], [36.4, 10967.0], [36.5, 10992.0], [36.6, 11074.0], [36.7, 11158.0], [36.8, 11174.0], [36.9, 11213.0], [37.0, 11222.0], [37.1, 11255.0], [37.2, 11280.0], [37.3, 11286.0], [37.4, 11301.0], [37.5, 11323.0], [37.6, 11352.0], [37.7, 11384.0], [37.8, 11387.0], [37.9, 11401.0], [38.0, 11422.0], [38.1, 11441.0], [38.2, 11495.0], [38.3, 11508.0], [38.4, 11519.0], [38.5, 11543.0], [38.6, 11567.0], [38.7, 11582.0], [38.8, 11606.0], [38.9, 11628.0], [39.0, 11664.0], [39.1, 11694.0], [39.2, 11742.0], [39.3, 11760.0], [39.4, 11798.0], [39.5, 11840.0], [39.6, 11854.0], [39.7, 11897.0], [39.8, 11913.0], [39.9, 11925.0], [40.0, 11959.0], [40.1, 11970.0], [40.2, 11985.0], [40.3, 12030.0], [40.4, 12058.0], [40.5, 12083.0], [40.6, 12101.0], [40.7, 12135.0], [40.8, 12165.0], [40.9, 12196.0], [41.0, 12218.0], [41.1, 12292.0], [41.2, 12307.0], [41.3, 12309.0], [41.4, 12318.0], [41.5, 12325.0], [41.6, 12350.0], [41.7, 12354.0], [41.8, 12372.0], [41.9, 12374.0], [42.0, 12378.0], [42.1, 12391.0], [42.2, 12445.0], [42.3, 12474.0], [42.4, 12530.0], [42.5, 12558.0], [42.6, 12587.0], [42.7, 12600.0], [42.8, 12615.0], [42.9, 12649.0], [43.0, 12681.0], [43.1, 12698.0], [43.2, 12706.0], [43.3, 12712.0], [43.4, 12726.0], [43.5, 12755.0], [43.6, 12784.0], [43.7, 12814.0], [43.8, 12823.0], [43.9, 12839.0], [44.0, 12866.0], [44.1, 12871.0], [44.2, 12881.0], [44.3, 12911.0], [44.4, 12940.0], [44.5, 12958.0], [44.6, 12968.0], [44.7, 12978.0], [44.8, 12987.0], [44.9, 12994.0], [45.0, 12999.0], [45.1, 13022.0], [45.2, 13040.0], [45.3, 13065.0], [45.4, 13088.0], [45.5, 13134.0], [45.6, 13184.0], [45.7, 13224.0], [45.8, 13230.0], [45.9, 13254.0], [46.0, 13311.0], [46.1, 13325.0], [46.2, 13341.0], [46.3, 13404.0], [46.4, 13430.0], [46.5, 13459.0], [46.6, 13491.0], [46.7, 13511.0], [46.8, 13617.0], [46.9, 13650.0], [47.0, 13680.0], [47.1, 13694.0], [47.2, 13707.0], [47.3, 13731.0], [47.4, 13738.0], [47.5, 13748.0], [47.6, 13763.0], [47.7, 13770.0], [47.8, 13797.0], [47.9, 13822.0], [48.0, 13825.0], [48.1, 13831.0], [48.2, 13850.0], [48.3, 13853.0], [48.4, 13874.0], [48.5, 13878.0], [48.6, 13901.0], [48.7, 13942.0], [48.8, 13952.0], [48.9, 14016.0], [49.0, 14121.0], [49.1, 14158.0], [49.2, 14180.0], [49.3, 14204.0], [49.4, 14229.0], [49.5, 14247.0], [49.6, 14265.0], [49.7, 14295.0], [49.8, 14305.0], [49.9, 14325.0], [50.0, 14334.0], [50.1, 14462.0], [50.2, 14520.0], [50.3, 14551.0], [50.4, 14572.0], [50.5, 14586.0], [50.6, 14592.0], [50.7, 14629.0], [50.8, 14635.0], [50.9, 14671.0], [51.0, 14707.0], [51.1, 14739.0], [51.2, 14761.0], [51.3, 14784.0], [51.4, 14839.0], [51.5, 14886.0], [51.6, 14926.0], [51.7, 14967.0], [51.8, 14989.0], [51.9, 15010.0], [52.0, 15057.0], [52.1, 15127.0], [52.2, 15142.0], [52.3, 15167.0], [52.4, 15194.0], [52.5, 15276.0], [52.6, 15286.0], [52.7, 15294.0], [52.8, 15303.0], [52.9, 15317.0], [53.0, 15338.0], [53.1, 15339.0], [53.2, 15377.0], [53.3, 15381.0], [53.4, 15534.0], [53.5, 15558.0], [53.6, 15569.0], [53.7, 15571.0], [53.8, 15588.0], [53.9, 15605.0], [54.0, 15623.0], [54.1, 15630.0], [54.2, 15632.0], [54.3, 15651.0], [54.4, 15654.0], [54.5, 15656.0], [54.6, 15674.0], [54.7, 15682.0], [54.8, 15695.0], [54.9, 15708.0], [55.0, 15710.0], [55.1, 15719.0], [55.2, 15785.0], [55.3, 15792.0], [55.4, 15796.0], [55.5, 15818.0], [55.6, 15852.0], [55.7, 15917.0], [55.8, 15930.0], [55.9, 15968.0], [56.0, 15995.0], [56.1, 16003.0], [56.2, 16019.0], [56.3, 16025.0], [56.4, 16035.0], [56.5, 16042.0], [56.6, 16073.0], [56.7, 16090.0], [56.8, 16110.0], [56.9, 16143.0], [57.0, 16183.0], [57.1, 16188.0], [57.2, 16199.0], [57.3, 16225.0], [57.4, 16226.0], [57.5, 16243.0], [57.6, 16257.0], [57.7, 16258.0], [57.8, 16262.0], [57.9, 16287.0], [58.0, 16332.0], [58.1, 16357.0], [58.2, 16390.0], [58.3, 16423.0], [58.4, 16478.0], [58.5, 16501.0], [58.6, 16502.0], [58.7, 16507.0], [58.8, 16523.0], [58.9, 16525.0], [59.0, 16552.0], [59.1, 16556.0], [59.2, 16568.0], [59.3, 16571.0], [59.4, 16598.0], [59.5, 16638.0], [59.6, 16653.0], [59.7, 16661.0], [59.8, 16681.0], [59.9, 16683.0], [60.0, 16687.0], [60.1, 16704.0], [60.2, 16717.0], [60.3, 16723.0], [60.4, 16744.0], [60.5, 16762.0], [60.6, 16786.0], [60.7, 16809.0], [60.8, 16833.0], [60.9, 16902.0], [61.0, 16910.0], [61.1, 16927.0], [61.2, 16943.0], [61.3, 16961.0], [61.4, 16968.0], [61.5, 16974.0], [61.6, 16998.0], [61.7, 17000.0], [61.8, 17004.0], [61.9, 17008.0], [62.0, 17010.0], [62.1, 17022.0], [62.2, 17066.0], [62.3, 17115.0], [62.4, 17126.0], [62.5, 17168.0], [62.6, 17188.0], [62.7, 17321.0], [62.8, 17376.0], [62.9, 17398.0], [63.0, 17409.0], [63.1, 17430.0], [63.2, 17464.0], [63.3, 17480.0], [63.4, 17484.0], [63.5, 17515.0], [63.6, 17525.0], [63.7, 17534.0], [63.8, 17538.0], [63.9, 17554.0], [64.0, 17558.0], [64.1, 17568.0], [64.2, 17575.0], [64.3, 17579.0], [64.4, 17600.0], [64.5, 17618.0], [64.6, 17642.0], [64.7, 17653.0], [64.8, 17685.0], [64.9, 17709.0], [65.0, 17739.0], [65.1, 17754.0], [65.2, 17807.0], [65.3, 17839.0], [65.4, 17856.0], [65.5, 17867.0], [65.6, 17898.0], [65.7, 17906.0], [65.8, 17928.0], [65.9, 17932.0], [66.0, 17948.0], [66.1, 17972.0], [66.2, 17977.0], [66.3, 17996.0], [66.4, 18000.0], [66.5, 18020.0], [66.6, 18040.0], [66.7, 18053.0], [66.8, 18072.0], [66.9, 18079.0], [67.0, 18124.0], [67.1, 18222.0], [67.2, 18241.0], [67.3, 18271.0], [67.4, 18317.0], [67.5, 18349.0], [67.6, 18371.0], [67.7, 18402.0], [67.8, 18416.0], [67.9, 18450.0], [68.0, 18452.0], [68.1, 18476.0], [68.2, 18497.0], [68.3, 18510.0], [68.4, 18513.0], [68.5, 18531.0], [68.6, 18553.0], [68.7, 18571.0], [68.8, 18586.0], [68.9, 18588.0], [69.0, 18610.0], [69.1, 18644.0], [69.2, 18675.0], [69.3, 18701.0], [69.4, 18722.0], [69.5, 18733.0], [69.6, 18749.0], [69.7, 18785.0], [69.8, 18819.0], [69.9, 18828.0], [70.0, 18884.0], [70.1, 18898.0], [70.2, 18906.0], [70.3, 18917.0], [70.4, 18934.0], [70.5, 18960.0], [70.6, 18972.0], [70.7, 18986.0], [70.8, 18999.0], [70.9, 19031.0], [71.0, 19039.0], [71.1, 19046.0], [71.2, 19047.0], [71.3, 19053.0], [71.4, 19103.0], [71.5, 19119.0], [71.6, 19146.0], [71.7, 19189.0], [71.8, 19240.0], [71.9, 19282.0], [72.0, 19289.0], [72.1, 19302.0], [72.2, 19323.0], [72.3, 19357.0], [72.4, 19368.0], [72.5, 19434.0], [72.6, 19437.0], [72.7, 19477.0], [72.8, 19516.0], [72.9, 19534.0], [73.0, 19552.0], [73.1, 19579.0], [73.2, 19608.0], [73.3, 19644.0], [73.4, 19682.0], [73.5, 19755.0], [73.6, 19756.0], [73.7, 19764.0], [73.8, 19789.0], [73.9, 19793.0], [74.0, 19801.0], [74.1, 19802.0], [74.2, 19833.0], [74.3, 19845.0], [74.4, 19851.0], [74.5, 19853.0], [74.6, 19884.0], [74.7, 19906.0], [74.8, 19994.0], [74.9, 20022.0], [75.0, 20044.0], [75.1, 20117.0], [75.2, 20192.0], [75.3, 20222.0], [75.4, 20232.0], [75.5, 20242.0], [75.6, 20250.0], [75.7, 20261.0], [75.8, 20276.0], [75.9, 20283.0], [76.0, 20296.0], [76.1, 20301.0], [76.2, 20307.0], [76.3, 20318.0], [76.4, 20325.0], [76.5, 20358.0], [76.6, 20377.0], [76.7, 20390.0], [76.8, 20414.0], [76.9, 20433.0], [77.0, 20498.0], [77.1, 20586.0], [77.2, 20610.0], [77.3, 20618.0], [77.4, 20629.0], [77.5, 20647.0], [77.6, 20649.0], [77.7, 20671.0], [77.8, 20679.0], [77.9, 20697.0], [78.0, 20706.0], [78.1, 20715.0], [78.2, 20722.0], [78.3, 20759.0], [78.4, 20763.0], [78.5, 20772.0], [78.6, 20786.0], [78.7, 20790.0], [78.8, 20825.0], [78.9, 20848.0], [79.0, 20866.0], [79.1, 20869.0], [79.2, 20875.0], [79.3, 20886.0], [79.4, 20902.0], [79.5, 20908.0], [79.6, 20924.0], [79.7, 20955.0], [79.8, 21011.0], [79.9, 21025.0], [80.0, 21047.0], [80.1, 21053.0], [80.2, 21058.0], [80.3, 21072.0], [80.4, 21084.0], [80.5, 21104.0], [80.6, 21122.0], [80.7, 21128.0], [80.8, 21140.0], [80.9, 21143.0], [81.0, 21145.0], [81.1, 21147.0], [81.2, 21158.0], [81.3, 21161.0], [81.4, 21169.0], [81.5, 21188.0], [81.6, 21207.0], [81.7, 21225.0], [81.8, 21281.0], [81.9, 21317.0], [82.0, 21345.0], [82.1, 21371.0], [82.2, 21423.0], [82.3, 21431.0], [82.4, 21438.0], [82.5, 21501.0], [82.6, 21508.0], [82.7, 21517.0], [82.8, 21523.0], [82.9, 21541.0], [83.0, 21550.0], [83.1, 21556.0], [83.2, 21583.0], [83.3, 21588.0], [83.4, 21600.0], [83.5, 21608.0], [83.6, 21624.0], [83.7, 21629.0], [83.8, 21635.0], [83.9, 21645.0], [84.0, 21668.0], [84.1, 21683.0], [84.2, 21757.0], [84.3, 21790.0], [84.4, 21809.0], [84.5, 21861.0], [84.6, 21870.0], [84.7, 21939.0], [84.8, 21943.0], [84.9, 21951.0], [85.0, 21986.0], [85.1, 21992.0], [85.2, 22006.0], [85.3, 22054.0], [85.4, 22074.0], [85.5, 22074.0], [85.6, 22085.0], [85.7, 22087.0], [85.8, 22093.0], [85.9, 22121.0], [86.0, 22165.0], [86.1, 22170.0], [86.2, 22187.0], [86.3, 22197.0], [86.4, 22211.0], [86.5, 22225.0], [86.6, 22261.0], [86.7, 22281.0], [86.8, 22322.0], [86.9, 22351.0], [87.0, 22372.0], [87.1, 22383.0], [87.2, 22391.0], [87.3, 22443.0], [87.4, 22491.0], [87.5, 22498.0], [87.6, 22535.0], [87.7, 22536.0], [87.8, 22538.0], [87.9, 22549.0], [88.0, 22560.0], [88.1, 22564.0], [88.2, 22604.0], [88.3, 22617.0], [88.4, 22631.0], [88.5, 22653.0], [88.6, 22656.0], [88.7, 22661.0], [88.8, 22687.0], [88.9, 22695.0], [89.0, 22716.0], [89.1, 22731.0], [89.2, 22732.0], [89.3, 22749.0], [89.4, 22793.0], [89.5, 22809.0], [89.6, 22821.0], [89.7, 22848.0], [89.8, 22853.0], [89.9, 22867.0], [90.0, 22990.0], [90.1, 23026.0], [90.2, 23038.0], [90.3, 23048.0], [90.4, 23065.0], [90.5, 23077.0], [90.6, 23081.0], [90.7, 23091.0], [90.8, 23105.0], [90.9, 23119.0], [91.0, 23129.0], [91.1, 23155.0], [91.2, 23196.0], [91.3, 23198.0], [91.4, 23199.0], [91.5, 23199.0], [91.6, 23207.0], [91.7, 23216.0], [91.8, 23220.0], [91.9, 23231.0], [92.0, 23237.0], [92.1, 23241.0], [92.2, 23245.0], [92.3, 23250.0], [92.4, 23263.0], [92.5, 23286.0], [92.6, 23306.0], [92.7, 23338.0], [92.8, 23380.0], [92.9, 23448.0], [93.0, 23468.0], [93.1, 23487.0], [93.2, 23499.0], [93.3, 23517.0], [93.4, 23523.0], [93.5, 23526.0], [93.6, 23544.0], [93.7, 23562.0], [93.8, 23590.0], [93.9, 23621.0], [94.0, 23628.0], [94.1, 23642.0], [94.2, 23644.0], [94.3, 23663.0], [94.4, 23670.0], [94.5, 23673.0], [94.6, 23681.0], [94.7, 23697.0], [94.8, 23711.0], [94.9, 23717.0], [95.0, 23726.0], [95.1, 23728.0], [95.2, 23739.0], [95.3, 23751.0], [95.4, 23757.0], [95.5, 23799.0], [95.6, 23809.0], [95.7, 23815.0], [95.8, 23819.0], [95.9, 23828.0], [96.0, 23849.0], [96.1, 23854.0], [96.2, 23936.0], [96.3, 23963.0], [96.4, 23988.0], [96.5, 24057.0], [96.6, 24064.0], [96.7, 24081.0], [96.8, 24102.0], [96.9, 24126.0], [97.0, 24148.0], [97.1, 24151.0], [97.2, 24187.0], [97.3, 24228.0], [97.4, 24250.0], [97.5, 24259.0], [97.6, 24338.0], [97.7, 24397.0], [97.8, 24420.0], [97.9, 24428.0], [98.0, 24438.0], [98.1, 24472.0], [98.2, 24497.0], [98.3, 24504.0], [98.4, 24564.0], [98.5, 24620.0], [98.6, 24626.0], [98.7, 24657.0], [98.8, 24670.0], [98.9, 24690.0], [99.0, 24691.0], [99.1, 24708.0], [99.2, 24741.0], [99.3, 24810.0], [99.4, 24852.0], [99.5, 24869.0], [99.6, 24892.0], [99.7, 24928.0], [99.8, 24936.0], [99.9, 25038.0], [100.0, 25246.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 22.0, "series": [{"data": [[500.0, 1.0], [600.0, 1.0], [1100.0, 3.0], [1200.0, 6.0], [1300.0, 12.0], [1400.0, 12.0], [1500.0, 15.0], [1600.0, 22.0], [1700.0, 20.0], [1800.0, 12.0], [1900.0, 6.0], [2000.0, 3.0], [2100.0, 1.0], [2300.0, 3.0], [2400.0, 4.0], [2500.0, 6.0], [2600.0, 12.0], [2700.0, 2.0], [2800.0, 3.0], [2900.0, 3.0], [3100.0, 1.0], [3200.0, 4.0], [3300.0, 7.0], [3400.0, 11.0], [3500.0, 11.0], [3600.0, 10.0], [3700.0, 8.0], [3800.0, 5.0], [3900.0, 6.0], [4000.0, 2.0], [4100.0, 7.0], [4200.0, 11.0], [4300.0, 7.0], [4400.0, 5.0], [4500.0, 7.0], [4600.0, 5.0], [4700.0, 9.0], [4800.0, 3.0], [4900.0, 7.0], [5000.0, 5.0], [5100.0, 5.0], [5300.0, 14.0], [5200.0, 10.0], [5400.0, 3.0], [5500.0, 8.0], [5600.0, 4.0], [5800.0, 6.0], [5700.0, 5.0], [5900.0, 3.0], [6100.0, 16.0], [6000.0, 5.0], [6200.0, 10.0], [6300.0, 7.0], [6400.0, 5.0], [6500.0, 9.0], [6600.0, 3.0], [6700.0, 7.0], [6800.0, 8.0], [6900.0, 4.0], [7000.0, 5.0], [7100.0, 3.0], [7200.0, 6.0], [7300.0, 6.0], [7400.0, 7.0], [7500.0, 5.0], [7600.0, 12.0], [7700.0, 8.0], [7800.0, 9.0], [7900.0, 7.0], [8000.0, 5.0], [8100.0, 8.0], [8200.0, 4.0], [8300.0, 11.0], [8400.0, 7.0], [8600.0, 9.0], [8700.0, 10.0], [8500.0, 9.0], [8800.0, 13.0], [8900.0, 8.0], [9100.0, 8.0], [9000.0, 11.0], [9200.0, 6.0], [9400.0, 8.0], [9300.0, 9.0], [9500.0, 10.0], [9600.0, 10.0], [9700.0, 6.0], [9900.0, 9.0], [9800.0, 6.0], [10000.0, 11.0], [10100.0, 6.0], [10200.0, 7.0], [10300.0, 8.0], [10400.0, 9.0], [10500.0, 7.0], [10600.0, 7.0], [10700.0, 12.0], [10800.0, 12.0], [10900.0, 8.0], [11000.0, 2.0], [11100.0, 5.0], [11200.0, 9.0], [11300.0, 11.0], [11400.0, 7.0], [11500.0, 11.0], [11600.0, 8.0], [11700.0, 5.0], [11800.0, 6.0], [11900.0, 11.0], [12100.0, 7.0], [12200.0, 4.0], [12000.0, 6.0], [12300.0, 20.0], [12400.0, 5.0], [12500.0, 6.0], [12600.0, 9.0], [12700.0, 11.0], [12800.0, 12.0], [12900.0, 15.0], [13000.0, 8.0], [13100.0, 4.0], [13200.0, 7.0], [13300.0, 6.0], [13400.0, 8.0], [13500.0, 2.0], [13600.0, 7.0], [13700.0, 14.0], [13800.0, 15.0], [13900.0, 6.0], [14000.0, 2.0], [14200.0, 9.0], [14100.0, 6.0], [14300.0, 8.0], [14500.0, 11.0], [14600.0, 6.0], [14700.0, 7.0], [14400.0, 1.0], [14800.0, 4.0], [14900.0, 7.0], [15000.0, 3.0], [15100.0, 9.0], [15200.0, 6.0], [15300.0, 11.0], [15500.0, 10.0], [15600.0, 21.0], [15700.0, 12.0], [15800.0, 3.0], [15900.0, 8.0], [16000.0, 15.0], [16200.0, 14.0], [16100.0, 9.0], [16300.0, 6.0], [16600.0, 13.0], [17200.0, 1.0], [16400.0, 5.0], [16800.0, 5.0], [17000.0, 12.0], [17400.0, 10.0], [17600.0, 10.0], [17800.0, 9.0], [18000.0, 12.0], [18400.0, 11.0], [18200.0, 6.0], [18600.0, 6.0], [19200.0, 7.0], [19000.0, 11.0], [18800.0, 9.0], [19400.0, 6.0], [19600.0, 5.0], [19800.0, 15.0], [20000.0, 4.0], [20200.0, 17.0], [20400.0, 6.0], [20600.0, 17.0], [20800.0, 12.0], [21000.0, 14.0], [21200.0, 6.0], [21400.0, 6.0], [21800.0, 6.0], [21600.0, 15.0], [22000.0, 14.0], [22200.0, 8.0], [22400.0, 5.0], [22600.0, 15.0], [23000.0, 15.0], [22800.0, 10.0], [23200.0, 21.0], [23400.0, 7.0], [23800.0, 12.0], [23600.0, 18.0], [24200.0, 5.0], [24000.0, 7.0], [24400.0, 10.0], [24800.0, 8.0], [24600.0, 12.0], [25200.0, 1.0], [25000.0, 2.0], [17300.0, 5.0], [16500.0, 19.0], [16700.0, 11.0], [16900.0, 16.0], [17100.0, 7.0], [17500.0, 19.0], [17900.0, 15.0], [17700.0, 6.0], [18100.0, 1.0], [18300.0, 7.0], [19300.0, 7.0], [18500.0, 15.0], [18700.0, 9.0], [18900.0, 13.0], [19100.0, 7.0], [19700.0, 10.0], [19500.0, 9.0], [20100.0, 4.0], [19900.0, 4.0], [20300.0, 13.0], [20700.0, 15.0], [20900.0, 9.0], [20500.0, 2.0], [21100.0, 21.0], [21500.0, 18.0], [21300.0, 7.0], [21700.0, 4.0], [22100.0, 9.0], [21900.0, 11.0], [22500.0, 13.0], [22300.0, 11.0], [22700.0, 11.0], [23100.0, 15.0], [22900.0, 1.0], [23500.0, 12.0], [23300.0, 6.0], [23700.0, 16.0], [24100.0, 10.0], [23900.0, 6.0], [24300.0, 4.0], [24500.0, 5.0], [24700.0, 4.0], [25100.0, 1.0], [24900.0, 3.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1967.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 35.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1967.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.6304622E12, "maxY": 250.83399999999983, "series": [{"data": [[1.6304622E12, 1.5]], "isOverall": false, "label": "addDemand", "isController": false}, {"data": [[1.6304622E12, 250.83399999999983]], "isOverall": false, "label": "getDemandByIde", "isController": false}, {"data": [[1.6304622E12, 1.5]], "isOverall": false, "label": "editDemand", "isController": false}, {"data": [[1.6304622E12, 250.60600000000008]], "isOverall": false, "label": "listOnesDemandsByPage", "isController": false}, {"data": [[1.6304622E12, 250.65799999999993]], "isOverall": false, "label": "removeDemand", "isController": false}, {"data": [[1.6304622E12, 250.53600000000006]], "isOverall": false, "label": "listAllDemandsByPage", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6304622E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 513.0, "minX": 1.0, "maxY": 25246.0, "series": [{"data": [[2.0, 24929.0], [3.0, 24928.0], [4.0, 24936.0], [5.0, 24898.0], [6.0, 24892.0], [7.0, 25038.0], [8.0, 24885.0], [9.0, 24668.0], [12.0, 24737.0], [13.0, 24649.0], [14.0, 24735.0], [15.0, 24708.0], [16.0, 24624.0], [18.0, 24690.0], [19.0, 24694.0], [20.0, 24626.0], [21.0, 25144.0], [22.0, 24676.0], [23.0, 25246.0], [24.0, 24620.0], [25.0, 24869.0], [26.0, 24759.0], [27.0, 24852.0], [28.0, 24691.0], [29.0, 24594.0], [30.0, 24489.0], [31.0, 24500.0], [33.0, 24428.0], [32.0, 24436.0], [35.0, 24515.0], [34.0, 24670.0], [37.0, 24338.0], [36.0, 24497.0], [39.0, 24308.0], [38.0, 24427.0], [41.0, 24228.0], [40.0, 24472.0], [43.0, 24450.0], [42.0, 24504.0], [45.0, 24641.0], [47.0, 24245.0], [46.0, 24438.0], [49.0, 24223.0], [51.0, 24250.0], [50.0, 24193.0], [53.0, 24397.0], [52.0, 24165.0], [55.0, 24609.5], [57.0, 24081.0], [56.0, 24148.0], [59.0, 24149.0], [58.0, 24073.0], [61.0, 24064.0], [60.0, 24126.0], [62.0, 24126.0], [67.0, 23984.5], [65.0, 24120.0], [64.0, 24058.0], [71.0, 23988.0], [70.0, 23968.0], [69.0, 24102.0], [68.0, 24097.0], [75.0, 23849.0], [74.0, 23851.0], [73.0, 23963.0], [72.0, 24564.0], [79.0, 23877.0], [77.0, 23844.0], [76.0, 23828.0], [83.0, 23752.0], [82.0, 24341.0], [81.0, 23757.0], [80.0, 23686.0], [87.0, 23670.0], [86.0, 23739.0], [85.0, 23671.0], [84.0, 23936.0], [91.0, 23673.0], [90.0, 23728.0], [89.0, 23822.0], [88.0, 23681.0], [95.0, 23725.0], [94.0, 23726.0], [93.0, 23740.0], [92.0, 23733.0], [99.0, 23717.0], [98.0, 23663.0], [97.0, 23815.0], [96.0, 23819.0], [103.0, 23810.0], [102.0, 23666.666666666668], [107.0, 23646.0], [106.0, 23751.0], [105.0, 23640.0], [104.0, 23809.0], [110.0, 23644.0], [109.0, 23931.0], [115.0, 23621.0], [114.0, 23799.0], [113.0, 23544.0], [112.0, 23627.0], [119.0, 23777.0], [118.0, 23805.0], [117.0, 23548.0], [116.0, 24252.0], [123.0, 23523.0], [122.0, 23526.0], [121.0, 23517.0], [120.0, 23697.0], [127.0, 23487.0], [126.0, 23508.0], [125.0, 23590.0], [124.0, 23669.0], [135.0, 23673.0], [134.0, 23572.0], [132.0, 23454.0], [131.0, 23468.0], [130.0, 23485.0], [129.0, 23728.0], [128.0, 23491.0], [143.0, 23854.0], [142.0, 23315.0], [141.0, 23238.0], [140.0, 23395.0], [139.0, 23237.0], [138.0, 23564.0], [137.0, 23544.0], [136.0, 23517.0], [151.0, 23290.0], [150.0, 23119.0], [149.0, 23142.0], [148.0, 23197.0], [147.0, 23380.0], [146.0, 23306.0], [145.0, 23282.0], [144.0, 23448.0], [158.0, 23155.0], [157.0, 23284.5], [155.0, 23243.0], [154.0, 23091.0], [153.0, 23097.0], [152.0, 23199.0], [167.0, 23211.0], [166.0, 23185.0], [165.0, 23105.0], [164.0, 23220.0], [163.0, 23216.0], [162.0, 23263.0], [161.0, 23710.0], [160.0, 23101.0], [175.0, 23086.0], [174.0, 23199.0], [173.0, 23116.0], [172.0, 23199.0], [171.0, 23129.0], [170.0, 23234.0], [169.0, 23241.0], [168.0, 23338.0], [181.0, 23199.0], [180.0, 23068.0], [179.0, 23231.0], [178.0, 23207.0], [177.0, 23250.0], [176.0, 23286.0], [191.0, 23124.5], [189.0, 23202.0], [188.0, 23043.0], [187.0, 23146.5], [185.0, 23056.0], [184.0, 23134.0], [199.0, 22821.0], [198.0, 23027.0], [196.0, 23187.5], [194.0, 23562.0], [193.0, 23198.0], [192.0, 23026.0], [207.0, 22852.0], [206.0, 22732.0], [205.0, 22824.0], [204.0, 22990.0], [203.0, 22848.0], [202.0, 22749.0], [201.0, 22854.0], [200.0, 22867.0], [215.0, 22608.0], [214.0, 22853.0], [213.0, 22687.0], [212.0, 22716.0], [211.0, 22794.0], [210.0, 22631.0], [209.0, 22731.0], [208.0, 22769.0], [222.0, 22563.0], [221.0, 22748.0], [220.0, 23260.0], [219.0, 22654.0], [218.0, 22695.0], [217.0, 22661.0], [216.0, 22709.0], [231.0, 22865.0], [229.0, 22668.666666666668], [227.0, 22705.0], [226.0, 22803.0], [239.0, 22578.0], [238.0, 22732.0], [237.0, 22564.0], [236.0, 22686.0], [235.0, 22617.0], [234.0, 22604.0], [233.0, 22538.0], [232.0, 22630.0], [247.0, 22496.0], [246.0, 22536.0], [245.0, 22653.0], [244.0, 23065.0], [243.0, 22498.0], [242.0, 22550.0], [241.0, 22656.0], [255.0, 22491.0], [254.0, 22197.0], [253.0, 22322.0], [252.0, 22351.0], [251.0, 22281.0], [250.0, 22443.0], [249.0, 22536.0], [248.0, 22392.0], [270.0, 22074.0], [271.0, 22261.0], [269.0, 22087.0], [268.0, 22085.0], [267.0, 22187.0], [266.0, 22083.0], [265.0, 22391.0], [264.0, 22228.0], [263.0, 22202.0], [256.0, 22333.0], [259.0, 22171.0], [258.0, 22380.0], [262.0, 22225.0], [261.0, 22170.0], [260.0, 22308.0], [285.0, 21992.0], [286.0, 21968.0], [284.0, 21992.0], [275.0, 22193.0], [274.0, 22060.0], [273.0, 22211.0], [272.0, 22093.0], [283.0, 22267.0], [282.0, 22142.5], [280.0, 22488.0], [279.0, 22169.0], [278.0, 22319.0], [276.0, 22054.0], [302.0, 21870.0], [303.0, 22006.0], [301.0, 22535.0], [300.0, 21917.0], [299.0, 21939.0], [298.0, 22382.0], [297.0, 22074.0], [296.0, 22368.0], [295.0, 22121.0], [289.0, 22026.0], [288.0, 22356.5], [291.0, 21951.0], [290.0, 21944.0], [294.0, 22099.0], [293.0, 21940.0], [292.0, 22383.0], [318.0, 21588.0], [319.0, 21660.0], [317.0, 21668.0], [316.0, 21765.0], [315.0, 21986.0], [314.0, 21600.0], [313.0, 21621.0], [312.0, 21766.8], [307.0, 21632.0], [306.0, 22538.0], [305.0, 21836.0], [304.0, 21992.0], [334.0, 21586.0], [335.0, 21438.0], [333.0, 21640.0], [332.0, 21683.0], [331.0, 21502.0], [330.0, 21595.0], [329.0, 21626.0], [328.0, 22132.0], [327.0, 21522.0], [320.0, 21943.0], [322.0, 21550.0], [321.0, 21509.0], [326.0, 21591.5], [324.0, 21802.0], [350.0, 21757.0], [351.0, 21549.0], [349.0, 21541.0], [348.0, 21556.0], [347.0, 21423.0], [346.0, 21591.5], [344.0, 21555.0], [343.0, 21629.0], [337.0, 21635.0], [336.0, 21608.0], [339.0, 21645.0], [338.0, 21528.0], [342.0, 21501.0], [341.0, 21431.0], [340.0, 21437.0], [366.0, 21355.0], [367.0, 21156.0], [365.0, 21281.0], [364.0, 21161.0], [363.0, 21280.0], [362.0, 21342.0], [361.0, 21317.0], [360.0, 21861.0], [359.0, 21380.0], [353.0, 21523.0], [352.0, 21809.0], [355.0, 21345.0], [354.0, 21371.0], [358.0, 21168.0], [357.0, 21185.0], [356.0, 21311.0], [382.0, 21142.0], [383.0, 21128.0], [381.0, 21040.0], [380.0, 21188.0], [379.0, 21158.0], [378.0, 21169.0], [377.0, 21058.0], [376.0, 21077.0], [374.0, 21144.0], [369.0, 21145.0], [368.0, 21140.0], [371.0, 21208.0], [370.0, 21075.0], [373.0, 21425.0], [372.0, 21058.0], [398.0, 21114.0], [399.0, 21053.0], [397.0, 20875.0], [396.0, 21136.0], [395.0, 21094.0], [394.0, 21158.0], [393.0, 21145.0], [392.0, 21047.0], [391.0, 21072.0], [384.0, 21025.0], [387.0, 21352.5], [385.0, 21143.0], [390.0, 21496.0], [389.0, 21011.0], [388.0, 21128.0], [414.0, 21147.0], [415.0, 20790.0], [413.0, 20850.0], [402.0, 21015.0], [401.0, 21207.0], [400.0, 20955.0], [410.0, 20762.0], [409.0, 20787.0], [408.0, 20825.0], [407.0, 20903.0], [406.0, 20872.0], [405.0, 20886.0], [430.0, 20715.0], [431.0, 20707.0], [429.0, 20653.0], [428.0, 20766.0], [427.0, 20759.0], [426.0, 20671.0], [425.0, 21054.0], [424.0, 20867.0], [423.0, 20847.0], [417.0, 21225.0], [416.0, 20869.0], [419.0, 20716.0], [418.0, 20848.0], [422.0, 20741.0], [421.0, 20763.0], [420.0, 20772.0], [446.0, 20635.0], [447.0, 20648.0], [445.0, 20586.0], [444.0, 20610.0], [443.0, 20649.0], [442.0, 20950.0], [441.0, 20616.0], [440.0, 20673.0], [439.0, 20706.0], [433.0, 21201.0], [432.0, 20683.0], [435.0, 20618.0], [434.0, 20699.0], [438.0, 20679.0], [437.0, 20722.0], [436.0, 20625.0], [462.0, 20880.0], [463.0, 20320.0], [461.0, 20647.0], [460.0, 20431.0], [459.0, 20414.0], [458.0, 20969.0], [457.0, 20377.0], [456.0, 20373.0], [455.0, 20524.0], [449.0, 20924.0], [448.0, 20629.0], [451.0, 21084.0], [450.0, 20902.0], [454.0, 20433.0], [453.0, 20900.0], [452.0, 20483.0], [478.0, 20261.0], [479.0, 20296.0], [477.0, 20268.0], [476.0, 20609.0], [475.0, 20250.0], [474.0, 20232.0], [473.0, 20315.0], [472.0, 20335.0], [471.0, 20299.0], [465.0, 20303.0], [464.0, 20283.0], [467.0, 20301.0], [466.0, 20403.0], [470.0, 20318.0], [469.0, 20307.0], [468.0, 20866.0], [494.0, 20192.0], [495.0, 20390.0], [493.0, 20254.0], [492.0, 20242.0], [491.0, 20209.0], [490.0, 20278.0], [489.0, 20225.0], [488.0, 20697.0], [487.0, 20773.0], [481.0, 20381.0], [480.0, 20358.0], [483.0, 20233.0], [482.0, 20498.0], [486.0, 20262.5], [484.0, 20294.0], [510.0, 19845.0], [511.0, 19719.0], [509.0, 20117.0], [508.0, 19886.0], [507.0, 19866.0], [506.0, 19916.0], [505.0, 20325.0], [504.0, 19843.0], [503.0, 19847.0], [497.0, 20024.0], [496.0, 20222.0], [499.0, 19999.0], [498.0, 20062.0], [502.0, 19884.0], [501.0, 19906.0], [500.0, 19994.0], [540.0, 19509.0], [528.0, 19860.6], [530.0, 19764.0], [532.0, 19552.0], [542.0, 19516.0], [538.0, 19800.0], [536.0, 19537.0], [512.0, 19853.0], [514.0, 19802.0], [516.0, 19801.0], [518.0, 19755.0], [524.0, 20044.0], [534.0, 19579.0], [572.0, 19031.0], [560.0, 19323.0], [562.0, 19189.0], [564.0, 19477.0], [574.0, 18933.0], [570.0, 18954.0], [568.0, 19434.0], [544.0, 19465.0], [546.0, 19240.0], [548.0, 19793.0], [550.0, 19824.0], [558.0, 19172.0], [556.0, 19279.0], [554.0, 19332.0], [552.0, 19782.0], [566.0, 19053.0], [604.0, 18774.0], [592.0, 19434.0], [594.0, 18960.0], [596.0, 18965.0], [606.0, 18586.0], [602.0, 18820.0], [600.0, 18819.0], [576.0, 18917.0], [578.0, 19103.0], [580.0, 18906.0], [582.0, 18977.0], [590.0, 18884.0], [588.0, 18986.0], [586.0, 18934.0], [584.0, 19437.0], [598.0, 18744.0], [636.0, 18349.0], [624.0, 18733.0], [626.0, 18403.0], [628.0, 18513.0], [634.0, 18416.0], [632.0, 18557.0], [614.0, 18450.0], [612.0, 18610.0], [610.0, 18990.0], [608.0, 18701.0], [622.0, 18588.0], [620.0, 19006.0], [616.0, 18425.0], [630.0, 18714.0], [668.0, 17930.0], [656.0, 18081.0], [658.0, 18531.0], [660.0, 18222.0], [670.0, 18538.0], [666.0, 18073.0], [664.0, 17997.0], [640.0, 18476.0], [642.0, 18317.0], [644.0, 18362.0], [646.0, 18675.0], [654.0, 18124.0], [652.0, 18649.0], [650.0, 18271.0], [648.0, 18315.0], [662.0, 17996.0], [700.0, 18021.0], [688.0, 17898.0], [690.0, 17921.0], [692.0, 17685.0], [702.0, 17536.0], [698.0, 17556.0], [696.0, 17653.0], [672.0, 17897.0], [674.0, 17958.0], [676.0, 17865.0], [678.0, 17935.0], [686.0, 17902.0], [684.0, 18020.0], [682.0, 17972.0], [680.0, 18479.0], [694.0, 17575.0], [732.0, 17754.0], [720.0, 17588.0], [722.0, 17618.0], [724.0, 17390.0], [734.0, 17579.0], [730.0, 17571.0], [728.0, 17473.0], [704.0, 17671.0], [706.0, 17739.0], [708.0, 17576.0], [710.0, 17709.0], [718.0, 17607.0], [716.0, 17516.0], [714.0, 17430.0], [712.0, 17484.0], [726.0, 17484.0], [764.0, 16999.0], [752.0, 17464.0], [754.0, 17000.0], [756.0, 16987.0], [766.0, 17008.0], [762.0, 17020.0], [760.0, 17455.0], [736.0, 17948.0], [738.0, 17376.0], [740.0, 17502.0], [742.0, 17538.0], [750.0, 17115.0], [748.0, 17009.0], [746.0, 17005.0], [744.0, 17022.0], [758.0, 16943.0], [796.0, 16699.0], [784.0, 16731.0], [786.0, 16681.0], [788.0, 16661.0], [794.0, 16717.0], [792.0, 16723.0], [774.0, 17409.0], [772.0, 16968.0], [770.0, 17126.0], [782.0, 17180.0], [780.0, 16940.0], [778.0, 17021.0], [776.0, 16973.0], [790.0, 16536.0], [828.0, 16833.0], [816.0, 16556.0], [818.0, 16561.0], [820.0, 16507.0], [830.0, 16366.0], [826.0, 16523.0], [824.0, 16478.0], [804.0, 16681.0], [806.0, 16332.0], [814.0, 16910.0], [812.0, 16746.0], [810.0, 16572.0], [808.0, 16442.0], [822.0, 16502.0], [860.0, 16570.0], [848.0, 16670.0], [850.0, 16162.0], [852.0, 16143.0], [862.0, 16110.0], [858.0, 16092.0], [856.0, 16188.0], [836.0, 16310.0], [838.0, 16552.0], [846.0, 16685.0], [844.0, 16247.0], [842.0, 16525.0], [840.0, 16243.0], [854.0, 16226.0], [892.0, 15708.0], [894.0, 15680.0], [882.0, 15674.0], [884.0, 16003.0], [888.0, 15917.0], [870.0, 16001.0], [868.0, 16025.0], [866.0, 16390.0], [864.0, 16090.0], [878.0, 16085.0], [876.0, 16258.0], [874.0, 16219.0], [872.0, 16131.0], [886.0, 15682.0], [924.0, 15796.0], [912.0, 15940.0], [914.0, 15604.0], [916.0, 15560.0], [926.0, 15825.0], [922.0, 15852.0], [920.0, 15534.0], [896.0, 15656.0], [898.0, 15631.0], [900.0, 15650.0], [902.0, 15630.0], [910.0, 16035.0], [908.0, 15629.0], [906.0, 16053.0], [904.0, 15623.0], [956.0, 15294.0], [944.0, 15719.0], [946.0, 15167.0], [948.0, 15569.0], [958.0, 14967.0], [954.0, 15127.0], [952.0, 15605.0], [928.0, 15694.0], [930.0, 15339.0], [934.0, 15498.0], [932.0, 15338.0], [942.0, 15558.0], [940.0, 15381.0], [938.0, 15276.0], [936.0, 15316.0], [950.0, 15177.0], [988.0, 14355.0], [976.0, 15017.0], [978.0, 14886.0], [980.0, 14989.0], [990.0, 14326.0], [986.0, 14462.0], [984.0, 14520.0], [960.0, 15299.0], [962.0, 14771.0], [964.0, 14784.0], [966.0, 15194.0], [974.0, 14671.0], [972.0, 14761.0], [970.0, 15010.0], [968.0, 15100.0], [982.0, 14839.0], [1020.0, 13931.0], [1008.0, 14322.0], [1010.0, 14229.0], [1012.0, 14194.0], [1022.0, 13992.0], [1018.0, 14516.0], [1016.0, 14168.0], [992.0, 14629.0], [994.0, 14592.0], [996.0, 14587.0], [998.0, 14707.0], [1006.0, 14247.0], [1004.0, 14253.0], [1002.0, 14295.0], [1000.0, 14334.0], [1014.0, 14594.0], [1080.0, 13311.0], [1056.0, 13496.0], [1060.0, 13823.0], [1064.0, 13423.0], [1084.0, 13144.0], [1076.0, 13631.0], [1072.0, 13650.0], [1024.0, 13878.0], [1028.0, 13881.0], [1032.0, 14158.0], [1036.0, 13763.0], [1052.0, 13757.0], [1048.0, 13617.0], [1044.0, 13694.0], [1040.0, 13731.0], [1068.0, 13738.0], [1144.0, 12373.0], [1140.0, 12836.0], [1148.0, 12377.0], [1120.0, 12988.0], [1124.0, 12978.0], [1128.0, 12999.0], [1132.0, 12588.0], [1136.0, 12871.0], [1088.0, 13086.0], [1092.0, 13244.0], [1096.0, 12968.0], [1100.0, 12969.0], [1116.0, 12994.0], [1112.0, 13022.0], [1108.0, 12839.0], [1104.0, 12866.0], [1208.0, 11842.0], [1204.0, 11946.0], [1212.0, 11567.0], [1184.0, 12354.0], [1188.0, 12030.0], [1192.0, 12053.0], [1196.0, 12253.0], [1200.0, 12132.0], [1152.0, 12600.0], [1156.0, 12325.0], [1160.0, 12702.0], [1164.0, 12615.0], [1176.0, 12310.0], [1172.0, 12101.0], [1168.0, 12445.0], [1272.0, 10963.0], [1268.0, 11283.0], [1276.0, 10967.0], [1248.0, 11502.0], [1252.0, 11158.0], [1256.0, 11384.0], [1260.0, 11253.0], [1264.0, 11213.0], [1216.0, 11664.0], [1224.0, 11760.0], [1228.0, 11690.0], [1244.0, 11422.0], [1240.0, 11164.0], [1236.0, 11280.0], [1232.0, 11742.0], [1340.0, 10010.0], [1316.0, 10611.0], [1320.0, 10447.0], [1324.0, 10507.333333333334], [1328.0, 10256.0], [1292.0, 10812.0], [1288.0, 10720.0], [1284.0, 10906.0], [1280.0, 10670.0], [1300.0, 10517.0], [1400.0, 9615.0], [1384.0, 9598.0], [1388.0, 9642.0], [1404.0, 9199.0], [1396.0, 9578.0], [1392.0, 9624.0], [1348.0, 9826.0], [1372.0, 10011.0], [1368.0, 9681.0], [1364.0, 10038.0], [1360.0, 9995.0], [1464.0, 8920.0], [1444.0, 8887.0], [1448.0, 8980.0], [1452.0, 8840.0], [1460.0, 8946.0], [1456.0, 8646.0], [1408.0, 9458.5], [1420.0, 9423.0], [1412.0, 9224.0], [1424.0, 9322.5], [1528.0, 7988.0], [1524.0, 8051.0], [1532.0, 7804.0], [1508.0, 8393.0], [1512.0, 8300.0], [1516.0, 8165.0], [1520.0, 8162.0], [1472.0, 8830.0], [1476.0, 8846.0], [1480.0, 8465.0], [1500.0, 8446.0], [1492.0, 8552.4], [1592.0, 7222.0], [1588.0, 7138.0], [1596.0, 6845.0], [1568.0, 7527.5], [1572.0, 7532.0], [1576.0, 7410.5], [1580.0, 7333.0], [1584.0, 7365.0], [1540.0, 7715.0], [1544.0, 7772.0], [1548.0, 7679.0], [1564.0, 7680.0], [1560.0, 7755.0], [1556.0, 7642.0], [1552.0, 7687.0], [1656.0, 6159.0], [1660.0, 6101.0], [1632.0, 6249.0], [1636.0, 6352.0], [1644.0, 6325.0], [1652.0, 6194.0], [1648.0, 6413.0], [1612.0, 6927.0], [1608.0, 6756.0], [1604.0, 6692.0], [1600.0, 6778.0], [1628.0, 6437.0], [1624.0, 6508.0], [1620.0, 6400.0], [1616.0, 6760.0], [1720.0, 5025.0], [1716.0, 5307.0], [1724.0, 5012.0], [1696.0, 5499.0], [1700.0, 5508.0], [1704.0, 5527.0], [1708.0, 5339.0], [1712.0, 5309.0], [1664.0, 6212.0], [1668.0, 5997.0], [1672.0, 5859.0], [1676.0, 5831.0], [1692.0, 5319.0], [1688.0, 5550.0], [1684.0, 5825.0], [1680.0, 5550.0], [1784.0, 4282.0], [1780.0, 4274.0], [1788.0, 4272.0], [1760.0, 4765.0], [1764.0, 4327.0], [1768.0, 4581.0], [1772.0, 4283.0], [1776.0, 4251.0], [1728.0, 5008.0], [1732.0, 5027.0], [1736.0, 4921.0], [1740.0, 4651.0], [1756.0, 4765.0], [1752.0, 4725.0], [1748.0, 4614.0], [1744.0, 4548.0], [1848.0, 3303.0], [1844.0, 3458.0], [1852.0, 3437.0], [1824.0, 3516.0], [1828.0, 3610.0], [1832.0, 3675.0], [1836.0, 3412.0], [1840.0, 3510.0], [1792.0, 3980.0], [1796.0, 3932.0], [1800.0, 3833.0], [1804.0, 3733.0], [1820.0, 3559.0], [1816.0, 3846.0], [1812.0, 3605.0], [1808.0, 3861.0], [1912.0, 1718.0], [1908.0, 1905.6666666666667], [1916.0, 1672.0], [1888.0, 2390.0], [1892.0, 2030.0], [1896.0, 1957.0], [1900.0, 1812.0], [1904.0, 1903.0], [1856.0, 3240.0], [1860.0, 2696.0], [1864.0, 2852.0], [1868.0, 2562.0], [1884.0, 2616.0], [1880.0, 2563.0], [1876.0, 2666.0], [1872.0, 2745.0], [1920.0, 1884.0], [1924.0, 1884.0], [1948.0, 1628.0], [1932.0, 1618.8], [1940.0, 1726.5], [2004.0, 696.0], [1992.0, 1324.5], [1077.0, 13680.0], [1085.0, 13317.0], [1057.0, 13448.0], [1061.0, 13459.0], [1065.0, 13690.0], [1073.0, 13707.0], [1037.0, 13738.0], [1033.0, 13822.0], [1029.0, 14265.0], [1025.0, 13952.0], [1053.0, 13491.0], [1049.0, 13825.0], [1045.0, 14016.0], [1041.0, 13836.0], [1069.0, 13770.0], [1145.0, 12799.0], [1149.0, 12681.0], [1121.0, 12755.0], [1125.0, 12630.0], [1129.0, 13040.0], [1133.0, 12962.0], [1141.0, 12814.0], [1137.0, 12940.0], [1093.0, 12985.0], [1097.0, 13325.0], [1101.0, 12871.0], [1117.0, 12815.0], [1113.0, 12731.0], [1109.0, 13215.0], [1105.0, 13277.0], [1209.0, 11906.0], [1213.0, 11582.0], [1185.0, 12354.0], [1189.0, 12083.0], [1193.0, 12165.0], [1197.0, 12168.0], [1205.0, 11986.0], [1201.0, 11802.0], [1153.0, 12587.0], [1157.0, 12307.0], [1161.0, 12706.0], [1165.0, 12676.0], [1181.0, 12305.0], [1177.0, 12372.0], [1173.0, 12076.0], [1169.0, 12536.0], [1273.0, 10983.0], [1277.0, 10666.0], [1249.0, 11430.0], [1253.0, 11386.0], [1257.0, 11330.0], [1261.0, 11304.0], [1269.0, 11259.0], [1265.0, 11222.0], [1217.0, 11798.0], [1221.0, 11649.5], [1225.0, 11854.0], [1229.0, 11371.0], [1245.0, 11519.0], [1241.0, 11569.0], [1237.0, 11174.0], [1233.0, 11300.0], [1333.0, 10246.0], [1337.0, 10290.75], [1313.0, 10769.666666666666], [1317.0, 10540.0], [1321.0, 10586.0], [1325.0, 10361.0], [1329.0, 10553.0], [1289.0, 10753.0], [1285.0, 10693.0], [1281.0, 10992.0], [1305.0, 10648.0], [1397.0, 9664.0], [1377.0, 9850.0], [1381.0, 9856.0], [1385.0, 9740.0], [1389.0, 9342.0], [1405.0, 9185.0], [1393.0, 9561.0], [1357.0, 10056.333333333334], [1349.0, 9977.0], [1345.0, 10232.0], [1373.0, 9702.0], [1369.0, 9931.0], [1365.0, 9950.0], [1361.0, 9892.0], [1469.0, 8504.5], [1441.0, 8996.0], [1445.0, 8987.0], [1453.0, 8898.0], [1461.0, 8958.0], [1457.0, 8562.0], [1409.0, 9144.0], [1421.0, 9146.666666666666], [1437.0, 8970.666666666666], [1433.0, 9208.333333333334], [1529.0, 7837.0], [1533.0, 7908.0], [1505.0, 8215.5], [1513.0, 8163.0], [1517.0, 8046.0], [1525.0, 8116.0], [1521.0, 7921.0], [1473.0, 8826.0], [1477.0, 8812.0], [1481.0, 8625.0], [1501.0, 8399.0], [1497.0, 8502.0], [1593.0, 7006.0], [1597.0, 7010.0], [1569.0, 7419.0], [1573.0, 7452.0], [1577.0, 7115.0], [1581.0, 7261.0], [1589.0, 7322.0], [1585.0, 7390.0], [1537.0, 7957.0], [1541.0, 7845.0], [1545.0, 7795.0], [1549.0, 7857.0], [1565.0, 7535.0], [1561.0, 7531.0], [1557.0, 7682.0], [1553.0, 7670.0], [1661.0, 6016.0], [1633.0, 6515.0], [1637.0, 6286.0], [1641.0, 6248.0], [1657.0, 6140.0], [1653.0, 6119.0], [1649.0, 6103.0], [1613.0, 6641.0], [1609.0, 6747.0], [1605.0, 6749.0], [1601.0, 6876.0], [1629.0, 6311.0], [1625.0, 6353.0], [1621.0, 6580.0], [1617.0, 6502.0], [1721.0, 5220.0], [1725.0, 5174.0], [1697.0, 5571.0], [1701.0, 5503.0], [1705.0, 5415.0], [1709.0, 5260.0], [1717.0, 5323.0], [1713.0, 5353.0], [1665.0, 6138.0], [1669.0, 5959.0], [1673.0, 6100.0], [1677.0, 5773.0], [1693.0, 5566.0], [1689.0, 5658.0], [1685.0, 5626.0], [1681.0, 5607.0], [1785.0, 4233.0], [1789.0, 4178.0], [1761.0, 4539.0], [1765.0, 4397.0], [1769.0, 4531.0], [1773.0, 4374.0], [1781.0, 4192.0], [1777.0, 4317.0], [1729.0, 5131.0], [1733.0, 4904.0], [1737.0, 4972.0], [1741.0, 4903.0], [1757.0, 4552.0], [1753.0, 4765.0], [1749.0, 4762.0], [1745.0, 4629.0], [1849.0, 3306.0], [1853.0, 3329.0], [1825.0, 3724.0], [1829.0, 3418.0], [1833.0, 3413.0], [1837.0, 3359.0], [1845.0, 3263.0], [1841.0, 3489.0], [1793.0, 4119.0], [1797.0, 3958.0], [1801.0, 3790.0], [1805.0, 3893.0], [1821.0, 3530.0], [1817.0, 3635.0], [1813.0, 3927.0], [1809.0, 3622.0], [1913.0, 1707.0], [1917.0, 1716.0], [1889.0, 2397.0], [1893.0, 1899.0], [1897.0, 1951.0], [1901.0, 1799.0], [1909.0, 1971.0], [1857.0, 3175.0], [1861.0, 2678.0], [1865.0, 2979.0], [1869.0, 2552.0], [1885.0, 2636.0], [1881.0, 2583.0], [1877.0, 2490.0], [1873.0, 2634.0], [1921.0, 1555.0], [1925.0, 1846.0], [1933.0, 1592.0], [1945.0, 1617.5], [1937.0, 1726.5], [2001.0, 1268.3333333333333], [1985.0, 1588.7499999999998], [541.0, 19524.0], [543.0, 19613.0], [529.0, 20022.0], [531.0, 19608.0], [533.0, 19580.0], [539.0, 19534.0], [537.0, 19578.0], [525.0, 19756.0], [513.0, 20100.0], [515.0, 19833.0], [517.0, 19682.0], [519.0, 19755.0], [521.0, 19789.5], [535.0, 19644.0], [573.0, 19042.0], [575.0, 19302.0], [561.0, 19282.0], [563.0, 19119.0], [565.0, 19052.0], [571.0, 19039.0], [569.0, 19106.0], [559.0, 19289.0], [545.0, 19415.0], [547.0, 19801.0], [549.0, 19357.0], [551.0, 19302.0], [557.0, 19295.0], [555.0, 19289.0], [553.0, 19220.0], [567.0, 19046.0], [605.0, 18728.0], [607.0, 18677.0], [593.0, 18972.0], [595.0, 18859.0], [597.0, 19368.0], [603.0, 19146.0], [601.0, 18828.0], [591.0, 18785.0], [577.0, 18899.0], [579.0, 19034.0], [581.0, 18898.0], [583.0, 19047.0], [589.0, 18915.0], [587.0, 19125.0], [585.0, 18889.0], [599.0, 19364.0], [637.0, 18497.0], [633.0, 18451.0], [639.0, 18451.5], [625.0, 19047.0], [627.0, 18515.0], [629.0, 19060.0], [635.0, 18397.0], [615.0, 18553.0], [613.0, 18452.0], [611.0, 18587.0], [609.0, 18573.0], [623.0, 18999.0], [621.0, 18512.0], [619.0, 18672.0], [617.0, 18818.0], [631.0, 18571.0], [669.0, 18047.0], [671.0, 17906.0], [657.0, 18644.0], [659.0, 18000.0], [661.0, 18315.0], [667.0, 18072.0], [665.0, 18053.0], [655.0, 18722.0], [641.0, 18326.0], [643.0, 18471.0], [645.0, 18622.0], [653.0, 18220.0], [651.0, 18230.0], [649.0, 18241.0], [663.0, 18072.0], [701.0, 17856.0], [703.0, 17554.0], [689.0, 17928.0], [691.0, 17786.0], [693.0, 17693.0], [699.0, 17739.0], [697.0, 17642.0], [687.0, 17977.0], [673.0, 17972.0], [675.0, 18510.0], [677.0, 17932.0], [679.0, 17867.0], [685.0, 17834.0], [683.0, 18040.0], [681.0, 17839.0], [695.0, 17568.0], [733.0, 17550.0], [735.0, 17807.0], [721.0, 17600.0], [723.0, 17398.0], [725.0, 17534.0], [731.0, 17558.0], [729.0, 17561.0], [719.0, 17515.0], [705.0, 17714.0], [707.0, 18079.0], [709.0, 18015.0], [711.0, 17480.0], [717.0, 17409.0], [715.0, 17620.0], [713.0, 17647.0], [727.0, 17528.0], [765.0, 16809.0], [767.0, 16805.0], [753.0, 17188.0], [755.0, 17416.0], [757.0, 16961.0], [763.0, 17003.0], [761.0, 17066.0], [751.0, 16998.0], [737.0, 17977.0], [739.0, 17849.0], [741.0, 17168.0], [743.0, 17217.0], [749.0, 17004.0], [747.0, 17525.0], [745.0, 17321.0], [759.0, 16902.0], [797.0, 16504.0], [793.0, 16828.0], [799.0, 16704.0], [785.0, 16553.0], [787.0, 17010.0], [789.0, 16744.0], [795.0, 16716.0], [775.0, 16955.0], [773.0, 16786.0], [771.0, 17360.0], [769.0, 17045.0], [783.0, 16783.0], [781.0, 16927.0], [779.0, 16762.0], [791.0, 16524.0], [829.0, 16407.0], [831.0, 16257.0], [817.0, 16514.0], [819.0, 16915.0], [821.0, 16902.0], [827.0, 16423.0], [825.0, 16880.0], [815.0, 16602.0], [803.0, 16738.5], [805.0, 16661.0], [807.0, 16653.0], [813.0, 17050.0], [811.0, 16571.0], [809.0, 16643.0], [823.0, 16493.0], [861.0, 16598.0], [863.0, 16357.0], [849.0, 16235.0], [851.0, 16568.0], [853.0, 16199.0], [859.0, 16073.0], [857.0, 16501.0], [847.0, 16226.0], [835.0, 16480.5], [833.0, 16256.0], [837.0, 16279.0], [839.0, 16262.0], [845.0, 16260.0], [843.0, 16185.0], [841.0, 16193.0], [855.0, 16183.0], [891.0, 15909.0], [889.0, 15632.0], [895.0, 15927.0], [881.0, 15763.5], [883.0, 15715.0], [885.0, 15710.0], [893.0, 15792.0], [871.0, 15995.0], [869.0, 15968.0], [867.0, 15986.0], [865.0, 16347.0], [879.0, 15698.0], [877.0, 15818.0], [875.0, 15793.0], [873.0, 16036.0], [887.0, 15695.0], [925.0, 15377.0], [927.0, 15654.0], [913.0, 15588.0], [915.0, 15587.0], [923.0, 15532.0], [921.0, 15536.0], [911.0, 16042.0], [897.0, 15786.0], [899.0, 15930.0], [901.0, 15651.0], [903.0, 15661.0], [909.0, 16012.0], [907.0, 15571.0], [905.0, 15654.0], [919.0, 15967.0], [917.0, 16019.0], [957.0, 15381.0], [959.0, 14926.0], [945.0, 15654.0], [947.0, 15196.0], [949.0, 15620.0], [955.0, 14995.0], [953.0, 15570.0], [943.0, 15293.0], [929.0, 15332.0], [931.0, 15303.0], [941.0, 15310.0], [939.0, 15338.0], [937.0, 15317.0], [951.0, 15140.0], [989.0, 14738.0], [991.0, 14305.0], [977.0, 14900.0], [979.0, 14984.0], [981.0, 14872.0], [987.0, 14325.0], [985.0, 14551.0], [975.0, 14635.0], [961.0, 14835.0], [963.0, 15057.0], [965.0, 14747.0], [967.0, 15142.0], [973.0, 14629.0], [971.0, 14643.0], [969.0, 15146.0], [983.0, 14949.0], [1021.0, 13901.0], [1023.0, 14305.0], [1009.0, 14679.0], [1011.0, 14233.0], [1013.0, 14229.0], [1019.0, 14121.0], [1017.0, 14123.0], [1007.0, 14528.0], [993.0, 14586.0], [995.0, 14578.0], [997.0, 14561.0], [999.0, 14739.0], [1005.0, 14292.0], [1003.0, 14389.0], [1001.0, 14572.0], [1015.0, 14180.0], [1082.0, 13307.0], [1086.0, 13065.0], [1058.0, 13877.0], [1062.0, 13819.0], [1066.0, 13739.0], [1078.0, 13230.0], [1074.0, 13779.0], [1054.0, 13473.0], [1026.0, 13826.0], [1030.0, 13942.0], [1034.0, 14204.0], [1038.0, 13853.0], [1050.0, 13588.0], [1046.0, 13946.0], [1042.0, 14057.0], [1070.0, 13671.0], [1150.0, 12611.0], [1122.0, 12762.0], [1126.0, 12723.0], [1130.0, 12823.0], [1134.0, 12987.0], [1146.0, 12449.0], [1142.0, 12391.0], [1138.0, 12951.0], [1090.0, 13239.0], [1094.0, 13053.0], [1098.0, 12911.0], [1102.0, 12872.0], [1118.0, 12712.0], [1110.0, 12899.0], [1106.0, 12846.0], [1214.0, 11985.0], [1186.0, 12345.0], [1190.0, 12320.0], [1194.0, 11970.0], [1198.0, 11840.0], [1210.0, 11606.0], [1206.0, 11857.0], [1202.0, 11796.0], [1158.0, 12307.0], [1162.0, 12378.0], [1166.0, 12206.0], [1182.0, 12474.0], [1178.0, 12058.0], [1170.0, 12491.0], [1278.0, 11074.0], [1250.0, 11403.0], [1254.0, 11301.0], [1258.0, 11323.0], [1262.0, 11196.0], [1274.0, 10785.0], [1270.0, 11120.0], [1266.0, 11352.0], [1218.0, 11959.0], [1222.0, 11897.0], [1226.0, 11399.0], [1230.0, 11533.0], [1246.0, 11441.0], [1242.0, 11543.0], [1238.0, 11444.0], [1234.0, 11698.0], [1330.0, 10434.0], [1342.0, 10220.0], [1314.0, 10245.0], [1338.0, 10409.0], [1290.0, 10911.0], [1286.0, 10768.0], [1282.0, 10831.0], [1306.0, 10680.333333333334], [1402.0, 9508.5], [1406.0, 9472.0], [1378.0, 9597.0], [1382.0, 9492.0], [1386.0, 9699.0], [1390.0, 9697.0], [1394.0, 9509.0], [1358.0, 10095.0], [1346.0, 10178.0], [1374.0, 9626.0], [1370.0, 9664.0], [1362.0, 9971.0], [1462.0, 8620.0], [1442.0, 9093.0], [1466.0, 8853.5], [1450.0, 9014.5], [1454.0, 8813.0], [1438.0, 9103.0], [1410.0, 9351.0], [1434.0, 9060.0], [1430.0, 9189.833333333332], [1534.0, 7997.0], [1506.0, 8390.0], [1510.0, 8171.0], [1514.0, 8362.0], [1518.0, 8179.0], [1530.0, 7968.0], [1526.0, 8130.0], [1522.0, 7915.0], [1478.0, 8638.0], [1482.0, 8739.0], [1498.0, 8615.0], [1598.0, 6692.0], [1570.0, 7475.0], [1574.0, 7186.0], [1578.0, 7345.0], [1582.0, 7076.0], [1594.0, 6995.0], [1590.0, 7267.0], [1586.0, 7212.0], [1566.0, 7634.0], [1538.0, 7879.0], [1542.0, 7845.0], [1546.0, 7902.0], [1550.0, 7693.0], [1562.0, 7669.0], [1558.0, 7748.0], [1554.0, 7619.0], [1662.0, 6182.0], [1634.0, 6510.0], [1638.0, 6503.0], [1642.0, 6210.0], [1646.0, 6193.5], [1654.0, 5978.0], [1650.0, 6312.0], [1614.0, 6823.0], [1610.0, 6926.0], [1606.0, 6834.0], [1602.0, 6709.0], [1630.0, 6268.0], [1626.0, 6478.0], [1622.0, 6547.0], [1618.0, 6508.0], [1726.0, 5091.0], [1698.0, 5345.0], [1702.0, 5291.0], [1706.0, 5365.0], [1710.0, 5319.0], [1722.0, 5182.0], [1718.0, 5308.0], [1714.0, 5325.0], [1666.0, 6193.0], [1670.0, 5892.0], [1674.0, 5702.0], [1678.0, 5894.0], [1694.0, 5368.0], [1690.0, 5514.0], [1686.0, 5387.0], [1682.0, 5769.0], [1790.0, 4148.0], [1762.0, 4459.0], [1766.0, 4359.0], [1770.0, 4384.0], [1774.0, 4457.0], [1786.0, 4200.0], [1782.0, 4148.0], [1778.0, 4178.0], [1730.0, 5132.0], [1734.0, 4757.0], [1738.0, 4900.0], [1742.0, 4918.0], [1750.0, 4514.0], [1746.0, 4754.0], [1854.0, 3250.0], [1826.0, 3593.0], [1830.0, 3493.0], [1834.0, 3518.0], [1838.0, 3603.0], [1850.0, 3530.0], [1846.0, 3578.0], [1842.0, 3457.0], [1794.0, 4061.0], [1798.0, 4031.0], [1802.0, 3758.0], [1806.0, 3712.0], [1822.0, 3586.0], [1818.0, 3572.0], [1814.0, 3655.0], [1810.0, 3860.0], [1918.0, 1890.0], [1890.0, 2427.0], [1894.0, 1956.0], [1898.0, 1883.0], [1902.0, 1700.0], [1914.0, 1832.0], [1910.0, 1784.0], [1858.0, 2976.0], [1862.0, 2770.0], [1866.0, 2813.0], [1870.0, 2694.0], [1886.0, 2623.0], [1882.0, 2504.0], [1878.0, 2649.0], [1926.0, 1541.0], [1942.0, 1726.0], [1938.0, 1709.0], [1934.0, 1575.0], [2002.0, 1312.7142857142858], [1079.0, 13511.0], [1075.0, 13339.0], [1087.0, 12994.0], [1059.0, 13727.0], [1063.0, 13870.0], [1067.0, 13404.0], [1083.0, 13088.0], [1039.0, 13851.0], [1035.0, 13750.0], [1031.0, 13850.0], [1027.0, 13831.0], [1055.0, 13874.0], [1047.0, 13797.0], [1043.0, 13707.0], [1071.0, 13392.0], [1147.0, 12370.0], [1151.0, 12350.0], [1123.0, 12926.0], [1127.0, 13036.0], [1131.0, 12649.0], [1135.0, 12558.0], [1143.0, 12411.0], [1139.0, 12530.0], [1119.0, 13109.0], [1091.0, 13005.0], [1095.0, 13226.0], [1099.0, 13341.0], [1103.0, 13134.0], [1115.0, 12842.0], [1111.0, 12784.0], [1107.0, 12881.0], [1211.0, 11959.0], [1215.0, 11979.0], [1187.0, 12292.0], [1191.0, 12380.0], [1195.0, 12135.0], [1199.0, 11913.0], [1207.0, 11920.0], [1203.0, 11694.0], [1183.0, 12318.0], [1155.0, 12646.5], [1159.0, 12698.0], [1163.0, 12685.0], [1167.0, 12196.0], [1179.0, 12218.0], [1175.0, 12129.0], [1171.0, 12374.0], [1275.0, 10937.0], [1279.0, 11012.0], [1251.0, 11508.0], [1255.0, 11495.0], [1259.0, 11286.0], [1263.0, 11213.0], [1271.0, 10736.0], [1267.0, 11255.0], [1247.0, 11387.0], [1219.0, 11925.0], [1223.0, 11513.0], [1227.0, 11628.0], [1231.0, 11630.0], [1243.0, 11401.0], [1239.0, 11586.0], [1235.0, 11622.0], [1331.0, 10511.0], [1339.0, 10304.0], [1343.0, 10275.0], [1315.0, 10649.0], [1327.0, 10415.5], [1291.0, 10867.0], [1287.0, 10855.0], [1283.0, 10934.0], [1307.0, 10683.0], [1303.0, 10759.0], [1399.0, 9509.5], [1403.0, 9504.0], [1379.0, 9887.0], [1383.0, 9758.0], [1387.0, 9743.0], [1391.0, 9541.0], [1395.0, 9433.0], [1359.0, 9965.0], [1351.0, 10120.0], [1347.0, 10219.0], [1375.0, 9774.0], [1371.0, 10044.0], [1367.0, 10013.5], [1363.0, 9953.0], [1467.0, 8710.0], [1447.0, 8926.0], [1471.0, 8858.0], [1451.0, 8796.0], [1455.0, 8572.0], [1463.0, 8622.0], [1459.0, 8638.0], [1411.0, 9286.0], [1423.0, 9336.0], [1531.0, 8076.0], [1535.0, 7728.0], [1507.0, 8228.0], [1511.0, 8410.0], [1515.0, 8307.0], [1519.0, 8195.0], [1527.0, 7843.0], [1523.0, 8231.0], [1503.0, 8470.0], [1475.0, 8778.5], [1479.0, 8819.0], [1487.0, 8514.25], [1483.0, 8584.0], [1499.0, 8331.0], [1495.0, 8602.333333333334], [1595.0, 6863.0], [1599.0, 6808.0], [1571.0, 7460.0], [1579.0, 7273.0], [1583.0, 7046.0], [1591.0, 7009.0], [1587.0, 7272.0], [1539.0, 7735.0], [1543.0, 7862.0], [1547.0, 7591.0], [1551.0, 7480.0], [1563.0, 7671.0], [1559.0, 7751.0], [1555.0, 7594.0], [1659.0, 6162.0], [1651.0, 6091.0], [1663.0, 6173.0], [1635.0, 6241.0], [1639.0, 6357.0], [1643.0, 6261.0], [1647.0, 6197.0], [1655.0, 6079.0], [1615.0, 6860.0], [1611.0, 6917.0], [1607.0, 6736.0], [1603.0, 6813.0], [1631.0, 6198.0], [1627.0, 6263.0], [1623.0, 6529.0], [1619.0, 6462.0], [1723.0, 5297.0], [1727.0, 5303.0], [1699.0, 5281.0], [1703.0, 5278.0], [1707.0, 5154.0], [1711.0, 5231.0], [1719.0, 5254.0], [1715.0, 5231.0], [1695.0, 5274.0], [1671.0, 6012.0], [1675.0, 5962.0], [1679.0, 5735.0], [1691.0, 5426.0], [1687.0, 5667.0], [1683.0, 5769.0], [1787.0, 4251.0], [1791.0, 4217.0], [1763.0, 4475.0], [1767.0, 4460.0], [1771.0, 4210.0], [1775.0, 4385.0], [1783.0, 4228.0], [1779.0, 4171.0], [1759.0, 4697.0], [1731.0, 4857.0], [1735.0, 4956.0], [1739.0, 4820.0], [1743.0, 4689.0], [1755.0, 4612.5], [1751.0, 4535.0], [1747.0, 4848.0], [1851.0, 3327.0], [1855.0, 3244.0], [1827.0, 3450.0], [1831.0, 3692.0], [1835.0, 3364.0], [1839.0, 3429.0], [1847.0, 3302.0], [1843.0, 3478.0], [1823.0, 3790.0], [1795.0, 3960.0], [1799.0, 3902.0], [1803.0, 3695.0], [1807.0, 3743.0], [1819.0, 3686.0], [1815.0, 3592.0], [1811.0, 3785.0], [1915.0, 1838.0], [1919.0, 1569.0], [1891.0, 2179.0], [1895.0, 2024.0], [1899.0, 1873.0], [1903.0, 1868.0], [1911.0, 1729.0], [1907.0, 1746.0], [1887.0, 2457.0], [1859.0, 2992.0], [1863.0, 2655.0], [1867.0, 2592.0], [1871.0, 2802.0], [1883.0, 2326.0], [1879.0, 2621.0], [1875.0, 2574.0], [1943.0, 1456.0], [1923.0, 1588.0], [1927.0, 1703.0], [1947.0, 1519.5], [1935.0, 1708.0], [2003.0, 513.0], [1991.0, 1386.2142857142856], [1.0, 25031.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[1003.0883233532925, 13899.341317365268]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2004.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14202.066666666668, "minX": 1.6304622E12, "maxY": 42582.71666666667, "series": [{"data": [[1.6304622E12, 42582.71666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6304622E12, 14202.066666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6304622E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 13899.341317365268, "minX": 1.6304622E12, "maxY": 13899.341317365268, "series": [{"data": [[1.6304622E12, 13899.341317365268]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6304622E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13878.150698602796, "minX": 1.6304622E12, "maxY": 13878.150698602796, "series": [{"data": [[1.6304622E12, 13878.150698602796]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6304622E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 735.4021956087834, "minX": 1.6304622E12, "maxY": 735.4021956087834, "series": [{"data": [[1.6304622E12, 735.4021956087834]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6304622E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 513.0, "minX": 1.6304622E12, "maxY": 25246.0, "series": [{"data": [[1.6304622E12, 25246.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6304622E12, 23008.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6304622E12, 24693.91]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6304622E12, 23727.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6304622E12, 513.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6304622E12, 14330.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6304622E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 604.5, "minX": 2.0, "maxY": 24683.0, "series": [{"data": [[2.0, 604.5], [43.0, 2552.0], [42.0, 24683.0], [58.0, 15293.5], [61.0, 5319.0], [62.0, 3929.5], [63.0, 7460.0], [70.0, 11400.0], [68.0, 14259.0], [74.0, 6277.0], [78.0, 9355.5], [81.0, 12354.0], [82.0, 16965.5], [86.0, 8461.0], [84.0, 13228.0], [88.0, 18988.0], [89.0, 20117.0], [94.0, 10401.0], [99.0, 12621.5], [102.0, 17931.0], [101.0, 21011.0], [100.0, 21947.5], [104.0, 16091.0], [112.0, 23033.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[101.0, 21139.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 112.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 24683.0, "series": [{"data": [[2.0, 603.5], [43.0, 2552.0], [42.0, 24683.0], [58.0, 15293.0], [61.0, 5319.0], [62.0, 3929.5], [63.0, 7460.0], [70.0, 11400.0], [68.0, 14259.0], [74.0, 6277.0], [78.0, 9355.0], [81.0, 12354.0], [82.0, 16965.5], [86.0, 8461.0], [84.0, 13228.0], [88.0, 18988.0], [89.0, 20117.0], [94.0, 10401.0], [99.0, 12621.5], [102.0, 17931.0], [101.0, 21011.0], [100.0, 21947.5], [104.0, 16091.0], [112.0, 23033.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[101.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 112.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.4, "minX": 1.6304622E12, "maxY": 33.4, "series": [{"data": [[1.6304622E12, 33.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6304622E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6304622E12, "maxY": 33.36666666666667, "series": [{"data": [[1.6304622E12, 33.36666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6304622E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6304622E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6304622E12, "maxY": 33.36666666666667, "series": [{"data": [[1.6304622E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.6304622E12, 33.36666666666667]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6304622E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6304622E12, "maxY": 33.36666666666667, "series": [{"data": [[1.6304622E12, 33.36666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6304622E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6304622E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

