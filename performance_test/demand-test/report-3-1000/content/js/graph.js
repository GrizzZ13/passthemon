/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "maxY": 39682.0, "series": [{"data": [[0.0, 22.0], [0.1, 30.0], [0.2, 33.0], [0.3, 36.0], [0.4, 38.0], [0.5, 40.0], [0.6, 43.0], [0.7, 45.0], [0.8, 47.0], [0.9, 49.0], [1.0, 51.0], [1.1, 53.0], [1.2, 53.0], [1.3, 54.0], [1.4, 57.0], [1.5, 59.0], [1.6, 60.0], [1.7, 64.0], [1.8, 66.0], [1.9, 68.0], [2.0, 72.0], [2.1, 73.0], [2.2, 75.0], [2.3, 77.0], [2.4, 79.0], [2.5, 83.0], [2.6, 87.0], [2.7, 92.0], [2.8, 93.0], [2.9, 95.0], [3.0, 97.0], [3.1, 99.0], [3.2, 101.0], [3.3, 102.0], [3.4, 104.0], [3.5, 105.0], [3.6, 107.0], [3.7, 110.0], [3.8, 115.0], [3.9, 116.0], [4.0, 119.0], [4.1, 123.0], [4.2, 125.0], [4.3, 126.0], [4.4, 129.0], [4.5, 132.0], [4.6, 133.0], [4.7, 135.0], [4.8, 136.0], [4.9, 139.0], [5.0, 140.0], [5.1, 141.0], [5.2, 143.0], [5.3, 145.0], [5.4, 146.0], [5.5, 147.0], [5.6, 148.0], [5.7, 151.0], [5.8, 152.0], [5.9, 154.0], [6.0, 155.0], [6.1, 156.0], [6.2, 158.0], [6.3, 159.0], [6.4, 160.0], [6.5, 162.0], [6.6, 164.0], [6.7, 165.0], [6.8, 166.0], [6.9, 169.0], [7.0, 170.0], [7.1, 171.0], [7.2, 173.0], [7.3, 175.0], [7.4, 177.0], [7.5, 180.0], [7.6, 182.0], [7.7, 183.0], [7.8, 186.0], [7.9, 187.0], [8.0, 188.0], [8.1, 190.0], [8.2, 192.0], [8.3, 192.0], [8.4, 195.0], [8.5, 197.0], [8.6, 198.0], [8.7, 199.0], [8.8, 200.0], [8.9, 202.0], [9.0, 206.0], [9.1, 209.0], [9.2, 213.0], [9.3, 217.0], [9.4, 221.0], [9.5, 225.0], [9.6, 227.0], [9.7, 228.0], [9.8, 231.0], [9.9, 232.0], [10.0, 233.0], [10.1, 234.0], [10.2, 237.0], [10.3, 238.0], [10.4, 241.0], [10.5, 242.0], [10.6, 243.0], [10.7, 244.0], [10.8, 246.0], [10.9, 247.0], [11.0, 248.0], [11.1, 251.0], [11.2, 253.0], [11.3, 256.0], [11.4, 258.0], [11.5, 259.0], [11.6, 261.0], [11.7, 264.0], [11.8, 267.0], [11.9, 268.0], [12.0, 270.0], [12.1, 271.0], [12.2, 273.0], [12.3, 275.0], [12.4, 277.0], [12.5, 278.0], [12.6, 280.0], [12.7, 282.0], [12.8, 283.0], [12.9, 285.0], [13.0, 287.0], [13.1, 288.0], [13.2, 290.0], [13.3, 292.0], [13.4, 294.0], [13.5, 297.0], [13.6, 300.0], [13.7, 304.0], [13.8, 306.0], [13.9, 308.0], [14.0, 311.0], [14.1, 319.0], [14.2, 323.0], [14.3, 327.0], [14.4, 335.0], [14.5, 342.0], [14.6, 346.0], [14.7, 349.0], [14.8, 354.0], [14.9, 355.0], [15.0, 360.0], [15.1, 363.0], [15.2, 365.0], [15.3, 367.0], [15.4, 370.0], [15.5, 374.0], [15.6, 375.0], [15.7, 377.0], [15.8, 379.0], [15.9, 382.0], [16.0, 385.0], [16.1, 387.0], [16.2, 389.0], [16.3, 393.0], [16.4, 394.0], [16.5, 397.0], [16.6, 399.0], [16.7, 402.0], [16.8, 403.0], [16.9, 406.0], [17.0, 408.0], [17.1, 411.0], [17.2, 413.0], [17.3, 416.0], [17.4, 418.0], [17.5, 422.0], [17.6, 426.0], [17.7, 430.0], [17.8, 435.0], [17.9, 441.0], [18.0, 446.0], [18.1, 454.0], [18.2, 459.0], [18.3, 463.0], [18.4, 466.0], [18.5, 470.0], [18.6, 474.0], [18.7, 475.0], [18.8, 476.0], [18.9, 479.0], [19.0, 479.0], [19.1, 482.0], [19.2, 485.0], [19.3, 489.0], [19.4, 491.0], [19.5, 491.0], [19.6, 493.0], [19.7, 495.0], [19.8, 497.0], [19.9, 499.0], [20.0, 502.0], [20.1, 505.0], [20.2, 507.0], [20.3, 508.0], [20.4, 510.0], [20.5, 510.0], [20.6, 511.0], [20.7, 511.0], [20.8, 512.0], [20.9, 513.0], [21.0, 514.0], [21.1, 514.0], [21.2, 515.0], [21.3, 516.0], [21.4, 517.0], [21.5, 518.0], [21.6, 519.0], [21.7, 520.0], [21.8, 522.0], [21.9, 523.0], [22.0, 525.0], [22.1, 526.0], [22.2, 528.0], [22.3, 528.0], [22.4, 530.0], [22.5, 531.0], [22.6, 535.0], [22.7, 537.0], [22.8, 539.0], [22.9, 540.0], [23.0, 541.0], [23.1, 543.0], [23.2, 544.0], [23.3, 546.0], [23.4, 548.0], [23.5, 549.0], [23.6, 552.0], [23.7, 554.0], [23.8, 556.0], [23.9, 557.0], [24.0, 559.0], [24.1, 562.0], [24.2, 565.0], [24.3, 566.0], [24.4, 566.0], [24.5, 567.0], [24.6, 568.0], [24.7, 570.0], [24.8, 571.0], [24.9, 572.0], [25.0, 573.0], [25.1, 573.0], [25.2, 574.0], [25.3, 575.0], [25.4, 577.0], [25.5, 580.0], [25.6, 582.0], [25.7, 585.0], [25.8, 587.0], [25.9, 589.0], [26.0, 592.0], [26.1, 596.0], [26.2, 597.0], [26.3, 599.0], [26.4, 601.0], [26.5, 602.0], [26.6, 606.0], [26.7, 608.0], [26.8, 611.0], [26.9, 616.0], [27.0, 619.0], [27.1, 623.0], [27.2, 626.0], [27.3, 629.0], [27.4, 630.0], [27.5, 633.0], [27.6, 637.0], [27.7, 640.0], [27.8, 644.0], [27.9, 647.0], [28.0, 649.0], [28.1, 653.0], [28.2, 656.0], [28.3, 657.0], [28.4, 658.0], [28.5, 660.0], [28.6, 662.0], [28.7, 663.0], [28.8, 666.0], [28.9, 668.0], [29.0, 671.0], [29.1, 675.0], [29.2, 678.0], [29.3, 683.0], [29.4, 685.0], [29.5, 688.0], [29.6, 691.0], [29.7, 692.0], [29.8, 694.0], [29.9, 696.0], [30.0, 699.0], [30.1, 701.0], [30.2, 706.0], [30.3, 709.0], [30.4, 714.0], [30.5, 718.0], [30.6, 722.0], [30.7, 724.0], [30.8, 734.0], [30.9, 736.0], [31.0, 742.0], [31.1, 745.0], [31.2, 747.0], [31.3, 752.0], [31.4, 755.0], [31.5, 761.0], [31.6, 768.0], [31.7, 771.0], [31.8, 780.0], [31.9, 785.0], [32.0, 791.0], [32.1, 794.0], [32.2, 797.0], [32.3, 807.0], [32.4, 814.0], [32.5, 830.0], [32.6, 842.0], [32.7, 848.0], [32.8, 855.0], [32.9, 869.0], [33.0, 873.0], [33.1, 884.0], [33.2, 892.0], [33.3, 902.0], [33.4, 910.0], [33.5, 916.0], [33.6, 923.0], [33.7, 929.0], [33.8, 933.0], [33.9, 939.0], [34.0, 945.0], [34.1, 970.0], [34.2, 975.0], [34.3, 992.0], [34.4, 1003.0], [34.5, 1010.0], [34.6, 1014.0], [34.7, 1019.0], [34.8, 1027.0], [34.9, 1040.0], [35.0, 1054.0], [35.1, 1062.0], [35.2, 1068.0], [35.3, 1071.0], [35.4, 1075.0], [35.5, 1078.0], [35.6, 1081.0], [35.7, 1086.0], [35.8, 1089.0], [35.9, 1091.0], [36.0, 1094.0], [36.1, 1100.0], [36.2, 1102.0], [36.3, 1104.0], [36.4, 1105.0], [36.5, 1106.0], [36.6, 1107.0], [36.7, 1108.0], [36.8, 1110.0], [36.9, 1112.0], [37.0, 1113.0], [37.1, 1115.0], [37.2, 1117.0], [37.3, 1120.0], [37.4, 1122.0], [37.5, 1125.0], [37.6, 1127.0], [37.7, 1131.0], [37.8, 1131.0], [37.9, 1132.0], [38.0, 1134.0], [38.1, 1135.0], [38.2, 1135.0], [38.3, 1137.0], [38.4, 1139.0], [38.5, 1140.0], [38.6, 1142.0], [38.7, 1142.0], [38.8, 1145.0], [38.9, 1147.0], [39.0, 1149.0], [39.1, 1150.0], [39.2, 1153.0], [39.3, 1155.0], [39.4, 1156.0], [39.5, 1157.0], [39.6, 1158.0], [39.7, 1160.0], [39.8, 1161.0], [39.9, 1163.0], [40.0, 1165.0], [40.1, 1166.0], [40.2, 1168.0], [40.3, 1171.0], [40.4, 1173.0], [40.5, 1178.0], [40.6, 1181.0], [40.7, 1182.0], [40.8, 1184.0], [40.9, 1188.0], [41.0, 1190.0], [41.1, 1191.0], [41.2, 1192.0], [41.3, 1194.0], [41.4, 1195.0], [41.5, 1197.0], [41.6, 1198.0], [41.7, 1200.0], [41.8, 1201.0], [41.9, 1203.0], [42.0, 1205.0], [42.1, 1208.0], [42.2, 1210.0], [42.3, 1211.0], [42.4, 1212.0], [42.5, 1214.0], [42.6, 1216.0], [42.7, 1217.0], [42.8, 1221.0], [42.9, 1222.0], [43.0, 1223.0], [43.1, 1225.0], [43.2, 1228.0], [43.3, 1229.0], [43.4, 1230.0], [43.5, 1234.0], [43.6, 1235.0], [43.7, 1237.0], [43.8, 1239.0], [43.9, 1241.0], [44.0, 1242.0], [44.1, 1244.0], [44.2, 1245.0], [44.3, 1247.0], [44.4, 1250.0], [44.5, 1251.0], [44.6, 1253.0], [44.7, 1256.0], [44.8, 1257.0], [44.9, 1258.0], [45.0, 1260.0], [45.1, 1262.0], [45.2, 1264.0], [45.3, 1265.0], [45.4, 1266.0], [45.5, 1267.0], [45.6, 1268.0], [45.7, 1269.0], [45.8, 1271.0], [45.9, 1273.0], [46.0, 1274.0], [46.1, 1276.0], [46.2, 1277.0], [46.3, 1278.0], [46.4, 1279.0], [46.5, 1281.0], [46.6, 1284.0], [46.7, 1285.0], [46.8, 1286.0], [46.9, 1289.0], [47.0, 1290.0], [47.1, 1292.0], [47.2, 1294.0], [47.3, 1296.0], [47.4, 1297.0], [47.5, 1298.0], [47.6, 1299.0], [47.7, 1300.0], [47.8, 1300.0], [47.9, 1301.0], [48.0, 1303.0], [48.1, 1304.0], [48.2, 1304.0], [48.3, 1305.0], [48.4, 1305.0], [48.5, 1306.0], [48.6, 1307.0], [48.7, 1308.0], [48.8, 1309.0], [48.9, 1310.0], [49.0, 1311.0], [49.1, 1311.0], [49.2, 1312.0], [49.3, 1313.0], [49.4, 1315.0], [49.5, 1315.0], [49.6, 1316.0], [49.7, 1317.0], [49.8, 1318.0], [49.9, 1319.0], [50.0, 1320.0], [50.1, 1321.0], [50.2, 1323.0], [50.3, 1323.0], [50.4, 1324.0], [50.5, 1324.0], [50.6, 1325.0], [50.7, 1327.0], [50.8, 1328.0], [50.9, 1329.0], [51.0, 1329.0], [51.1, 1330.0], [51.2, 1331.0], [51.3, 1332.0], [51.4, 1332.0], [51.5, 1332.0], [51.6, 1333.0], [51.7, 1335.0], [51.8, 1335.0], [51.9, 1337.0], [52.0, 1338.0], [52.1, 1339.0], [52.2, 1340.0], [52.3, 1342.0], [52.4, 1342.0], [52.5, 1344.0], [52.6, 1345.0], [52.7, 1346.0], [52.8, 1347.0], [52.9, 1348.0], [53.0, 1348.0], [53.1, 1349.0], [53.2, 1350.0], [53.3, 1351.0], [53.4, 1352.0], [53.5, 1353.0], [53.6, 1354.0], [53.7, 1354.0], [53.8, 1356.0], [53.9, 1357.0], [54.0, 1358.0], [54.1, 1359.0], [54.2, 1360.0], [54.3, 1361.0], [54.4, 1363.0], [54.5, 1363.0], [54.6, 1364.0], [54.7, 1366.0], [54.8, 1368.0], [54.9, 1370.0], [55.0, 1373.0], [55.1, 1374.0], [55.2, 1375.0], [55.3, 1376.0], [55.4, 1377.0], [55.5, 1378.0], [55.6, 1380.0], [55.7, 1381.0], [55.8, 1381.0], [55.9, 1383.0], [56.0, 1384.0], [56.1, 1385.0], [56.2, 1386.0], [56.3, 1386.0], [56.4, 1387.0], [56.5, 1388.0], [56.6, 1389.0], [56.7, 1389.0], [56.8, 1390.0], [56.9, 1391.0], [57.0, 1393.0], [57.1, 1393.0], [57.2, 1395.0], [57.3, 1396.0], [57.4, 1398.0], [57.5, 1399.0], [57.6, 1400.0], [57.7, 1401.0], [57.8, 1402.0], [57.9, 1405.0], [58.0, 1406.0], [58.1, 1406.0], [58.2, 1407.0], [58.3, 1408.0], [58.4, 1408.0], [58.5, 1410.0], [58.6, 1411.0], [58.7, 1412.0], [58.8, 1413.0], [58.9, 1415.0], [59.0, 1416.0], [59.1, 1417.0], [59.2, 1417.0], [59.3, 1418.0], [59.4, 1419.0], [59.5, 1420.0], [59.6, 1420.0], [59.7, 1421.0], [59.8, 1422.0], [59.9, 1423.0], [60.0, 1424.0], [60.1, 1425.0], [60.2, 1426.0], [60.3, 1427.0], [60.4, 1428.0], [60.5, 1429.0], [60.6, 1429.0], [60.7, 1431.0], [60.8, 1432.0], [60.9, 1432.0], [61.0, 1434.0], [61.1, 1434.0], [61.2, 1435.0], [61.3, 1436.0], [61.4, 1437.0], [61.5, 1439.0], [61.6, 1440.0], [61.7, 1441.0], [61.8, 1441.0], [61.9, 1443.0], [62.0, 1444.0], [62.1, 1445.0], [62.2, 1447.0], [62.3, 1449.0], [62.4, 1451.0], [62.5, 1452.0], [62.6, 1454.0], [62.7, 1456.0], [62.8, 1457.0], [62.9, 1460.0], [63.0, 1461.0], [63.1, 1464.0], [63.2, 1466.0], [63.3, 1467.0], [63.4, 1469.0], [63.5, 1471.0], [63.6, 1472.0], [63.7, 1475.0], [63.8, 1478.0], [63.9, 1479.0], [64.0, 1482.0], [64.1, 1484.0], [64.2, 1485.0], [64.3, 1488.0], [64.4, 1491.0], [64.5, 1493.0], [64.6, 1495.0], [64.7, 1497.0], [64.8, 1498.0], [64.9, 1501.0], [65.0, 1507.0], [65.1, 1515.0], [65.2, 1518.0], [65.3, 1526.0], [65.4, 1535.0], [65.5, 1542.0], [65.6, 1552.0], [65.7, 1560.0], [65.8, 1572.0], [65.9, 1582.0], [66.0, 1597.0], [66.1, 1600.0], [66.2, 1607.0], [66.3, 1614.0], [66.4, 1621.0], [66.5, 1626.0], [66.6, 1633.0], [66.7, 1636.0], [66.8, 1642.0], [66.9, 1653.0], [67.0, 1675.0], [67.1, 1685.0], [67.2, 1691.0], [67.3, 1698.0], [67.4, 1704.0], [67.5, 1709.0], [67.6, 1715.0], [67.7, 1724.0], [67.8, 1732.0], [67.9, 1736.0], [68.0, 1742.0], [68.1, 1746.0], [68.2, 1759.0], [68.3, 1762.0], [68.4, 1766.0], [68.5, 1768.0], [68.6, 1771.0], [68.7, 1774.0], [68.8, 1776.0], [68.9, 1779.0], [69.0, 1780.0], [69.1, 1785.0], [69.2, 1788.0], [69.3, 1790.0], [69.4, 1791.0], [69.5, 1793.0], [69.6, 1795.0], [69.7, 1797.0], [69.8, 1798.0], [69.9, 1800.0], [70.0, 1801.0], [70.1, 1804.0], [70.2, 1806.0], [70.3, 1809.0], [70.4, 1811.0], [70.5, 1814.0], [70.6, 1820.0], [70.7, 1822.0], [70.8, 1826.0], [70.9, 1827.0], [71.0, 1831.0], [71.1, 1836.0], [71.2, 1844.0], [71.3, 1850.0], [71.4, 1856.0], [71.5, 1861.0], [71.6, 1867.0], [71.7, 1870.0], [71.8, 1880.0], [71.9, 1887.0], [72.0, 1892.0], [72.1, 1902.0], [72.2, 1915.0], [72.3, 1922.0], [72.4, 1926.0], [72.5, 1930.0], [72.6, 1936.0], [72.7, 1944.0], [72.8, 1948.0], [72.9, 1955.0], [73.0, 1960.0], [73.1, 1966.0], [73.2, 1969.0], [73.3, 1978.0], [73.4, 1989.0], [73.5, 1999.0], [73.6, 2004.0], [73.7, 2029.0], [73.8, 2037.0], [73.9, 2044.0], [74.0, 2050.0], [74.1, 2057.0], [74.2, 2067.0], [74.3, 2084.0], [74.4, 2094.0], [74.5, 2100.0], [74.6, 2115.0], [74.7, 2133.0], [74.8, 2137.0], [74.9, 2142.0], [75.0, 2162.0], [75.1, 2171.0], [75.2, 2184.0], [75.3, 2194.0], [75.4, 2198.0], [75.5, 2214.0], [75.6, 2222.0], [75.7, 2226.0], [75.8, 2241.0], [75.9, 2249.0], [76.0, 2260.0], [76.1, 2270.0], [76.2, 2288.0], [76.3, 2304.0], [76.4, 2310.0], [76.5, 2326.0], [76.6, 2355.0], [76.7, 2370.0], [76.8, 2385.0], [76.9, 2398.0], [77.0, 2409.0], [77.1, 2423.0], [77.2, 2435.0], [77.3, 2440.0], [77.4, 2449.0], [77.5, 2461.0], [77.6, 2471.0], [77.7, 2491.0], [77.8, 2495.0], [77.9, 2512.0], [78.0, 2526.0], [78.1, 2546.0], [78.2, 2582.0], [78.3, 2606.0], [78.4, 2623.0], [78.5, 2676.0], [78.6, 2696.0], [78.7, 2706.0], [78.8, 2718.0], [78.9, 2731.0], [79.0, 2745.0], [79.1, 2763.0], [79.2, 2771.0], [79.3, 2808.0], [79.4, 2819.0], [79.5, 3030.0], [79.6, 3035.0], [79.7, 3038.0], [79.8, 3039.0], [79.9, 3042.0], [80.0, 3044.0], [80.1, 3045.0], [80.2, 3048.0], [80.3, 3053.0], [80.4, 3060.0], [80.5, 3066.0], [80.6, 3077.0], [80.7, 3089.0], [80.8, 3096.0], [80.9, 3107.0], [81.0, 3115.0], [81.1, 3122.0], [81.2, 3134.0], [81.3, 3145.0], [81.4, 3149.0], [81.5, 3158.0], [81.6, 3180.0], [81.7, 3189.0], [81.8, 3191.0], [81.9, 3208.0], [82.0, 3215.0], [82.1, 3227.0], [82.2, 3248.0], [82.3, 3635.0], [82.4, 3640.0], [82.5, 3700.0], [82.6, 3820.0], [82.7, 3932.0], [82.8, 3936.0], [82.9, 3944.0], [83.0, 3950.0], [83.1, 3953.0], [83.2, 3962.0], [83.3, 3966.0], [83.4, 3972.0], [83.5, 4204.0], [83.6, 4357.0], [83.7, 4426.0], [83.8, 4488.0], [83.9, 4610.0], [84.0, 4866.0], [84.1, 5034.0], [84.2, 5122.0], [84.3, 5124.0], [84.4, 5133.0], [84.5, 5159.0], [84.6, 5262.0], [84.7, 5470.0], [84.8, 5620.0], [84.9, 5634.0], [85.0, 5640.0], [85.1, 5713.0], [85.2, 5915.0], [85.3, 6092.0], [85.4, 6332.0], [85.5, 6338.0], [85.6, 6344.0], [85.7, 6349.0], [85.8, 6354.0], [85.9, 6483.0], [86.0, 6735.0], [86.1, 7063.0], [86.2, 7261.0], [86.3, 7450.0], [86.4, 7697.0], [86.5, 7871.0], [86.6, 8132.0], [86.7, 8326.0], [86.8, 8700.0], [86.9, 8947.0], [87.0, 9034.0], [87.1, 9333.0], [87.2, 9535.0], [87.3, 9830.0], [87.4, 10012.0], [87.5, 10280.0], [87.6, 10544.0], [87.7, 10876.0], [87.8, 11123.0], [87.9, 11311.0], [88.0, 11519.0], [88.1, 11784.0], [88.2, 11979.0], [88.3, 12209.0], [88.4, 12391.0], [88.5, 12693.0], [88.6, 12930.0], [88.7, 13159.0], [88.8, 13396.0], [88.9, 13615.0], [89.0, 13849.0], [89.1, 14103.0], [89.2, 14305.0], [89.3, 14597.0], [89.4, 14795.0], [89.5, 14985.0], [89.6, 15305.0], [89.7, 15475.0], [89.8, 15726.0], [89.9, 16071.0], [90.0, 16256.0], [90.1, 16505.0], [90.2, 16639.0], [90.3, 16906.0], [90.4, 17188.0], [90.5, 17331.0], [90.6, 17661.0], [90.7, 17868.0], [90.8, 18116.0], [90.9, 18402.0], [91.0, 18562.0], [91.1, 18790.0], [91.2, 19131.0], [91.3, 19310.0], [91.4, 19571.0], [91.5, 19698.0], [91.6, 20025.0], [91.7, 20313.0], [91.8, 20484.0], [91.9, 20762.0], [92.0, 20927.0], [92.1, 21103.0], [92.2, 21275.0], [92.3, 21615.0], [92.4, 21813.0], [92.5, 22032.0], [92.6, 22281.0], [92.7, 22499.0], [92.8, 22779.0], [92.9, 23083.0], [93.0, 23185.0], [93.1, 23412.0], [93.2, 23695.0], [93.3, 23958.0], [93.4, 24113.0], [93.5, 24411.0], [93.6, 24597.0], [93.7, 24786.0], [93.8, 25070.0], [93.9, 25329.0], [94.0, 25538.0], [94.1, 25863.0], [94.2, 26057.0], [94.3, 26297.0], [94.4, 26414.0], [94.5, 26678.0], [94.6, 27031.0], [94.7, 27161.0], [94.8, 27457.0], [94.9, 27646.0], [95.0, 27838.0], [95.1, 28122.0], [95.2, 28376.0], [95.3, 28605.0], [95.4, 28870.0], [95.5, 29042.0], [95.6, 29303.0], [95.7, 29558.0], [95.8, 29764.0], [95.9, 30152.0], [96.0, 30294.0], [96.1, 30585.0], [96.2, 30770.0], [96.3, 30882.0], [96.4, 31237.0], [96.5, 31441.0], [96.6, 31711.0], [96.7, 31909.0], [96.8, 32176.0], [96.9, 32439.0], [97.0, 32675.0], [97.1, 32876.0], [97.2, 33155.0], [97.3, 33330.0], [97.4, 33649.0], [97.5, 33800.0], [97.6, 34047.0], [97.7, 34293.0], [97.8, 34459.0], [97.9, 34780.0], [98.0, 34971.0], [98.1, 35277.0], [98.2, 35529.0], [98.3, 35752.0], [98.4, 35930.0], [98.5, 36210.0], [98.6, 36547.0], [98.7, 36802.0], [98.8, 36968.0], [98.9, 37206.0], [99.0, 37489.0], [99.1, 37742.0], [99.2, 38028.0], [99.3, 38202.0], [99.4, 38377.0], [99.5, 38642.0], [99.6, 38964.0], [99.7, 39188.0], [99.8, 39385.0], [99.9, 39567.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 591.0, "series": [{"data": [[0.0, 189.0], [100.0, 334.0], [32900.0, 2.0], [33300.0, 2.0], [33700.0, 4.0], [34100.0, 4.0], [34500.0, 2.0], [34900.0, 2.0], [35300.0, 4.0], [35700.0, 6.0], [36100.0, 2.0], [36500.0, 1.0], [36900.0, 4.0], [37300.0, 2.0], [37700.0, 4.0], [38100.0, 2.0], [38500.0, 4.0], [38900.0, 4.0], [39300.0, 4.0], [200.0, 292.0], [300.0, 183.0], [400.0, 196.0], [500.0, 386.0], [600.0, 220.0], [700.0, 133.0], [800.0, 63.0], [900.0, 67.0], [1000.0, 101.0], [1100.0, 338.0], [1200.0, 359.0], [1300.0, 591.0], [1400.0, 441.0], [1500.0, 73.0], [1600.0, 74.0], [1700.0, 153.0], [1800.0, 132.0], [1900.0, 86.0], [2000.0, 59.0], [2100.0, 55.0], [2300.0, 40.0], [2200.0, 50.0], [2400.0, 56.0], [2500.0, 27.0], [2600.0, 20.0], [2700.0, 40.0], [2800.0, 12.0], [3000.0, 82.0], [3100.0, 60.0], [3200.0, 21.0], [3400.0, 1.0], [3500.0, 3.0], [3700.0, 4.0], [3600.0, 13.0], [3800.0, 3.0], [3900.0, 50.0], [4000.0, 1.0], [4100.0, 2.0], [4200.0, 3.0], [4300.0, 8.0], [4400.0, 9.0], [4500.0, 3.0], [4600.0, 5.0], [4800.0, 5.0], [4900.0, 3.0], [5000.0, 2.0], [5100.0, 24.0], [5200.0, 5.0], [5300.0, 4.0], [5400.0, 3.0], [5500.0, 1.0], [5600.0, 19.0], [5700.0, 4.0], [5800.0, 1.0], [5900.0, 7.0], [6000.0, 4.0], [6100.0, 2.0], [6300.0, 29.0], [6200.0, 2.0], [6400.0, 3.0], [6500.0, 2.0], [6600.0, 1.0], [6700.0, 4.0], [6800.0, 3.0], [7000.0, 1.0], [7100.0, 3.0], [7300.0, 5.0], [7400.0, 2.0], [7200.0, 3.0], [7600.0, 2.0], [7500.0, 3.0], [7800.0, 4.0], [7700.0, 2.0], [7900.0, 1.0], [8000.0, 3.0], [8100.0, 3.0], [8200.0, 3.0], [8400.0, 2.0], [8300.0, 2.0], [8500.0, 2.0], [8700.0, 2.0], [8600.0, 1.0], [8800.0, 4.0], [8900.0, 4.0], [9000.0, 5.0], [9200.0, 1.0], [9100.0, 1.0], [9300.0, 4.0], [9500.0, 5.0], [9400.0, 1.0], [9700.0, 2.0], [9600.0, 1.0], [9800.0, 2.0], [9900.0, 4.0], [10000.0, 3.0], [10200.0, 3.0], [10100.0, 2.0], [10400.0, 4.0], [10700.0, 1.0], [10500.0, 2.0], [10600.0, 2.0], [10800.0, 3.0], [10900.0, 2.0], [11000.0, 2.0], [11100.0, 4.0], [11200.0, 2.0], [11300.0, 4.0], [11400.0, 2.0], [11500.0, 5.0], [11700.0, 3.0], [11900.0, 5.0], [11800.0, 1.0], [12200.0, 1.0], [12000.0, 2.0], [12100.0, 2.0], [12300.0, 6.0], [12600.0, 3.0], [12500.0, 4.0], [12700.0, 1.0], [12800.0, 3.0], [12900.0, 3.0], [13000.0, 2.0], [13100.0, 2.0], [13200.0, 2.0], [13300.0, 4.0], [13500.0, 4.0], [13600.0, 2.0], [13400.0, 1.0], [13700.0, 2.0], [13800.0, 4.0], [13900.0, 2.0], [14000.0, 2.0], [14200.0, 4.0], [14100.0, 2.0], [14300.0, 3.0], [14400.0, 2.0], [14600.0, 3.0], [14500.0, 2.0], [14700.0, 3.0], [14800.0, 2.0], [14900.0, 4.0], [15100.0, 2.0], [15300.0, 4.0], [15000.0, 1.0], [15200.0, 2.0], [15600.0, 3.0], [15400.0, 3.0], [15800.0, 4.0], [15500.0, 2.0], [15700.0, 1.0], [15900.0, 1.0], [16200.0, 4.0], [16000.0, 2.0], [16300.0, 2.0], [16100.0, 2.0], [17200.0, 3.0], [16400.0, 2.0], [16600.0, 4.0], [16800.0, 2.0], [17000.0, 1.0], [17400.0, 3.0], [17600.0, 2.0], [17800.0, 4.0], [18000.0, 3.0], [18200.0, 2.0], [18400.0, 4.0], [19200.0, 4.0], [18600.0, 1.0], [18800.0, 2.0], [19400.0, 1.0], [19000.0, 1.0], [19600.0, 6.0], [20000.0, 4.0], [19800.0, 2.0], [20200.0, 1.0], [20400.0, 3.0], [20600.0, 3.0], [20800.0, 4.0], [21000.0, 5.0], [21200.0, 6.0], [21400.0, 2.0], [21600.0, 4.0], [22000.0, 3.0], [21800.0, 2.0], [22200.0, 2.0], [22400.0, 4.0], [22600.0, 3.0], [22800.0, 2.0], [23000.0, 2.0], [23200.0, 1.0], [23400.0, 2.0], [23600.0, 3.0], [24000.0, 1.0], [24400.0, 4.0], [24200.0, 1.0], [24600.0, 3.0], [24800.0, 1.0], [25000.0, 4.0], [25400.0, 2.0], [25200.0, 1.0], [25600.0, 1.0], [25800.0, 4.0], [26200.0, 2.0], [26000.0, 1.0], [26400.0, 2.0], [26600.0, 3.0], [27000.0, 6.0], [26800.0, 2.0], [27200.0, 1.0], [27400.0, 4.0], [27600.0, 2.0], [27800.0, 4.0], [28000.0, 3.0], [28200.0, 1.0], [28400.0, 2.0], [28600.0, 3.0], [28800.0, 4.0], [29000.0, 2.0], [29200.0, 2.0], [29400.0, 1.0], [29600.0, 3.0], [30000.0, 3.0], [29800.0, 2.0], [30200.0, 4.0], [30400.0, 2.0], [30600.0, 3.0], [30800.0, 4.0], [31000.0, 2.0], [31200.0, 2.0], [31400.0, 3.0], [31600.0, 3.0], [31800.0, 2.0], [32000.0, 3.0], [32200.0, 1.0], [32400.0, 2.0], [32600.0, 1.0], [32800.0, 5.0], [33200.0, 3.0], [33600.0, 3.0], [34000.0, 2.0], [34400.0, 3.0], [34800.0, 3.0], [35200.0, 3.0], [35600.0, 1.0], [36000.0, 3.0], [36400.0, 2.0], [36800.0, 3.0], [37200.0, 1.0], [37600.0, 3.0], [38000.0, 4.0], [38400.0, 1.0], [38800.0, 1.0], [39200.0, 2.0], [39600.0, 5.0], [33100.0, 4.0], [33500.0, 3.0], [33900.0, 4.0], [34300.0, 3.0], [34700.0, 4.0], [35100.0, 1.0], [35500.0, 2.0], [35900.0, 3.0], [36700.0, 3.0], [36300.0, 2.0], [37100.0, 3.0], [37500.0, 2.0], [38300.0, 3.0], [38700.0, 2.0], [39100.0, 4.0], [39500.0, 4.0], [16500.0, 4.0], [16900.0, 4.0], [16700.0, 2.0], [17100.0, 4.0], [17300.0, 1.0], [17700.0, 2.0], [17500.0, 1.0], [17900.0, 2.0], [18100.0, 4.0], [18500.0, 5.0], [18700.0, 3.0], [18900.0, 2.0], [19100.0, 2.0], [19300.0, 1.0], [19500.0, 5.0], [19700.0, 1.0], [19900.0, 2.0], [20300.0, 4.0], [20100.0, 1.0], [20500.0, 1.0], [20700.0, 3.0], [21100.0, 2.0], [20900.0, 1.0], [21300.0, 1.0], [21500.0, 1.0], [21700.0, 2.0], [21900.0, 3.0], [22100.0, 3.0], [22300.0, 2.0], [22500.0, 1.0], [22700.0, 2.0], [22900.0, 3.0], [23100.0, 5.0], [23300.0, 4.0], [23500.0, 2.0], [23700.0, 2.0], [23900.0, 7.0], [24100.0, 4.0], [24300.0, 2.0], [24500.0, 3.0], [24700.0, 3.0], [24900.0, 3.0], [25100.0, 2.0], [25300.0, 3.0], [25500.0, 3.0], [25700.0, 2.0], [25900.0, 3.0], [26300.0, 5.0], [26100.0, 4.0], [26500.0, 2.0], [26700.0, 1.0], [26900.0, 1.0], [27100.0, 3.0], [27300.0, 3.0], [27500.0, 1.0], [27700.0, 3.0], [27900.0, 1.0], [28100.0, 5.0], [28500.0, 3.0], [28300.0, 1.0], [28700.0, 2.0], [28900.0, 3.0], [29100.0, 2.0], [29500.0, 3.0], [29300.0, 4.0], [29700.0, 2.0], [30100.0, 3.0], [30300.0, 2.0], [30700.0, 5.0], [30500.0, 2.0], [31100.0, 2.0], [30900.0, 1.0], [31300.0, 3.0], [31700.0, 4.0], [31900.0, 3.0], [32100.0, 3.0], [32500.0, 5.0], [32700.0, 2.0], [32300.0, 2.0], [33400.0, 1.0], [33800.0, 1.0], [34200.0, 2.0], [34600.0, 1.0], [35000.0, 2.0], [35400.0, 1.0], [35800.0, 1.0], [36200.0, 2.0], [36600.0, 2.0], [37000.0, 2.0], [37400.0, 4.0], [37800.0, 2.0], [38200.0, 4.0], [38600.0, 1.0], [39000.0, 1.0], [39400.0, 2.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 108.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2590.0, "series": [{"data": [[0.0, 1197.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2590.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2105.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 108.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.000000000000004, "minX": 1.63090386E12, "maxY": 502.23899999999946, "series": [{"data": [[1.63090386E12, 502.23899999999946]], "isOverall": false, "label": "addDemand", "isController": false}, {"data": [[1.63090392E12, 383.77499999999964]], "isOverall": false, "label": "getDemandByIde", "isController": false}, {"data": [[1.63090392E12, 418.99699999999956]], "isOverall": false, "label": "editDemand", "isController": false}, {"data": [[1.63090386E12, 374.00817160367745], [1.63090392E12, 14.000000000000004]], "isOverall": false, "label": "listOnesDemandsByPage", "isController": false}, {"data": [[1.63090386E12, 208.7970000000002]], "isOverall": false, "label": "removeDemand", "isController": false}, {"data": [[1.63090386E12, 495.0029999999989]], "isOverall": false, "label": "listAllDemandsByPage", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090392E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 218.0, "minX": 1.0, "maxY": 38561.0, "series": [{"data": [[2.0, 12930.0], [3.0, 2899.8], [4.0, 21487.25], [5.0, 16652.333333333332], [6.0, 9361.333333333332], [7.0, 22933.0], [8.0, 13403.25], [9.0, 8350.0], [10.0, 22519.0], [11.0, 6432.888888888889], [12.0, 20089.5], [13.0, 6073.7], [14.0, 10013.833333333334], [15.0, 20036.5], [16.0, 8658.5], [17.0, 8225.285714285714], [18.0, 5384.727272727273], [19.0, 7618.125], [20.0, 11523.5], [21.0, 7909.909090909092], [22.0, 8852.6], [23.0, 7950.166666666666], [24.0, 7554.666666666667], [25.0, 9199.285714285714], [26.0, 5356.538461538462], [27.0, 3765.1538461538466], [28.0, 7537.333333333333], [29.0, 6133.25], [30.0, 894.375], [31.0, 7361.5], [33.0, 6716.499999999999], [32.0, 38561.0], [34.0, 4979.583333333334], [35.0, 13936.0], [36.0, 5601.823529411765], [37.0, 7392.571428571429], [38.0, 7575.285714285715], [39.0, 13784.0], [40.0, 5606.777777777777], [41.0, 7037.333333333333], [43.0, 7117.625], [42.0, 6043.727272727273], [45.0, 6279.625], [44.0, 9887.4], [47.0, 6617.333333333333], [46.0, 9253.2], [49.0, 8072.5], [48.0, 5962.75], [50.0, 7260.0], [51.0, 11168.25], [52.0, 4929.000000000001], [53.0, 13901.0], [55.0, 6108.400000000001], [54.0, 6853.166666666666], [57.0, 5163.0], [56.0, 11121.75], [59.0, 7644.142857142856], [58.0, 9150.4], [61.0, 2549.4999999999995], [60.0, 10166.75], [63.0, 6188.5], [62.0, 8629.8], [67.0, 6076.888888888889], [65.0, 6218.375], [64.0, 7819.666666666666], [66.0, 7602.999999999999], [71.0, 7165.285714285714], [70.0, 8506.2], [69.0, 9585.2], [68.0, 4535.166666666667], [75.0, 5320.214285714286], [74.0, 12901.666666666666], [73.0, 10520.0], [72.0, 5339.888888888889], [77.0, 6485.666666666667], [76.0, 3039.2857142857138], [79.0, 10287.5], [78.0, 6236.375], [83.0, 6474.75], [82.0, 8708.6], [80.0, 4388.999999999999], [81.0, 5630.375], [86.0, 4366.0], [85.0, 8224.333333333332], [84.0, 8581.8], [87.0, 6238.333333333334], [90.0, 2511.0555555555557], [88.0, 2951.25], [91.0, 3333.923076923077], [89.0, 4057.75], [95.0, 3282.588235294118], [94.0, 3841.000000000001], [93.0, 4694.111111111111], [92.0, 2082.88], [99.0, 2148.857142857142], [98.0, 3305.3333333333335], [96.0, 3858.6363636363635], [97.0, 3817.7272727272725], [103.0, 3545.384615384615], [102.0, 4974.3], [101.0, 5267.25], [100.0, 5774.285714285714], [107.0, 1773.6], [106.0, 4728.0], [105.0, 5046.5], [104.0, 3371.2000000000003], [111.0, 7104.999999999999], [110.0, 1224.25], [109.0, 3036.4999999999995], [108.0, 7879.5], [115.0, 5502.0], [114.0, 8051.4], [113.0, 3006.6249999999995], [112.0, 5053.25], [119.0, 3787.5], [118.0, 6785.666666666666], [117.0, 6989.333333333334], [116.0, 8409.4], [122.0, 4750.5], [121.0, 9152.5], [120.0, 8277.8], [123.0, 6983.0], [126.0, 3758.2500000000005], [124.0, 7109.166666666666], [127.0, 7222.666666666666], [125.0, 6119.142857142858], [135.0, 4161.400000000001], [134.0, 8110.0], [132.0, 3634.0714285714284], [131.0, 3405.769230769231], [128.0, 4425.333333333333], [133.0, 4499.222222222223], [130.0, 4849.125], [129.0, 4837.666666666667], [143.0, 3839.090909090909], [140.0, 3020.733333333333], [139.0, 5501.714285714285], [138.0, 3609.583333333333], [137.0, 4204.0], [136.0, 6505.833333333334], [142.0, 9533.0], [141.0, 3844.4545454545455], [151.0, 4834.333333333334], [150.0, 1887.7916666666667], [149.0, 3103.3076923076924], [148.0, 2430.0000000000005], [145.0, 3168.9999999999995], [147.0, 4879.249999999999], [144.0, 5271.875], [146.0, 5551.875], [159.0, 3294.8], [158.0, 5395.785714285715], [157.0, 694.625], [156.0, 6116.285714285715], [154.0, 4246.222222222223], [153.0, 6885.166666666667], [152.0, 3128.5000000000005], [155.0, 4720.875000000001], [167.0, 1045.0], [166.0, 5080.0], [165.0, 3126.4615384615386], [164.0, 5233.111111111111], [163.0, 5291.0], [162.0, 3660.636363636364], [161.0, 5397.875], [160.0, 8984.5], [175.0, 3342.133333333333], [174.0, 5623.000000000001], [173.0, 7803.6], [172.0, 5620.142857142857], [171.0, 4979.75], [170.0, 6468.166666666667], [169.0, 3919.909090909091], [168.0, 10267.857142857143], [183.0, 3964.4], [182.0, 5214.0], [180.0, 4570.111111111111], [179.0, 7479.4], [178.0, 5958.428571428572], [177.0, 4403.899999999999], [176.0, 9064.5], [181.0, 7408.4], [190.0, 7429.4], [189.0, 4532.25], [188.0, 2993.785714285714], [187.0, 3862.090909090909], [185.0, 3814.5], [184.0, 7156.0], [191.0, 5015.5], [186.0, 6254.833333333333], [199.0, 4399.222222222223], [198.0, 3495.5454545454554], [197.0, 5633.142857142857], [195.0, 1933.2380952380954], [194.0, 3253.333333333333], [193.0, 6739.833333333333], [192.0, 6501.333333333334], [196.0, 3648.5384615384623], [205.0, 3883.1], [204.0, 2977.6000000000004], [203.0, 5926.714285714285], [202.0, 5842.333333333333], [201.0, 4007.777777777778], [200.0, 4506.666666666666], [207.0, 9358.75], [206.0, 7364.4], [215.0, 5047.25], [214.0, 6708.8], [213.0, 4448.444444444444], [212.0, 4019.222222222222], [211.0, 3586.833333333333], [210.0, 11257.333333333334], [208.0, 4769.875], [209.0, 5160.125], [223.0, 3997.4444444444443], [222.0, 3587.5], [220.0, 3760.1], [218.0, 3187.2000000000003], [216.0, 6886.6], [221.0, 3052.133333333333], [219.0, 6601.6], [217.0, 5610.428571428571], [231.0, 3320.928571428571], [229.0, 6877.4], [227.0, 4632.666666666667], [225.0, 6663.2], [224.0, 6192.571428571428], [230.0, 6892.8], [228.0, 4781.25], [226.0, 4089.2000000000003], [238.0, 2901.999999999999], [237.0, 4731.749999999999], [235.0, 4389.750000000001], [233.0, 4767.5], [232.0, 4631.25], [236.0, 8826.25], [239.0, 5949.666666666667], [234.0, 2185.0], [247.0, 4045.1111111111104], [245.0, 5392.571428571428], [241.0, 7345.666666666667], [240.0, 979.0], [246.0, 6674.4], [243.0, 4938.571428571428], [242.0, 3008.5333333333338], [244.0, 4328.800000000001], [255.0, 6777.8], [253.0, 5456.0], [252.0, 5266.857142857142], [251.0, 5251.428571428572], [249.0, 3667.615384615385], [254.0, 7060.0], [250.0, 4303.8], [248.0, 15155.0], [259.0, 3837.2000000000003], [271.0, 2487.666666666667], [270.0, 6678.6], [269.0, 6440.6], [268.0, 8457.75], [266.0, 7864.75], [267.0, 29171.0], [265.0, 3362.5], [264.0, 10678.333333333332], [263.0, 3154.928571428571], [260.0, 6074.0], [261.0, 4052.599999999999], [262.0, 10465.666666666668], [258.0, 4804.285714285715], [256.0, 6105.0], [257.0, 4535.874999999999], [286.0, 8050.25], [287.0, 3191.642857142857], [284.0, 14826.5], [285.0, 6518.4], [283.0, 4717.142857142858], [282.0, 7214.8], [281.0, 4655.571428571428], [280.0, 2918.923076923077], [277.0, 7917.75], [276.0, 3763.5833333333335], [272.0, 4566.25], [279.0, 4796.857142857142], [278.0, 6175.999999999999], [274.0, 5376.625], [273.0, 6078.4], [275.0, 5617.142857142858], [302.0, 6016.0], [303.0, 5286.714285714285], [301.0, 5035.0], [300.0, 4833.125], [299.0, 5737.0], [298.0, 2044.9444444444443], [297.0, 14639.5], [296.0, 5325.0], [295.0, 4145.375], [294.0, 3989.5000000000005], [288.0, 3501.1], [291.0, 6679.4], [290.0, 9923.666666666668], [289.0, 3979.624999999999], [293.0, 5486.125], [292.0, 3703.0], [318.0, 5361.5], [315.0, 1827.0943396226412], [314.0, 10241.0], [313.0, 3148.5], [312.0, 6709.2], [311.0, 6668.6], [309.0, 5532.0], [308.0, 27726.0], [310.0, 7108.6], [307.0, 5400.428571428572], [317.0, 9397.666666666666], [316.0, 5036.5714285714275], [305.0, 3335.9166666666665], [304.0, 7135.0], [306.0, 27556.0], [319.0, 5529.428571428572], [322.0, 4013.5555555555557], [332.0, 3266.9], [330.0, 3173.642857142858], [328.0, 9680.666666666666], [329.0, 3855.8888888888887], [331.0, 6001.2], [335.0, 7346.75], [334.0, 5940.6], [333.0, 4347.875], [327.0, 4718.857142857143], [326.0, 5668.666666666667], [325.0, 6228.0], [324.0, 3597.1111111111113], [323.0, 8028.500000000001], [321.0, 3803.2], [320.0, 4503.375], [339.0, 3362.2], [348.0, 3667.333333333334], [349.0, 4885.142857142857], [346.0, 6258.4], [345.0, 4230.0], [343.0, 2866.5294117647054], [340.0, 4200.125], [342.0, 5549.2], [341.0, 7396.0], [338.0, 3084.416666666667], [337.0, 4734.857142857143], [336.0, 14202.0], [347.0, 4186.0], [344.0, 4448.857142857142], [351.0, 9997.0], [350.0, 9252.0], [355.0, 2880.071428571428], [366.0, 5339.666666666667], [364.0, 7649.0], [365.0, 5272.833333333333], [363.0, 3998.8888888888887], [362.0, 5156.333333333333], [367.0, 4106.375], [360.0, 5838.6], [361.0, 6746.4], [359.0, 6115.0], [357.0, 6123.0], [358.0, 4323.75], [356.0, 7561.5], [354.0, 5804.333333333333], [353.0, 3671.0], [352.0, 6158.0], [382.0, 6269.4], [383.0, 3968.0], [381.0, 2572.846153846154], [380.0, 3133.833333333333], [378.0, 4697.833333333334], [379.0, 3591.2999999999997], [377.0, 3581.555555555556], [376.0, 7372.5], [375.0, 3200.6], [374.0, 2735.2000000000003], [373.0, 13210.0], [372.0, 6774.999999999999], [371.0, 2986.5714285714284], [368.0, 5572.833333333333], [369.0, 8968.0], [370.0, 24993.0], [387.0, 2235.333333333333], [397.0, 12385.75], [399.0, 2391.5], [392.0, 4065.7142857142853], [398.0, 4842.833333333334], [396.0, 822.8], [395.0, 6324.222222222223], [394.0, 921.5714285714284], [393.0, 3773.3333333333335], [391.0, 3578.666666666666], [389.0, 2968.1], [390.0, 5197.714285714286], [388.0, 4714.333333333333], [385.0, 4444.714285714285], [386.0, 8716.333333333332], [384.0, 3344.2999999999997], [413.0, 6694.749999999999], [415.0, 3602.375], [414.0, 5743.0], [412.0, 4232.375], [403.0, 4466.285714285714], [402.0, 4338.25], [400.0, 4280.0], [401.0, 12557.5], [411.0, 3568.0], [410.0, 3183.1111111111113], [409.0, 5116.5], [408.0, 3327.916666666667], [407.0, 5346.2], [406.0, 8768.666666666666], [405.0, 6909.749999999999], [404.0, 3944.3749999999995], [430.0, 3064.2727272727275], [431.0, 2518.666666666667], [428.0, 3938.1428571428573], [429.0, 3106.2000000000003], [419.0, 8188.333333333334], [418.0, 3660.3750000000005], [417.0, 2978.4615384615386], [416.0, 6804.25], [427.0, 4161.714285714286], [426.0, 2640.9333333333334], [425.0, 3279.8888888888887], [424.0, 3102.7272727272725], [423.0, 3849.142857142857], [422.0, 4105.428571428571], [420.0, 4954.166666666666], [421.0, 2609.769230769231], [435.0, 4803.5], [446.0, 3710.222222222222], [447.0, 4783.666666666667], [444.0, 6634.25], [445.0, 5352.8], [443.0, 4925.5], [441.0, 3153.7999999999997], [442.0, 5668.6], [440.0, 5713.000000000001], [438.0, 5316.0], [437.0, 3722.4444444444443], [436.0, 5728.6], [433.0, 5562.0], [434.0, 2756.727272727273], [432.0, 4717.0], [439.0, 5690.6], [462.0, 3746.5555555555557], [463.0, 6315.5], [461.0, 3990.1428571428573], [460.0, 8450.666666666666], [459.0, 4111.142857142857], [458.0, 8030.666666666666], [457.0, 2783.357142857143], [456.0, 5614.6], [455.0, 4359.0], [454.0, 4770.0], [448.0, 4259.571428571428], [450.0, 8159.333333333334], [451.0, 4746.0], [449.0, 3947.5714285714284], [453.0, 8424.0], [452.0, 4590.0], [478.0, 3878.0000000000005], [479.0, 4124.285714285715], [476.0, 3388.75], [477.0, 5450.2], [467.0, 4528.166666666666], [465.0, 6093.25], [466.0, 3005.818181818182], [464.0, 6373.0], [475.0, 3202.0909090909086], [474.0, 6470.5], [472.0, 5264.2], [473.0, 11470.5], [471.0, 4528.5], [470.0, 3545.1250000000005], [469.0, 7970.666666666666], [468.0, 1710.8], [494.0, 4008.428571428572], [495.0, 4343.333333333333], [493.0, 5095.0], [492.0, 5302.6], [491.0, 7787.333333333334], [490.0, 3452.7777777777783], [488.0, 4514.666666666667], [489.0, 7872.0], [487.0, 4002.8571428571427], [486.0, 4617.166666666666], [481.0, 5147.4], [480.0, 10960.0], [483.0, 6251.75], [482.0, 3809.4999999999995], [485.0, 2802.3636363636365], [484.0, 7887.0], [508.0, 5878.5], [510.0, 4011.1428571428573], [511.0, 5982.75], [504.0, 6041.75], [509.0, 5141.0], [507.0, 4485.5], [506.0, 7690.333333333334], [505.0, 4004.5714285714284], [502.0, 5226.2], [496.0, 3781.0], [497.0, 6232.75], [503.0, 4536.833333333334], [499.0, 6170.0], [498.0, 5231.4], [501.0, 7406.666666666666], [500.0, 4071.1428571428573], [519.0, 3801.9999999999995], [532.0, 4788.0], [543.0, 2968.444444444444], [528.0, 3116.4000000000005], [541.0, 6493.666666666667], [540.0, 2477.8333333333335], [542.0, 2735.2], [539.0, 3414.625], [537.0, 4225.833333333333], [536.0, 7240.0], [538.0, 7214.666666666666], [517.0, 2829.083333333333], [518.0, 10499.5], [516.0, 3259.5], [515.0, 3627.571428571429], [514.0, 4385.833333333334], [513.0, 5871.75], [512.0, 7528.333333333334], [527.0, 4409.0], [526.0, 4764.8], [525.0, 5792.0], [524.0, 4718.8], [523.0, 4119.333333333333], [522.0, 3991.666666666667], [521.0, 4352.0], [520.0, 3370.25], [535.0, 3498.7142857142853], [534.0, 3573.8571428571427], [533.0, 2934.0], [530.0, 3472.428571428571], [531.0, 3429.857142857143], [529.0, 4813.2], [573.0, 6816.666666666666], [574.0, 3914.5000000000005], [561.0, 3313.25], [560.0, 6987.333333333334], [575.0, 3709.9999999999995], [563.0, 5507.0], [562.0, 4090.1666666666665], [572.0, 5280.75], [571.0, 5370.5], [570.0, 3996.8333333333335], [569.0, 6790.666666666666], [568.0, 5456.625], [558.0, 4587.2], [557.0, 3245.777777777778], [559.0, 9863.5], [545.0, 4765.2], [547.0, 4910.2], [546.0, 9763.5], [549.0, 7282.333333333334], [548.0, 4160.833333333333], [544.0, 4217.333333333333], [551.0, 5324.75], [550.0, 4652.2], [556.0, 3662.857142857143], [553.0, 2980.4], [552.0, 9680.0], [555.0, 9918.5], [554.0, 4221.0], [567.0, 1015.5], [566.0, 4588.2], [565.0, 3227.2222222222226], [564.0, 6717.333333333334], [600.0, 1317.9166666666667], [593.0, 4408.0], [607.0, 4098.2], [606.0, 11270.666666666668], [605.0, 1255.0], [604.0, 3337.0], [603.0, 6165.333333333334], [602.0, 9104.5], [601.0, 6288.666666666667], [591.0, 4381.8], [576.0, 3887.4999999999995], [579.0, 4303.2], [578.0, 5340.25], [577.0, 4505.0], [581.0, 4558.8], [583.0, 4317.8], [582.0, 6654.333333333334], [580.0, 3586.142857142857], [590.0, 4382.2], [589.0, 5139.25], [588.0, 4421.0], [587.0, 3317.3749999999995], [586.0, 5122.0], [585.0, 3456.0], [584.0, 5369.25], [596.0, 4553.8], [597.0, 9036.5], [599.0, 8977.0], [598.0, 3769.3333333333335], [595.0, 8650.0], [594.0, 3650.3333333333335], [592.0, 6376.0], [632.0, 3940.2], [638.0, 3430.8461538461543], [639.0, 4011.4], [624.0, 1370.0], [626.0, 4902.0], [625.0, 10558.666666666668], [636.0, 2642.0], [637.0, 1384.0], [635.0, 3230.8571428571427], [634.0, 3121.375], [633.0, 3664.6666666666665], [631.0, 4602.0], [630.0, 5848.0], [629.0, 3964.8], [627.0, 2792.875], [628.0, 4804.0], [623.0, 8074.0], [622.0, 1414.0], [608.0, 8840.5], [611.0, 5934.0], [612.0, 1259.0], [609.0, 3574.5], [614.0, 4822.75], [615.0, 15475.0], [613.0, 10691.666666666666], [621.0, 6012.0], [620.0, 5878.666666666666], [619.0, 5837.666666666666], [618.0, 4689.0], [616.0, 4485.25], [617.0, 4816.5], [669.0, 3306.0], [660.0, 1195.0], [671.0, 2725.0], [670.0, 3759.0], [657.0, 4309.75], [656.0, 3735.4], [659.0, 3097.8333333333335], [658.0, 2299.3636363636365], [668.0, 2938.571428571429], [667.0, 3992.4999999999995], [666.0, 2355.777777777778], [665.0, 3301.8333333333335], [664.0, 3842.8], [647.0, 3207.571428571429], [646.0, 4465.0], [645.0, 4603.0], [644.0, 4462.75], [643.0, 5564.333333333334], [642.0, 2887.5], [641.0, 5492.0], [640.0, 5826.666666666666], [655.0, 3705.8], [653.0, 2875.7500000000005], [654.0, 4589.0], [652.0, 3021.8571428571427], [650.0, 1202.5714285714287], [649.0, 5662.666666666666], [648.0, 2445.8461538461543], [651.0, 14103.0], [663.0, 1689.6666666666667], [662.0, 3756.6], [661.0, 2881.4375], [696.0, 3034.0], [701.0, 2367.75], [703.0, 2944.5714285714284], [702.0, 5236.333333333333], [700.0, 3262.2], [699.0, 2192.2], [698.0, 3776.0], [697.0, 2998.8571428571427], [687.0, 3463.4], [673.0, 3649.6], [672.0, 2839.714285714286], [676.0, 2513.9], [675.0, 6925.5], [674.0, 2259.909090909091], [678.0, 3225.5000000000005], [679.0, 4269.5], [677.0, 3213.4], [686.0, 2909.666666666667], [685.0, 2378.8], [684.0, 2499.3333333333335], [683.0, 3681.444444444445], [682.0, 837.0], [681.0, 3177.166666666667], [680.0, 3776.6], [694.0, 2310.333333333334], [693.0, 4546.5], [695.0, 3672.6], [692.0, 2392.428571428571], [689.0, 2726.142857142857], [688.0, 3066.666666666667], [691.0, 5180.0], [690.0, 2682.5], [728.0, 3657.25], [733.0, 3352.8], [734.0, 4346.0], [735.0, 3936.25], [720.0, 2923.1428571428573], [732.0, 3461.0], [731.0, 2648.777777777778], [730.0, 2785.3333333333335], [729.0, 4549.333333333333], [719.0, 4551.333333333333], [704.0, 2766.625], [706.0, 4703.333333333333], [705.0, 4054.25], [708.0, 6593.0], [707.0, 1211.6666666666667], [711.0, 2687.9999999999995], [710.0, 2865.9999999999995], [709.0, 6196.5], [718.0, 4521.666666666667], [717.0, 2567.4444444444443], [716.0, 3032.166666666667], [715.0, 6379.0], [714.0, 1619.8], [713.0, 2872.571428571429], [712.0, 6386.5], [727.0, 2562.8333333333335], [726.0, 6294.5], [725.0, 6310.0], [724.0, 3024.0], [723.0, 3419.4], [722.0, 3117.2], [721.0, 2810.0], [761.0, 2990.6], [766.0, 2948.2], [767.0, 2101.5714285714284], [753.0, 2997.3333333333335], [752.0, 2599.8], [755.0, 3127.75], [756.0, 1662.0], [754.0, 3917.0], [765.0, 3165.0], [764.0, 3457.25], [763.0, 2530.2], [762.0, 9607.0], [760.0, 3265.5], [743.0, 1990.8333333333335], [741.0, 3129.8], [742.0, 10735.0], [740.0, 3278.75], [738.0, 2067.8333333333326], [739.0, 2740.428571428571], [736.0, 4003.0], [737.0, 3830.5], [751.0, 3847.3333333333335], [749.0, 2801.2], [750.0, 4613.0], [748.0, 5407.0], [747.0, 4515.8], [746.0, 1539.0], [745.0, 3136.5], [744.0, 4218.666666666667], [759.0, 2978.0], [758.0, 2550.25], [757.0, 3132.0], [795.0, 1661.8000000000002], [799.0, 1938.0], [798.0, 3705.6666666666665], [797.0, 1970.5555555555557], [796.0, 4715.5], [793.0, 2821.2], [794.0, 4770.0], [792.0, 4622.0], [787.0, 1814.6666666666665], [786.0, 5211.0], [789.0, 4129.666666666667], [788.0, 5289.0], [791.0, 8736.0], [790.0, 4125.666666666667], [785.0, 3056.75], [783.0, 2228.2], [782.0, 9016.0], [781.0, 2956.6], [769.0, 5049.0], [768.0, 2085.4444444444443], [771.0, 2109.714285714286], [770.0, 2296.4285714285716], [773.0, 2831.25], [775.0, 3739.333333333333], [774.0, 2925.6], [772.0, 4945.5], [784.0, 3266.0], [780.0, 3041.0], [777.0, 2290.5], [779.0, 3069.0], [778.0, 2832.8571428571427], [776.0, 3123.25], [824.0, 1361.2], [830.0, 3896.75], [829.0, 845.0], [828.0, 3969.5], [827.0, 1299.5], [826.0, 7177.0], [825.0, 4369.5], [816.0, 1742.75], [817.0, 7539.0], [819.0, 3226.0], [818.0, 7460.0], [821.0, 3645.6666666666665], [820.0, 7697.0], [823.0, 3619.0], [822.0, 7235.0], [831.0, 7177.0], [812.0, 2351.75], [811.0, 2963.0], [813.0, 4185.5], [805.0, 2237.3333333333335], [807.0, 4860.5], [806.0, 7871.0], [804.0, 4353.0], [815.0, 7660.0], [801.0, 3391.0], [800.0, 3776.3333333333335], [803.0, 8229.0], [802.0, 8132.0], [814.0, 2433.714285714286], [808.0, 3444.0], [809.0, 2988.2], [810.0, 7833.0], [837.0, 2099.5], [861.0, 2344.333333333333], [862.0, 3142.5], [863.0, 5713.0], [848.0, 4679.333333333333], [859.0, 1918.75], [858.0, 2460.5], [857.0, 2868.6666666666665], [860.0, 2866.3333333333335], [856.0, 1912.75], [853.0, 1443.7777777777776], [855.0, 6091.0], [854.0, 6092.0], [852.0, 1928.0], [851.0, 3355.0], [850.0, 2991.6666666666665], [849.0, 2730.3333333333335], [843.0, 1843.857142857143], [838.0, 588.5], [839.0, 4010.25], [836.0, 3651.5], [835.0, 6863.0], [834.0, 7063.0], [833.0, 2223.8333333333335], [832.0, 2620.0], [846.0, 2979.6666666666665], [847.0, 1319.0], [845.0, 6473.0], [844.0, 6483.0], [841.0, 1552.0], [840.0, 6721.0], [842.0, 6506.0], [888.0, 1844.0], [894.0, 1844.0], [895.0, 2525.0], [881.0, 5040.0], [880.0, 5213.0], [892.0, 2570.5], [893.0, 4610.0], [891.0, 1477.25], [890.0, 2654.5], [889.0, 4866.0], [878.0, 2118.333333333333], [877.0, 5034.0], [866.0, 1565.4], [865.0, 5702.0], [864.0, 2192.6], [879.0, 5228.0], [868.0, 2313.0], [867.0, 3090.5], [870.0, 2982.5], [871.0, 5415.0], [869.0, 2354.333333333333], [876.0, 2919.5], [875.0, 2941.5], [874.0, 1454.0], [873.0, 5354.0], [872.0, 5358.0], [887.0, 2645.5], [886.0, 4879.0], [885.0, 4965.0], [884.0, 1902.6666666666667], [883.0, 1994.0], [882.0, 2003.6666666666667], [923.0, 3214.0], [927.0, 828.875], [921.0, 652.7333333333333], [920.0, 3533.0], [903.0, 4034.0], [902.0, 4218.0], [901.0, 4256.0], [922.0, 3228.0], [924.0, 3208.0], [926.0, 3176.0], [925.0, 3172.0], [912.0, 384.0], [913.0, 2379.25], [911.0, 1182.6], [910.0, 1630.0], [909.0, 3930.0], [908.0, 4118.0], [907.0, 4125.0], [906.0, 3950.0], [905.0, 3965.0], [904.0, 4204.0], [900.0, 2449.5], [899.0, 1808.6666666666667], [898.0, 4495.0], [897.0, 4506.0], [896.0, 4520.0], [914.0, 1885.3333333333335], [916.0, 2247.0], [915.0, 3772.0], [917.0, 3743.0], [919.0, 3536.0], [918.0, 3745.0], [956.0, 2037.0], [932.0, 1630.0], [938.0, 979.25], [940.0, 2766.0], [939.0, 2766.0], [942.0, 2442.0], [941.0, 2483.0], [937.0, 843.2], [936.0, 1590.5], [933.0, 1186.0], [935.0, 2784.0], [934.0, 2819.0], [953.0, 2066.0], [952.0, 2087.0], [955.0, 2047.0], [954.0, 2063.0], [931.0, 1225.6666666666665], [930.0, 3142.0], [929.0, 3145.0], [928.0, 3157.0], [943.0, 2440.0], [959.0, 2045.0], [945.0, 2410.0], [944.0, 2432.0], [947.0, 2398.0], [946.0, 2408.0], [949.0, 2387.0], [948.0, 2419.0], [951.0, 2111.0], [950.0, 2405.0], [958.0, 2050.0], [957.0, 2037.0], [990.0, 339.0], [991.0, 218.0], [977.0, 1320.0], [976.0, 1318.0], [986.0, 414.0], [967.0, 1680.5], [983.0, 454.6666666666667], [982.0, 395.6], [978.0, 833.5], [980.0, 1284.0], [979.0, 1309.0], [974.0, 1007.0], [971.0, 860.5], [972.0, 1335.0], [970.0, 515.578947368421], [969.0, 918.8], [968.0, 1685.0], [966.0, 440.5], [965.0, 1098.5], [964.0, 1691.0], [963.0, 1100.5], [975.0, 1324.0], [960.0, 2030.0], [962.0, 1703.0], [961.0, 1724.0], [1000.0, 333.7142857142857], [996.0, 404.0], [995.0, 316.5], [993.0, 337.5], [1.0, 16878.6]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[395.8758333333326, 4357.860333333353]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15960.25, "minX": 1.63090386E12, "maxY": 82003.56666666667, "series": [{"data": [[1.63090386E12, 82003.56666666667], [1.63090392E12, 17631.566666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63090386E12, 31605.383333333335], [1.63090392E12, 15960.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090392E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1699.5165759524984, "minX": 1.63090386E12, "maxY": 5708.077155064082, "series": [{"data": [[1.63090386E12, 5708.077155064082], [1.63090392E12, 1699.5165759524984]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090392E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1602.831271647699, "minX": 1.63090386E12, "maxY": 5705.637346066843, "series": [{"data": [[1.63090386E12, 5705.637346066843], [1.63090392E12, 1602.831271647699]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090392E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 287.58884141744153, "minX": 1.63090386E12, "maxY": 1003.1187530925287, "series": [{"data": [[1.63090386E12, 287.58884141744153], [1.63090392E12, 1003.1187530925287]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090392E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.63090386E12, "maxY": 39682.0, "series": [{"data": [[1.63090386E12, 39682.0], [1.63090392E12, 6357.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63090386E12, 24032.0], [1.63090392E12, 3040.6000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63090386E12, 38259.0], [1.63090392E12, 6338.86]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63090386E12, 31907.0], [1.63090392E12, 3157.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63090386E12, 22.0], [1.63090392E12, 30.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63090386E12, 1162.0], [1.63090392E12, 1436.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090392E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 156.0, "minX": 4.0, "maxY": 28140.5, "series": [{"data": [[569.0, 548.0], [578.0, 1093.0], [620.0, 207.0], [56.0, 3040.5], [65.0, 2168.0], [4.0, 5160.0], [72.0, 156.0], [5.0, 491.0], [108.0, 3125.0], [8.0, 4357.0], [201.0, 237.0], [232.0, 417.5], [243.0, 1427.0], [249.0, 1253.0], [20.0, 3868.0], [21.0, 5808.0], [340.0, 1798.0], [22.0, 13710.0], [23.0, 21404.0], [24.0, 28140.5], [390.0, 2226.0], [25.0, 27215.0], [26.0, 18519.5], [419.0, 1475.0], [27.0, 25276.5], [28.0, 9802.0], [29.0, 4879.0], [30.0, 2781.5], [488.0, 1361.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[72.0, 21041.0], [340.0, 1425.0], [201.0, 21048.0], [488.0, 1323.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 620.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 28140.5, "series": [{"data": [[569.0, 547.0], [578.0, 1090.5], [620.0, 206.5], [56.0, 3040.0], [65.0, 2168.0], [4.0, 5160.0], [72.0, 156.0], [5.0, 491.0], [108.0, 3122.0], [8.0, 4356.5], [201.0, 236.0], [232.0, 415.0], [243.0, 1427.0], [249.0, 1248.0], [20.0, 3868.0], [21.0, 5808.0], [340.0, 1798.0], [22.0, 13710.0], [23.0, 21404.0], [24.0, 28140.5], [390.0, 2223.5], [25.0, 27215.0], [26.0, 18519.5], [419.0, 1474.0], [27.0, 25276.5], [28.0, 9802.0], [29.0, 4879.0], [30.0, 2781.5], [488.0, 1359.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[72.0, 0.0], [340.0, 0.0], [201.0, 0.0], [488.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 620.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63090386E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63090386E12, 66.66666666666667], [1.63090392E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090392E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090386E12, "maxY": 66.31666666666666, "series": [{"data": [[1.63090386E12, 66.31666666666666], [1.63090392E12, 31.883333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63090392E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.63090392E12, 1.7666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090392E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.8, "minX": 1.63090386E12, "maxY": 66.31666666666666, "series": [{"data": [[1.63090392E12, 1.8]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63090386E12, 66.31666666666666], [1.63090392E12, 31.883333333333333]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090392E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.8, "minX": 1.63090386E12, "maxY": 66.31666666666666, "series": [{"data": [[1.63090386E12, 66.31666666666666], [1.63090392E12, 31.883333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63090392E12, 1.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090392E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

