/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 89322.0, "series": [{"data": [[0.0, 24.0], [0.1, 26.0], [0.2, 27.0], [0.3, 27.0], [0.4, 28.0], [0.5, 28.0], [0.6, 28.0], [0.7, 28.0], [0.8, 28.0], [0.9, 29.0], [1.0, 29.0], [1.1, 29.0], [1.2, 29.0], [1.3, 29.0], [1.4, 29.0], [1.5, 29.0], [1.6, 30.0], [1.7, 30.0], [1.8, 30.0], [1.9, 30.0], [2.0, 30.0], [2.1, 30.0], [2.2, 30.0], [2.3, 30.0], [2.4, 30.0], [2.5, 30.0], [2.6, 31.0], [2.7, 31.0], [2.8, 31.0], [2.9, 31.0], [3.0, 31.0], [3.1, 31.0], [3.2, 31.0], [3.3, 31.0], [3.4, 31.0], [3.5, 31.0], [3.6, 31.0], [3.7, 31.0], [3.8, 31.0], [3.9, 31.0], [4.0, 31.0], [4.1, 32.0], [4.2, 32.0], [4.3, 32.0], [4.4, 32.0], [4.5, 32.0], [4.6, 32.0], [4.7, 32.0], [4.8, 32.0], [4.9, 32.0], [5.0, 32.0], [5.1, 32.0], [5.2, 32.0], [5.3, 32.0], [5.4, 32.0], [5.5, 33.0], [5.6, 33.0], [5.7, 33.0], [5.8, 33.0], [5.9, 33.0], [6.0, 33.0], [6.1, 33.0], [6.2, 33.0], [6.3, 33.0], [6.4, 33.0], [6.5, 33.0], [6.6, 33.0], [6.7, 33.0], [6.8, 33.0], [6.9, 33.0], [7.0, 34.0], [7.1, 34.0], [7.2, 34.0], [7.3, 34.0], [7.4, 34.0], [7.5, 34.0], [7.6, 34.0], [7.7, 34.0], [7.8, 34.0], [7.9, 34.0], [8.0, 34.0], [8.1, 34.0], [8.2, 34.0], [8.3, 35.0], [8.4, 35.0], [8.5, 35.0], [8.6, 35.0], [8.7, 35.0], [8.8, 35.0], [8.9, 35.0], [9.0, 35.0], [9.1, 35.0], [9.2, 35.0], [9.3, 35.0], [9.4, 35.0], [9.5, 36.0], [9.6, 36.0], [9.7, 36.0], [9.8, 36.0], [9.9, 36.0], [10.0, 36.0], [10.1, 36.0], [10.2, 36.0], [10.3, 36.0], [10.4, 36.0], [10.5, 37.0], [10.6, 37.0], [10.7, 37.0], [10.8, 37.0], [10.9, 37.0], [11.0, 37.0], [11.1, 37.0], [11.2, 37.0], [11.3, 37.0], [11.4, 38.0], [11.5, 38.0], [11.6, 38.0], [11.7, 38.0], [11.8, 38.0], [11.9, 38.0], [12.0, 38.0], [12.1, 39.0], [12.2, 39.0], [12.3, 39.0], [12.4, 39.0], [12.5, 39.0], [12.6, 39.0], [12.7, 39.0], [12.8, 39.0], [12.9, 40.0], [13.0, 40.0], [13.1, 40.0], [13.2, 40.0], [13.3, 40.0], [13.4, 40.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 42.0], [14.3, 42.0], [14.4, 42.0], [14.5, 42.0], [14.6, 42.0], [14.7, 42.0], [14.8, 42.0], [14.9, 42.0], [15.0, 42.0], [15.1, 43.0], [15.2, 43.0], [15.3, 43.0], [15.4, 43.0], [15.5, 43.0], [15.6, 43.0], [15.7, 43.0], [15.8, 43.0], [15.9, 43.0], [16.0, 43.0], [16.1, 44.0], [16.2, 44.0], [16.3, 44.0], [16.4, 44.0], [16.5, 44.0], [16.6, 44.0], [16.7, 44.0], [16.8, 44.0], [16.9, 44.0], [17.0, 44.0], [17.1, 45.0], [17.2, 45.0], [17.3, 45.0], [17.4, 45.0], [17.5, 45.0], [17.6, 45.0], [17.7, 45.0], [17.8, 45.0], [17.9, 45.0], [18.0, 45.0], [18.1, 46.0], [18.2, 46.0], [18.3, 46.0], [18.4, 46.0], [18.5, 46.0], [18.6, 46.0], [18.7, 46.0], [18.8, 46.0], [18.9, 46.0], [19.0, 46.0], [19.1, 46.0], [19.2, 46.0], [19.3, 46.0], [19.4, 47.0], [19.5, 47.0], [19.6, 47.0], [19.7, 47.0], [19.8, 47.0], [19.9, 47.0], [20.0, 47.0], [20.1, 47.0], [20.2, 47.0], [20.3, 47.0], [20.4, 47.0], [20.5, 47.0], [20.6, 48.0], [20.7, 48.0], [20.8, 48.0], [20.9, 48.0], [21.0, 48.0], [21.1, 48.0], [21.2, 48.0], [21.3, 48.0], [21.4, 48.0], [21.5, 48.0], [21.6, 48.0], [21.7, 48.0], [21.8, 49.0], [21.9, 49.0], [22.0, 49.0], [22.1, 49.0], [22.2, 49.0], [22.3, 49.0], [22.4, 49.0], [22.5, 49.0], [22.6, 49.0], [22.7, 49.0], [22.8, 49.0], [22.9, 49.0], [23.0, 50.0], [23.1, 50.0], [23.2, 50.0], [23.3, 50.0], [23.4, 50.0], [23.5, 50.0], [23.6, 50.0], [23.7, 50.0], [23.8, 50.0], [23.9, 50.0], [24.0, 50.0], [24.1, 50.0], [24.2, 51.0], [24.3, 51.0], [24.4, 51.0], [24.5, 51.0], [24.6, 51.0], [24.7, 51.0], [24.8, 51.0], [24.9, 51.0], [25.0, 51.0], [25.1, 51.0], [25.2, 51.0], [25.3, 51.0], [25.4, 52.0], [25.5, 52.0], [25.6, 52.0], [25.7, 52.0], [25.8, 52.0], [25.9, 52.0], [26.0, 52.0], [26.1, 52.0], [26.2, 52.0], [26.3, 52.0], [26.4, 52.0], [26.5, 53.0], [26.6, 53.0], [26.7, 53.0], [26.8, 53.0], [26.9, 53.0], [27.0, 53.0], [27.1, 53.0], [27.2, 53.0], [27.3, 53.0], [27.4, 53.0], [27.5, 53.0], [27.6, 54.0], [27.7, 54.0], [27.8, 54.0], [27.9, 54.0], [28.0, 54.0], [28.1, 54.0], [28.2, 54.0], [28.3, 54.0], [28.4, 54.0], [28.5, 54.0], [28.6, 55.0], [28.7, 55.0], [28.8, 55.0], [28.9, 55.0], [29.0, 55.0], [29.1, 55.0], [29.2, 55.0], [29.3, 55.0], [29.4, 55.0], [29.5, 55.0], [29.6, 56.0], [29.7, 56.0], [29.8, 56.0], [29.9, 56.0], [30.0, 56.0], [30.1, 56.0], [30.2, 56.0], [30.3, 57.0], [30.4, 57.0], [30.5, 57.0], [30.6, 57.0], [30.7, 57.0], [30.8, 57.0], [30.9, 57.0], [31.0, 58.0], [31.1, 58.0], [31.2, 58.0], [31.3, 58.0], [31.4, 58.0], [31.5, 58.0], [31.6, 58.0], [31.7, 59.0], [31.8, 59.0], [31.9, 59.0], [32.0, 59.0], [32.1, 59.0], [32.2, 59.0], [32.3, 59.0], [32.4, 59.0], [32.5, 60.0], [32.6, 60.0], [32.7, 60.0], [32.8, 60.0], [32.9, 60.0], [33.0, 60.0], [33.1, 60.0], [33.2, 61.0], [33.3, 61.0], [33.4, 61.0], [33.5, 61.0], [33.6, 61.0], [33.7, 61.0], [33.8, 61.0], [33.9, 61.0], [34.0, 62.0], [34.1, 62.0], [34.2, 62.0], [34.3, 62.0], [34.4, 62.0], [34.5, 63.0], [34.6, 63.0], [34.7, 63.0], [34.8, 63.0], [34.9, 63.0], [35.0, 64.0], [35.1, 64.0], [35.2, 64.0], [35.3, 64.0], [35.4, 64.0], [35.5, 64.0], [35.6, 65.0], [35.7, 65.0], [35.8, 65.0], [35.9, 65.0], [36.0, 65.0], [36.1, 66.0], [36.2, 66.0], [36.3, 66.0], [36.4, 66.0], [36.5, 66.0], [36.6, 66.0], [36.7, 67.0], [36.8, 67.0], [36.9, 67.0], [37.0, 67.0], [37.1, 67.0], [37.2, 68.0], [37.3, 68.0], [37.4, 68.0], [37.5, 68.0], [37.6, 68.0], [37.7, 68.0], [37.8, 69.0], [37.9, 69.0], [38.0, 69.0], [38.1, 69.0], [38.2, 70.0], [38.3, 70.0], [38.4, 70.0], [38.5, 70.0], [38.6, 71.0], [38.7, 71.0], [38.8, 71.0], [38.9, 71.0], [39.0, 72.0], [39.1, 72.0], [39.2, 72.0], [39.3, 72.0], [39.4, 72.0], [39.5, 73.0], [39.6, 73.0], [39.7, 73.0], [39.8, 73.0], [39.9, 74.0], [40.0, 74.0], [40.1, 74.0], [40.2, 74.0], [40.3, 75.0], [40.4, 75.0], [40.5, 75.0], [40.6, 76.0], [40.7, 76.0], [40.8, 76.0], [40.9, 76.0], [41.0, 77.0], [41.1, 77.0], [41.2, 77.0], [41.3, 77.0], [41.4, 78.0], [41.5, 78.0], [41.6, 78.0], [41.7, 78.0], [41.8, 78.0], [41.9, 79.0], [42.0, 79.0], [42.1, 79.0], [42.2, 80.0], [42.3, 80.0], [42.4, 80.0], [42.5, 81.0], [42.6, 81.0], [42.7, 81.0], [42.8, 81.0], [42.9, 82.0], [43.0, 82.0], [43.1, 82.0], [43.2, 82.0], [43.3, 83.0], [43.4, 83.0], [43.5, 83.0], [43.6, 84.0], [43.7, 84.0], [43.8, 84.0], [43.9, 85.0], [44.0, 85.0], [44.1, 85.0], [44.2, 85.0], [44.3, 86.0], [44.4, 86.0], [44.5, 86.0], [44.6, 86.0], [44.7, 87.0], [44.8, 87.0], [44.9, 87.0], [45.0, 88.0], [45.1, 88.0], [45.2, 89.0], [45.3, 89.0], [45.4, 89.0], [45.5, 89.0], [45.6, 90.0], [45.7, 90.0], [45.8, 91.0], [45.9, 91.0], [46.0, 92.0], [46.1, 92.0], [46.2, 92.0], [46.3, 93.0], [46.4, 93.0], [46.5, 94.0], [46.6, 94.0], [46.7, 95.0], [46.8, 95.0], [46.9, 96.0], [47.0, 97.0], [47.1, 97.0], [47.2, 98.0], [47.3, 99.0], [47.4, 100.0], [47.5, 100.0], [47.6, 101.0], [47.7, 102.0], [47.8, 102.0], [47.9, 102.0], [48.0, 103.0], [48.1, 104.0], [48.2, 104.0], [48.3, 105.0], [48.4, 106.0], [48.5, 106.0], [48.6, 107.0], [48.7, 108.0], [48.8, 108.0], [48.9, 109.0], [49.0, 109.0], [49.1, 110.0], [49.2, 111.0], [49.3, 111.0], [49.4, 112.0], [49.5, 113.0], [49.6, 114.0], [49.7, 114.0], [49.8, 115.0], [49.9, 116.0], [50.0, 116.0], [50.1, 117.0], [50.2, 118.0], [50.3, 118.0], [50.4, 119.0], [50.5, 119.0], [50.6, 120.0], [50.7, 120.0], [50.8, 121.0], [50.9, 121.0], [51.0, 122.0], [51.1, 123.0], [51.2, 123.0], [51.3, 124.0], [51.4, 125.0], [51.5, 126.0], [51.6, 126.0], [51.7, 127.0], [51.8, 127.0], [51.9, 127.0], [52.0, 128.0], [52.1, 128.0], [52.2, 129.0], [52.3, 129.0], [52.4, 130.0], [52.5, 130.0], [52.6, 131.0], [52.7, 131.0], [52.8, 132.0], [52.9, 132.0], [53.0, 133.0], [53.1, 134.0], [53.2, 135.0], [53.3, 135.0], [53.4, 136.0], [53.5, 137.0], [53.6, 137.0], [53.7, 138.0], [53.8, 139.0], [53.9, 140.0], [54.0, 141.0], [54.1, 141.0], [54.2, 142.0], [54.3, 143.0], [54.4, 144.0], [54.5, 145.0], [54.6, 145.0], [54.7, 146.0], [54.8, 146.0], [54.9, 147.0], [55.0, 148.0], [55.1, 148.0], [55.2, 149.0], [55.3, 150.0], [55.4, 151.0], [55.5, 152.0], [55.6, 153.0], [55.7, 154.0], [55.8, 155.0], [55.9, 156.0], [56.0, 157.0], [56.1, 157.0], [56.2, 158.0], [56.3, 159.0], [56.4, 160.0], [56.5, 161.0], [56.6, 161.0], [56.7, 162.0], [56.8, 163.0], [56.9, 163.0], [57.0, 164.0], [57.1, 164.0], [57.2, 165.0], [57.3, 166.0], [57.4, 167.0], [57.5, 168.0], [57.6, 169.0], [57.7, 169.0], [57.8, 170.0], [57.9, 171.0], [58.0, 172.0], [58.1, 173.0], [58.2, 173.0], [58.3, 174.0], [58.4, 175.0], [58.5, 177.0], [58.6, 177.0], [58.7, 177.0], [58.8, 178.0], [58.9, 179.0], [59.0, 180.0], [59.1, 180.0], [59.2, 181.0], [59.3, 182.0], [59.4, 182.0], [59.5, 183.0], [59.6, 184.0], [59.7, 184.0], [59.8, 185.0], [59.9, 186.0], [60.0, 187.0], [60.1, 188.0], [60.2, 189.0], [60.3, 189.0], [60.4, 190.0], [60.5, 191.0], [60.6, 191.0], [60.7, 193.0], [60.8, 193.0], [60.9, 194.0], [61.0, 195.0], [61.1, 196.0], [61.2, 197.0], [61.3, 197.0], [61.4, 198.0], [61.5, 199.0], [61.6, 200.0], [61.7, 201.0], [61.8, 202.0], [61.9, 202.0], [62.0, 203.0], [62.1, 203.0], [62.2, 205.0], [62.3, 206.0], [62.4, 206.0], [62.5, 207.0], [62.6, 208.0], [62.7, 210.0], [62.8, 211.0], [62.9, 212.0], [63.0, 213.0], [63.1, 215.0], [63.2, 218.0], [63.3, 221.0], [63.4, 223.0], [63.5, 227.0], [63.6, 230.0], [63.7, 234.0], [63.8, 235.0], [63.9, 237.0], [64.0, 238.0], [64.1, 239.0], [64.2, 242.0], [64.3, 242.0], [64.4, 244.0], [64.5, 245.0], [64.6, 247.0], [64.7, 248.0], [64.8, 249.0], [64.9, 250.0], [65.0, 251.0], [65.1, 252.0], [65.2, 254.0], [65.3, 254.0], [65.4, 256.0], [65.5, 258.0], [65.6, 260.0], [65.7, 260.0], [65.8, 263.0], [65.9, 265.0], [66.0, 267.0], [66.1, 270.0], [66.2, 275.0], [66.3, 279.0], [66.4, 282.0], [66.5, 283.0], [66.6, 285.0], [66.7, 286.0], [66.8, 288.0], [66.9, 289.0], [67.0, 290.0], [67.1, 291.0], [67.2, 293.0], [67.3, 295.0], [67.4, 296.0], [67.5, 297.0], [67.6, 299.0], [67.7, 300.0], [67.8, 301.0], [67.9, 302.0], [68.0, 304.0], [68.1, 305.0], [68.2, 306.0], [68.3, 307.0], [68.4, 309.0], [68.5, 310.0], [68.6, 311.0], [68.7, 312.0], [68.8, 315.0], [68.9, 317.0], [69.0, 319.0], [69.1, 323.0], [69.2, 327.0], [69.3, 333.0], [69.4, 343.0], [69.5, 350.0], [69.6, 355.0], [69.7, 369.0], [69.8, 383.0], [69.9, 396.0], [70.0, 410.0], [70.1, 418.0], [70.2, 435.0], [70.3, 442.0], [70.4, 456.0], [70.5, 466.0], [70.6, 480.0], [70.7, 493.0], [70.8, 501.0], [70.9, 508.0], [71.0, 517.0], [71.1, 524.0], [71.2, 532.0], [71.3, 543.0], [71.4, 552.0], [71.5, 564.0], [71.6, 573.0], [71.7, 596.0], [71.8, 624.0], [71.9, 636.0], [72.0, 647.0], [72.1, 666.0], [72.2, 685.0], [72.3, 698.0], [72.4, 706.0], [72.5, 714.0], [72.6, 724.0], [72.7, 734.0], [72.8, 738.0], [72.9, 745.0], [73.0, 757.0], [73.1, 765.0], [73.2, 777.0], [73.3, 788.0], [73.4, 805.0], [73.5, 827.0], [73.6, 836.0], [73.7, 859.0], [73.8, 867.0], [73.9, 894.0], [74.0, 914.0], [74.1, 931.0], [74.2, 943.0], [74.3, 962.0], [74.4, 971.0], [74.5, 1004.0], [74.6, 1024.0], [74.7, 1037.0], [74.8, 1054.0], [74.9, 1066.0], [75.0, 1088.0], [75.1, 1107.0], [75.2, 1123.0], [75.3, 1134.0], [75.4, 1152.0], [75.5, 1167.0], [75.6, 1177.0], [75.7, 1192.0], [75.8, 1213.0], [75.9, 1227.0], [76.0, 1239.0], [76.1, 1252.0], [76.2, 1264.0], [76.3, 1275.0], [76.4, 1287.0], [76.5, 1303.0], [76.6, 1318.0], [76.7, 1325.0], [76.8, 1333.0], [76.9, 1341.0], [77.0, 1348.0], [77.1, 1357.0], [77.2, 1364.0], [77.3, 1376.0], [77.4, 1392.0], [77.5, 1403.0], [77.6, 1409.0], [77.7, 1417.0], [77.8, 1425.0], [77.9, 1437.0], [78.0, 1450.0], [78.1, 1461.0], [78.2, 1467.0], [78.3, 1479.0], [78.4, 1486.0], [78.5, 1500.0], [78.6, 1508.0], [78.7, 1522.0], [78.8, 1530.0], [78.9, 1541.0], [79.0, 1552.0], [79.1, 1565.0], [79.2, 1586.0], [79.3, 1592.0], [79.4, 1603.0], [79.5, 1626.0], [79.6, 1650.0], [79.7, 1660.0], [79.8, 1674.0], [79.9, 1683.0], [80.0, 1701.0], [80.1, 1719.0], [80.2, 1750.0], [80.3, 1783.0], [80.4, 1809.0], [80.5, 1834.0], [80.6, 1884.0], [80.7, 1926.0], [80.8, 1939.0], [80.9, 1952.0], [81.0, 1975.0], [81.1, 1999.0], [81.2, 2017.0], [81.3, 2047.0], [81.4, 2068.0], [81.5, 2090.0], [81.6, 2109.0], [81.7, 2127.0], [81.8, 2147.0], [81.9, 2164.0], [82.0, 2185.0], [82.1, 2225.0], [82.2, 2262.0], [82.3, 2288.0], [82.4, 2315.0], [82.5, 2336.0], [82.6, 2359.0], [82.7, 2378.0], [82.8, 2391.0], [82.9, 2405.0], [83.0, 2434.0], [83.1, 2460.0], [83.2, 2477.0], [83.3, 2505.0], [83.4, 2526.0], [83.5, 2561.0], [83.6, 2641.0], [83.7, 2777.0], [83.8, 2896.0], [83.9, 3210.0], [84.0, 3595.0], [84.1, 4124.0], [84.2, 4429.0], [84.3, 5179.0], [84.4, 5514.0], [84.5, 5889.0], [84.6, 6482.0], [84.7, 6738.0], [84.8, 7363.0], [84.9, 7633.0], [85.0, 8144.0], [85.1, 8579.0], [85.2, 9070.0], [85.3, 9505.0], [85.4, 9979.0], [85.5, 10342.0], [85.6, 10830.0], [85.7, 11283.0], [85.8, 11808.0], [85.9, 12298.0], [86.0, 12615.0], [86.1, 13151.0], [86.2, 13550.0], [86.3, 14033.0], [86.4, 14530.0], [86.5, 15023.0], [86.6, 15438.0], [86.7, 15810.0], [86.8, 16236.0], [86.9, 16590.0], [87.0, 17148.0], [87.1, 17617.0], [87.2, 18070.0], [87.3, 18501.0], [87.4, 18981.0], [87.5, 19398.0], [87.6, 20004.0], [87.7, 20272.0], [87.8, 20714.0], [87.9, 21178.0], [88.0, 21589.0], [88.1, 22219.0], [88.2, 22565.0], [88.3, 23025.0], [88.4, 23408.0], [88.5, 23870.0], [88.6, 24350.0], [88.7, 24902.0], [88.8, 25217.0], [88.9, 25533.0], [89.0, 25899.0], [89.1, 26466.0], [89.2, 26861.0], [89.3, 27242.0], [89.4, 27883.0], [89.5, 28317.0], [89.6, 28789.0], [89.7, 29243.0], [89.8, 29746.0], [89.9, 29961.0], [90.0, 30355.0], [90.1, 30927.0], [90.2, 31275.0], [90.3, 31631.0], [90.4, 32278.0], [90.5, 32634.0], [90.6, 33209.0], [90.7, 33510.0], [90.8, 33909.0], [90.9, 34352.0], [91.0, 34724.0], [91.1, 35251.0], [91.2, 35722.0], [91.3, 36128.0], [91.4, 36564.0], [91.5, 36868.0], [91.6, 37442.0], [91.7, 37960.0], [91.8, 38384.0], [91.9, 38773.0], [92.0, 39233.0], [92.1, 39732.0], [92.2, 40206.0], [92.3, 40618.0], [92.4, 40960.0], [92.5, 41392.0], [92.6, 41836.0], [92.7, 42302.0], [92.8, 42647.0], [92.9, 43154.0], [93.0, 43598.0], [93.1, 44170.0], [93.2, 44513.0], [93.3, 44880.0], [93.4, 45347.0], [93.5, 45873.0], [93.6, 46329.0], [93.7, 46798.0], [93.8, 47154.0], [93.9, 47682.0], [94.0, 48151.0], [94.1, 48476.0], [94.2, 48975.0], [94.3, 49350.0], [94.4, 49806.0], [94.5, 50302.0], [94.6, 50663.0], [94.7, 51136.0], [94.8, 51549.0], [94.9, 52087.0], [95.0, 52508.0], [95.1, 52960.0], [95.2, 53359.0], [95.3, 53779.0], [95.4, 54352.0], [95.5, 54730.0], [95.6, 55204.0], [95.7, 55600.0], [95.8, 55997.0], [95.9, 56589.0], [96.0, 56966.0], [96.1, 57420.0], [96.2, 57786.0], [96.3, 58214.0], [96.4, 58676.0], [96.5, 59124.0], [96.6, 59560.0], [96.7, 60029.0], [96.8, 61538.0], [96.9, 62311.0], [97.0, 63262.0], [97.1, 64116.0], [97.2, 64994.0], [97.3, 65941.0], [97.4, 66736.0], [97.5, 67684.0], [97.6, 68489.0], [97.7, 69571.0], [97.8, 70375.0], [97.9, 71293.0], [98.0, 72251.0], [98.1, 73049.0], [98.2, 74005.0], [98.3, 74825.0], [98.4, 75785.0], [98.5, 76503.0], [98.6, 77254.0], [98.7, 78522.0], [98.8, 79247.0], [98.9, 80144.0], [99.0, 80931.0], [99.1, 81673.0], [99.2, 82882.0], [99.3, 83764.0], [99.4, 84551.0], [99.5, 85337.0], [99.6, 86123.0], [99.7, 87376.0], [99.8, 88184.0], [99.9, 88986.0], [100.0, 89322.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5683.0, "series": [{"data": [[0.0, 5683.0], [66700.0, 3.0], [71500.0, 2.0], [77900.0, 4.0], [79500.0, 1.0], [82700.0, 1.0], [84300.0, 2.0], [85900.0, 2.0], [87500.0, 4.0], [100.0, 1707.0], [32900.0, 2.0], [33700.0, 2.0], [34500.0, 1.0], [35300.0, 2.0], [36100.0, 7.0], [37700.0, 2.0], [38500.0, 3.0], [39300.0, 2.0], [40100.0, 2.0], [40900.0, 6.0], [42500.0, 4.0], [44100.0, 1.0], [44900.0, 3.0], [45700.0, 1.0], [46500.0, 1.0], [47300.0, 2.0], [48100.0, 3.0], [48900.0, 3.0], [49700.0, 1.0], [50500.0, 1.0], [51300.0, 5.0], [52100.0, 5.0], [52900.0, 5.0], [200.0, 724.0], [53700.0, 3.0], [54500.0, 4.0], [55300.0, 1.0], [56100.0, 2.0], [56900.0, 3.0], [57700.0, 5.0], [58500.0, 3.0], [59300.0, 2.0], [61700.0, 1.0], [62500.0, 2.0], [63300.0, 2.0], [64100.0, 2.0], [64900.0, 1.0], [65800.0, 2.0], [67400.0, 3.0], [69000.0, 1.0], [72200.0, 4.0], [75400.0, 3.0], [77000.0, 4.0], [300.0, 274.0], [80200.0, 2.0], [86600.0, 1.0], [88200.0, 4.0], [400.0, 106.0], [500.0, 111.0], [600.0, 73.0], [700.0, 122.0], [800.0, 70.0], [900.0, 64.0], [1000.0, 70.0], [1100.0, 84.0], [1200.0, 90.0], [1300.0, 116.0], [1400.0, 125.0], [1500.0, 107.0], [1600.0, 73.0], [1700.0, 45.0], [1800.0, 37.0], [1900.0, 52.0], [2000.0, 54.0], [2100.0, 58.0], [2300.0, 62.0], [2200.0, 35.0], [2400.0, 48.0], [2500.0, 36.0], [2600.0, 10.0], [2800.0, 11.0], [2700.0, 9.0], [2900.0, 4.0], [3000.0, 3.0], [3100.0, 2.0], [3200.0, 4.0], [3400.0, 6.0], [3500.0, 5.0], [3700.0, 3.0], [3600.0, 2.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 3.0], [4100.0, 7.0], [4300.0, 1.0], [4200.0, 1.0], [68100.0, 4.0], [4400.0, 5.0], [4600.0, 4.0], [4500.0, 2.0], [69700.0, 2.0], [71300.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [76100.0, 1.0], [77700.0, 3.0], [5100.0, 5.0], [4900.0, 1.0], [79300.0, 1.0], [80900.0, 3.0], [5200.0, 7.0], [82500.0, 1.0], [85700.0, 1.0], [5500.0, 4.0], [5400.0, 1.0], [5600.0, 3.0], [87300.0, 2.0], [88900.0, 3.0], [5800.0, 6.0], [5700.0, 1.0], [5900.0, 3.0], [6100.0, 5.0], [6200.0, 2.0], [6300.0, 1.0], [6400.0, 1.0], [6500.0, 6.0], [6600.0, 3.0], [6800.0, 3.0], [6700.0, 5.0], [6900.0, 1.0], [7000.0, 3.0], [7100.0, 1.0], [7300.0, 2.0], [7400.0, 3.0], [7500.0, 4.0], [7600.0, 7.0], [7800.0, 2.0], [7900.0, 1.0], [8000.0, 6.0], [8100.0, 4.0], [8200.0, 3.0], [8400.0, 1.0], [8600.0, 5.0], [8800.0, 1.0], [9000.0, 2.0], [9200.0, 1.0], [9600.0, 4.0], [9400.0, 2.0], [9800.0, 2.0], [10000.0, 2.0], [10200.0, 2.0], [10400.0, 1.0], [10600.0, 2.0], [10800.0, 6.0], [11000.0, 2.0], [11200.0, 1.0], [11400.0, 1.0], [11600.0, 2.0], [12000.0, 6.0], [11800.0, 3.0], [12200.0, 1.0], [12400.0, 4.0], [12600.0, 4.0], [12800.0, 2.0], [13000.0, 1.0], [13200.0, 3.0], [13400.0, 2.0], [13600.0, 2.0], [13800.0, 1.0], [14000.0, 6.0], [14200.0, 1.0], [14400.0, 1.0], [14600.0, 4.0], [14800.0, 4.0], [15000.0, 4.0], [15200.0, 4.0], [15400.0, 3.0], [15600.0, 3.0], [15800.0, 3.0], [16000.0, 1.0], [16200.0, 3.0], [16400.0, 5.0], [16800.0, 2.0], [17200.0, 1.0], [17600.0, 5.0], [18000.0, 4.0], [18800.0, 1.0], [19200.0, 2.0], [20000.0, 3.0], [20800.0, 2.0], [21200.0, 4.0], [21600.0, 2.0], [22000.0, 2.0], [22400.0, 4.0], [22800.0, 2.0], [23200.0, 1.0], [23600.0, 3.0], [24000.0, 1.0], [24400.0, 4.0], [25200.0, 4.0], [25600.0, 4.0], [26400.0, 2.0], [26000.0, 1.0], [26800.0, 8.0], [27200.0, 4.0], [27600.0, 2.0], [28000.0, 2.0], [28400.0, 3.0], [28800.0, 3.0], [29200.0, 5.0], [30000.0, 3.0], [30400.0, 1.0], [30800.0, 1.0], [31200.0, 3.0], [31600.0, 8.0], [32400.0, 5.0], [32000.0, 1.0], [32800.0, 1.0], [34400.0, 1.0], [35200.0, 1.0], [36000.0, 2.0], [36800.0, 7.0], [37600.0, 3.0], [38400.0, 2.0], [39200.0, 3.0], [40000.0, 1.0], [40800.0, 3.0], [41600.0, 4.0], [42400.0, 3.0], [43200.0, 1.0], [44000.0, 1.0], [44800.0, 7.0], [45600.0, 4.0], [46400.0, 2.0], [47200.0, 1.0], [48000.0, 1.0], [48800.0, 3.0], [49600.0, 5.0], [50400.0, 4.0], [52000.0, 1.0], [52800.0, 3.0], [53600.0, 3.0], [54400.0, 4.0], [55200.0, 6.0], [56000.0, 2.0], [56800.0, 1.0], [57600.0, 3.0], [58400.0, 2.0], [59200.0, 4.0], [60000.0, 1.0], [60800.0, 1.0], [62400.0, 1.0], [63200.0, 1.0], [64000.0, 1.0], [64800.0, 1.0], [65600.0, 1.0], [73600.0, 4.0], [80000.0, 2.0], [81600.0, 5.0], [83200.0, 1.0], [88000.0, 2.0], [68700.0, 1.0], [70300.0, 3.0], [71900.0, 6.0], [75100.0, 1.0], [78300.0, 1.0], [79900.0, 2.0], [81500.0, 1.0], [83100.0, 4.0], [84700.0, 1.0], [33100.0, 3.0], [33900.0, 7.0], [34700.0, 4.0], [35500.0, 1.0], [36300.0, 1.0], [37100.0, 2.0], [37900.0, 3.0], [38700.0, 6.0], [39500.0, 1.0], [40300.0, 2.0], [41100.0, 2.0], [41900.0, 4.0], [42700.0, 5.0], [43500.0, 4.0], [44300.0, 1.0], [45100.0, 3.0], [45900.0, 2.0], [46700.0, 3.0], [47500.0, 1.0], [48300.0, 5.0], [49100.0, 5.0], [49900.0, 3.0], [50700.0, 2.0], [51500.0, 4.0], [52300.0, 1.0], [53900.0, 1.0], [54700.0, 4.0], [55500.0, 3.0], [56300.0, 4.0], [57100.0, 5.0], [57900.0, 4.0], [58700.0, 2.0], [59500.0, 2.0], [61100.0, 3.0], [61900.0, 2.0], [65100.0, 1.0], [66200.0, 3.0], [67800.0, 1.0], [71000.0, 5.0], [72600.0, 1.0], [75800.0, 1.0], [80600.0, 2.0], [83800.0, 5.0], [85400.0, 1.0], [66900.0, 1.0], [68500.0, 1.0], [73300.0, 4.0], [74900.0, 2.0], [76500.0, 4.0], [84500.0, 4.0], [86100.0, 2.0], [89300.0, 7.0], [16500.0, 3.0], [16900.0, 3.0], [17300.0, 3.0], [18100.0, 1.0], [18900.0, 4.0], [18500.0, 1.0], [19300.0, 3.0], [19700.0, 3.0], [20100.0, 4.0], [20500.0, 2.0], [20900.0, 4.0], [21300.0, 1.0], [21700.0, 2.0], [22100.0, 2.0], [22500.0, 5.0], [22900.0, 2.0], [23300.0, 4.0], [24100.0, 3.0], [24500.0, 3.0], [24900.0, 4.0], [25300.0, 6.0], [25700.0, 5.0], [26100.0, 3.0], [26500.0, 3.0], [26900.0, 4.0], [27300.0, 2.0], [27700.0, 1.0], [28500.0, 1.0], [28900.0, 2.0], [29300.0, 1.0], [29700.0, 4.0], [30500.0, 2.0], [30100.0, 4.0], [30900.0, 9.0], [32100.0, 1.0], [32500.0, 1.0], [33000.0, 2.0], [33800.0, 5.0], [34600.0, 5.0], [35400.0, 6.0], [36200.0, 1.0], [37000.0, 3.0], [37800.0, 1.0], [39400.0, 6.0], [40200.0, 6.0], [41000.0, 2.0], [41800.0, 6.0], [42600.0, 2.0], [43400.0, 5.0], [44200.0, 6.0], [45800.0, 1.0], [46600.0, 2.0], [47400.0, 3.0], [48200.0, 4.0], [49000.0, 3.0], [49800.0, 2.0], [50600.0, 5.0], [51400.0, 2.0], [52200.0, 4.0], [53000.0, 3.0], [53800.0, 2.0], [55400.0, 2.0], [56200.0, 3.0], [57000.0, 2.0], [58600.0, 2.0], [59400.0, 2.0], [61000.0, 2.0], [61800.0, 2.0], [62600.0, 2.0], [63400.0, 2.0], [64200.0, 3.0], [65000.0, 1.0], [66000.0, 2.0], [67600.0, 1.0], [69200.0, 3.0], [74000.0, 4.0], [77200.0, 4.0], [78800.0, 1.0], [82000.0, 1.0], [85200.0, 3.0], [86800.0, 4.0], [65900.0, 2.0], [67500.0, 1.0], [75500.0, 1.0], [77100.0, 1.0], [78700.0, 5.0], [81900.0, 1.0], [83500.0, 2.0], [85100.0, 2.0], [86700.0, 3.0], [88300.0, 3.0], [33300.0, 3.0], [34100.0, 1.0], [34900.0, 2.0], [35700.0, 4.0], [36500.0, 4.0], [37300.0, 1.0], [38100.0, 3.0], [38900.0, 2.0], [39700.0, 3.0], [40500.0, 2.0], [41300.0, 3.0], [42100.0, 3.0], [42900.0, 4.0], [43700.0, 3.0], [44500.0, 5.0], [45300.0, 4.0], [46100.0, 3.0], [46900.0, 3.0], [47700.0, 1.0], [48500.0, 4.0], [49300.0, 3.0], [50100.0, 1.0], [50900.0, 1.0], [51700.0, 2.0], [52500.0, 5.0], [53300.0, 5.0], [54100.0, 1.0], [54900.0, 1.0], [56500.0, 2.0], [57300.0, 3.0], [58100.0, 3.0], [58900.0, 2.0], [59700.0, 1.0], [61300.0, 1.0], [62100.0, 1.0], [62900.0, 1.0], [64500.0, 2.0], [66600.0, 3.0], [68200.0, 4.0], [69800.0, 1.0], [71400.0, 2.0], [73000.0, 4.0], [76200.0, 3.0], [77800.0, 1.0], [79400.0, 4.0], [81000.0, 1.0], [82600.0, 1.0], [85800.0, 1.0], [87400.0, 2.0], [89000.0, 4.0], [67300.0, 2.0], [68900.0, 4.0], [70500.0, 3.0], [78500.0, 3.0], [80100.0, 4.0], [83300.0, 1.0], [86500.0, 2.0], [88100.0, 1.0], [8300.0, 2.0], [8500.0, 3.0], [8700.0, 3.0], [9100.0, 4.0], [8900.0, 1.0], [9300.0, 4.0], [9500.0, 3.0], [9700.0, 2.0], [9900.0, 2.0], [10100.0, 4.0], [10300.0, 4.0], [10500.0, 3.0], [10700.0, 2.0], [10900.0, 2.0], [11100.0, 5.0], [11300.0, 4.0], [11500.0, 1.0], [11700.0, 3.0], [11900.0, 1.0], [12100.0, 2.0], [12300.0, 3.0], [12500.0, 4.0], [12700.0, 1.0], [12900.0, 2.0], [13100.0, 4.0], [13300.0, 3.0], [13500.0, 5.0], [13700.0, 4.0], [13900.0, 1.0], [14100.0, 3.0], [14300.0, 2.0], [14500.0, 4.0], [15100.0, 4.0], [15500.0, 4.0], [15700.0, 2.0], [15900.0, 3.0], [16100.0, 3.0], [16300.0, 4.0], [17400.0, 2.0], [17000.0, 2.0], [17800.0, 1.0], [18200.0, 4.0], [18600.0, 1.0], [19000.0, 3.0], [19400.0, 4.0], [19800.0, 3.0], [20200.0, 6.0], [20600.0, 8.0], [21000.0, 3.0], [21400.0, 3.0], [22200.0, 1.0], [21800.0, 1.0], [22600.0, 2.0], [23000.0, 7.0], [23400.0, 5.0], [23800.0, 4.0], [24200.0, 4.0], [24600.0, 1.0], [25000.0, 5.0], [25400.0, 3.0], [25800.0, 3.0], [26200.0, 4.0], [27000.0, 1.0], [27400.0, 2.0], [27800.0, 2.0], [28200.0, 3.0], [28600.0, 2.0], [29000.0, 2.0], [29400.0, 5.0], [29800.0, 6.0], [30200.0, 2.0], [30600.0, 2.0], [31000.0, 2.0], [31400.0, 1.0], [31800.0, 2.0], [32200.0, 3.0], [32600.0, 2.0], [33200.0, 8.0], [34000.0, 2.0], [34800.0, 2.0], [35600.0, 2.0], [36400.0, 3.0], [37200.0, 4.0], [38000.0, 3.0], [38800.0, 1.0], [39600.0, 1.0], [40400.0, 2.0], [41200.0, 4.0], [42000.0, 2.0], [43600.0, 1.0], [44400.0, 3.0], [45200.0, 3.0], [46000.0, 4.0], [46800.0, 3.0], [47600.0, 5.0], [48400.0, 3.0], [49200.0, 1.0], [50000.0, 5.0], [50800.0, 3.0], [51600.0, 1.0], [52400.0, 1.0], [53200.0, 2.0], [54000.0, 6.0], [54800.0, 4.0], [55600.0, 4.0], [57200.0, 1.0], [58000.0, 3.0], [58800.0, 5.0], [59600.0, 3.0], [63600.0, 1.0], [64400.0, 1.0], [65200.0, 3.0], [69600.0, 2.0], [71200.0, 2.0], [79200.0, 2.0], [80800.0, 2.0], [82400.0, 5.0], [88800.0, 1.0], [66300.0, 1.0], [69500.0, 1.0], [71100.0, 2.0], [72700.0, 1.0], [74300.0, 6.0], [79100.0, 2.0], [80700.0, 2.0], [83900.0, 1.0], [88700.0, 2.0], [33500.0, 3.0], [34300.0, 5.0], [35100.0, 2.0], [35900.0, 2.0], [36700.0, 2.0], [37500.0, 5.0], [38300.0, 6.0], [39100.0, 4.0], [39900.0, 2.0], [40700.0, 2.0], [41500.0, 2.0], [42300.0, 4.0], [43100.0, 4.0], [43900.0, 2.0], [45500.0, 4.0], [46300.0, 6.0], [47100.0, 6.0], [47900.0, 1.0], [48700.0, 1.0], [49500.0, 3.0], [50300.0, 4.0], [51100.0, 5.0], [51900.0, 1.0], [53500.0, 3.0], [54300.0, 3.0], [55100.0, 4.0], [55900.0, 3.0], [56700.0, 2.0], [57500.0, 1.0], [58300.0, 4.0], [59100.0, 5.0], [59900.0, 1.0], [60700.0, 4.0], [61500.0, 4.0], [62300.0, 2.0], [64700.0, 2.0], [65500.0, 2.0], [67000.0, 3.0], [73400.0, 2.0], [75000.0, 3.0], [81400.0, 3.0], [83000.0, 2.0], [84600.0, 2.0], [67700.0, 2.0], [69300.0, 1.0], [72500.0, 4.0], [75700.0, 5.0], [77300.0, 1.0], [78900.0, 1.0], [82100.0, 1.0], [83700.0, 2.0], [85300.0, 4.0], [16700.0, 3.0], [17100.0, 4.0], [17500.0, 3.0], [17900.0, 5.0], [18300.0, 4.0], [18700.0, 6.0], [19100.0, 4.0], [19500.0, 1.0], [20300.0, 1.0], [20700.0, 1.0], [21500.0, 4.0], [21100.0, 3.0], [21900.0, 2.0], [22300.0, 4.0], [22700.0, 3.0], [23100.0, 1.0], [23500.0, 2.0], [23900.0, 2.0], [24300.0, 2.0], [24700.0, 2.0], [25100.0, 2.0], [25500.0, 1.0], [25900.0, 1.0], [26300.0, 2.0], [27100.0, 3.0], [26700.0, 1.0], [27500.0, 2.0], [27900.0, 5.0], [28300.0, 6.0], [28700.0, 2.0], [29100.0, 4.0], [29900.0, 5.0], [30300.0, 2.0], [30700.0, 4.0], [31100.0, 2.0], [31500.0, 4.0], [31900.0, 2.0], [32300.0, 5.0], [32700.0, 2.0], [33400.0, 1.0], [34200.0, 2.0], [35000.0, 4.0], [35800.0, 3.0], [36600.0, 1.0], [37400.0, 2.0], [39000.0, 2.0], [39800.0, 4.0], [40600.0, 3.0], [41400.0, 2.0], [43000.0, 1.0], [43800.0, 4.0], [44600.0, 2.0], [45400.0, 1.0], [46200.0, 1.0], [47000.0, 1.0], [47800.0, 6.0], [48600.0, 1.0], [49400.0, 1.0], [50200.0, 1.0], [51000.0, 3.0], [51800.0, 5.0], [52600.0, 3.0], [53400.0, 2.0], [54200.0, 1.0], [55800.0, 6.0], [56600.0, 5.0], [57400.0, 5.0], [58200.0, 2.0], [59800.0, 6.0], [62200.0, 2.0], [63000.0, 4.0], [63800.0, 5.0], [64600.0, 1.0], [65400.0, 1.0], [68400.0, 1.0], [70000.0, 4.0], [74800.0, 4.0], [76400.0, 2.0], [78000.0, 1.0], [82800.0, 2.0], [84400.0, 1.0], [86000.0, 4.0], [87600.0, 2.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 89300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8494.0, "series": [{"data": [[0.0, 8494.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 926.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2579.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 43.354000000000006, "minX": 1.63132614E12, "maxY": 1683.0910596026479, "series": [{"data": [[1.63132626E12, 62.24600000000005]], "isOverall": false, "label": "addDemand", "isController": false}, {"data": [[1.63132626E12, 43.354000000000006]], "isOverall": false, "label": "getDemandByIde", "isController": false}, {"data": [[1.63132626E12, 557.6079999999996]], "isOverall": false, "label": "editDemand", "isController": false}, {"data": [[1.63132626E12, 119.56300000000005]], "isOverall": false, "label": "listOnesDemandsByPage", "isController": false}, {"data": [[1.63132626E12, 136.05000000000032]], "isOverall": false, "label": "removeDemand", "isController": false}, {"data": [[1.6313262E12, 751.6111541440729], [1.63132614E12, 1683.0910596026479], [1.63132626E12, 53.409523809523805]], "isOverall": false, "label": "listAllDemandsByPage", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63132626E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32.5, "minX": 1.0, "maxY": 88986.0, "series": [{"data": [[2.0, 124.5], [3.0, 119.0], [4.0, 1577.5714285714284], [7.0, 34780.0], [8.0, 22337.5], [9.0, 16947.5], [10.0, 5266.333333333333], [11.0, 15287.166666666666], [12.0, 22436.0], [13.0, 31329.666666666664], [14.0, 88986.0], [15.0, 15802.833333333334], [16.0, 15289.0], [17.0, 7657.916666666668], [18.0, 18251.2], [19.0, 13177.571428571428], [20.0, 22867.5], [21.0, 22784.5], [22.0, 32.5], [23.0, 88264.0], [24.0, 44275.5], [25.0, 5306.631578947367], [27.0, 45330.75], [28.0, 30081.333333333336], [29.0, 9031.2], [30.0, 4861.894736842107], [31.0, 85.33333333333331], [33.0, 763.1102362204732], [32.0, 2171.5487804878044], [35.0, 587.2278481012657], [34.0, 672.1459854014604], [37.0, 1135.0892857142856], [36.0, 33.14457831325301], [39.0, 989.2659574468089], [38.0, 529.5659340659337], [41.0, 720.5877862595422], [40.0, 837.7053571428572], [43.0, 1127.426829268292], [42.0, 1125.2976190476193], [45.0, 993.5670103092788], [44.0, 1113.3658536585367], [47.0, 1942.6595744680858], [46.0, 45.04938271604937], [49.0, 700.9621212121211], [48.0, 922.9405940594064], [51.0, 896.6601941747576], [50.0, 760.1735537190084], [53.0, 974.1214953271023], [52.0, 1050.0581395348838], [55.0, 1045.95652173913], [54.0, 931.5555555555555], [57.0, 1079.573033707865], [56.0, 757.0573770491809], [59.0, 1608.4827586206884], [58.0, 988.1956521739141], [61.0, 1170.7662337662339], [60.0, 1447.380952380952], [63.0, 1998.6304347826097], [62.0, 996.3125], [67.0, 1426.5999999999992], [66.0, 1241.1052631578946], [65.0, 1584.7857142857144], [64.0, 1044.2222222222217], [71.0, 2881.3124999999995], [70.0, 1920.0434782608697], [69.0, 2248.560975609756], [68.0, 2794.1935483870966], [75.0, 2253.219512195122], [74.0, 2076.1904761904757], [73.0, 2098.9534883720926], [72.0, 2549.085714285714], [79.0, 2618.0606060606046], [78.0, 5007.666666666666], [77.0, 4302.150000000001], [76.0, 118.87755102040819], [83.0, 1970.869565217392], [82.0, 4180.190476190475], [81.0, 2241.619047619048], [80.0, 3437.7200000000007], [87.0, 3792.400000000001], [86.0, 2979.3793103448274], [85.0, 2983.8275862068967], [84.0, 3895.499999999999], [90.0, 2851.000000000001], [89.0, 2792.8387096774195], [88.0, 2556.142857142858], [91.0, 95.60869565217392], [95.0, 1368.7076923076927], [94.0, 1406.0307692307692], [93.0, 1434.8181818181818], [92.0, 6107.642857142859], [99.0, 1771.3076923076924], [98.0, 1308.3382352941169], [97.0, 1881.8000000000004], [96.0, 2001.7045454545455], [103.0, 387.39393939393943], [102.0, 97.32727272727273], [100.0, 84.88888888888889], [101.0, 99.92857142857143], [107.0, 2068.2045454545455], [106.0, 2278.947368421052], [105.0, 14341.485714285714], [104.0, 84.75757575757578], [111.0, 2233.102564102565], [110.0, 5711.133333333333], [109.0, 3407.5000000000005], [108.0, 2504.9705882352937], [115.0, 2143.6341463414633], [114.0, 4302.7], [113.0, 2618.6764705882347], [112.0, 5936.285714285716], [119.0, 3615.8695652173915], [118.0, 3583.291666666667], [117.0, 5340.218749999999], [116.0, 166.64102564102555], [123.0, 1743.6538461538455], [122.0, 1522.8620689655172], [121.0, 1849.625], [120.0, 1851.6938775510198], [127.0, 4159.299999999999], [125.0, 2551.323529411764], [124.0, 1876.914893617022], [126.0, 97.11538461538461], [135.0, 1450.6500000000005], [134.0, 2307.925], [133.0, 1628.4905660377365], [132.0, 2632.7500000000005], [131.0, 2008.1590909090914], [130.0, 1663.4000000000003], [129.0, 3476.958333333333], [128.0, 1967.808510638297], [143.0, 1585.875], [142.0, 3210.9615384615386], [141.0, 1875.170212765958], [140.0, 2058.2888888888892], [139.0, 2398.0555555555566], [138.0, 2251.157894736843], [137.0, 3137.2452830188677], [136.0, 268.34999999999997], [151.0, 5181.375], [150.0, 3696.4888888888877], [148.0, 3150.615384615384], [147.0, 2550.3484848484864], [145.0, 1976.3749999999993], [144.0, 2790.233333333334], [146.0, 126.03636363636363], [149.0, 371.0857142857143], [159.0, 3573.869565217392], [158.0, 2756.3], [157.0, 15811.199999999999], [156.0, 6368.461538461539], [154.0, 2464.833333333334], [153.0, 2741.4516129032254], [152.0, 3852.285714285714], [155.0, 352.8421052631579], [167.0, 5902.851851851852], [165.0, 4391.260869565216], [164.0, 8758.0], [163.0, 3180.8076923076924], [162.0, 2655.806451612904], [161.0, 3886.428571428573], [160.0, 5045.0], [166.0, 280.1428571428571], [173.0, 3862.045454545455], [172.0, 4217.526315789474], [171.0, 3211.115384615385], [170.0, 2312.5999999999995], [169.0, 4235.684210526318], [168.0, 7872.400000000001], [175.0, 223.56097560975607], [174.0, 204.85714285714283], [183.0, 5765.714285714285], [182.0, 2869.413793103449], [181.0, 2219.894736842105], [180.0, 2146.4878048780483], [179.0, 2103.3250000000003], [178.0, 2494.060606060605], [177.0, 7036.888888888889], [176.0, 267.75999999999993], [188.0, 3651.5217391304345], [187.0, 3803.666666666667], [186.0, 4031.0000000000005], [185.0, 3626.136363636364], [184.0, 3574.000000000001], [191.0, 521.5294117647059], [190.0, 139.80952380952382], [189.0, 158.47619047619042], [198.0, 2264.567567567567], [197.0, 4758.764705882355], [196.0, 1976.069767441861], [195.0, 2368.4857142857145], [194.0, 2723.774193548387], [193.0, 11001.285714285717], [192.0, 237.59374999999997], [199.0, 246.85714285714286], [207.0, 43395.57142857143], [203.0, 7859.900000000001], [202.0, 5310.933333333334], [201.0, 11201.428571428572], [200.0, 3922.048780487808], [204.0, 306.30769230769226], [205.0, 2134.0], [214.0, 15291.8], [213.0, 62300.166666666664], [208.0, 38255.5], [215.0, 2120.0], [212.0, 1809.0], [211.0, 1971.0], [209.0, 2125.0], [223.0, 10951.428571428572], [222.0, 37606.5], [221.0, 42963.57142857143], [217.0, 22544.9], [216.0, 683.0], [219.0, 216.5], [218.0, 2109.0], [231.0, 49341.66666666667], [227.0, 59108.4], [225.0, 868.0], [229.0, 2091.0], [226.0, 2095.0], [224.0, 2098.0], [237.0, 54947.0], [234.0, 18319.25], [233.0, 24999.0], [232.0, 37395.0], [238.0, 849.0], [239.0, 2069.0], [236.0, 2081.3333333333335], [247.0, 60240.5], [242.0, 19006.5], [241.0, 29046.199999999997], [243.0, 1155.0], [246.0, 2055.0], [245.0, 2063.0], [244.0, 2310.0], [240.0, 1745.0], [255.0, 71154.0], [254.0, 36624.5], [253.0, 36670.0], [252.0, 25142.333333333336], [251.0, 30786.142857142862], [248.0, 36767.5], [249.0, 206.6], [250.0, 2052.0], [271.0, 70091.0], [270.0, 16644.0], [269.0, 83.0], [268.0, 2013.0], [259.0, 1719.0], [258.0, 2031.0], [267.0, 10523.857142857141], [266.0, 36190.0], [265.0, 36196.5], [264.0, 42792.0], [261.0, 71077.75], [260.0, 2030.0], [262.0, 1868.5], [257.0, 36561.0], [256.0, 25061.333333333336], [263.0, 2023.0], [275.0, 35820.5], [287.0, 52185.25], [284.0, 18184.0], [286.0, 283.0], [285.0, 1984.0], [274.0, 35878.5], [273.0, 35897.0], [272.0, 14869.4], [283.0, 23101.0], [282.0, 12485.0], [281.0, 69270.0], [280.0, 315.0], [279.0, 24409.666666666664], [278.0, 69307.0], [277.0, 18462.5], [276.0, 69649.0], [302.0, 18230.75], [303.0, 17098.75], [301.0, 67684.0], [300.0, 34027.0], [299.0, 18194.75], [298.0, 67813.0], [297.0, 46067.66666666667], [296.0, 1721.0], [295.0, 17156.75], [289.0, 12454.166666666666], [288.0, 68551.0], [291.0, 22849.666666666664], [290.0, 68489.0], [294.0, 17925.25], [293.0, 22951.0], [292.0, 14834.6], [318.0, 34129.0], [319.0, 33282.0], [317.0, 20486.714285714286], [307.0, 22639.0], [306.0, 17418.5], [305.0, 14705.6], [304.0, 67499.0], [315.0, 66655.0], [314.0, 66726.0], [313.0, 33527.5], [312.0, 23387.666666666664], [311.0, 33652.0], [310.0, 34497.5], [309.0, 10305.714285714284], [308.0, 23105.0], [334.0, 65235.0], [335.0, 33560.5], [333.0, 65248.0], [332.0, 65247.0], [331.0, 22562.333333333336], [330.0, 23290.833333333336], [328.0, 13354.4], [329.0, 289.54545454545456], [327.0, 65838.0], [321.0, 22290.333333333336], [320.0, 66270.0], [323.0, 33739.5], [322.0, 14848.8], [326.0, 33880.0], [325.0, 23271.0], [324.0, 65976.0], [350.0, 14287.8], [351.0, 21486.0], [349.0, 21482.333333333336], [348.0, 21612.666666666664], [347.0, 64252.0], [346.0, 17538.5], [345.0, 64389.5], [343.0, 32839.5], [337.0, 32647.0], [336.0, 65088.0], [339.0, 16432.5], [338.0, 64854.0], [342.0, 23098.666666666664], [341.0, 64695.0], [340.0, 8115.900000000001], [355.0, 27540.142857142855], [366.0, 62928.0], [367.0, 62695.0], [365.0, 36787.57142857143], [364.0, 296.8], [361.0, 6496.083333333334], [363.0, 347.5], [362.0, 534.6666666666666], [360.0, 42348.33333333333], [358.0, 63420.0], [357.0, 12963.600000000002], [356.0, 63678.0], [352.0, 63834.0], [354.0, 325.5], [353.0, 1516.5], [382.0, 31489.0], [383.0, 30955.0], [381.0, 16233.500000000002], [380.0, 24910.6], [378.0, 7113.999999999999], [379.0, 1401.8], [377.0, 61928.0], [376.0, 62134.0], [375.0, 32157.999999999996], [368.0, 62627.0], [371.0, 62460.0], [370.0, 19053.857142857145], [373.0, 31871.0], [372.0, 21893.0], [396.0, 13117.0], [398.0, 59837.0], [399.0, 20929.0], [397.0, 20588.333333333336], [395.0, 60792.333333333336], [393.0, 1428.0], [392.0, 31170.5], [391.0, 21536.0], [384.0, 618.0], [386.0, 61356.0], [385.0, 61539.0], [390.0, 61096.0], [389.0, 11541.333333333332], [388.0, 61152.0], [414.0, 59124.0], [415.0, 20153.666666666664], [412.0, 30590.5], [413.0, 1522.0], [403.0, 20760.666666666664], [402.0, 10334.833333333334], [401.0, 17674.42857142857], [400.0, 407.0], [411.0, 16125.999999999998], [410.0, 59701.0], [409.0, 59239.0], [408.0, 9617.999999999998], [407.0, 59842.0], [406.0, 7710.625], [405.0, 59393.0], [404.0, 59982.0], [430.0, 29914.0], [431.0, 15079.0], [429.0, 19818.666666666664], [428.0, 30173.0], [427.0, 11071.833333333336], [426.0, 58655.0], [425.0, 58676.0], [424.0, 59263.0], [423.0, 15049.999999999998], [417.0, 59618.0], [416.0, 8135.875], [419.0, 59550.0], [418.0, 59560.0], [422.0, 20517.333333333336], [421.0, 59400.0], [420.0, 13388.999999999998], [446.0, 57923.0], [447.0, 30337.0], [445.0, 10183.0], [444.0, 11924.0], [443.0, 10019.666666666668], [442.0, 19712.333333333336], [441.0, 58475.0], [439.0, 58806.0], [432.0, 12700.600000000002], [435.0, 30271.500000000004], [434.0, 337.85714285714283], [433.0, 30093.0], [438.0, 58823.0], [437.0, 19760.0], [436.0, 58895.0], [462.0, 6762.222222222222], [463.0, 28863.5], [461.0, 29186.5], [460.0, 7416.999999999998], [459.0, 29286.0], [458.0, 19563.0], [457.0, 57905.0], [456.0, 1791.0], [455.0, 39200.0], [454.0, 633.25], [449.0, 12820.0], [448.0, 57797.0], [451.0, 19484.0], [450.0, 7379.9], [453.0, 29970.0], [452.0, 20552.333333333336], [478.0, 29350.0], [479.0, 8588.857142857143], [477.0, 10250.999999999998], [476.0, 56910.0], [475.0, 19592.666666666664], [474.0, 29575.0], [473.0, 20185.333333333336], [472.0, 56966.0], [471.0, 15257.0], [465.0, 57583.0], [464.0, 12827.4], [467.0, 19428.666666666664], [466.0, 20130.0], [470.0, 57424.0], [469.0, 15364.999999999998], [468.0, 57070.0], [494.0, 14701.249999999998], [495.0, 28767.0], [493.0, 29004.0], [483.0, 526.0], [482.0, 1540.75], [492.0, 528.5], [491.0, 38121.33333333333], [490.0, 1632.6], [489.0, 56267.0], [488.0, 56331.0], [487.0, 56844.0], [486.0, 47436.83333333333], [485.0, 719.5], [484.0, 1294.3333333333333], [481.0, 57165.0], [480.0, 14584.499999999998], [499.0, 20008.333333333336], [510.0, 23177.399999999998], [508.0, 6583.222222222222], [507.0, 12268.999999999998], [506.0, 56025.4], [505.0, 266.8], [504.0, 909.2], [511.0, 551.0], [501.0, 56390.0], [500.0, 56019.0], [498.0, 56589.0], [497.0, 19780.333333333336], [496.0, 56174.0], [503.0, 553.6666666666666], [502.0, 1464.3333333333333], [536.0, 19456.666666666664], [540.0, 54529.0], [528.0, 5866.699999999999], [538.0, 55103.0], [512.0, 55760.0], [514.0, 55933.0], [516.0, 14292.250000000002], [518.0, 15284.25], [526.0, 30802.909090909096], [520.0, 55269.0], [524.0, 529.25], [522.0, 1655.0], [534.0, 14785.999999999998], [532.0, 54790.0], [572.0, 14393.5], [568.0, 11124.8], [560.0, 53807.0], [564.0, 27310.0], [562.0, 27293.0], [574.0, 18871.666666666664], [570.0, 53779.0], [546.0, 23016.25], [548.0, 54104.0], [550.0, 27340.0], [558.0, 54370.0], [556.0, 18851.666666666664], [554.0, 14286.500000000002], [552.0, 27169.5], [566.0, 53599.5], [600.0, 26783.5], [606.0, 19401.07142857143], [596.0, 11184.8], [592.0, 9599.166666666668], [576.0, 53639.0], [578.0, 53627.0], [580.0, 18000.666666666664], [582.0, 471.0], [590.0, 7792.625], [588.0, 35459.66666666667], [586.0, 53137.0], [584.0, 607.2], [598.0, 27185.0], [594.0, 8448.0], [636.0, 8494.0], [624.0, 13480.249999999998], [626.0, 25757.0], [628.0, 17842.666666666664], [638.0, 50946.0], [634.0, 10758.2], [632.0, 17697.0], [612.0, 51841.0], [614.0, 51809.0], [622.0, 7406.124999999999], [608.0, 1164.6666666666667], [610.0, 1635.0], [620.0, 7963.142857142856], [618.0, 7269.374999999999], [616.0, 13553.749999999998], [630.0, 51136.0], [668.0, 25458.5], [656.0, 50673.0], [658.0, 25430.5], [660.0, 50109.0], [670.0, 50084.0], [666.0, 25742.0], [664.0, 49900.0], [640.0, 50856.0], [642.0, 11161.2], [646.0, 17867.666666666668], [644.0, 1466.0], [654.0, 50758.0], [652.0, 50361.0], [650.0, 50825.0], [648.0, 50437.0], [662.0, 25299.5], [700.0, 48637.0], [702.0, 48495.0], [688.0, 20138.6], [690.0, 49350.0], [692.0, 49511.0], [696.0, 13559.0], [678.0, 49851.0], [676.0, 13018.5], [674.0, 5858.7], [672.0, 50027.0], [686.0, 49068.0], [684.0, 49156.0], [682.0, 25338.0], [680.0, 13097.5], [694.0, 48870.0], [730.0, 47849.0], [734.0, 16348.0], [720.0, 12922.5], [722.0, 47866.0], [724.0, 12868.25], [728.0, 7504.857142857141], [710.0, 1833.0], [708.0, 24501.0], [706.0, 16509.0], [704.0, 7123.75], [718.0, 48355.0], [716.0, 7897.0], [714.0, 48151.0], [712.0, 48565.0], [726.0, 16748.333333333332], [760.0, 46473.0], [764.0, 23724.0], [756.0, 47049.42857142857], [766.0, 23682.0], [752.0, 826.0], [754.0, 1163.6666666666667], [762.0, 46709.0], [736.0, 47756.0], [738.0, 10596.0], [740.0, 47260.0], [742.0, 47145.0], [746.0, 46965.0], [744.0, 11411.444444444445], [758.0, 46542.0], [796.0, 23820.5], [784.0, 45902.0], [786.0, 45494.0], [788.0, 45347.0], [798.0, 44994.0], [794.0, 45587.0], [792.0, 45632.0], [770.0, 46392.0], [768.0, 1606.0], [774.0, 1373.0], [772.0, 1417.0], [782.0, 45937.0], [780.0, 23547.5], [778.0, 10163.6], [776.0, 46330.0], [790.0, 7048.0], [824.0, 44050.0], [820.0, 7231.142857142858], [826.0, 43977.0], [830.0, 1261.3333333333333], [816.0, 35969.6], [806.0, 32462.571428571435], [802.0, 190.0], [800.0, 45263.0], [812.0, 7286.285714285714], [810.0, 44540.0], [808.0, 6333.000000000001], [822.0, 6943.142857142858], [818.0, 6407.875000000001], [856.0, 26383.799999999996], [860.0, 17724.2], [862.0, 8024.166666666666], [858.0, 14566.333333333332], [838.0, 22104.5], [836.0, 44218.5], [834.0, 43977.57142857143], [846.0, 43679.0], [844.0, 22140.5], [842.0, 43766.0], [840.0, 12097.0], [850.0, 43154.0], [848.0, 1350.0], [892.0, 41943.0], [894.0, 41710.0], [880.0, 14772.333333333332], [882.0, 15003.333333333332], [890.0, 20966.0], [864.0, 7959.333333333333], [866.0, 42799.0], [868.0, 42415.0], [870.0, 21581.5], [878.0, 21767.0], [876.0, 9584.0], [872.0, 42627.0], [886.0, 7758.666666666667], [884.0, 21416.0], [900.0, 7725.833333333334], [922.0, 7693.333333333333], [926.0, 1188.8], [924.0, 1096.4], [920.0, 14131.666666666668], [902.0, 41392.0], [898.0, 6708.142857142857], [896.0, 41832.0], [916.0, 35543.28571428571], [918.0, 1292.0], [914.0, 1153.6], [912.0, 967.0], [910.0, 40933.0], [908.0, 40954.0], [906.0, 21020.0], [904.0, 41087.0], [956.0, 34279.857142857145], [958.0, 26492.0], [932.0, 14334.666666666668], [942.0, 1141.3333333333333], [930.0, 1330.6000000000001], [934.0, 320.0], [954.0, 1087.5], [940.0, 8807.0], [938.0, 14233.666666666668], [936.0, 30577.666666666664], [950.0, 7522.833333333333], [948.0, 20368.0], [944.0, 20229.5], [946.0, 1081.0], [984.0, 8084.0], [988.0, 19427.0], [990.0, 964.0], [986.0, 808.6666666666666], [960.0, 10544.25], [974.0, 882.5], [972.0, 1560.5], [970.0, 1213.5], [968.0, 1196.0], [962.0, 20289.0], [964.0, 39233.0], [980.0, 13220.333333333332], [978.0, 1118.0], [982.0, 1273.0], [976.0, 26422.666666666664], [1016.0, 32307.285714285714], [1008.0, 28263.25], [1022.0, 849.0], [1020.0, 12845.333333333332], [1018.0, 12996.666666666668], [996.0, 34148.00000000001], [1006.0, 878.0], [992.0, 1376.5], [994.0, 1701.5], [1004.0, 19215.5], [1002.0, 19585.5], [1000.0, 6958.333333333333], [1010.0, 13388.0], [1012.0, 1192.0], [1084.0, 34369.0], [1080.0, 34515.0], [1060.0, 35251.0], [1056.0, 12752.0], [1064.0, 9274.25], [1068.0, 12538.0], [1076.0, 35319.125], [1028.0, 9683.0], [1036.0, 36739.75], [1032.0, 997.1666666666667], [1048.0, 35787.0], [1024.0, 1343.3333333333333], [1052.0, 1020.5], [1044.0, 7983.8], [1040.0, 12666.333333333332], [1140.0, 32719.75], [1120.0, 33492.0], [1124.0, 33140.0], [1148.0, 32461.0], [1136.0, 33185.200000000004], [1096.0, 34592.5], [1088.0, 34323.0], [1100.0, 34069.0], [1116.0, 33809.833333333336], [1108.0, 33952.0], [1160.0, 31671.0], [1212.0, 30387.5], [1156.0, 32327.42857142857], [1164.0, 31629.0], [1180.0, 31112.0], [1176.0, 31568.0], [1172.0, 31625.0], [1168.0, 31658.0], [1200.0, 30474.0], [1184.0, 882.0], [1196.0, 30869.777777777774], [1208.0, 895.5], [1204.0, 29960.5], [1272.0, 28174.5], [1276.0, 27904.0], [1248.0, 29116.0], [1256.0, 28781.0], [1260.0, 28328.5], [1224.0, 29329.0], [1220.0, 30082.0], [1216.0, 30059.333333333332], [1244.0, 28727.5], [1240.0, 29106.333333333332], [1236.0, 29315.0], [1232.0, 29819.0], [1340.0, 25270.0], [1312.0, 26249.5], [1316.0, 26355.0], [1320.0, 26373.0], [1324.0, 25670.0], [1336.0, 25748.0], [1332.0, 25385.0], [1328.0, 25958.0], [1280.0, 27841.0], [1284.0, 26966.0], [1288.0, 27616.0], [1292.0, 27242.0], [1308.0, 26838.0], [1304.0, 26215.0], [1300.0, 26841.0], [1296.0, 27120.0], [1400.0, 23320.0], [1396.0, 23523.0], [1404.0, 23005.0], [1376.0, 24188.0], [1380.0, 24049.0], [1384.0, 23667.0], [1388.0, 23473.0], [1392.0, 23408.0], [1344.0, 25301.0], [1348.0, 25331.0], [1352.0, 24902.0], [1356.0, 25059.0], [1372.0, 24470.0], [1368.0, 24281.0], [1364.0, 24675.0], [1360.0, 24701.0], [1464.0, 20976.0], [1440.0, 21765.0], [1444.0, 21442.0], [1452.0, 21410.0], [1456.0, 21257.0], [1420.0, 22569.0], [1416.0, 22788.0], [1412.0, 22843.0], [1408.0, 22764.0], [1436.0, 22014.0], [1432.0, 22149.0], [1428.0, 22333.0], [1424.0, 22478.0], [1520.0, 18799.0], [1524.0, 18719.0], [1512.0, 19131.0], [1532.0, 18094.0], [1504.0, 19169.0], [1516.0, 18501.0], [1476.0, 20515.0], [1472.0, 20654.0], [1496.0, 19746.0], [1492.0, 19766.0], [1592.0, 8566.0], [1596.0, 15489.0], [1576.0, 8584.5], [1572.0, 16901.0], [1580.0, 16536.0], [1584.0, 16311.0], [1544.0, 17855.5], [1536.0, 18228.0], [1564.0, 16813.0], [1560.0, 17229.5], [1556.0, 17022.0], [1552.0, 17490.0], [1656.0, 13335.0], [1660.0, 13217.0], [1632.0, 14607.0], [1636.0, 14127.0], [1644.0, 14058.0], [1652.0, 13505.0], [1648.0, 13932.0], [1608.0, 15309.5], [1604.0, 15565.0], [1624.0, 14657.0], [1620.0, 14624.0], [1616.0, 15222.0], [1724.0, 11181.0], [1696.0, 12014.0], [1700.0, 11790.0], [1704.0, 11846.0], [1716.0, 10990.0], [1712.0, 11324.0], [1672.0, 13110.0], [1676.0, 12571.0], [1692.0, 12330.0], [1688.0, 12298.0], [1684.0, 12679.0], [1680.0, 12824.0], [1780.0, 9070.0], [1784.0, 8612.0], [1788.0, 8541.0], [1768.0, 9485.0], [1764.0, 9354.0], [1772.0, 9144.0], [1776.0, 8719.0], [1740.0, 10580.0], [1736.0, 10631.0], [1732.0, 10524.0], [1756.0, 9526.0], [1752.0, 9907.5], [1848.0, 6556.0], [1852.0, 5904.0], [1824.0, 7082.0], [1828.0, 7077.0], [1832.0, 6658.0], [1836.0, 6732.0], [1844.0, 6377.0], [1840.0, 6584.0], [1804.0, 8144.0], [1800.0, 8038.0], [1796.0, 8373.0], [1792.0, 8228.0], [1820.0, 7530.5], [1816.0, 7633.0], [1812.0, 7592.0], [1860.0, 6065.625], [1904.0, 1492.0], [1856.0, 1437.0], [1880.0, 5248.5], [1876.0, 5281.0], [1864.0, 5871.0], [1888.0, 5098.571428571428], [1900.0, 4503.555555555556], [1908.0, 4134.4], [1924.0, 3481.0], [1928.0, 3564.0], [1920.0, 3826.272727272727], [1948.0, 2785.0], [1940.0, 3230.0], [1980.0, 1466.0], [1956.0, 2115.0], [1960.0, 2317.0000000000005], [1968.0, 1882.0], [1964.0, 2118.0], [1085.0, 34359.0], [1057.0, 18162.0], [1061.0, 35653.0], [1065.0, 6540.0], [1069.0, 698.0], [1081.0, 34457.0], [1077.0, 34628.0], [1025.0, 13007.666666666666], [1037.0, 36128.0], [1033.0, 498.0], [1045.0, 4847.222222222222], [1053.0, 826.3333333333334], [1049.0, 1038.4], [1041.0, 36282.0], [1145.0, 32286.0], [1141.0, 32653.0], [1149.0, 32396.0], [1121.0, 33392.0], [1097.0, 33904.0], [1117.0, 33288.0], [1109.0, 33890.0], [1105.0, 33534.5], [1161.0, 31901.0], [1157.0, 31814.0], [1165.0, 31616.0], [1181.0, 31120.0], [1177.0, 31046.0], [1169.0, 31651.0], [1201.0, 30355.0], [1189.0, 904.0], [1185.0, 30866.5], [1197.0, 30602.0], [1213.0, 30234.0], [1209.0, 30129.333333333332], [1277.0, 27283.0], [1249.0, 28437.0], [1257.0, 27969.0], [1261.0, 28252.0], [1273.0, 28317.0], [1269.0, 27843.0], [1265.0, 27964.5], [1229.0, 29355.5], [1225.0, 29407.0], [1221.0, 29966.0], [1217.0, 29746.0], [1245.0, 28459.0], [1241.0, 29299.0], [1237.0, 28815.0], [1233.0, 29838.0], [1337.0, 25043.0], [1313.0, 26466.0], [1317.0, 25809.0], [1321.0, 26270.0], [1325.0, 25845.0], [1333.0, 25899.0], [1329.0, 25753.0], [1281.0, 27760.0], [1285.0, 26914.0], [1293.0, 27564.0], [1305.0, 26974.0], [1301.0, 27012.0], [1297.0, 26803.0], [1401.0, 22794.0], [1405.0, 23179.0], [1377.0, 23929.0], [1385.0, 23481.0], [1389.0, 23471.0], [1397.0, 23044.0], [1393.0, 23681.0], [1345.0, 25492.0], [1349.0, 25343.0], [1357.0, 24968.0], [1365.0, 24448.0], [1469.0, 20676.333333333332], [1445.0, 21689.0], [1449.0, 21369.0], [1453.0, 21415.0], [1465.0, 20929.0], [1461.0, 20888.5], [1457.0, 20967.0], [1413.0, 22894.0], [1437.0, 21932.0], [1433.0, 21715.0], [1429.0, 22011.0], [1425.0, 22426.0], [1529.0, 18374.25], [1525.0, 18283.0], [1509.0, 19320.25], [1505.0, 19452.0], [1513.0, 18847.0], [1517.0, 18981.0], [1533.0, 18073.0], [1521.0, 18333.0], [1481.0, 19963.0], [1477.0, 20004.0], [1473.0, 20636.0], [1501.0, 19183.5], [1497.0, 19706.0], [1493.0, 19438.0], [1489.0, 20194.857142857145], [1597.0, 15918.0], [1573.0, 16371.0], [1569.0, 17038.75], [1577.0, 16332.0], [1581.0, 16236.0], [1593.0, 16117.0], [1589.0, 16308.8], [1549.0, 17743.6], [1541.0, 17843.5], [1537.0, 17845.0], [1565.0, 16768.0], [1561.0, 16830.0], [1557.0, 17454.0], [1553.0, 17375.0], [1657.0, 13663.0], [1661.0, 13580.0], [1633.0, 14531.0], [1637.0, 14414.0], [1641.0, 14265.0], [1645.0, 14154.0], [1653.0, 13323.0], [1649.0, 14061.0], [1613.0, 15214.0], [1609.0, 15586.0], [1605.0, 15677.0], [1601.0, 15672.333333333334], [1629.0, 14679.75], [1625.0, 14800.0], [1621.0, 15091.0], [1717.0, 11078.0], [1697.0, 11866.0], [1709.0, 11980.714285714284], [1725.0, 11109.0], [1669.0, 13389.666666666668], [1673.0, 12692.0], [1677.0, 12901.0], [1693.0, 11808.0], [1689.0, 12497.0], [1685.0, 12625.0], [1789.0, 8795.0], [1761.0, 9748.5], [1769.0, 9619.0], [1773.0, 8972.0], [1781.0, 9069.0], [1777.0, 8671.0], [1733.0, 10727.0], [1729.0, 10865.0], [1753.0, 9979.0], [1749.0, 10220.5], [1841.0, 6519.0], [1845.0, 6598.0], [1829.0, 7061.0], [1849.0, 6482.0], [1825.0, 7334.0], [1837.0, 6824.0], [1801.0, 8037.0], [1797.0, 8082.0], [1793.0, 8161.0], [1821.0, 7522.0], [1813.0, 7653.0], [1809.0, 7951.2], [1865.0, 5618.0], [1861.0, 5733.0], [1881.0, 5200.0], [1877.0, 5522.0], [1869.0, 5747.666666666667], [1889.0, 4685.0], [1901.0, 4429.0], [1909.0, 4142.0], [1929.0, 3547.0], [1925.0, 3415.0], [1977.0, 1549.25], [1921.0, 3492.0], [1949.0, 2610.0], [1941.0, 2804.0], [1957.0, 2389.0], [1973.0, 1574.3333333333333], [1969.0, 1670.0], [1965.0, 1825.0], [539.0, 14848.000000000002], [541.0, 27748.0], [543.0, 516.0], [531.0, 13213.333333333336], [529.0, 54817.0], [537.0, 55110.0], [527.0, 55334.0], [521.0, 1664.5], [513.0, 14967.750000000002], [515.0, 19489.0], [517.0, 28050.5], [519.0, 28749.5], [535.0, 54730.0], [533.0, 11264.400000000001], [571.0, 53339.0], [575.0, 27274.0], [561.0, 54200.0], [563.0, 1030.7272727272727], [573.0, 53752.0], [569.0, 11892.600000000002], [559.0, 18520.333333333336], [545.0, 516.0], [547.0, 18484.333333333336], [549.0, 54088.0], [551.0, 54529.0], [557.0, 27846.5], [555.0, 54008.0], [553.0, 4853.625], [567.0, 53828.0], [565.0, 591.1666666666666], [607.0, 51896.0], [593.0, 9163.333333333332], [601.0, 27119.5], [583.0, 1755.0], [603.0, 579.0], [605.0, 224.5], [591.0, 26575.0], [577.0, 18591.0], [579.0, 18826.0], [581.0, 18091.666666666664], [589.0, 17917.666666666664], [585.0, 664.4], [599.0, 18325.0], [597.0, 7142.625], [595.0, 8163.857142857144], [637.0, 51387.0], [639.0, 9420.5], [625.0, 26245.5], [627.0, 6671.111111111112], [629.0, 17517.333333333336], [635.0, 51049.0], [633.0, 51511.0], [623.0, 17584.0], [611.0, 52084.0], [609.0, 52101.5], [613.0, 10869.8], [615.0, 9856.5], [621.0, 17763.0], [619.0, 17846.333333333336], [617.0, 52131.0], [631.0, 14079.000000000002], [669.0, 25587.0], [671.0, 50078.0], [657.0, 18007.666666666664], [659.0, 5866.200000000001], [661.0, 13027.75], [667.0, 25473.0], [665.0, 17678.0], [655.0, 6864.333333333333], [641.0, 25664.0], [645.0, 50930.0], [643.0, 655.0], [647.0, 25845.5], [653.0, 50772.0], [651.0, 25785.5], [649.0, 25586.5], [663.0, 11209.8], [699.0, 49115.0], [697.0, 25089.5], [703.0, 12751.75], [689.0, 16817.666666666668], [691.0, 49164.0], [693.0, 9095.5], [701.0, 48940.0], [679.0, 11183.0], [677.0, 49445.0], [675.0, 17345.666666666668], [673.0, 49613.0], [687.0, 435.0], [685.0, 17543.666666666668], [683.0, 8805.666666666666], [681.0, 17312.0], [695.0, 48852.0], [731.0, 12870.25], [729.0, 47618.0], [735.0, 47482.0], [721.0, 16357.666666666668], [723.0, 24534.0], [725.0, 24518.5], [733.0, 47822.0], [711.0, 48596.0], [709.0, 48263.0], [707.0, 16582.0], [705.0, 6172.111111111111], [719.0, 48333.0], [717.0, 24906.5], [715.0, 48143.0], [713.0, 48561.0], [727.0, 16294.666666666668], [763.0, 16634.666666666668], [767.0, 16556.333333333332], [757.0, 46899.0], [765.0, 23877.0], [761.0, 16235.666666666668], [749.0, 16487.333333333336], [751.0, 890.0], [737.0, 12666.25], [739.0, 24570.5], [741.0, 47487.0], [747.0, 46957.0], [745.0, 24409.0], [759.0, 9182.5], [797.0, 23373.5], [799.0, 15816.666666666668], [785.0, 23499.0], [787.0, 7640.714285714285], [789.0, 45331.0], [795.0, 10061.6], [793.0, 45270.0], [783.0, 45560.0], [769.0, 46100.5], [771.0, 12634.5], [775.0, 46331.5], [773.0, 46015.5], [781.0, 45636.0], [779.0, 23577.0], [777.0, 46091.0], [791.0, 10254.8], [825.0, 8066.0], [817.0, 44592.0], [831.0, 899.6666666666666], [827.0, 1221.5], [807.0, 22422.0], [805.0, 1086.5], [803.0, 1328.0], [801.0, 44930.0], [811.0, 11775.5], [813.0, 615.5], [815.0, 1484.5], [809.0, 22666.5], [823.0, 22796.5], [821.0, 22452.5], [819.0, 22662.0], [839.0, 9296.4], [863.0, 21743.0], [861.0, 15031.0], [857.0, 22382.0], [859.0, 1231.0], [837.0, 15559.333333333332], [835.0, 795.0], [833.0, 11653.25], [847.0, 14816.666666666668], [845.0, 11465.75], [843.0, 15000.666666666668], [841.0, 22558.0], [849.0, 12705.285714285714], [855.0, 538.25], [853.0, 1005.0], [851.0, 1420.6666666666667], [889.0, 41764.0], [895.0, 21060.0], [881.0, 42183.0], [883.0, 21732.5], [891.0, 21164.5], [879.0, 41985.0], [865.0, 42572.0], [867.0, 9187.0], [869.0, 14590.666666666668], [871.0, 42647.0], [877.0, 11167.0], [873.0, 21545.0], [875.0, 799.8333333333334], [887.0, 41685.0], [885.0, 11235.75], [903.0, 21324.5], [923.0, 20899.5], [925.0, 16882.6], [915.0, 867.2], [927.0, 1233.0], [921.0, 11225.0], [901.0, 41602.0], [899.0, 10732.25], [897.0, 14364.0], [919.0, 16746.8], [917.0, 40974.0], [909.0, 20868.0], [907.0, 40960.0], [905.0, 20935.0], [959.0, 6686.999999999999], [947.0, 16457.2], [935.0, 10884.0], [955.0, 1341.0], [957.0, 1589.0], [929.0, 668.0], [933.0, 802.0], [943.0, 16630.8], [941.0, 20566.0], [939.0, 20305.5], [937.0, 10723.5], [949.0, 39950.0], [951.0, 968.5], [945.0, 10840.0], [987.0, 13312.666666666666], [979.0, 26134.333333333336], [985.0, 19811.5], [975.0, 23550.8], [961.0, 14098.0], [963.0, 39321.0], [965.0, 5210.222222222222], [983.0, 38563.5], [981.0, 6979.5], [977.0, 19678.5], [989.0, 1126.2000000000003], [1017.0, 36847.0], [1021.0, 12672.333333333332], [1023.0, 19011.0], [1019.0, 5966.714285714286], [999.0, 28608.0], [997.0, 1104.0], [1007.0, 1000.0], [1005.0, 13441.333333333332], [1003.0, 6909.0], [1001.0, 13153.666666666668], [1009.0, 37570.0], [1015.0, 1501.3333333333333], [1011.0, 1519.0], [1082.0, 34897.0], [1058.0, 35376.0], [1066.0, 18470.0], [1086.0, 34352.0], [1078.0, 34624.0], [1026.0, 7883.4], [1054.0, 929.3333333333334], [1038.0, 36119.0], [1046.0, 36149.0], [1042.0, 9685.75], [1142.0, 32634.0], [1146.0, 32202.0], [1122.0, 33388.0], [1126.0, 33053.0], [1098.0, 33920.0], [1102.0, 34030.0], [1118.0, 33535.0], [1110.0, 33909.0], [1106.0, 33816.0], [1162.0, 31873.0], [1158.0, 32003.0], [1166.0, 31476.0], [1182.0, 31094.0], [1178.0, 31148.0], [1174.0, 31435.5], [1202.0, 30331.0], [1186.0, 30704.0], [1198.0, 29952.0], [1210.0, 30155.0], [1206.0, 29980.0], [1274.0, 27449.0], [1266.0, 27883.0], [1258.0, 28259.0], [1262.0, 28221.0], [1278.0, 27202.0], [1270.0, 28364.0], [1230.0, 29842.0], [1226.0, 29470.0], [1222.0, 29730.0], [1218.0, 29810.0], [1246.0, 28469.0], [1242.0, 29243.0], [1234.0, 29052.0], [1334.0, 25406.0], [1330.0, 25776.0], [1338.0, 25300.0], [1342.0, 24977.0], [1314.0, 26159.0], [1318.0, 25683.0], [1326.0, 26171.0], [1310.0, 26831.0], [1282.0, 27414.0], [1286.0, 27121.0], [1290.0, 27211.5], [1294.0, 26757.0], [1306.0, 26251.0], [1302.0, 26162.0], [1298.0, 26537.0], [1406.0, 22905.0], [1378.0, 24239.0], [1382.0, 23732.5], [1386.0, 23862.0], [1390.0, 23408.0], [1402.0, 23030.0], [1398.0, 23025.0], [1394.0, 23325.0], [1346.0, 25444.0], [1350.0, 25340.0], [1354.0, 25140.5], [1358.0, 24960.0], [1374.0, 24053.0], [1370.0, 24528.0], [1366.0, 24350.0], [1362.0, 24277.0], [1466.0, 20892.0], [1462.0, 20628.0], [1442.0, 21458.0], [1446.0, 21493.0], [1450.0, 21250.0], [1454.0, 21025.0], [1470.0, 20631.0], [1458.0, 21219.0], [1422.0, 22542.0], [1418.0, 22550.5], [1414.0, 22603.0], [1410.0, 23062.5], [1438.0, 21936.0], [1434.0, 22126.0], [1430.0, 21890.0], [1426.0, 22367.0], [1534.0, 18292.0], [1510.0, 18799.0], [1514.0, 18947.0], [1518.0, 18932.0], [1530.0, 18307.0], [1522.0, 18779.0], [1482.0, 20272.0], [1478.0, 20103.0], [1474.0, 20616.0], [1502.0, 19275.0], [1498.0, 19385.0], [1494.0, 19505.0], [1490.0, 19872.0], [1598.0, 15609.0], [1574.0, 16462.0], [1570.0, 16452.0], [1578.0, 16224.0], [1582.0, 16538.0], [1590.0, 15719.0], [1550.0, 17276.0], [1542.0, 17681.0], [1538.0, 17917.0], [1562.0, 16960.0], [1558.0, 16962.0], [1554.0, 17537.0], [1662.0, 13106.0], [1634.0, 14036.0], [1638.0, 14075.0], [1642.0, 13853.0], [1646.0, 13789.0], [1658.0, 13665.0], [1654.0, 13756.0], [1650.0, 13434.0], [1606.0, 15293.0], [1602.0, 15810.0], [1630.0, 14530.0], [1622.0, 15049.0], [1618.0, 15013.0], [1674.0, 12532.0], [1714.0, 11182.5], [1726.0, 11106.0], [1698.0, 12116.0], [1710.0, 11592.0], [1670.0, 12779.0], [1678.0, 12615.0], [1694.0, 11791.0], [1690.0, 12370.0], [1686.0, 12583.0], [1682.0, 12493.0], [1786.0, 8631.5], [1762.0, 9505.0], [1774.0, 9154.0], [1790.0, 8244.0], [1782.0, 8737.0], [1778.0, 8668.0], [1742.0, 10452.0], [1738.0, 10326.0], [1734.0, 10713.0], [1730.0, 10825.0], [1758.0, 9729.5], [1754.0, 9961.0], [1750.0, 10047.0], [1846.0, 6606.0], [1850.0, 6238.0], [1826.0, 7363.0], [1830.0, 6778.0], [1834.0, 6844.0], [1838.0, 6850.0], [1842.0, 6662.0], [1802.0, 8253.0], [1798.0, 8077.0], [1794.0, 8449.0], [1818.0, 7617.5], [1814.0, 7656.0], [1810.0, 7510.0], [1878.0, 5420.333333333334], [1866.0, 5828.0], [1862.0, 3534.0], [1898.0, 1513.0], [1890.0, 4510.0], [1902.0, 4175.0], [1926.0, 3401.0], [1930.0, 2297.0], [1922.0, 3445.0], [1950.0, 2312.0], [1942.0, 2880.0], [1962.0, 2069.5], [1970.0, 1759.0], [1966.0, 2113.0], [1083.0, 34874.0], [1087.0, 34770.0], [1059.0, 12628.0], [1063.0, 14684.8], [1067.0, 12444.0], [1071.0, 910.0], [1079.0, 35043.0], [1055.0, 18547.071428571428], [1051.0, 998.0], [1027.0, 36564.0], [1039.0, 18763.5], [1035.0, 1173.5], [1047.0, 35797.0], [1043.0, 5406.124999999999], [1147.0, 32431.0], [1123.0, 33006.0], [1143.0, 32239.0], [1119.0, 33510.0], [1099.0, 34318.0], [1103.0, 34091.0], [1107.0, 33998.0], [1159.0, 32465.0], [1167.0, 5186.428571428572], [1183.0, 30755.0], [1163.0, 31516.0], [1175.0, 31289.0], [1171.0, 31628.0], [1195.0, 30928.0], [1199.0, 30287.0], [1267.0, 28386.0], [1279.0, 27231.0], [1263.0, 28003.0], [1275.0, 27504.0], [1231.0, 29861.0], [1227.0, 29900.0], [1219.0, 29436.0], [1247.0, 29110.0], [1235.0, 28994.0], [1335.0, 25172.0], [1339.0, 24940.0], [1315.0, 26218.0], [1319.0, 25612.0], [1323.0, 25571.5], [1327.0, 25608.0], [1331.0, 25761.0], [1283.0, 26981.0], [1287.0, 27348.0], [1291.0, 27184.0], [1295.0, 26897.0], [1307.0, 26861.0], [1303.0, 26510.0], [1299.0, 26544.0], [1403.0, 22905.0], [1407.0, 23092.0], [1379.0, 23870.0], [1383.0, 23656.0], [1387.0, 23818.0], [1391.0, 23375.0], [1399.0, 23374.0], [1395.0, 23284.0], [1375.0, 24385.0], [1347.0, 25089.0], [1351.0, 25278.0], [1355.0, 25130.0], [1359.0, 24509.0], [1371.0, 24487.0], [1367.0, 24153.0], [1363.0, 24433.0], [1459.0, 20689.0], [1463.0, 20663.0], [1447.0, 21178.0], [1471.0, 20233.0], [1451.0, 21124.0], [1455.0, 20968.0], [1423.0, 22465.0], [1419.0, 22320.0], [1415.0, 22510.0], [1411.0, 22565.0], [1439.0, 21554.0], [1435.0, 21609.0], [1431.0, 22219.0], [1427.0, 22351.0], [1523.0, 18767.0], [1531.0, 17901.0], [1535.0, 18120.0], [1511.0, 19020.0], [1515.0, 18919.0], [1519.0, 18717.0], [1479.0, 20349.0], [1475.0, 20071.0], [1503.0, 19042.0], [1499.0, 19157.0], [1495.0, 19351.0], [1491.0, 19885.0], [1591.0, 16166.0], [1595.0, 15786.0], [1575.0, 16427.0], [1571.0, 16761.0], [1579.0, 16590.0], [1583.0, 16214.0], [1551.0, 17356.0], [1539.0, 17933.0], [1563.0, 17028.0], [1555.0, 17517.0], [1655.0, 13709.0], [1663.0, 13417.0], [1635.0, 14033.0], [1639.0, 14014.0], [1643.0, 14304.0], [1647.0, 13781.0], [1651.0, 13389.0], [1615.0, 15236.5], [1603.0, 15786.0], [1631.0, 14644.0], [1623.0, 15066.0], [1619.0, 14243.0], [1719.0, 11324.5], [1723.0, 11024.25], [1699.0, 11627.0], [1711.0, 11283.0], [1715.0, 11441.0], [1695.0, 12192.0], [1671.0, 13004.0], [1675.0, 12967.0], [1679.0, 12522.0], [1691.0, 12339.0], [1687.0, 12431.0], [1683.0, 12812.0], [1783.0, 8681.0], [1791.0, 8512.0], [1763.0, 9486.0], [1771.0, 9288.5], [1775.0, 9112.0], [1787.0, 8816.0], [1779.0, 9122.0], [1743.0, 10240.0], [1739.0, 10325.0], [1735.0, 10665.0], [1731.0, 10810.0], [1759.0, 9419.0], [1755.0, 9704.0], [1847.0, 6584.0], [1851.0, 3830.0], [1827.0, 7101.0], [1839.0, 6846.0], [1843.0, 6522.0], [1803.0, 8192.0], [1799.0, 8336.0], [1795.0, 8158.0], [1823.0, 7473.0], [1815.0, 7612.0], [1811.0, 7564.0], [1863.0, 3554.0], [1875.0, 5268.0], [1891.0, 4710.0], [1911.0, 1529.0], [1903.0, 4375.0], [1927.0, 3435.0], [1923.0, 3595.0], [1951.0, 2153.0], [1939.0, 3062.6666666666665], [1963.0, 1976.0], [1967.0, 1894.0], [1.0, 10538.5]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[319.1798333333337, 6805.072999999989]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1980.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4420.966666666666, "minX": 1.63132614E12, "maxY": 123276.81666666667, "series": [{"data": [[1.6313262E12, 46370.816666666666], [1.63132614E12, 21697.416666666668], [1.63132626E12, 123276.81666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6313262E12, 9450.3], [1.63132614E12, 4420.966666666666], [1.63132626E12, 82929.06666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63132626E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1191.5621969322065, "minX": 1.63132614E12, "maxY": 48325.47714949657, "series": [{"data": [[1.6313262E12, 48325.47714949657], [1.63132614E12, 11973.425496688746], [1.63132626E12, 1191.5621969322065]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63132626E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1189.4322612567987, "minX": 1.63132614E12, "maxY": 48325.39271882264, "series": [{"data": [[1.6313262E12, 48325.39271882264], [1.63132614E12, 11973.246688741727], [1.63132626E12, 1189.4322612567987]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63132626E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 21.673923800098994, "minX": 1.63132614E12, "maxY": 222.38907284768229, "series": [{"data": [[1.6313262E12, 60.73121611154152], [1.63132614E12, 222.38907284768229], [1.63132626E12, 21.673923800098994]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63132626E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.63132614E12, "maxY": 89322.0, "series": [{"data": [[1.6313262E12, 82104.0], [1.63132614E12, 23374.0], [1.63132626E12, 89322.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6313262E12, 72587.4], [1.63132614E12, 21044.0], [1.63132626E12, 1225.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6313262E12, 81044.83999999997], [1.63132614E12, 23050.65], [1.63132626E12, 82405.95]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6313262E12, 77247.4], [1.63132614E12, 22346.5], [1.63132626E12, 1780.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6313262E12, 23284.0], [1.63132614E12, 695.0], [1.63132626E12, 24.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6313262E12, 46965.0], [1.63132614E12, 12067.0], [1.63132626E12, 79.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63132626E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 35.0, "minX": 10.0, "maxY": 81621.0, "series": [{"data": [[32.0, 8037.5], [33.0, 33388.0], [521.0, 1025.0], [519.0, 1501.0], [34.0, 30531.0], [36.0, 13687.0], [578.0, 76.0], [700.0, 36.0], [851.0, 102.0], [907.0, 58.0], [937.0, 105.0], [935.0, 182.0], [934.0, 50.0], [993.0, 86.0], [995.0, 35.0], [10.0, 81621.0], [160.0, 121.0], [11.0, 68408.0], [12.0, 66872.0], [13.0, 70448.0], [222.0, 303.0], [14.0, 71941.5], [15.0, 79463.0], [16.0, 80582.0], [280.0, 2297.0], [19.0, 12625.0], [20.0, 2899.5], [21.0, 35390.0], [22.0, 45550.0], [23.0, 45517.5], [24.0, 30515.5], [25.0, 49536.0], [26.0, 23749.5], [27.0, 21890.0], [28.0, 18883.0], [29.0, 3790.0], [30.0, 45095.5], [481.0, 467.0], [31.0, 39233.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[934.0, 21047.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 995.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 10.0, "maxY": 81620.5, "series": [{"data": [[32.0, 8037.5], [33.0, 33388.0], [521.0, 1025.0], [519.0, 1501.0], [34.0, 30531.0], [36.0, 13686.5], [578.0, 76.0], [700.0, 36.0], [851.0, 102.0], [907.0, 58.0], [937.0, 105.0], [935.0, 182.0], [934.0, 50.0], [993.0, 86.0], [995.0, 35.0], [10.0, 81620.5], [160.0, 121.0], [11.0, 68408.0], [12.0, 66872.0], [13.0, 70448.0], [222.0, 303.0], [14.0, 71941.5], [15.0, 79463.0], [16.0, 80582.0], [280.0, 2297.0], [19.0, 12625.0], [20.0, 2899.5], [21.0, 35390.0], [22.0, 45550.0], [23.0, 45517.5], [24.0, 30515.5], [25.0, 49536.0], [26.0, 23749.5], [27.0, 21890.0], [28.0, 18883.0], [29.0, 3789.0], [30.0, 45095.5], [481.0, 467.0], [31.0, 39233.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[934.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 995.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63132614E12, "maxY": 166.66666666666666, "series": [{"data": [[1.63132614E12, 33.333333333333336], [1.63132626E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63132626E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63132614E12, "maxY": 168.4, "series": [{"data": [[1.6313262E12, 21.516666666666666], [1.63132614E12, 10.066666666666666], [1.63132626E12, 168.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63132626E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63132626E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63132614E12, "maxY": 168.4, "series": [{"data": [[1.63132626E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.6313262E12, 21.516666666666666], [1.63132614E12, 10.066666666666666], [1.63132626E12, 168.4]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63132626E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63132614E12, "maxY": 168.4, "series": [{"data": [[1.6313262E12, 21.516666666666666], [1.63132614E12, 10.066666666666666], [1.63132626E12, 168.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63132626E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63132626E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

