/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3396.0, "minX": 0.0, "maxY": 28533.0, "series": [{"data": [[0.0, 3396.0], [0.1, 3400.0], [0.2, 3409.0], [0.3, 3414.0], [0.4, 3418.0], [0.5, 3473.0], [0.6, 3501.0], [0.7, 3838.0], [0.8, 3840.0], [0.9, 3911.0], [1.0, 3916.0], [1.1, 3923.0], [1.2, 3984.0], [1.3, 3996.0], [1.4, 4007.0], [1.5, 4013.0], [1.6, 4341.0], [1.7, 4345.0], [1.8, 4347.0], [1.9, 4353.0], [2.0, 5490.0], [2.1, 5520.0], [2.2, 5533.0], [2.3, 5558.0], [2.4, 5874.0], [2.5, 5878.0], [2.6, 5883.0], [2.7, 8998.0], [2.8, 9030.0], [2.9, 9051.0], [3.0, 9059.0], [3.1, 9078.0], [3.2, 9187.0], [3.3, 9201.0], [3.4, 9523.0], [3.5, 9535.0], [3.6, 9549.0], [3.7, 9858.0], [3.8, 9868.0], [3.9, 9874.0], [4.0, 9889.0], [4.1, 10052.0], [4.2, 10072.0], [4.3, 10390.0], [4.4, 10406.0], [4.5, 10827.0], [4.6, 10842.0], [4.7, 10849.0], [4.8, 10864.0], [4.9, 10886.0], [5.0, 10937.0], [5.1, 11050.0], [5.2, 11380.0], [5.3, 11388.0], [5.4, 12361.0], [5.5, 12368.0], [5.6, 12435.0], [5.7, 12443.0], [5.8, 12449.0], [5.9, 12457.0], [6.0, 12543.0], [6.1, 12567.0], [6.2, 12582.0], [6.3, 12691.0], [6.4, 12720.0], [6.5, 12749.0], [6.6, 12753.0], [6.7, 12822.0], [6.8, 12844.0], [6.9, 12908.0], [7.0, 12910.0], [7.1, 12912.0], [7.2, 12914.0], [7.3, 12917.0], [7.4, 12919.0], [7.5, 12923.0], [7.6, 13005.0], [7.7, 13086.0], [7.8, 13349.0], [7.9, 13356.0], [8.0, 13364.0], [8.1, 13373.0], [8.2, 13377.0], [8.3, 13388.0], [8.4, 13398.0], [8.5, 13407.0], [8.6, 13416.0], [8.7, 13430.0], [8.8, 13451.0], [8.9, 13478.0], [9.0, 13719.0], [9.1, 13751.0], [9.2, 13772.0], [9.3, 13796.0], [9.4, 13810.0], [9.5, 13816.0], [9.6, 13825.0], [9.7, 13832.0], [9.8, 13842.0], [9.9, 13854.0], [10.0, 13856.0], [10.1, 13858.0], [10.2, 13868.0], [10.3, 13886.0], [10.4, 13900.0], [10.5, 13918.0], [10.6, 13934.0], [10.7, 13945.0], [10.8, 13973.0], [10.9, 14058.0], [11.0, 14134.0], [11.1, 14151.0], [11.2, 14209.0], [11.3, 14267.0], [11.4, 14282.0], [11.5, 14297.0], [11.6, 14316.0], [11.7, 14325.0], [11.8, 14327.0], [11.9, 14337.0], [12.0, 14352.0], [12.1, 14358.0], [12.2, 14373.0], [12.3, 14378.0], [12.4, 14393.0], [12.5, 14398.0], [12.6, 14420.0], [12.7, 14432.0], [12.8, 14437.0], [12.9, 14454.0], [13.0, 14467.0], [13.1, 14485.0], [13.2, 14496.0], [13.3, 14509.0], [13.4, 14526.0], [13.5, 14546.0], [13.6, 14583.0], [13.7, 14603.0], [13.8, 14626.0], [13.9, 14631.0], [14.0, 14641.0], [14.1, 14648.0], [14.2, 14660.0], [14.3, 14671.0], [14.4, 14673.0], [14.5, 14683.0], [14.6, 14689.0], [14.7, 14710.0], [14.8, 14744.0], [14.9, 14756.0], [15.0, 14773.0], [15.1, 14778.0], [15.2, 14788.0], [15.3, 14792.0], [15.4, 14798.0], [15.5, 14825.0], [15.6, 14864.0], [15.7, 14867.0], [15.8, 14879.0], [15.9, 14888.0], [16.0, 14891.0], [16.1, 14904.0], [16.2, 14970.0], [16.3, 14983.0], [16.4, 14991.0], [16.5, 14999.0], [16.6, 15013.0], [16.7, 15025.0], [16.8, 15044.0], [16.9, 15109.0], [17.0, 15113.0], [17.1, 15117.0], [17.2, 15129.0], [17.3, 15161.0], [17.4, 15173.0], [17.5, 15176.0], [17.6, 15203.0], [17.7, 15209.0], [17.8, 15219.0], [17.9, 15231.0], [18.0, 15304.0], [18.1, 15320.0], [18.2, 15328.0], [18.3, 15332.0], [18.4, 15334.0], [18.5, 15344.0], [18.6, 15365.0], [18.7, 15386.0], [18.8, 15403.0], [18.9, 15416.0], [19.0, 15448.0], [19.1, 15453.0], [19.2, 15464.0], [19.3, 15475.0], [19.4, 15481.0], [19.5, 15533.0], [19.6, 15589.0], [19.7, 15615.0], [19.8, 15640.0], [19.9, 15645.0], [20.0, 15652.0], [20.1, 15661.0], [20.2, 15674.0], [20.3, 15678.0], [20.4, 15685.0], [20.5, 15715.0], [20.6, 15813.0], [20.7, 15825.0], [20.8, 15843.0], [20.9, 15852.0], [21.0, 15859.0], [21.1, 15874.0], [21.2, 15920.0], [21.3, 15939.0], [21.4, 15949.0], [21.5, 15960.0], [21.6, 15968.0], [21.7, 15971.0], [21.8, 15996.0], [21.9, 16045.0], [22.0, 16053.0], [22.1, 16056.0], [22.2, 16060.0], [22.3, 16062.0], [22.4, 16073.0], [22.5, 16101.0], [22.6, 16127.0], [22.7, 16131.0], [22.8, 16150.0], [22.9, 16178.0], [23.0, 16216.0], [23.1, 16225.0], [23.2, 16323.0], [23.3, 16332.0], [23.4, 16334.0], [23.5, 16349.0], [23.6, 16369.0], [23.7, 16379.0], [23.8, 16380.0], [23.9, 16383.0], [24.0, 16388.0], [24.1, 16408.0], [24.2, 16417.0], [24.3, 16423.0], [24.4, 16441.0], [24.5, 16446.0], [24.6, 16449.0], [24.7, 16451.0], [24.8, 16453.0], [24.9, 16486.0], [25.0, 16491.0], [25.1, 16500.0], [25.2, 16513.0], [25.3, 16520.0], [25.4, 16572.0], [25.5, 16621.0], [25.6, 16636.0], [25.7, 16722.0], [25.8, 16737.0], [25.9, 16752.0], [26.0, 16791.0], [26.1, 16798.0], [26.2, 16801.0], [26.3, 16807.0], [26.4, 16814.0], [26.5, 16817.0], [26.6, 16829.0], [26.7, 16846.0], [26.8, 16860.0], [26.9, 16864.0], [27.0, 16879.0], [27.1, 16883.0], [27.2, 16914.0], [27.3, 16922.0], [27.4, 16950.0], [27.5, 16984.0], [27.6, 16988.0], [27.7, 16992.0], [27.8, 16993.0], [27.9, 17001.0], [28.0, 17006.0], [28.1, 17009.0], [28.2, 17014.0], [28.3, 17015.0], [28.4, 17017.0], [28.5, 17020.0], [28.6, 17023.0], [28.7, 17027.0], [28.8, 17030.0], [28.9, 17034.0], [29.0, 17036.0], [29.1, 17039.0], [29.2, 17040.0], [29.3, 17050.0], [29.4, 17052.0], [29.5, 17056.0], [29.6, 17188.0], [29.7, 17229.0], [29.8, 17249.0], [29.9, 17273.0], [30.0, 17282.0], [30.1, 17300.0], [30.2, 17326.0], [30.3, 17341.0], [30.4, 17355.0], [30.5, 17360.0], [30.6, 17364.0], [30.7, 17369.0], [30.8, 17372.0], [30.9, 17377.0], [31.0, 17382.0], [31.1, 17412.0], [31.2, 17418.0], [31.3, 17421.0], [31.4, 17425.0], [31.5, 17431.0], [31.6, 17433.0], [31.7, 17440.0], [31.8, 17452.0], [31.9, 17453.0], [32.0, 17455.0], [32.1, 17470.0], [32.2, 17477.0], [32.3, 17498.0], [32.4, 17519.0], [32.5, 17527.0], [32.6, 17544.0], [32.7, 17550.0], [32.8, 17618.0], [32.9, 17642.0], [33.0, 17662.0], [33.1, 17669.0], [33.2, 17683.0], [33.3, 17700.0], [33.4, 17711.0], [33.5, 17723.0], [33.6, 17735.0], [33.7, 17771.0], [33.8, 17787.0], [33.9, 17792.0], [34.0, 17802.0], [34.1, 17813.0], [34.2, 17815.0], [34.3, 17818.0], [34.4, 17826.0], [34.5, 17847.0], [34.6, 17850.0], [34.7, 17859.0], [34.8, 17872.0], [34.9, 17875.0], [35.0, 17879.0], [35.1, 17904.0], [35.2, 17914.0], [35.3, 17920.0], [35.4, 17927.0], [35.5, 17932.0], [35.6, 17938.0], [35.7, 17941.0], [35.8, 17944.0], [35.9, 17946.0], [36.0, 17953.0], [36.1, 17962.0], [36.2, 17964.0], [36.3, 17992.0], [36.4, 18009.0], [36.5, 18041.0], [36.6, 18048.0], [36.7, 18066.0], [36.8, 18082.0], [36.9, 18107.0], [37.0, 18123.0], [37.1, 18129.0], [37.2, 18138.0], [37.3, 18157.0], [37.4, 18175.0], [37.5, 18181.0], [37.6, 18184.0], [37.7, 18203.0], [37.8, 18242.0], [37.9, 18261.0], [38.0, 18273.0], [38.1, 18277.0], [38.2, 18291.0], [38.3, 18295.0], [38.4, 18332.0], [38.5, 18358.0], [38.6, 18365.0], [38.7, 18396.0], [38.8, 18418.0], [38.9, 18427.0], [39.0, 18430.0], [39.1, 18432.0], [39.2, 18435.0], [39.3, 18436.0], [39.4, 18437.0], [39.5, 18439.0], [39.6, 18441.0], [39.7, 18444.0], [39.8, 18445.0], [39.9, 18449.0], [40.0, 18453.0], [40.1, 18456.0], [40.2, 18459.0], [40.3, 18469.0], [40.4, 18482.0], [40.5, 18499.0], [40.6, 18550.0], [40.7, 18624.0], [40.8, 18627.0], [40.9, 18631.0], [41.0, 18637.0], [41.1, 18643.0], [41.2, 18648.0], [41.3, 18653.0], [41.4, 18661.0], [41.5, 18673.0], [41.6, 18677.0], [41.7, 18693.0], [41.8, 18698.0], [41.9, 18700.0], [42.0, 18711.0], [42.1, 18716.0], [42.2, 18719.0], [42.3, 18729.0], [42.4, 18731.0], [42.5, 18742.0], [42.6, 18757.0], [42.7, 18776.0], [42.8, 18782.0], [42.9, 18788.0], [43.0, 18806.0], [43.1, 18810.0], [43.2, 18831.0], [43.3, 18845.0], [43.4, 18860.0], [43.5, 18871.0], [43.6, 18882.0], [43.7, 18897.0], [43.8, 18916.0], [43.9, 18934.0], [44.0, 18947.0], [44.1, 18962.0], [44.2, 18977.0], [44.3, 18981.0], [44.4, 18988.0], [44.5, 19001.0], [44.6, 19016.0], [44.7, 19039.0], [44.8, 19051.0], [44.9, 19093.0], [45.0, 19107.0], [45.1, 19132.0], [45.2, 19165.0], [45.3, 19171.0], [45.4, 19176.0], [45.5, 19180.0], [45.6, 19187.0], [45.7, 19210.0], [45.8, 19216.0], [45.9, 19226.0], [46.0, 19243.0], [46.1, 19254.0], [46.2, 19271.0], [46.3, 19294.0], [46.4, 19300.0], [46.5, 19303.0], [46.6, 19309.0], [46.7, 19315.0], [46.8, 19326.0], [46.9, 19353.0], [47.0, 19357.0], [47.1, 19389.0], [47.2, 19394.0], [47.3, 19410.0], [47.4, 19418.0], [47.5, 19424.0], [47.6, 19441.0], [47.7, 19449.0], [47.8, 19486.0], [47.9, 19525.0], [48.0, 19558.0], [48.1, 19595.0], [48.2, 19597.0], [48.3, 19600.0], [48.4, 19605.0], [48.5, 19606.0], [48.6, 19611.0], [48.7, 19613.0], [48.8, 19639.0], [48.9, 19644.0], [49.0, 19648.0], [49.1, 19661.0], [49.2, 19673.0], [49.3, 19711.0], [49.4, 19715.0], [49.5, 19725.0], [49.6, 19754.0], [49.7, 19781.0], [49.8, 19802.0], [49.9, 19810.0], [50.0, 19813.0], [50.1, 19819.0], [50.2, 19828.0], [50.3, 19836.0], [50.4, 19870.0], [50.5, 19886.0], [50.6, 19896.0], [50.7, 19932.0], [50.8, 19960.0], [50.9, 20001.0], [51.0, 20030.0], [51.1, 20101.0], [51.2, 20219.0], [51.3, 20253.0], [51.4, 20287.0], [51.5, 20316.0], [51.6, 20338.0], [51.7, 20343.0], [51.8, 20350.0], [51.9, 20362.0], [52.0, 20372.0], [52.1, 20390.0], [52.2, 20396.0], [52.3, 20402.0], [52.4, 20430.0], [52.5, 20454.0], [52.6, 20460.0], [52.7, 20476.0], [52.8, 20483.0], [52.9, 20487.0], [53.0, 20493.0], [53.1, 20508.0], [53.2, 20527.0], [53.3, 20536.0], [53.4, 20540.0], [53.5, 20552.0], [53.6, 20562.0], [53.7, 20577.0], [53.8, 20618.0], [53.9, 20648.0], [54.0, 20664.0], [54.1, 20671.0], [54.2, 20685.0], [54.3, 20702.0], [54.4, 20714.0], [54.5, 20729.0], [54.6, 20750.0], [54.7, 20771.0], [54.8, 20784.0], [54.9, 20800.0], [55.0, 20815.0], [55.1, 20833.0], [55.2, 20865.0], [55.3, 20877.0], [55.4, 20889.0], [55.5, 20901.0], [55.6, 20915.0], [55.7, 20932.0], [55.8, 20944.0], [55.9, 20966.0], [56.0, 20980.0], [56.1, 20986.0], [56.2, 20993.0], [56.3, 20999.0], [56.4, 21003.0], [56.5, 21007.0], [56.6, 21011.0], [56.7, 21012.0], [56.8, 21018.0], [56.9, 21021.0], [57.0, 21023.0], [57.1, 21023.0], [57.2, 21024.0], [57.3, 21026.0], [57.4, 21027.0], [57.5, 21029.0], [57.6, 21030.0], [57.7, 21031.0], [57.8, 21033.0], [57.9, 21034.0], [58.0, 21035.0], [58.1, 21036.0], [58.2, 21037.0], [58.3, 21038.0], [58.4, 21039.0], [58.5, 21040.0], [58.6, 21041.0], [58.7, 21042.0], [58.8, 21042.0], [58.9, 21043.0], [59.0, 21043.0], [59.1, 21044.0], [59.2, 21045.0], [59.3, 21045.0], [59.4, 21046.0], [59.5, 21046.0], [59.6, 21047.0], [59.7, 21047.0], [59.8, 21048.0], [59.9, 21048.0], [60.0, 21048.0], [60.1, 21049.0], [60.2, 21049.0], [60.3, 21049.0], [60.4, 21050.0], [60.5, 21050.0], [60.6, 21050.0], [60.7, 21050.0], [60.8, 21050.0], [60.9, 21051.0], [61.0, 21051.0], [61.1, 21051.0], [61.2, 21051.0], [61.3, 21052.0], [61.4, 21052.0], [61.5, 21053.0], [61.6, 21053.0], [61.7, 21054.0], [61.8, 21054.0], [61.9, 21054.0], [62.0, 21054.0], [62.1, 21055.0], [62.2, 21055.0], [62.3, 21055.0], [62.4, 21056.0], [62.5, 21057.0], [62.6, 21057.0], [62.7, 21057.0], [62.8, 21058.0], [62.9, 21058.0], [63.0, 21059.0], [63.1, 21060.0], [63.2, 21061.0], [63.3, 21061.0], [63.4, 21062.0], [63.5, 21063.0], [63.6, 21063.0], [63.7, 21063.0], [63.8, 21064.0], [63.9, 21065.0], [64.0, 21066.0], [64.1, 21068.0], [64.2, 21070.0], [64.3, 21084.0], [64.4, 21085.0], [64.5, 21088.0], [64.6, 21093.0], [64.7, 21094.0], [64.8, 21100.0], [64.9, 21106.0], [65.0, 21116.0], [65.1, 21119.0], [65.2, 21121.0], [65.3, 21124.0], [65.4, 21128.0], [65.5, 21129.0], [65.6, 21130.0], [65.7, 21138.0], [65.8, 21145.0], [65.9, 21149.0], [66.0, 21152.0], [66.1, 21159.0], [66.2, 21163.0], [66.3, 21172.0], [66.4, 21177.0], [66.5, 21182.0], [66.6, 21183.0], [66.7, 21187.0], [66.8, 21191.0], [66.9, 21194.0], [67.0, 21195.0], [67.1, 21197.0], [67.2, 21198.0], [67.3, 21203.0], [67.4, 21207.0], [67.5, 21209.0], [67.6, 21215.0], [67.7, 21216.0], [67.8, 21218.0], [67.9, 21220.0], [68.0, 21222.0], [68.1, 21226.0], [68.2, 21233.0], [68.3, 21241.0], [68.4, 21250.0], [68.5, 21259.0], [68.6, 21266.0], [68.7, 21267.0], [68.8, 21275.0], [68.9, 21291.0], [69.0, 21305.0], [69.1, 21313.0], [69.2, 21314.0], [69.3, 21316.0], [69.4, 21318.0], [69.5, 21319.0], [69.6, 21321.0], [69.7, 21323.0], [69.8, 21328.0], [69.9, 21336.0], [70.0, 21338.0], [70.1, 21359.0], [70.2, 21370.0], [70.3, 21381.0], [70.4, 21390.0], [70.5, 21411.0], [70.6, 21413.0], [70.7, 21414.0], [70.8, 21417.0], [70.9, 21424.0], [71.0, 21442.0], [71.1, 21468.0], [71.2, 21479.0], [71.3, 21487.0], [71.4, 21489.0], [71.5, 21508.0], [71.6, 21520.0], [71.7, 21525.0], [71.8, 21529.0], [71.9, 21540.0], [72.0, 21556.0], [72.1, 21571.0], [72.2, 21616.0], [72.3, 21623.0], [72.4, 21626.0], [72.5, 21642.0], [72.6, 21648.0], [72.7, 21663.0], [72.8, 21677.0], [72.9, 21684.0], [73.0, 21690.0], [73.1, 21698.0], [73.2, 21719.0], [73.3, 21729.0], [73.4, 21743.0], [73.5, 21765.0], [73.6, 21770.0], [73.7, 21779.0], [73.8, 21800.0], [73.9, 21805.0], [74.0, 21816.0], [74.1, 21825.0], [74.2, 21828.0], [74.3, 21845.0], [74.4, 21853.0], [74.5, 21870.0], [74.6, 21879.0], [74.7, 21895.0], [74.8, 21899.0], [74.9, 21903.0], [75.0, 21919.0], [75.1, 21927.0], [75.2, 21936.0], [75.3, 21948.0], [75.4, 21960.0], [75.5, 21962.0], [75.6, 21965.0], [75.7, 21970.0], [75.8, 21975.0], [75.9, 21989.0], [76.0, 21999.0], [76.1, 22007.0], [76.2, 22009.0], [76.3, 22010.0], [76.4, 22013.0], [76.5, 22015.0], [76.6, 22016.0], [76.7, 22017.0], [76.8, 22019.0], [76.9, 22022.0], [77.0, 22029.0], [77.1, 22032.0], [77.2, 22035.0], [77.3, 22036.0], [77.4, 22039.0], [77.5, 22043.0], [77.6, 22044.0], [77.7, 22046.0], [77.8, 22048.0], [77.9, 22055.0], [78.0, 22058.0], [78.1, 22063.0], [78.2, 22068.0], [78.3, 22079.0], [78.4, 22088.0], [78.5, 22105.0], [78.6, 22110.0], [78.7, 22112.0], [78.8, 22113.0], [78.9, 22114.0], [79.0, 22119.0], [79.1, 22131.0], [79.2, 22143.0], [79.3, 22156.0], [79.4, 22172.0], [79.5, 22188.0], [79.6, 22205.0], [79.7, 22213.0], [79.8, 22221.0], [79.9, 22224.0], [80.0, 22229.0], [80.1, 22238.0], [80.2, 22247.0], [80.3, 22253.0], [80.4, 22257.0], [80.5, 22270.0], [80.6, 22273.0], [80.7, 22278.0], [80.8, 22281.0], [80.9, 22286.0], [81.0, 22293.0], [81.1, 22311.0], [81.2, 22316.0], [81.3, 22329.0], [81.4, 22331.0], [81.5, 22341.0], [81.6, 22346.0], [81.7, 22366.0], [81.8, 22404.0], [81.9, 22411.0], [82.0, 22434.0], [82.1, 22442.0], [82.2, 22458.0], [82.3, 22471.0], [82.4, 22493.0], [82.5, 22500.0], [82.6, 22506.0], [82.7, 22519.0], [82.8, 22537.0], [82.9, 22546.0], [83.0, 22559.0], [83.1, 22575.0], [83.2, 22590.0], [83.3, 22606.0], [83.4, 22654.0], [83.5, 22680.0], [83.6, 22737.0], [83.7, 22758.0], [83.8, 22764.0], [83.9, 22780.0], [84.0, 22803.0], [84.1, 22827.0], [84.2, 22853.0], [84.3, 22863.0], [84.4, 22886.0], [84.5, 22923.0], [84.6, 22952.0], [84.7, 22994.0], [84.8, 23011.0], [84.9, 23023.0], [85.0, 23025.0], [85.1, 23038.0], [85.2, 23044.0], [85.3, 23052.0], [85.4, 23068.0], [85.5, 23082.0], [85.6, 23089.0], [85.7, 23100.0], [85.8, 23122.0], [85.9, 23147.0], [86.0, 23162.0], [86.1, 23177.0], [86.2, 23197.0], [86.3, 23211.0], [86.4, 23234.0], [86.5, 23240.0], [86.6, 23243.0], [86.7, 23247.0], [86.8, 23250.0], [86.9, 23257.0], [87.0, 23265.0], [87.1, 23276.0], [87.2, 23287.0], [87.3, 23301.0], [87.4, 23311.0], [87.5, 23330.0], [87.6, 23342.0], [87.7, 23357.0], [87.8, 23369.0], [87.9, 23376.0], [88.0, 23397.0], [88.1, 23425.0], [88.2, 23433.0], [88.3, 23443.0], [88.4, 23475.0], [88.5, 23502.0], [88.6, 23527.0], [88.7, 23537.0], [88.8, 23546.0], [88.9, 23553.0], [89.0, 23565.0], [89.1, 23577.0], [89.2, 23583.0], [89.3, 23604.0], [89.4, 23626.0], [89.5, 23642.0], [89.6, 23645.0], [89.7, 23662.0], [89.8, 23690.0], [89.9, 23711.0], [90.0, 23732.0], [90.1, 23741.0], [90.2, 23791.0], [90.3, 23804.0], [90.4, 23807.0], [90.5, 23813.0], [90.6, 23838.0], [90.7, 23843.0], [90.8, 23864.0], [90.9, 23876.0], [91.0, 23896.0], [91.1, 23907.0], [91.2, 23923.0], [91.3, 23946.0], [91.4, 24004.0], [91.5, 24011.0], [91.6, 24030.0], [91.7, 24040.0], [91.8, 24046.0], [91.9, 24057.0], [92.0, 24080.0], [92.1, 24086.0], [92.2, 24090.0], [92.3, 24098.0], [92.4, 24105.0], [92.5, 24108.0], [92.6, 24110.0], [92.7, 24113.0], [92.8, 24121.0], [92.9, 24125.0], [93.0, 24133.0], [93.1, 24145.0], [93.2, 24148.0], [93.3, 24152.0], [93.4, 24154.0], [93.5, 24157.0], [93.6, 24171.0], [93.7, 24188.0], [93.8, 24206.0], [93.9, 24210.0], [94.0, 24220.0], [94.1, 24251.0], [94.2, 24263.0], [94.3, 24274.0], [94.4, 24276.0], [94.5, 24280.0], [94.6, 24296.0], [94.7, 24305.0], [94.8, 24320.0], [94.9, 24329.0], [95.0, 24345.0], [95.1, 24350.0], [95.2, 24357.0], [95.3, 24359.0], [95.4, 24373.0], [95.5, 24380.0], [95.6, 24388.0], [95.7, 24391.0], [95.8, 24395.0], [95.9, 24408.0], [96.0, 24417.0], [96.1, 24435.0], [96.2, 24457.0], [96.3, 24492.0], [96.4, 24506.0], [96.5, 24557.0], [96.6, 24562.0], [96.7, 24577.0], [96.8, 24591.0], [96.9, 24601.0], [97.0, 24609.0], [97.1, 24639.0], [97.2, 24666.0], [97.3, 24672.0], [97.4, 24678.0], [97.5, 24691.0], [97.6, 24716.0], [97.7, 24733.0], [97.8, 24769.0], [97.9, 24820.0], [98.0, 24858.0], [98.1, 24927.0], [98.2, 24987.0], [98.3, 24996.0], [98.4, 25086.0], [98.5, 25119.0], [98.6, 25135.0], [98.7, 25289.0], [98.8, 25352.0], [98.9, 25371.0], [99.0, 25514.0], [99.1, 25559.0], [99.2, 25636.0], [99.3, 25661.0], [99.4, 25765.0], [99.5, 25842.0], [99.6, 25868.0], [99.7, 25993.0], [99.8, 26103.0], [99.9, 26819.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3300.0, "maxY": 424.0, "series": [{"data": [[3300.0, 5.0], [3400.0, 24.0], [3500.0, 3.0], [3800.0, 10.0], [3900.0, 24.0], [4000.0, 13.0], [4300.0, 19.0], [5400.0, 4.0], [5500.0, 15.0], [5800.0, 15.0], [7300.0, 1.0], [8000.0, 1.0], [9000.0, 21.0], [9100.0, 6.0], [9200.0, 5.0], [8900.0, 3.0], [9500.0, 13.0], [9800.0, 20.0], [10000.0, 9.0], [9900.0, 2.0], [10300.0, 6.0], [10400.0, 4.0], [10800.0, 23.0], [11000.0, 5.0], [10900.0, 5.0], [11300.0, 13.0], [12300.0, 8.0], [12500.0, 13.0], [12600.0, 4.0], [12400.0, 23.0], [12700.0, 16.0], [12900.0, 37.0], [13000.0, 6.0], [13300.0, 37.0], [12800.0, 10.0], [13400.0, 24.0], [13600.0, 1.0], [13700.0, 19.0], [13800.0, 54.0], [14000.0, 8.0], [13900.0, 21.0], [14100.0, 11.0], [14200.0, 17.0], [14300.0, 49.0], [14400.0, 35.0], [14800.0, 33.0], [14600.0, 48.0], [14500.0, 24.0], [14700.0, 39.0], [15000.0, 17.0], [14900.0, 22.0], [15100.0, 37.0], [15300.0, 40.0], [15200.0, 18.0], [15400.0, 37.0], [15600.0, 42.0], [15700.0, 4.0], [15500.0, 7.0], [15800.0, 30.0], [15900.0, 34.0], [16200.0, 14.0], [16300.0, 44.0], [16100.0, 21.0], [16000.0, 33.0], [17200.0, 22.0], [16500.0, 19.0], [16400.0, 52.0], [16600.0, 9.0], [16700.0, 23.0], [16800.0, 51.0], [16900.0, 38.0], [17000.0, 83.0], [17300.0, 48.0], [17400.0, 63.0], [17100.0, 5.0], [17600.0, 28.0], [17700.0, 34.0], [18000.0, 25.0], [17500.0, 21.0], [17900.0, 63.0], [17800.0, 56.0], [18100.0, 43.0], [18300.0, 21.0], [18400.0, 89.0], [18200.0, 31.0], [18600.0, 62.0], [18500.0, 7.0], [18700.0, 55.0], [18900.0, 38.0], [18800.0, 38.0], [19000.0, 23.0], [19100.0, 35.0], [19300.0, 44.0], [19400.0, 29.0], [19200.0, 36.0], [19700.0, 24.0], [19500.0, 23.0], [19800.0, 44.0], [19600.0, 50.0], [19900.0, 13.0], [20000.0, 10.0], [20200.0, 15.0], [20100.0, 4.0], [20300.0, 39.0], [20400.0, 39.0], [21300.0, 78.0], [20600.0, 25.0], [20500.0, 38.0], [20700.0, 30.0], [20800.0, 29.0], [21000.0, 424.0], [21100.0, 123.0], [21200.0, 86.0], [20900.0, 42.0], [21500.0, 37.0], [21400.0, 47.0], [22300.0, 37.0], [21600.0, 48.0], [21700.0, 32.0], [21900.0, 58.0], [21800.0, 55.0], [22100.0, 56.0], [22000.0, 121.0], [22200.0, 74.0], [22500.0, 38.0], [22400.0, 36.0], [23300.0, 36.0], [22600.0, 15.0], [22700.0, 23.0], [22900.0, 16.0], [23000.0, 46.0], [22800.0, 22.0], [23100.0, 27.0], [23200.0, 54.0], [23400.0, 24.0], [23500.0, 40.0], [24400.0, 26.0], [23700.0, 20.0], [23600.0, 28.0], [23800.0, 41.0], [23900.0, 14.0], [24000.0, 51.0], [24200.0, 46.0], [24300.0, 58.0], [24500.0, 25.0], [24100.0, 71.0], [24700.0, 14.0], [24600.0, 34.0], [24800.0, 12.0], [25400.0, 2.0], [25000.0, 6.0], [24900.0, 12.0], [25100.0, 11.0], [25500.0, 11.0], [25200.0, 6.0], [25300.0, 8.0], [25700.0, 2.0], [25600.0, 9.0], [25800.0, 11.0], [25900.0, 5.0], [26000.0, 3.0], [26200.0, 1.0], [26100.0, 2.0], [26500.0, 1.0], [26600.0, 1.0], [26800.0, 1.0], [27200.0, 1.0], [27100.0, 2.0], [27000.0, 1.0], [28500.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 28500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 981.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4031.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4031.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 981.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.63046442E12, "maxY": 503.3669999999993, "series": [{"data": [[1.63046442E12, 252.55400000000054]], "isOverall": false, "label": "getUsersByPage", "isController": false}, {"data": [[1.63046442E12, 2.5]], "isOverall": false, "label": "sendEmail", "isController": false}, {"data": [[1.63046442E12, 251.2040000000002]], "isOverall": false, "label": "getOtherInfo", "isController": false}, {"data": [[1.63046442E12, 251.13599999999997]], "isOverall": false, "label": "getUserInfoByUserId", "isController": false}, {"data": [[1.63046442E12, 251.74400000000009]], "isOverall": false, "label": "followOther", "isController": false}, {"data": [[1.63046442E12, 251.58399999999975]], "isOverall": false, "label": "getUserNameById", "isController": false}, {"data": [[1.63046442E12, 252.556]], "isOverall": false, "label": "editUser", "isController": false}, {"data": [[1.63046442E12, 2.5]], "isOverall": false, "label": "reset", "isController": false}, {"data": [[1.63046442E12, 503.3669999999993]], "isOverall": false, "label": "login", "isController": false}, {"data": [[1.63046442E12, 251.31400000000016]], "isOverall": false, "label": "getUserByUserId", "isController": false}, {"data": [[1.63046442E12, 2.5]], "isOverall": false, "label": "signup", "isController": false}, {"data": [[1.63046442E12, 251.5659999999999]], "isOverall": false, "label": "unFollowOther", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046442E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3446.5, "minX": 1.0, "maxY": 28533.0, "series": [{"data": [[2.0, 27039.0], [6.0, 25781.25], [9.0, 25644.666666666668], [13.0, 25671.25], [16.0, 25446.666666666668], [17.0, 27177.0], [18.0, 26628.0], [19.0, 27171.0], [23.0, 26522.5], [24.0, 25802.333333333332], [26.0, 25401.0], [27.0, 26103.0], [28.0, 24878.0], [31.0, 24675.0], [32.0, 25987.0], [35.0, 25407.0], [34.0, 26215.0], [38.0, 24673.666666666668], [43.0, 24401.0], [42.0, 24712.0], [46.0, 24582.666666666668], [51.0, 24535.5], [52.0, 24833.0], [55.0, 25255.333333333332], [54.0, 24384.0], [57.0, 24394.0], [60.0, 24351.0], [63.0, 24978.666666666668], [67.0, 24452.75], [75.0, 24704.0], [74.0, 24639.0], [77.0, 24463.666666666668], [81.0, 26195.0], [80.0, 24938.333333333332], [87.0, 24521.0], [85.0, 24927.0], [90.0, 24584.0], [89.0, 24277.0], [88.0, 24319.0], [95.0, 24299.0], [94.0, 24591.0], [93.0, 25082.0], [92.0, 24604.0], [98.0, 24510.0], [96.0, 24600.0], [102.0, 24683.5], [106.0, 24274.0], [105.0, 24275.0], [110.0, 24419.0], [108.0, 24387.666666666668], [115.0, 24424.5], [113.0, 24804.666666666668], [119.0, 24212.0], [118.0, 24462.5], [116.0, 24498.0], [122.0, 24373.0], [120.0, 24210.0], [124.0, 24527.0], [134.0, 24267.5], [132.0, 24120.0], [131.0, 24114.5], [129.0, 24389.0], [128.0, 24884.5], [143.0, 24084.0], [141.0, 24100.0], [139.0, 24752.333333333332], [138.0, 24133.0], [137.0, 24110.0], [149.0, 24549.666666666668], [146.0, 24393.0], [145.0, 24373.0], [158.0, 24415.0], [157.0, 24385.0], [152.0, 24394.666666666668], [167.0, 24740.0], [166.0, 24096.5], [161.0, 24245.75], [174.0, 24820.0], [173.0, 24107.0], [172.0, 24366.0], [168.0, 24618.333333333332], [183.0, 26063.0], [180.0, 24221.0], [178.0, 24765.714285714286], [187.0, 24551.0], [185.0, 24268.5], [199.0, 24036.0], [198.0, 24301.5], [195.0, 24722.666666666668], [192.0, 24651.8], [205.0, 24213.75], [201.0, 24641.666666666668], [215.0, 24263.0], [214.0, 25245.0], [213.0, 24770.333333333332], [210.0, 24537.666666666668], [208.0, 25645.5], [222.0, 24275.5], [220.0, 24179.0], [218.0, 24153.0], [217.0, 24096.0], [230.0, 24355.625], [238.0, 25805.0], [235.0, 24090.5], [234.0, 24152.0], [242.0, 24144.5], [254.0, 24624.0], [248.0, 24103.0], [270.0, 24429.666666666668], [267.0, 24178.0], [264.0, 24591.0], [263.0, 24177.5], [261.0, 24270.75], [257.0, 24078.25], [275.0, 24322.0], [286.0, 23838.0], [287.0, 25135.0], [284.0, 24482.0], [283.0, 24214.25], [280.0, 24156.0], [279.0, 23840.0], [277.0, 24149.0], [276.0, 24135.0], [274.0, 25765.0], [273.0, 25119.0], [272.0, 23842.0], [301.0, 24456.0], [298.0, 24935.0], [297.0, 23856.333333333332], [293.0, 24337.666666666668], [292.0, 25130.0], [290.0, 25117.0], [289.0, 24743.0], [318.0, 24001.6], [317.0, 23813.0], [314.0, 23778.0], [313.0, 23805.0], [310.0, 24266.125], [334.0, 24548.0], [332.0, 24058.0], [329.0, 23894.0], [327.0, 24335.0], [326.0, 24220.0], [324.0, 24135.0], [321.0, 24116.333333333332], [349.0, 24344.333333333332], [348.0, 24048.0], [347.0, 23745.0], [345.0, 24048.0], [344.0, 24043.0], [342.0, 24882.0], [341.0, 24212.5], [337.0, 23893.2], [354.0, 24040.0], [365.0, 24220.0], [364.0, 24004.666666666668], [363.0, 24035.0], [360.0, 24933.0], [359.0, 23642.0], [356.0, 24218.333333333332], [353.0, 24003.0], [352.0, 24115.5], [371.0, 23912.0], [382.0, 23924.0], [381.0, 23540.0], [379.0, 24102.666666666668], [376.0, 23546.0], [375.0, 24344.0], [374.0, 23945.0], [370.0, 24830.0], [368.0, 24530.75], [397.0, 23417.0], [396.0, 24418.0], [395.0, 24804.666666666668], [392.0, 25005.0], [391.0, 24673.5], [387.0, 25514.0], [386.0, 24669.0], [385.0, 24196.25], [415.0, 24083.666666666668], [413.0, 24020.0], [410.0, 23544.0], [407.0, 25179.0], [406.0, 23931.333333333332], [403.0, 23615.0], [400.0, 24150.666666666668], [430.0, 23645.0], [429.0, 23640.0], [427.0, 23383.0], [426.0, 23311.0], [425.0, 23658.0], [423.0, 24120.0], [420.0, 23329.0], [418.0, 23384.0], [416.0, 23696.0], [444.0, 23710.75], [440.0, 23396.25], [436.0, 23516.333333333332], [433.0, 23557.666666666668], [460.0, 24023.75], [456.0, 23952.0], [452.0, 23483.0], [451.0, 23633.0], [448.0, 23960.0], [477.0, 24003.0], [474.0, 23486.0], [470.0, 22859.0], [469.0, 23622.6], [464.0, 24137.5], [494.0, 23593.75], [490.0, 23175.5], [488.0, 24199.5], [486.0, 23205.5], [484.0, 24511.25], [480.0, 23515.666666666668], [511.0, 23464.0], [510.0, 22808.0], [507.0, 23058.5], [505.0, 23605.6], [500.0, 24075.0], [498.0, 24473.75], [542.0, 23522.0], [534.0, 23652.0], [528.0, 23128.5], [526.0, 24054.0], [522.0, 22874.0], [516.0, 24258.0], [574.0, 23597.666666666668], [562.0, 24106.333333333332], [556.0, 23407.0], [548.0, 23397.0], [606.0, 24561.0], [602.0, 23879.333333333332], [596.0, 23880.0], [592.0, 23188.0], [584.0, 23462.5], [580.0, 23290.666666666668], [636.0, 22506.0], [630.0, 23170.0], [628.0, 23295.75], [624.0, 22786.0], [620.0, 22895.0], [612.0, 24560.0], [670.0, 22912.0], [668.0, 23068.0], [664.0, 23427.0], [644.0, 24044.0], [700.0, 23100.0], [692.0, 23310.0], [686.0, 22994.0], [682.0, 23038.0], [680.0, 23712.5], [678.0, 22987.5], [676.0, 22409.0], [672.0, 23082.0], [732.0, 22314.6], [714.0, 22458.0], [712.0, 22803.0], [758.0, 22509.5], [754.0, 22378.0], [748.0, 22322.5], [744.0, 22335.5], [740.0, 22518.75], [736.0, 22090.75], [794.0, 22648.0], [790.0, 22633.142857142855], [776.0, 22590.0], [830.0, 22618.0], [816.0, 22241.0], [808.0, 22482.0], [858.0, 22677.5], [856.0, 22364.0], [852.0, 22085.0], [848.0, 21838.0], [846.0, 21847.0], [838.0, 22010.0], [836.0, 22711.5], [832.0, 22807.0], [892.0, 22106.333333333332], [884.0, 23052.0], [880.0, 22577.5], [876.0, 22116.0], [872.0, 22372.0], [868.0, 22632.0], [866.0, 22319.0], [926.0, 23617.0], [916.0, 21976.0], [914.0, 21891.0], [904.0, 22246.571428571428], [896.0, 21874.0], [956.0, 23299.0], [952.0, 23204.0625], [950.0, 23250.0], [946.0, 23525.0], [944.0, 23811.0], [938.0, 22262.0], [936.0, 21848.0], [932.0, 22279.0], [930.0, 21647.0], [984.0, 21964.0], [980.0, 22733.25], [978.0, 23536.0], [972.0, 22177.2], [968.0, 23538.0], [964.0, 21873.5], [962.0, 22023.0], [1022.0, 22135.0], [1010.0, 23061.5], [1006.0, 21795.5], [1004.0, 22783.25], [1000.0, 21962.0], [996.0, 22209.0], [1084.0, 21723.0], [1060.0, 22212.0], [1052.0, 22479.333333333332], [1044.0, 22371.75], [1040.0, 21853.5], [1036.0, 22127.333333333332], [1028.0, 23372.0], [1148.0, 21218.5], [1144.0, 22173.5], [1128.0, 21336.25], [1124.0, 21529.5], [1120.0, 21227.0], [1108.0, 21808.666666666668], [1104.0, 22240.8], [1096.0, 21743.57142857143], [1088.0, 21488.0], [1204.0, 21794.333333333332], [1212.0, 21633.0], [1200.0, 21037.0], [1164.0, 21031.0], [1152.0, 21276.0], [1168.0, 21829.666666666668], [1196.0, 21041.0], [1188.0, 21382.666666666668], [1276.0, 21481.0], [1272.0, 21855.5], [1256.0, 21581.333333333332], [1252.0, 22100.0], [1248.0, 21150.0], [1244.0, 21043.0], [1216.0, 21034.0], [1224.0, 21031.0], [1232.0, 21196.0], [1288.0, 21445.0], [1308.0, 21698.0], [1316.0, 21034.0], [1312.0, 21061.0], [1304.0, 21055.0], [1300.0, 21060.0], [1296.0, 21618.0], [1292.0, 20995.5], [1284.0, 21080.0], [1396.0, 21046.5], [1392.0, 21054.333333333332], [1352.0, 21101.0], [1372.0, 21049.75], [1388.0, 21045.0], [1384.0, 21046.0], [1456.0, 21745.0], [1468.0, 21292.0], [1460.0, 21824.25], [1412.0, 21598.0], [1432.0, 20888.0], [1420.0, 20895.0], [1520.0, 21062.0], [1532.0, 21051.666666666668], [1528.0, 21067.0], [1524.0, 21049.0], [1484.0, 21066.0], [1472.0, 20753.0], [1500.0, 21273.5], [1492.0, 21055.6], [1512.0, 21055.0], [1588.0, 21028.0], [1572.0, 21058.0], [1584.0, 21060.0], [1540.0, 21054.0], [1564.0, 21067.0], [1552.0, 21062.0], [1580.0, 21121.0], [1568.0, 21060.0], [1632.0, 21059.0], [1608.0, 21807.0], [1644.0, 21682.5], [1640.0, 21049.833333333332], [1636.0, 21053.666666666668], [1628.0, 21062.0], [1624.0, 21061.0], [1616.0, 21065.0], [1720.0, 20977.5], [1712.0, 22230.0], [1708.0, 21506.666666666668], [1700.0, 21216.0], [1696.0, 22330.0], [1664.0, 21153.0], [1680.0, 21478.0], [1788.0, 20475.5], [1760.0, 20486.5], [1752.0, 21667.0], [1732.0, 20511.0], [1728.0, 21529.0], [1848.0, 22110.0], [1824.0, 21047.0], [1840.0, 21035.0], [1820.0, 21584.0], [1808.0, 22346.0], [1836.0, 21046.0], [1832.0, 21045.0], [1828.0, 21244.615384615387], [1868.0, 21461.0], [1912.0, 21037.0], [1864.0, 20350.0], [1900.0, 21510.666666666668], [1892.0, 22073.0], [1880.0, 20643.666666666668], [1872.0, 20250.0], [1976.0, 22045.5], [1952.0, 22035.0], [2044.0, 21317.0], [1984.0, 21519.5], [2028.0, 21198.0], [2016.0, 21270.666666666668], [2012.0, 21233.0], [2008.0, 21037.0], [2000.0, 21218.0], [2160.0, 20539.0], [2056.0, 21664.5], [2128.0, 22034.0], [2104.0, 21015.0], [2088.0, 20852.0], [2080.0, 20803.5], [2280.0, 21792.0], [2288.0, 21129.0], [2200.0, 21124.0], [2192.0, 22055.0], [2176.0, 21309.25], [2264.0, 21715.0], [2248.0, 21140.0], [2216.0, 21129.25], [2416.0, 19598.0], [2376.0, 19813.0], [2400.0, 19679.0], [2328.0, 21050.0], [2360.0, 20481.0], [2352.0, 20652.0], [2344.0, 20597.5], [2392.0, 20168.0], [2448.0, 19734.166666666664], [2536.0, 19340.333333333332], [2440.0, 20168.75], [2432.0, 19211.0], [2520.0, 19647.0], [2504.0, 20256.25], [2496.0, 20263.0], [2488.0, 19303.0], [2480.0, 18890.0], [2472.0, 19300.0], [2584.0, 19568.333333333332], [2680.0, 19995.666666666668], [2672.0, 18859.0], [2656.0, 19882.0], [2568.0, 19165.0], [2560.0, 19667.0], [2632.0, 19249.333333333332], [2616.0, 20015.333333333332], [2600.0, 19241.5], [2592.0, 19789.333333333332], [2784.0, 19324.5], [2808.0, 18782.0], [2712.0, 19251.25], [2704.0, 20039.0], [2696.0, 19029.0], [2688.0, 19228.0], [2776.0, 18724.0], [2768.0, 19870.0], [2760.0, 18772.0], [2736.0, 19332.75], [2936.0, 18463.333333333332], [2912.0, 18618.0], [2904.0, 18737.5], [2848.0, 18662.25], [2824.0, 18264.5], [2816.0, 19922.0], [3008.0, 19248.0], [2952.0, 17907.0], [3000.0, 18480.0], [2976.0, 18742.333333333332], [3024.0, 18740.0], [3016.0, 19229.0], [3176.0, 17718.0], [3168.0, 17577.75], [3184.0, 18443.5], [3088.0, 17792.5], [3128.0, 17938.0], [3120.0, 17944.0], [3104.0, 18073.0], [3160.0, 17800.0], [3288.0, 17461.88888888889], [3208.0, 18452.0], [3216.0, 18432.0], [3248.0, 17376.0], [3232.0, 17791.0], [3448.0, 17452.0], [3344.0, 16804.333333333332], [3336.0, 16806.5], [3512.0, 17281.0], [3648.0, 16728.0], [3592.0, 17360.0], [3632.0, 17279.0], [3672.0, 16900.5], [3664.0, 17129.5], [3824.0, 15949.0], [3760.0, 16131.5], [3744.0, 16327.0], [3792.0, 16049.0], [3840.0, 15813.0], [3856.0, 16675.8], [3952.0, 16449.0], [3848.0, 16326.25], [3896.0, 17213.0], [3888.0, 15998.0], [3880.0, 16541.0], [3872.0, 16309.5], [3920.0, 16973.0], [4048.0, 15173.0], [4088.0, 15053.5], [4064.0, 15352.0], [3976.0, 15981.1], [3968.0, 15890.0], [4000.0, 15463.666666666666], [4112.0, 16067.0], [4304.0, 15416.0], [4288.0, 14490.0], [4272.0, 15358.5], [4336.0, 14452.875], [4096.0, 15208.857142857143], [4208.0, 14893.0], [4192.0, 14775.0], [4176.0, 14767.0], [4160.0, 15652.0], [4544.0, 13795.8], [4480.0, 14392.23076923077], [4496.0, 13852.0], [4528.0, 13836.0], [4400.0, 14297.0], [4384.0, 14324.0], [4464.0, 14134.0], [4432.0, 14790.0], [4416.0, 14282.0], [4816.0, 10396.0], [4768.0, 10866.0], [4800.0, 10130.0], [4640.0, 12915.0], [4720.0, 12432.0], [4704.0, 12720.0], [4880.0, 7354.0], [4864.0, 9059.0], [4257.0, 14962.75], [4321.0, 14648.0], [4273.0, 14987.0], [4337.0, 14917.0], [4289.0, 14492.0], [4097.0, 14879.0], [4113.0, 15965.0], [4545.0, 13772.0], [4561.0, 13900.0], [4593.0, 13380.5], [4481.0, 14603.0], [4513.0, 13900.0], [4353.0, 14395.5], [4465.0, 14198.0], [4449.0, 14282.0], [4433.0, 14545.0], [4417.0, 14610.5], [4817.0, 10052.0], [4849.0, 9070.5], [4625.0, 13369.222222222223], [4641.0, 12919.0], [4657.0, 12918.0], [4721.0, 12461.0], [4913.0, 5673.0], [4897.0, 5791.25], [2049.0, 21025.333333333332], [2129.0, 21473.0], [2161.0, 21619.0], [2145.0, 21207.0], [2105.0, 21235.5], [2057.0, 20872.5], [2097.0, 21541.5], [2089.0, 21198.0], [2081.0, 20983.25], [2137.0, 21121.0], [2113.0, 20805.0], [2273.0, 21414.0], [2281.0, 21609.5], [2185.0, 21321.0], [2177.0, 21204.0], [2265.0, 21348.666666666668], [2233.0, 21570.0], [2225.0, 21422.0], [2217.0, 21763.666666666664], [2425.0, 19612.5], [2417.0, 19605.5], [2409.0, 19605.5], [2393.0, 19595.0], [2345.0, 21529.0], [2545.0, 19640.0], [2553.0, 19842.0], [2529.0, 19256.0], [2505.0, 20321.0], [2497.0, 19334.5], [2489.0, 19300.0], [2433.0, 19200.0], [2465.0, 19944.0], [2657.0, 19434.0], [2585.0, 19961.5], [2577.0, 19670.833333333336], [2569.0, 19767.5], [2649.0, 18882.0], [2625.0, 19380.25], [2801.0, 19024.25], [2793.0, 18843.25], [2785.0, 18821.0], [2713.0, 19819.0], [2777.0, 18717.0], [2761.0, 19938.0], [2921.0, 18814.0], [2929.0, 18682.25], [2833.0, 18702.0], [2817.0, 19725.0], [2857.0, 18114.4], [2905.0, 19133.5], [2897.0, 18370.333333333332], [2889.0, 19016.666666666668], [3025.0, 18755.0], [3009.0, 18327.0], [3017.0, 17326.0], [2945.0, 19081.666666666668], [3001.0, 18343.0], [2993.0, 17872.5], [3193.0, 18445.666666666668], [3185.0, 18433.666666666668], [3161.0, 18198.0], [3097.0, 18283.0], [3089.0, 18043.0], [3073.0, 17934.0], [3105.0, 18107.5], [3313.0, 18138.0], [3321.0, 17813.5], [3209.0, 18620.333333333332], [3217.0, 18650.0], [3249.0, 17479.75], [3241.0, 17457.5], [3281.0, 17038.5], [3345.0, 16955.222222222223], [3337.0, 16822.0], [3561.0, 17963.0], [3569.0, 17405.0], [3553.0, 16866.0], [3465.0, 18441.0], [3505.0, 17257.0], [3497.0, 18149.0], [3705.0, 16333.5], [3649.0, 16495.333333333332], [3697.0, 17709.5], [3609.0, 18255.5], [3601.0, 17102.5], [3665.0, 16773.0], [3809.0, 16052.0], [3825.0, 15968.0], [3785.0, 16816.0], [3833.0, 15830.5], [3713.0, 17581.25], [3729.0, 17683.75], [3737.0, 17347.5], [3761.0, 16343.0], [3753.0, 16283.285714285716], [3745.0, 16253.6], [3801.0, 16327.733333333334], [3961.0, 15454.0], [3921.0, 15900.666666666666], [3857.0, 16034.0], [3897.0, 16368.0], [3889.0, 16987.0], [3905.0, 16110.333333333334], [4089.0, 15997.0], [4057.0, 15434.0], [4081.0, 14998.5], [4065.0, 15024.6], [4025.0, 15465.0], [4017.0, 15885.5], [4001.0, 15847.714285714286], [4322.0, 14952.333333333334], [4306.0, 14737.333333333334], [4338.0, 14888.0], [4226.0, 15044.0], [4274.0, 15161.0], [4290.0, 14824.0], [4210.0, 14887.0], [4578.0, 13404.454545454546], [4482.0, 14080.0], [4594.0, 13404.5], [4498.0, 13918.0], [4530.0, 13773.0], [4466.0, 14372.0], [4450.0, 14000.0], [4434.0, 14532.0], [4418.0, 14614.0], [4818.0, 9852.5], [4834.0, 9003.0], [4850.0, 9024.333333333334], [4786.0, 11031.333333333334], [4802.0, 10398.0], [4626.0, 12912.0], [4658.0, 12912.333333333334], [4722.0, 12453.0], [4914.0, 5490.0], [4866.0, 9057.0], [4131.0, 14986.5], [4227.0, 14688.5], [4259.0, 14820.0], [4291.0, 15131.0], [4115.0, 15012.142857142857], [4147.0, 14754.0], [4211.0, 14485.0], [4195.0, 14677.333333333334], [4179.0, 15093.0], [4483.0, 14211.5], [4579.0, 13364.0], [4499.0, 13940.0], [4563.0, 13714.0], [4547.0, 13736.0], [4371.0, 13937.0], [4419.0, 14558.5], [4771.0, 11004.75], [4787.0, 10851.0], [4835.0, 9212.0], [4803.0, 9862.0], [4643.0, 12909.0], [4723.0, 12453.5], [4707.0, 12732.5], [1077.0, 22389.333333333332], [1081.0, 23486.0], [1073.0, 22562.0], [1069.0, 22116.0], [1065.0, 21654.5], [1049.0, 21484.333333333332], [1033.0, 21815.5], [1029.0, 21525.0], [1025.0, 21898.0], [1141.0, 21938.75], [1137.0, 21926.75], [1133.0, 22089.4], [1117.0, 22081.5], [1113.0, 21380.5], [1105.0, 22384.0], [1089.0, 21479.0], [1201.0, 21033.666666666668], [1209.0, 21865.5], [1165.0, 21033.833333333336], [1181.0, 21239.0], [1177.0, 21169.5], [1197.0, 21030.0], [1185.0, 22142.0], [1273.0, 22106.0], [1277.0, 21612.0], [1269.0, 22334.0], [1253.0, 21952.0], [1249.0, 21153.0], [1217.0, 21100.0], [1221.0, 21031.0], [1225.0, 21027.0], [1229.0, 21210.5], [1241.0, 21602.333333333332], [1237.0, 21612.333333333332], [1285.0, 21424.666666666668], [1309.0, 21056.0], [1317.0, 21026.0], [1281.0, 21445.5], [1305.0, 20947.0], [1301.0, 21504.0], [1297.0, 20936.0], [1393.0, 21044.0], [1389.0, 21049.0], [1373.0, 21052.0], [1441.0, 20907.333333333332], [1465.0, 20985.4], [1445.0, 21755.25], [1429.0, 21655.5], [1425.0, 20899.0], [1417.0, 21444.5], [1409.0, 21249.333333333332], [1529.0, 21066.0], [1533.0, 21055.0], [1473.0, 21058.0], [1497.0, 21177.5], [1517.0, 21065.666666666668], [1513.0, 21060.0], [1509.0, 21054.0], [1505.0, 21610.0], [1569.0, 21061.5], [1581.0, 21064.0], [1577.0, 21543.0], [1573.0, 21076.333333333332], [1557.0, 21057.0], [1553.0, 21070.0], [1549.0, 21058.0], [1545.0, 21056.5], [1541.0, 21052.5], [1537.0, 21050.0], [1637.0, 21056.0], [1645.0, 20575.0], [1633.0, 21055.5], [1629.0, 21059.6], [1625.0, 21052.0], [1621.0, 21061.666666666668], [1617.0, 21065.5], [1713.0, 21246.0], [1725.0, 22218.0], [1721.0, 21626.0], [1717.0, 21574.75], [1677.0, 21012.0], [1673.0, 21739.0], [1705.0, 21619.5], [1689.0, 21361.5], [1685.0, 21325.666666666668], [1761.0, 21046.0], [1753.0, 21571.0], [1741.0, 20288.0], [1825.0, 21401.666666666668], [1829.0, 21217.0], [1849.0, 21574.5], [1841.0, 21754.666666666668], [1837.0, 21043.0], [1833.0, 22110.0], [1897.0, 20630.5], [1889.0, 21193.5], [1881.0, 22052.0], [1877.0, 21201.5], [1973.0, 20897.0], [2033.0, 21566.5], [2041.0, 20970.0], [2037.0, 21227.5], [2025.0, 21741.0], [1997.0, 21003.0], [1985.0, 20562.0], [2066.0, 21448.25], [2170.0, 21735.25], [2050.0, 21270.5], [2106.0, 20628.666666666668], [2098.0, 21359.666666666668], [2090.0, 21026.0], [2082.0, 21268.0], [2138.0, 21191.25], [2114.0, 20338.0], [2274.0, 21437.0], [2194.0, 21503.666666666668], [2266.0, 21172.0], [2258.0, 21281.8], [2234.0, 21568.5], [2210.0, 21328.666666666668], [2402.0, 19957.0], [2370.0, 20002.4], [2362.0, 20486.0], [2330.0, 21192.0], [2322.0, 21488.0], [2498.0, 20382.0], [2522.0, 19547.6], [2514.0, 20161.75], [2506.0, 20317.0], [2490.0, 19565.333333333332], [2442.0, 19513.4], [2450.0, 20160.5], [2458.0, 19680.75], [2482.0, 19442.5], [2674.0, 18873.0], [2666.0, 20363.0], [2650.0, 18888.0], [2602.0, 19165.2], [2586.0, 18908.0], [2562.0, 20182.666666666668], [2810.0, 18258.5], [2802.0, 18625.0], [2778.0, 19835.0], [2770.0, 18383.5], [2762.0, 19935.0], [2882.0, 18754.0], [2850.0, 18177.5], [2842.0, 18823.0], [2834.0, 19657.0], [2826.0, 18753.0], [2818.0, 18696.0], [3050.0, 18560.666666666664], [3058.0, 18585.25], [2962.0, 18521.333333333332], [2970.0, 18348.75], [3002.0, 18332.0], [2994.0, 18474.0], [2986.0, 18348.0], [3034.0, 18733.0], [3194.0, 18636.0], [3082.0, 18668.0], [3154.0, 16801.0], [3178.0, 18957.0], [3074.0, 17281.0], [3098.0, 17998.5], [3130.0, 17522.8], [3114.0, 16922.0], [3218.0, 18707.0], [3322.0, 18008.999999999996], [3314.0, 18117.0], [3258.0, 17926.5], [3210.0, 18446.6], [3442.0, 17429.0], [3562.0, 17954.0], [3458.0, 18142.0], [3506.0, 17413.0], [3498.0, 17712.0], [3490.0, 17561.666666666668], [3546.0, 17379.5], [3698.0, 17152.818181818184], [3690.0, 17145.0], [3602.0, 16829.0], [3594.0, 17367.0], [3658.0, 17493.0], [3714.0, 17348.5], [3818.0, 16840.5], [3834.0, 15824.0], [3730.0, 17359.0], [3962.0, 15332.0], [3946.0, 15734.666666666666], [3842.0, 16511.6], [3898.0, 16005.5], [3874.0, 16258.75], [3906.0, 15675.0], [4090.0, 15566.0], [4034.0, 15516.5], [4018.0, 16447.0], [4148.0, 14632.5], [4308.0, 14586.714285714286], [4244.0, 15403.0], [4324.0, 14809.0], [4132.0, 15340.0], [4100.0, 15099.0], [4180.0, 14848.0], [4164.0, 15176.333333333334], [4500.0, 13868.0], [4596.0, 13394.625], [4516.0, 13843.0], [4564.0, 13451.0], [4468.0, 14337.0], [4436.0, 14454.0], [4420.0, 14625.333333333334], [4852.0, 9268.5], [4772.0, 11208.0], [4836.0, 9026.0], [4804.0, 10235.5], [4644.0, 12919.0], [4724.0, 12457.0], [4692.0, 12708.666666666666], [5012.0, 3524.7567567567557], [4900.0, 5558.0], [4868.0, 9263.0], [4309.0, 15413.0], [4245.0, 14906.833333333334], [4101.0, 15213.5], [4149.0, 14756.0], [4181.0, 15589.0], [4165.0, 15645.0], [4405.0, 14519.666666666666], [4549.0, 13756.0], [4565.0, 13464.0], [4485.0, 14139.5], [4501.0, 13948.666666666666], [4373.0, 14353.0], [4357.0, 14381.5], [4469.0, 14337.0], [4453.0, 14329.0], [4437.0, 14437.0], [4741.0, 12353.0], [4789.0, 10910.90909090909], [4853.0, 9374.5], [4725.0, 12455.0], [4709.0, 12693.0], [4901.0, 5698.0], [4885.0, 5654.333333333333], [2075.0, 21250.4], [2163.0, 21552.333333333332], [2155.0, 21198.0], [2147.0, 21394.2], [2059.0, 21316.0], [2107.0, 21314.0], [2099.0, 21195.0], [2091.0, 20341.0], [2115.0, 21268.0], [2275.0, 21334.6], [2291.0, 22005.0], [2203.0, 22000.0], [2187.0, 21199.5], [2179.0, 21012.0], [2267.0, 21016.0], [2251.0, 21168.25], [2419.0, 19591.0], [2427.0, 19601.0], [2323.0, 21529.0], [2363.0, 21207.0], [2355.0, 20471.0], [2347.0, 20677.0], [2395.0, 19958.0], [2379.0, 19816.0], [2499.0, 20748.0], [2459.0, 19799.0], [2683.0, 18872.5], [2643.0, 19740.0], [2619.0, 19432.8], [2571.0, 19944.5], [2595.0, 18528.0], [2803.0, 19750.0], [2811.0, 19754.0], [2755.0, 18624.0], [2763.0, 19887.0], [2771.0, 19899.0], [2795.0, 18776.0], [2787.0, 18823.0], [2691.0, 19226.0], [2747.0, 19554.0], [2739.0, 19059.5], [2731.0, 19102.0], [2779.0, 20073.0], [2915.0, 19611.0], [2939.0, 18757.333333333332], [2827.0, 17729.0], [2907.0, 17652.0], [2899.0, 18161.5], [2875.0, 17663.0], [2859.0, 18648.5], [2851.0, 18708.0], [3067.0, 18348.6], [3011.0, 17950.5], [2955.0, 18400.666666666668], [3003.0, 18414.0], [2979.0, 19004.666666666668], [3027.0, 18754.0], [3019.0, 17422.0], [3179.0, 18976.0], [3187.0, 18526.333333333332], [3195.0, 18730.100000000002], [3139.0, 17928.0], [3171.0, 17350.0], [3099.0, 18845.0], [3083.0, 18840.0], [3115.0, 18850.5], [3107.0, 18203.0], [3227.0, 17806.0], [3211.0, 18449.0], [3243.0, 17031.6], [3235.0, 18689.0], [3291.0, 17866.0], [3451.0, 17825.0], [3347.0, 17632.0], [3339.0, 16804.5], [3563.0, 18041.333333333332], [3571.0, 18196.0], [3483.0, 17328.5], [3467.0, 17797.5], [3459.0, 17435.0], [3507.0, 17418.0], [3499.0, 17709.0], [3547.0, 17181.0], [3707.0, 16980.666666666668], [3651.0, 16498.75], [3691.0, 17720.0], [3603.0, 18242.0], [3595.0, 17655.75], [3587.0, 17372.333333333332], [3675.0, 17183.166666666664], [3835.0, 15961.0], [3819.0, 16215.0], [3779.0, 16054.0], [3787.0, 16057.5], [3731.0, 17523.0], [3771.0, 16055.0], [3763.0, 16334.0], [3795.0, 16054.0], [3963.0, 15864.3], [3867.0, 17037.5], [3843.0, 17329.0], [3915.0, 17022.0], [4043.0, 16129.666666666666], [4059.0, 15425.666666666666], [4083.0, 15499.5], [4019.0, 15304.0], [4150.0, 15254.5], [4310.0, 14582.0], [4246.0, 14805.75], [4262.0, 14773.666666666666], [4134.0, 15060.5], [4102.0, 15410.0], [4214.0, 15175.5], [4166.0, 14963.0], [4598.0, 13397.0], [4502.0, 13822.5], [4390.0, 14482.0], [4358.0, 14393.0], [4422.0, 14440.5], [4806.0, 9881.666666666666], [4774.0, 11388.0], [4838.0, 9365.333333333334], [4822.0, 10055.0], [4646.0, 12920.0], [4662.0, 12848.0], [4726.0, 12648.0], [4710.0, 12436.0], [4694.0, 12667.0], [4902.0, 5697.5], [4870.0, 9188.0], [4327.0, 14699.714285714286], [4279.0, 14752.4], [4311.0, 14645.0], [4135.0, 15690.0], [4151.0, 15174.0], [4215.0, 14896.0], [4199.0, 14816.5], [4519.0, 13863.666666666666], [4535.0, 13760.0], [4567.0, 13469.0], [4455.0, 14788.0], [4439.0, 14297.0], [4423.0, 14306.2], [4743.0, 12419.555555555555], [4855.0, 9200.0], [4775.0, 10827.0], [4631.0, 12916.0], [4647.0, 12913.0], [4663.0, 12819.0], [4711.0, 12582.5], [4695.0, 12430.0], [541.0, 24079.5], [539.0, 23798.8], [531.0, 23374.333333333332], [525.0, 24112.0], [523.0, 23977.4], [517.0, 24123.0], [571.0, 23667.75], [567.0, 23076.0], [565.0, 23214.666666666668], [559.0, 23535.666666666668], [553.0, 23966.0], [551.0, 23440.666666666668], [547.0, 22922.0], [545.0, 24207.0], [607.0, 23374.5], [599.0, 23561.333333333332], [589.0, 23510.5], [587.0, 22800.0], [585.0, 22573.0], [577.0, 24193.666666666668], [639.0, 22854.333333333332], [635.0, 22862.25], [631.0, 23160.0], [615.0, 23352.285714285714], [669.0, 24435.0], [671.0, 23089.0], [667.0, 23562.666666666668], [647.0, 23172.333333333332], [641.0, 22788.0], [661.0, 23486.0], [659.0, 23071.0], [657.0, 23860.5], [655.0, 23460.5], [653.0, 22842.5], [651.0, 23179.0], [703.0, 23249.0], [697.0, 23198.2], [689.0, 23411.333333333332], [681.0, 24345.0], [675.0, 22929.0], [673.0, 24421.0], [727.0, 23078.75], [723.0, 22869.0], [719.0, 23024.5], [715.0, 22466.0], [713.0, 22330.0], [711.0, 23422.75], [707.0, 23321.0], [767.0, 21985.0], [765.0, 22483.75], [761.0, 22386.666666666668], [797.0, 23435.0], [793.0, 22323.0], [783.0, 22577.0], [781.0, 23978.0], [777.0, 22401.0], [775.0, 23897.0], [773.0, 22230.0], [769.0, 22142.5], [829.0, 23839.0], [827.0, 22493.0], [825.0, 22848.0], [821.0, 22836.4], [815.0, 22564.25], [811.0, 22783.666666666668], [805.0, 22581.5], [801.0, 22648.25], [863.0, 22140.75], [859.0, 22588.0], [849.0, 22152.0], [847.0, 22068.5], [845.0, 22183.0], [843.0, 22117.5], [841.0, 22343.0], [839.0, 22071.333333333332], [835.0, 23023.0], [895.0, 21779.0], [889.0, 23114.5], [887.0, 23308.5], [885.0, 23114.0], [883.0, 23421.666666666668], [875.0, 21907.0], [913.0, 22323.0], [911.0, 22429.75], [907.0, 22398.0], [897.0, 22766.0], [959.0, 22204.0], [947.0, 23368.0], [943.0, 23254.0], [941.0, 22934.75], [931.0, 22275.0], [929.0, 22799.0], [989.0, 21965.0], [987.0, 22143.0], [985.0, 22195.0], [983.0, 21975.0], [981.0, 22231.333333333332], [967.0, 22787.5], [961.0, 23019.0], [1021.0, 22369.14285714286], [1023.0, 22119.0], [1017.0, 21903.0], [1015.0, 22009.5], [1013.0, 21892.5], [1011.0, 21568.0], [999.0, 22640.333333333332], [995.0, 22370.222222222223], [993.0, 21768.0], [1086.0, 21960.0], [1082.0, 22650.75], [1074.0, 21887.0], [1062.0, 22542.5], [1054.0, 21860.0], [1046.0, 21871.5], [1146.0, 21295.0], [1214.0, 22026.5], [1210.0, 21039.5], [1174.0, 21024.333333333332], [1194.0, 21039.0], [1190.0, 21496.5], [1278.0, 22199.0], [1266.0, 21325.5], [1250.0, 21323.0], [1222.0, 21029.5], [1226.0, 21026.0], [1238.0, 21352.0], [1234.0, 21611.5], [1314.0, 20937.0], [1302.0, 20943.0], [1294.0, 21258.0], [1290.0, 22044.0], [1398.0, 21044.0], [1402.0, 21041.0], [1406.0, 20948.75], [1382.0, 21045.0], [1394.0, 21044.0], [1374.0, 21051.75], [1358.0, 21095.0], [1354.0, 21093.0], [1370.0, 21211.51219512195], [1390.0, 21043.0], [1386.0, 21047.333333333332], [1466.0, 21160.0], [1438.0, 21333.25], [1434.0, 21451.5], [1422.0, 20824.333333333332], [1530.0, 21053.0], [1506.0, 20702.0], [1526.0, 21064.0], [1522.0, 21062.0], [1482.0, 21077.0], [1474.0, 20961.0], [1498.0, 22501.0], [1518.0, 22136.0], [1586.0, 22097.0], [1590.0, 21030.0], [1566.0, 21063.0], [1538.0, 21051.0], [1542.0, 21053.0], [1550.0, 21079.0], [1546.0, 21070.0], [1558.0, 21062.0], [1582.0, 21053.0], [1578.0, 21061.0], [1570.0, 21053.0], [1638.0, 21050.333333333332], [1662.0, 21022.666666666668], [1642.0, 21066.285714285714], [1626.0, 21055.75], [1622.0, 21061.0], [1618.0, 21063.0], [1726.0, 21542.0], [1718.0, 21626.0], [1702.0, 22332.5], [1694.0, 21458.333333333332], [1670.0, 21508.666666666668], [1678.0, 21623.0], [1674.0, 20532.5], [1690.0, 22272.0], [1682.0, 21413.0], [1730.0, 21531.5], [1758.0, 21749.666666666668], [1754.0, 21462.0], [1750.0, 21351.555555555555], [1846.0, 21034.0], [1850.0, 21023.0], [1854.0, 21050.666666666668], [1826.0, 21418.333333333332], [1842.0, 21464.0], [1822.0, 21051.0], [1806.0, 20479.0], [1802.0, 20483.0], [1830.0, 21051.0], [1866.0, 21714.0], [1906.0, 21874.0], [1862.0, 21150.333333333332], [1858.0, 22073.0], [1902.0, 21189.5], [1894.0, 20993.0], [1886.0, 21020.0], [1974.0, 21011.0], [1938.0, 22039.0], [1930.0, 21641.0], [2034.0, 22033.0], [1986.0, 22287.0], [2026.0, 21741.5], [2010.0, 21539.0], [2148.0, 21621.5], [2164.0, 21783.666666666668], [2076.0, 21454.333333333332], [2068.0, 21869.333333333332], [2140.0, 21414.0], [2132.0, 21023.0], [2116.0, 21428.5], [2092.0, 21652.5], [2284.0, 21146.0], [2292.0, 21308.25], [2276.0, 20986.0], [2204.0, 21359.0], [2188.0, 21078.5], [2236.0, 22015.0], [2228.0, 21136.666666666668], [2428.0, 19607.0], [2380.0, 20238.666666666668], [2420.0, 19592.0], [2404.0, 19599.5], [2332.0, 21052.0], [2356.0, 20676.0], [2348.0, 20488.0], [2396.0, 20283.0], [2388.0, 20512.666666666664], [2548.0, 19180.333333333332], [2556.0, 19678.0], [2540.0, 19675.75], [2532.0, 19420.0], [2484.0, 19713.0], [2476.0, 19891.5], [2668.0, 19361.5], [2676.0, 19216.0], [2580.0, 19276.333333333332], [2564.0, 19351.5], [2636.0, 19452.25], [2708.0, 19422.25], [2716.0, 19834.666666666668], [2700.0, 19081.5], [2772.0, 19862.0], [2748.0, 19960.0], [2732.0, 19226.42857142857], [2724.0, 19033.5], [2828.0, 19273.5], [2916.0, 17793.0], [2876.0, 18628.0], [2852.0, 18661.0], [2820.0, 18723.5], [2948.0, 17793.666666666668], [3044.0, 18384.5], [3012.0, 19235.0], [3028.0, 18730.0], [3004.0, 19257.0], [2996.0, 18415.5], [2988.0, 18482.0], [2980.0, 18372.0], [3180.0, 18452.666666666668], [3140.0, 17657.5], [3156.0, 18338.0], [3188.0, 18469.0], [3172.0, 17034.0], [3076.0, 17281.0], [3092.0, 18066.0], [3132.0, 18319.0], [3124.0, 17141.0], [3220.0, 18427.0], [3212.0, 18436.0], [3300.0, 18479.0], [3292.0, 17012.0], [3276.0, 17027.5], [3252.0, 17737.0], [3236.0, 17320.5], [3452.0, 17958.0], [3444.0, 17856.833333333332], [3356.0, 17732.0], [3556.0, 16809.0], [3564.0, 18444.0], [3460.0, 17987.5], [3484.0, 17453.0], [3468.0, 17427.0], [3508.0, 17756.2], [3500.0, 17246.0], [3652.0, 16887.5], [3692.0, 16342.5], [3596.0, 17537.5], [3636.0, 17413.5], [3836.0, 16588.5], [3820.0, 16067.5], [3788.0, 16051.0], [3732.0, 16154.0], [3740.0, 16128.0], [3772.0, 15851.0], [3764.0, 17325.0], [3804.0, 16107.333333333334], [3948.0, 15743.5], [3860.0, 16560.0], [3892.0, 16535.333333333332], [3908.0, 16265.0], [3988.0, 16380.0], [4020.0, 15304.0], [4248.0, 15666.0], [4104.0, 15222.5], [4216.0, 14688.0], [4584.0, 13420.0], [4488.0, 14195.166666666666], [4536.0, 13865.0], [4376.0, 14325.0], [4440.0, 14379.0], [4824.0, 10005.0], [4840.0, 9040.0], [4744.0, 11388.0], [4776.0, 10857.0], [4808.0, 9975.5], [4616.0, 13460.545454545454], [4632.0, 12913.0], [4712.0, 12526.0], [4680.0, 12872.0], [4904.0, 5702.0], [4888.0, 5709.5], [4872.0, 9290.5], [4297.0, 15121.0], [4233.0, 15211.25], [4249.0, 14845.0], [4265.0, 15190.666666666666], [4121.0, 15620.428571428572], [4137.0, 15162.0], [4201.0, 15348.0], [4169.0, 15012.333333333334], [4489.0, 14142.0], [4537.0, 13722.0], [4393.0, 14780.0], [4377.0, 14613.5], [4473.0, 14393.0], [4857.0, 9535.0], [4777.0, 10954.5], [4649.0, 12911.0], [4713.0, 12439.5], [4969.0, 3926.0], [4873.0, 9523.0], [2165.0, 21690.0], [2173.0, 21594.666666666668], [2053.0, 21317.666666666668], [2061.0, 22015.0], [2101.0, 21085.5], [2093.0, 21025.0], [2085.0, 21192.0], [2141.0, 21581.333333333332], [2133.0, 22022.0], [2117.0, 21424.0], [2205.0, 22246.0], [2293.0, 21447.333333333336], [2197.0, 21224.125], [2181.0, 21319.0], [2269.0, 21216.0], [2261.0, 21209.0], [2253.0, 21011.0], [2245.0, 21539.0], [2237.0, 21419.0], [2221.0, 21143.0], [2213.0, 21128.666666666664], [2413.0, 19604.0], [2429.0, 19612.0], [2333.0, 21265.500000000004], [2373.0, 19814.0], [2365.0, 21625.5], [2357.0, 20090.0], [2349.0, 21540.0], [2557.0, 19591.0], [2517.0, 19659.0], [2509.0, 20457.0], [2461.0, 20260.0], [2453.0, 19578.333333333332], [2661.0, 20398.0], [2677.0, 19783.0], [2685.0, 20362.0], [2669.0, 19046.0], [2589.0, 19666.333333333332], [2565.0, 18749.0], [2621.0, 19448.5], [2613.0, 19121.333333333332], [2605.0, 19675.333333333332], [2597.0, 18929.0], [2653.0, 18454.0], [2629.0, 19825.5], [2813.0, 19249.5], [2797.0, 19039.0], [2789.0, 18733.0], [2693.0, 19449.25], [2773.0, 18878.0], [2765.0, 18941.0], [2925.0, 18245.75], [2933.0, 18200.75], [2917.0, 18241.0], [2845.0, 18731.0], [2877.0, 18534.0], [2869.0, 18262.600000000002], [2909.0, 19073.333333333332], [3061.0, 17859.666666666668], [3013.0, 18966.0], [2973.0, 18447.0], [2989.0, 18365.0], [3037.0, 18711.333333333332], [3029.0, 18717.0], [3181.0, 18434.0], [3165.0, 17036.0], [3101.0, 18006.333333333332], [3077.0, 17282.0], [3133.0, 18708.0], [3117.0, 18077.75], [3109.0, 17831.0], [3325.0, 17813.0], [3317.0, 17384.5], [3445.0, 17704.75], [3453.0, 17377.5], [3341.0, 17848.0], [3573.0, 17407.5], [3541.0, 17154.333333333332], [3485.0, 17336.5], [3461.0, 17433.0], [3501.0, 17421.0], [3701.0, 16691.333333333332], [3653.0, 17943.333333333332], [3605.0, 17300.333333333332], [3629.0, 16896.571428571428], [3669.0, 16380.0], [3781.0, 15848.0], [3821.0, 17336.0], [3773.0, 16491.5], [3725.0, 17010.0], [3757.0, 16119.0], [3845.0, 17483.0], [3933.0, 15793.5], [3925.0, 15888.25], [4093.0, 15112.25], [4061.0, 15190.666666666666], [3997.0, 15326.0], [3981.0, 15662.0], [4029.0, 15330.0], [4021.0, 15819.416666666668], [4013.0, 15442.0], [4298.0, 14683.0], [4154.0, 15251.2], [4122.0, 15139.0], [4106.0, 15570.5], [4218.0, 14580.0], [4522.0, 13856.333333333332], [4538.0, 13771.0], [4474.0, 14238.0], [4842.0, 9326.333333333334], [4762.0, 11067.0], [4778.0, 11125.0], [4858.0, 9109.0], [4826.0, 10374.0], [4810.0, 10074.0], [4634.0, 12917.5], [4650.0, 12917.0], [4730.0, 12674.0], [4714.0, 12440.0], [4682.0, 12873.75], [4890.0, 5521.0], [4299.0, 14741.0], [4251.0, 15392.0], [4267.0, 14504.0], [4123.0, 15959.0], [4203.0, 14878.5], [4491.0, 14206.875], [4507.0, 13851.4], [4523.0, 13854.0], [4379.0, 14327.0], [4475.0, 14358.0], [4459.0, 14282.0], [4827.0, 10053.333333333334], [4891.0, 5563.0], [4875.0, 9141.5], [1087.0, 21526.0], [1071.0, 22538.0], [1063.0, 22017.0], [1059.0, 22126.0], [1027.0, 22610.5], [1151.0, 21726.666666666668], [1143.0, 21962.0], [1123.0, 21504.5], [1119.0, 21854.5], [1115.0, 21525.5], [1111.0, 21830.666666666668], [1099.0, 22039.0], [1155.0, 22319.666666666668], [1191.0, 21029.0], [1215.0, 21217.0], [1207.0, 21033.0], [1183.0, 22616.0], [1163.0, 21035.666666666668], [1179.0, 22228.5], [1175.0, 21241.0], [1171.0, 21941.666666666668], [1199.0, 21039.0], [1195.0, 21042.0], [1275.0, 22107.0], [1263.0, 21660.285714285714], [1247.0, 21428.333333333332], [1223.0, 21037.0], [1219.0, 21223.0], [1227.0, 21030.5], [1231.0, 21190.0], [1243.0, 21163.0], [1315.0, 20957.5], [1311.0, 21119.0], [1307.0, 20944.0], [1299.0, 21058.0], [1399.0, 21048.5], [1351.0, 21091.0], [1387.0, 21049.0], [1383.0, 21051.0], [1379.0, 21050.0], [1375.0, 21057.0], [1367.0, 20887.5], [1451.0, 21807.25], [1447.0, 21209.0], [1427.0, 21454.25], [1419.0, 21043.0], [1415.0, 21490.333333333332], [1535.0, 21049.5], [1531.0, 21057.0], [1523.0, 21061.0], [1487.0, 21061.333333333332], [1503.0, 21332.0], [1499.0, 22543.0], [1575.0, 21056.0], [1583.0, 21056.0], [1539.0, 21052.0], [1659.0, 21087.75], [1655.0, 21214.625], [1647.0, 20635.5], [1631.0, 21050.0], [1619.0, 21067.0], [1723.0, 21525.5], [1671.0, 22598.0], [1667.0, 20613.0], [1711.0, 21360.0], [1703.0, 21676.0], [1691.0, 21685.0], [1787.0, 20479.0], [1755.0, 20455.0], [1739.0, 21515.428571428572], [1731.0, 21775.0], [1855.0, 21042.0], [1851.0, 21296.2], [1827.0, 21682.0], [1831.0, 21041.0], [1847.0, 21032.0], [1843.0, 21039.0], [1823.0, 21846.0], [1839.0, 21044.0], [1835.0, 21259.4], [1911.0, 21257.4], [1895.0, 21850.0], [1887.0, 21395.0], [1859.0, 21382.0], [1875.0, 21427.333333333332], [1871.0, 21226.0], [1863.0, 21369.0], [1975.0, 21724.6], [1955.0, 21384.4], [2039.0, 21323.0], [2011.0, 20428.0], [2003.0, 22058.0], [1987.0, 21221.5], [2174.0, 21811.333333333332], [2126.0, 21046.0], [2150.0, 21359.6], [2078.0, 21009.0], [2094.0, 21432.0], [2086.0, 21060.5], [2142.0, 22046.0], [2134.0, 21419.0], [2118.0, 21047.0], [2286.0, 22257.0], [2198.0, 21393.571428571428], [2182.0, 20549.0], [2270.0, 21026.333333333332], [2262.0, 21129.0], [2246.0, 21360.0], [2430.0, 19223.0], [2398.0, 19673.0], [2382.0, 21429.5], [2334.0, 20508.0], [2510.0, 20358.25], [2518.0, 19302.0], [2454.0, 19803.0], [2462.0, 19315.0], [2470.0, 19303.0], [2686.0, 19357.0], [2654.0, 19235.0], [2646.0, 19480.0], [2614.0, 19820.0], [2566.0, 20710.0], [2766.0, 18897.0], [2814.0, 18719.0], [2694.0, 19057.0], [2782.0, 18866.0], [2742.0, 20137.0], [2726.0, 19167.0], [2942.0, 17468.666666666668], [2894.0, 18261.2], [2886.0, 18672.0], [2878.0, 17662.0], [2846.0, 18648.0], [2822.0, 19187.5], [3062.0, 17992.0], [3014.0, 18454.0], [3006.0, 18350.0], [2950.0, 17943.0], [2966.0, 17933.0], [2998.0, 18345.0], [2982.0, 19299.0], [3038.0, 19271.0], [3030.0, 18712.0], [3134.0, 17798.0], [3078.0, 18028.0], [3086.0, 18204.666666666668], [3110.0, 18115.0], [3166.0, 17036.5], [3318.0, 18136.0], [3294.0, 17818.0], [3214.0, 18433.333333333332], [3230.0, 16789.0], [3254.0, 17015.0], [3558.0, 17574.0], [3566.0, 17483.0], [3574.0, 18142.272727272728], [3550.0, 17627.777777777777], [3542.0, 17123.0], [3694.0, 16378.5], [3654.0, 16839.0], [3710.0, 16518.0], [3606.0, 17353.0], [3598.0, 16844.0], [3630.0, 17294.0], [3742.0, 18048.0], [3838.0, 16338.0], [3774.0, 16068.0], [3766.0, 16024.5], [3758.0, 16349.0], [3750.0, 16329.0], [3806.0, 16466.0], [3790.0, 15961.666666666666], [3870.0, 17052.0], [3958.0, 16451.0], [3854.0, 16515.0], [3902.0, 15933.75], [3894.0, 15687.0], [3886.0, 16330.0], [3934.0, 16284.25], [4094.0, 15996.0], [4086.0, 15430.0], [3990.0, 15665.75], [3974.0, 16028.5], [4252.0, 14673.0], [4156.0, 14643.0], [4124.0, 14991.0], [4108.0, 15924.0], [4220.0, 14865.0], [4412.0, 14340.0], [4508.0, 13834.0], [4492.0, 13905.0], [4524.0, 13845.0], [4396.0, 14441.0], [4380.0, 14401.0], [4444.0, 14434.0], [4428.0, 14384.0], [4748.0, 10937.0], [4764.0, 11378.0], [4796.0, 9977.5], [4668.0, 12836.5], [4732.0, 12580.6], [4716.0, 12537.666666666666], [4908.0, 5696.25], [5004.0, 3446.5], [4972.0, 4095.836363636364], [4109.0, 15464.666666666666], [4237.0, 14775.0], [4125.0, 15956.0], [4205.0, 15099.5], [4605.0, 13386.142857142857], [4493.0, 13873.111111111111], [4413.0, 14313.5], [4397.0, 14327.0], [4381.0, 14788.0], [4477.0, 14163.0], [4445.0, 14776.0], [4765.0, 10946.5], [4861.0, 9059.5], [4797.0, 9876.5], [4733.0, 12922.0], [4637.0, 12915.666666666666], [4653.0, 12912.0], [4669.0, 12871.428571428572], [4701.0, 12436.0], [4877.0, 9357.0], [2055.0, 21665.0], [2167.0, 21129.0], [2175.0, 21202.0], [2151.0, 21520.5], [2111.0, 21258.0], [2063.0, 21320.0], [2103.0, 21400.0], [2095.0, 21194.0], [2087.0, 21231.0], [2143.0, 21452.666666666668], [2135.0, 21110.5], [2199.0, 21089.666666666668], [2207.0, 21177.5], [2183.0, 20540.0], [2271.0, 21198.0], [2247.0, 21462.4], [2231.0, 20409.0], [2223.0, 20828.0], [2215.0, 21014.0], [2431.0, 19216.0], [2423.0, 19607.25], [2415.0, 19611.0], [2327.0, 21241.964285714283], [2399.0, 19669.0], [2375.0, 20225.0], [2551.0, 19898.333333333332], [2559.0, 19185.0], [2543.0, 20123.0], [2535.0, 19442.0], [2527.0, 20666.0], [2511.0, 20266.5], [2487.0, 19475.0], [2479.0, 20310.0], [2471.0, 20102.6], [2687.0, 19464.0], [2671.0, 20458.0], [2663.0, 19219.75], [2647.0, 20374.0], [2639.0, 20063.333333333332], [2807.0, 18997.75], [2815.0, 18782.0], [2759.0, 19221.25], [2767.0, 18741.0], [2791.0, 18806.0], [2719.0, 19813.333333333332], [2695.0, 20372.0], [2751.0, 19464.25], [2743.0, 19322.8], [2775.0, 19897.0], [2919.0, 18180.5], [2831.0, 18747.0], [2911.0, 18677.0], [2887.0, 18145.0], [3015.0, 18441.0], [3071.0, 18139.0], [2959.0, 18214.75], [3007.0, 17341.0], [3023.0, 18658.0], [3175.0, 17038.5], [3191.0, 18721.0], [3103.0, 18119.0], [3095.0, 18492.0], [3079.0, 17298.0], [3135.0, 17929.0], [3119.0, 18332.0], [3319.0, 17315.0], [3303.0, 17393.777777777774], [3271.0, 17809.75], [3263.0, 17889.2], [3215.0, 18708.5], [3223.0, 18481.285714285714], [3255.0, 17032.0], [3287.0, 17020.0], [3279.0, 17007.0], [3447.0, 17725.666666666668], [3423.0, 17392.028169014084], [3359.0, 17192.0], [3335.0, 17030.0], [3567.0, 16882.0], [3543.0, 16742.0], [3487.0, 17524.5], [3471.0, 18198.0], [3463.0, 17796.5], [3503.0, 17798.5], [3495.0, 17353.0], [3551.0, 17747.333333333332], [3687.0, 16957.5], [3663.0, 16742.0], [3631.0, 18038.0], [3615.0, 17213.333333333336], [3607.0, 17416.555555555555], [3599.0, 17883.333333333332], [3591.0, 17352.0], [3671.0, 17033.5], [3823.0, 16596.0], [3783.0, 16104.0], [3815.0, 16546.142857142855], [3719.0, 17585.166666666668], [3735.0, 16132.333333333334], [3759.0, 16339.0], [3871.0, 16714.5], [3855.0, 16633.0], [3927.0, 16048.0], [3919.0, 16685.5], [3911.0, 16356.0], [4047.0, 15825.529411764704], [4318.0, 14670.5], [4238.0, 15028.0], [4254.0, 14891.0], [4270.0, 14996.25], [4302.0, 14673.0], [4158.0, 15295.666666666666], [4142.0, 15350.57142857143], [4206.0, 15715.0], [4190.0, 14979.222222222223], [4494.0, 13900.333333333334], [4542.0, 13761.0], [4590.0, 13413.0], [4414.0, 14775.0], [4398.0, 14287.0], [4382.0, 14338.0], [4750.0, 11217.2], [4846.0, 9284.0], [4766.0, 10886.0], [4830.0, 9916.4], [4638.0, 12911.0], [4654.0, 12917.0], [4686.0, 12824.636363636364], [4894.0, 5691.0], [4910.0, 5870.0], [4878.0, 9202.25], [4335.0, 14496.0], [4351.0, 14598.923076923076], [4239.0, 14670.0], [4287.0, 14844.75], [4319.0, 14727.0], [4223.0, 14778.833333333332], [4127.0, 15071.0], [4159.0, 14627.0], [4175.0, 15355.666666666666], [4495.0, 13939.0], [4591.0, 13407.0], [4511.0, 13893.5], [4527.0, 13826.333333333334], [4399.0, 14492.333333333334], [4463.0, 14164.0], [4447.0, 14325.0], [4431.0, 14401.0], [4767.0, 11117.5], [4863.0, 9532.0], [4799.0, 10405.0], [4815.0, 10234.5], [4655.0, 12909.0], [4719.0, 12457.0], [4687.0, 12719.0], [5007.0, 3839.0], [4911.0, 5489.0], [4879.0, 8027.0], [1.0, 28533.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[2515.4359537110954, 18940.730247406245]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 5012.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 64127.333333333336, "minX": 1.63046442E12, "maxY": 142758.21666666667, "series": [{"data": [[1.63046442E12, 64127.333333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63046442E12, 142758.21666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046442E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18940.730247406245, "minX": 1.63046442E12, "maxY": 18940.730247406245, "series": [{"data": [[1.63046442E12, 18940.730247406245]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046442E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16591.716679968114, "minX": 1.63046442E12, "maxY": 16591.716679968114, "series": [{"data": [[1.63046442E12, 16591.716679968114]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046442E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11167.11831604154, "minX": 1.63046442E12, "maxY": 11167.11831604154, "series": [{"data": [[1.63046442E12, 11167.11831604154]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046442E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3396.0, "minX": 1.63046442E12, "maxY": 27245.0, "series": [{"data": [[1.63046442E12, 27245.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63046442E12, 24039.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63046442E12, 25618.39999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63046442E12, 24398.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63046442E12, 3396.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63046442E12, 19211.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046442E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3914.0, "minX": 1.0, "maxY": 28533.0, "series": [{"data": [[8.0, 25842.0], [34.0, 5554.5], [547.0, 21525.5], [158.0, 13796.0], [41.0, 9909.0], [46.0, 10893.5], [48.0, 9140.5], [841.0, 21220.0], [220.0, 14460.5], [233.0, 19546.0], [246.0, 23522.0], [1.0, 7690.5], [314.0, 15329.5], [304.0, 18928.0], [347.0, 24276.0], [369.0, 22516.5], [98.0, 3914.0], [404.0, 17282.0], [113.0, 16261.0], [118.0, 12621.0], [29.0, 25519.0], [491.0, 17944.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[547.0, 21051.0], [158.0, 13698.0], [841.0, 21062.0], [220.0, 15118.5], [233.0, 19607.0], [246.0, 24084.0], [1.0, 28533.0], [314.0, 15260.0], [304.0, 18769.5], [369.0, 23147.0], [404.0, 17523.0], [113.0, 16204.5], [118.0, 12913.0], [491.0, 18042.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 841.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 28533.0, "series": [{"data": [[8.0, 25698.5], [34.0, 5554.5], [547.0, 21525.5], [158.0, 13755.0], [41.0, 9909.0], [46.0, 10853.0], [48.0, 9140.5], [841.0, 21220.0], [220.0, 14454.0], [233.0, 19546.0], [246.0, 23522.0], [1.0, 7690.5], [314.0, 15329.5], [304.0, 18922.5], [347.0, 24276.0], [369.0, 22513.0], [98.0, 3914.0], [404.0, 17282.0], [113.0, 16261.0], [118.0, 12621.0], [29.0, 25376.0], [491.0, 17943.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[547.0, 0.0], [158.0, 13698.0], [841.0, 0.0], [220.0, 15116.5], [233.0, 0.0], [246.0, 24031.0], [1.0, 28533.0], [314.0, 0.0], [304.0, 18769.5], [369.0, 23147.0], [404.0, 17433.0], [113.0, 7719.5], [118.0, 0.0], [491.0, 18042.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 841.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.53333333333333, "minX": 1.63046442E12, "maxY": 83.53333333333333, "series": [{"data": [[1.63046442E12, 83.53333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046442E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.63046442E12, "maxY": 67.18333333333334, "series": [{"data": [[1.63046442E12, 67.18333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63046442E12, 8.166666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.63046442E12, 6.85]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.63046442E12, 1.3333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046442E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.35, "minX": 1.63046442E12, "maxY": 67.18333333333334, "series": [{"data": [[1.63046442E12, 16.35]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63046442E12, 67.18333333333334]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046442E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.35, "minX": 1.63046442E12, "maxY": 67.18333333333334, "series": [{"data": [[1.63046442E12, 67.18333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63046442E12, 16.35]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046442E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

