/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 123.0, "minX": 0.0, "maxY": 19012.0, "series": [{"data": [[0.0, 123.0], [0.1, 259.0], [0.2, 374.0], [0.3, 457.0], [0.4, 650.0], [0.5, 674.0], [0.6, 691.0], [0.7, 708.0], [0.8, 740.0], [0.9, 765.0], [1.0, 788.0], [1.1, 830.0], [1.2, 896.0], [1.3, 937.0], [1.4, 955.0], [1.5, 985.0], [1.6, 1012.0], [1.7, 1068.0], [1.8, 1083.0], [1.9, 1122.0], [2.0, 1143.0], [2.1, 1204.0], [2.2, 1227.0], [2.3, 1242.0], [2.4, 1249.0], [2.5, 1258.0], [2.6, 1281.0], [2.7, 1295.0], [2.8, 1314.0], [2.9, 1329.0], [3.0, 1349.0], [3.1, 1355.0], [3.2, 1386.0], [3.3, 1439.0], [3.4, 1454.0], [3.5, 1468.0], [3.6, 1481.0], [3.7, 1490.0], [3.8, 1499.0], [3.9, 1507.0], [4.0, 1519.0], [4.1, 1529.0], [4.2, 1542.0], [4.3, 1558.0], [4.4, 1564.0], [4.5, 1580.0], [4.6, 1598.0], [4.7, 1610.0], [4.8, 1621.0], [4.9, 1630.0], [5.0, 1643.0], [5.1, 1660.0], [5.2, 1672.0], [5.3, 1684.0], [5.4, 1693.0], [5.5, 1700.0], [5.6, 1705.0], [5.7, 1716.0], [5.8, 1742.0], [5.9, 1753.0], [6.0, 1772.0], [6.1, 1784.0], [6.2, 1806.0], [6.3, 1828.0], [6.4, 1833.0], [6.5, 1848.0], [6.6, 1863.0], [6.7, 1868.0], [6.8, 1888.0], [6.9, 1897.0], [7.0, 1906.0], [7.1, 1923.0], [7.2, 1936.0], [7.3, 1938.0], [7.4, 1950.0], [7.5, 1961.0], [7.6, 1969.0], [7.7, 1979.0], [7.8, 1994.0], [7.9, 2021.0], [8.0, 2032.0], [8.1, 2047.0], [8.2, 2057.0], [8.3, 2069.0], [8.4, 2084.0], [8.5, 2091.0], [8.6, 2102.0], [8.7, 2110.0], [8.8, 2117.0], [8.9, 2123.0], [9.0, 2141.0], [9.1, 2154.0], [9.2, 2160.0], [9.3, 2170.0], [9.4, 2186.0], [9.5, 2198.0], [9.6, 2204.0], [9.7, 2211.0], [9.8, 2220.0], [9.9, 2229.0], [10.0, 2243.0], [10.1, 2249.0], [10.2, 2257.0], [10.3, 2265.0], [10.4, 2275.0], [10.5, 2284.0], [10.6, 2292.0], [10.7, 2300.0], [10.8, 2311.0], [10.9, 2315.0], [11.0, 2323.0], [11.1, 2330.0], [11.2, 2347.0], [11.3, 2351.0], [11.4, 2356.0], [11.5, 2357.0], [11.6, 2370.0], [11.7, 2384.0], [11.8, 2397.0], [11.9, 2402.0], [12.0, 2406.0], [12.1, 2419.0], [12.2, 2439.0], [12.3, 2448.0], [12.4, 2469.0], [12.5, 2494.0], [12.6, 2509.0], [12.7, 2527.0], [12.8, 2545.0], [12.9, 2549.0], [13.0, 2561.0], [13.1, 2570.0], [13.2, 2576.0], [13.3, 2582.0], [13.4, 2593.0], [13.5, 2597.0], [13.6, 2601.0], [13.7, 2612.0], [13.8, 2624.0], [13.9, 2634.0], [14.0, 2639.0], [14.1, 2663.0], [14.2, 2680.0], [14.3, 2685.0], [14.4, 2692.0], [14.5, 2697.0], [14.6, 2700.0], [14.7, 2709.0], [14.8, 2722.0], [14.9, 2736.0], [15.0, 2752.0], [15.1, 2783.0], [15.2, 2798.0], [15.3, 2817.0], [15.4, 2827.0], [15.5, 2838.0], [15.6, 2850.0], [15.7, 2868.0], [15.8, 2885.0], [15.9, 2894.0], [16.0, 2897.0], [16.1, 2909.0], [16.2, 2927.0], [16.3, 2945.0], [16.4, 2952.0], [16.5, 2962.0], [16.6, 2974.0], [16.7, 2981.0], [16.8, 2991.0], [16.9, 3014.0], [17.0, 3018.0], [17.1, 3020.0], [17.2, 3030.0], [17.3, 3044.0], [17.4, 3053.0], [17.5, 3064.0], [17.6, 3075.0], [17.7, 3105.0], [17.8, 3128.0], [17.9, 3146.0], [18.0, 3151.0], [18.1, 3159.0], [18.2, 3188.0], [18.3, 3201.0], [18.4, 3208.0], [18.5, 3217.0], [18.6, 3227.0], [18.7, 3239.0], [18.8, 3258.0], [18.9, 3267.0], [19.0, 3272.0], [19.1, 3280.0], [19.2, 3287.0], [19.3, 3291.0], [19.4, 3306.0], [19.5, 3313.0], [19.6, 3327.0], [19.7, 3361.0], [19.8, 3366.0], [19.9, 3385.0], [20.0, 3390.0], [20.1, 3399.0], [20.2, 3410.0], [20.3, 3413.0], [20.4, 3416.0], [20.5, 3421.0], [20.6, 3428.0], [20.7, 3430.0], [20.8, 3444.0], [20.9, 3457.0], [21.0, 3466.0], [21.1, 3484.0], [21.2, 3505.0], [21.3, 3541.0], [21.4, 3572.0], [21.5, 3588.0], [21.6, 3593.0], [21.7, 3623.0], [21.8, 3646.0], [21.9, 3655.0], [22.0, 3671.0], [22.1, 3685.0], [22.2, 3692.0], [22.3, 3709.0], [22.4, 3715.0], [22.5, 3720.0], [22.6, 3724.0], [22.7, 3727.0], [22.8, 3730.0], [22.9, 3734.0], [23.0, 3737.0], [23.1, 3740.0], [23.2, 3752.0], [23.3, 3760.0], [23.4, 3764.0], [23.5, 3775.0], [23.6, 3781.0], [23.7, 3783.0], [23.8, 3786.0], [23.9, 3788.0], [24.0, 3793.0], [24.1, 3797.0], [24.2, 3799.0], [24.3, 3804.0], [24.4, 3809.0], [24.5, 3824.0], [24.6, 3842.0], [24.7, 3857.0], [24.8, 3865.0], [24.9, 3891.0], [25.0, 3911.0], [25.1, 3920.0], [25.2, 3938.0], [25.3, 3960.0], [25.4, 3967.0], [25.5, 3975.0], [25.6, 3980.0], [25.7, 3992.0], [25.8, 4002.0], [25.9, 4012.0], [26.0, 4034.0], [26.1, 4042.0], [26.2, 4052.0], [26.3, 4083.0], [26.4, 4091.0], [26.5, 4102.0], [26.6, 4117.0], [26.7, 4137.0], [26.8, 4154.0], [26.9, 4171.0], [27.0, 4185.0], [27.1, 4196.0], [27.2, 4205.0], [27.3, 4217.0], [27.4, 4232.0], [27.5, 4245.0], [27.6, 4262.0], [27.7, 4278.0], [27.8, 4298.0], [27.9, 4312.0], [28.0, 4327.0], [28.1, 4344.0], [28.2, 4352.0], [28.3, 4361.0], [28.4, 4372.0], [28.5, 4381.0], [28.6, 4400.0], [28.7, 4433.0], [28.8, 4445.0], [28.9, 4468.0], [29.0, 4482.0], [29.1, 4497.0], [29.2, 4508.0], [29.3, 4523.0], [29.4, 4529.0], [29.5, 4560.0], [29.6, 4578.0], [29.7, 4600.0], [29.8, 4616.0], [29.9, 4644.0], [30.0, 4669.0], [30.1, 4681.0], [30.2, 4704.0], [30.3, 4728.0], [30.4, 4735.0], [30.5, 4761.0], [30.6, 4763.0], [30.7, 4774.0], [30.8, 4795.0], [30.9, 4818.0], [31.0, 4833.0], [31.1, 4852.0], [31.2, 4859.0], [31.3, 4869.0], [31.4, 4875.0], [31.5, 4890.0], [31.6, 4907.0], [31.7, 4925.0], [31.8, 4938.0], [31.9, 4947.0], [32.0, 4957.0], [32.1, 4984.0], [32.2, 4995.0], [32.3, 5042.0], [32.4, 5067.0], [32.5, 5089.0], [32.6, 5118.0], [32.7, 5159.0], [32.8, 5184.0], [32.9, 5216.0], [33.0, 5236.0], [33.1, 5277.0], [33.2, 5317.0], [33.3, 5346.0], [33.4, 5364.0], [33.5, 5383.0], [33.6, 5411.0], [33.7, 5430.0], [33.8, 5452.0], [33.9, 5466.0], [34.0, 5488.0], [34.1, 5500.0], [34.2, 5528.0], [34.3, 5534.0], [34.4, 5540.0], [34.5, 5564.0], [34.6, 5573.0], [34.7, 5595.0], [34.8, 5623.0], [34.9, 5652.0], [35.0, 5682.0], [35.1, 5735.0], [35.2, 5744.0], [35.3, 5748.0], [35.4, 5783.0], [35.5, 5806.0], [35.6, 5815.0], [35.7, 5858.0], [35.8, 5899.0], [35.9, 5940.0], [36.0, 5955.0], [36.1, 5984.0], [36.2, 6019.0], [36.3, 6044.0], [36.4, 6082.0], [36.5, 6125.0], [36.6, 6158.0], [36.7, 6177.0], [36.8, 6199.0], [36.9, 6224.0], [37.0, 6246.0], [37.1, 6266.0], [37.2, 6275.0], [37.3, 6279.0], [37.4, 6291.0], [37.5, 6305.0], [37.6, 6310.0], [37.7, 6333.0], [37.8, 6338.0], [37.9, 6360.0], [38.0, 6383.0], [38.1, 6390.0], [38.2, 6397.0], [38.3, 6423.0], [38.4, 6425.0], [38.5, 6433.0], [38.6, 6461.0], [38.7, 6469.0], [38.8, 6473.0], [38.9, 6491.0], [39.0, 6501.0], [39.1, 6506.0], [39.2, 6522.0], [39.3, 6532.0], [39.4, 6540.0], [39.5, 6555.0], [39.6, 6559.0], [39.7, 6569.0], [39.8, 6596.0], [39.9, 6628.0], [40.0, 6648.0], [40.1, 6676.0], [40.2, 6680.0], [40.3, 6694.0], [40.4, 6708.0], [40.5, 6721.0], [40.6, 6748.0], [40.7, 6788.0], [40.8, 6797.0], [40.9, 6805.0], [41.0, 6813.0], [41.1, 6820.0], [41.2, 6829.0], [41.3, 6832.0], [41.4, 6837.0], [41.5, 6840.0], [41.6, 6845.0], [41.7, 6849.0], [41.8, 6854.0], [41.9, 6875.0], [42.0, 6884.0], [42.1, 6887.0], [42.2, 6892.0], [42.3, 6897.0], [42.4, 6923.0], [42.5, 6945.0], [42.6, 6949.0], [42.7, 6960.0], [42.8, 6987.0], [42.9, 7004.0], [43.0, 7017.0], [43.1, 7043.0], [43.2, 7049.0], [43.3, 7055.0], [43.4, 7059.0], [43.5, 7080.0], [43.6, 7083.0], [43.7, 7099.0], [43.8, 7123.0], [43.9, 7137.0], [44.0, 7152.0], [44.1, 7165.0], [44.2, 7171.0], [44.3, 7177.0], [44.4, 7185.0], [44.5, 7186.0], [44.6, 7190.0], [44.7, 7191.0], [44.8, 7192.0], [44.9, 7194.0], [45.0, 7196.0], [45.1, 7198.0], [45.2, 7201.0], [45.3, 7205.0], [45.4, 7232.0], [45.5, 7243.0], [45.6, 7256.0], [45.7, 7284.0], [45.8, 7291.0], [45.9, 7305.0], [46.0, 7312.0], [46.1, 7324.0], [46.2, 7348.0], [46.3, 7355.0], [46.4, 7357.0], [46.5, 7359.0], [46.6, 7363.0], [46.7, 7370.0], [46.8, 7376.0], [46.9, 7380.0], [47.0, 7382.0], [47.1, 7386.0], [47.2, 7390.0], [47.3, 7391.0], [47.4, 7401.0], [47.5, 7411.0], [47.6, 7423.0], [47.7, 7437.0], [47.8, 7444.0], [47.9, 7447.0], [48.0, 7453.0], [48.1, 7460.0], [48.2, 7470.0], [48.3, 7479.0], [48.4, 7496.0], [48.5, 7516.0], [48.6, 7524.0], [48.7, 7528.0], [48.8, 7537.0], [48.9, 7545.0], [49.0, 7548.0], [49.1, 7564.0], [49.2, 7577.0], [49.3, 7582.0], [49.4, 7587.0], [49.5, 7595.0], [49.6, 7606.0], [49.7, 7614.0], [49.8, 7624.0], [49.9, 7631.0], [50.0, 7640.0], [50.1, 7646.0], [50.2, 7656.0], [50.3, 7663.0], [50.4, 7669.0], [50.5, 7681.0], [50.6, 7688.0], [50.7, 7704.0], [50.8, 7712.0], [50.9, 7732.0], [51.0, 7740.0], [51.1, 7747.0], [51.2, 7750.0], [51.3, 7758.0], [51.4, 7771.0], [51.5, 7784.0], [51.6, 7796.0], [51.7, 7809.0], [51.8, 7819.0], [51.9, 7825.0], [52.0, 7833.0], [52.1, 7839.0], [52.2, 7845.0], [52.3, 7855.0], [52.4, 7863.0], [52.5, 7868.0], [52.6, 7876.0], [52.7, 7892.0], [52.8, 7901.0], [52.9, 7918.0], [53.0, 7923.0], [53.1, 7928.0], [53.2, 7939.0], [53.3, 7952.0], [53.4, 7967.0], [53.5, 7982.0], [53.6, 7998.0], [53.7, 8019.0], [53.8, 8031.0], [53.9, 8043.0], [54.0, 8055.0], [54.1, 8068.0], [54.2, 8076.0], [54.3, 8099.0], [54.4, 8107.0], [54.5, 8134.0], [54.6, 8147.0], [54.7, 8164.0], [54.8, 8176.0], [54.9, 8183.0], [55.0, 8188.0], [55.1, 8206.0], [55.2, 8212.0], [55.3, 8227.0], [55.4, 8247.0], [55.5, 8263.0], [55.6, 8276.0], [55.7, 8285.0], [55.8, 8306.0], [55.9, 8319.0], [56.0, 8329.0], [56.1, 8334.0], [56.2, 8348.0], [56.3, 8360.0], [56.4, 8368.0], [56.5, 8382.0], [56.6, 8388.0], [56.7, 8394.0], [56.8, 8406.0], [56.9, 8409.0], [57.0, 8442.0], [57.1, 8456.0], [57.2, 8461.0], [57.3, 8470.0], [57.4, 8481.0], [57.5, 8493.0], [57.6, 8507.0], [57.7, 8513.0], [57.8, 8523.0], [57.9, 8530.0], [58.0, 8540.0], [58.1, 8555.0], [58.2, 8567.0], [58.3, 8579.0], [58.4, 8589.0], [58.5, 8595.0], [58.6, 8611.0], [58.7, 8626.0], [58.8, 8640.0], [58.9, 8650.0], [59.0, 8663.0], [59.1, 8671.0], [59.2, 8677.0], [59.3, 8682.0], [59.4, 8689.0], [59.5, 8694.0], [59.6, 8704.0], [59.7, 8711.0], [59.8, 8724.0], [59.9, 8734.0], [60.0, 8741.0], [60.1, 8753.0], [60.2, 8760.0], [60.3, 8771.0], [60.4, 8778.0], [60.5, 8782.0], [60.6, 8791.0], [60.7, 8803.0], [60.8, 8807.0], [60.9, 8816.0], [61.0, 8823.0], [61.1, 8845.0], [61.2, 8855.0], [61.3, 8876.0], [61.4, 8883.0], [61.5, 8889.0], [61.6, 8905.0], [61.7, 8911.0], [61.8, 8918.0], [61.9, 8922.0], [62.0, 8939.0], [62.1, 8950.0], [62.2, 8962.0], [62.3, 8973.0], [62.4, 8981.0], [62.5, 8988.0], [62.6, 8994.0], [62.7, 9002.0], [62.8, 9005.0], [62.9, 9016.0], [63.0, 9020.0], [63.1, 9031.0], [63.2, 9034.0], [63.3, 9048.0], [63.4, 9054.0], [63.5, 9064.0], [63.6, 9070.0], [63.7, 9076.0], [63.8, 9083.0], [63.9, 9095.0], [64.0, 9103.0], [64.1, 9114.0], [64.2, 9117.0], [64.3, 9129.0], [64.4, 9143.0], [64.5, 9150.0], [64.6, 9159.0], [64.7, 9164.0], [64.8, 9172.0], [64.9, 9177.0], [65.0, 9184.0], [65.1, 9188.0], [65.2, 9198.0], [65.3, 9210.0], [65.4, 9227.0], [65.5, 9239.0], [65.6, 9244.0], [65.7, 9249.0], [65.8, 9255.0], [65.9, 9257.0], [66.0, 9267.0], [66.1, 9274.0], [66.2, 9278.0], [66.3, 9283.0], [66.4, 9303.0], [66.5, 9311.0], [66.6, 9319.0], [66.7, 9333.0], [66.8, 9346.0], [66.9, 9352.0], [67.0, 9359.0], [67.1, 9366.0], [67.2, 9376.0], [67.3, 9379.0], [67.4, 9386.0], [67.5, 9395.0], [67.6, 9407.0], [67.7, 9420.0], [67.8, 9435.0], [67.9, 9450.0], [68.0, 9461.0], [68.1, 9469.0], [68.2, 9472.0], [68.3, 9479.0], [68.4, 9481.0], [68.5, 9492.0], [68.6, 9507.0], [68.7, 9511.0], [68.8, 9524.0], [68.9, 9529.0], [69.0, 9538.0], [69.1, 9549.0], [69.2, 9560.0], [69.3, 9571.0], [69.4, 9578.0], [69.5, 9583.0], [69.6, 9594.0], [69.7, 9605.0], [69.8, 9614.0], [69.9, 9625.0], [70.0, 9637.0], [70.1, 9645.0], [70.2, 9654.0], [70.3, 9663.0], [70.4, 9680.0], [70.5, 9688.0], [70.6, 9703.0], [70.7, 9715.0], [70.8, 9729.0], [70.9, 9738.0], [71.0, 9751.0], [71.1, 9755.0], [71.2, 9772.0], [71.3, 9787.0], [71.4, 9797.0], [71.5, 9801.0], [71.6, 9820.0], [71.7, 9830.0], [71.8, 9843.0], [71.9, 9871.0], [72.0, 9880.0], [72.1, 9897.0], [72.2, 9908.0], [72.3, 9914.0], [72.4, 9924.0], [72.5, 9936.0], [72.6, 9955.0], [72.7, 9972.0], [72.8, 9981.0], [72.9, 9995.0], [73.0, 10004.0], [73.1, 10020.0], [73.2, 10026.0], [73.3, 10035.0], [73.4, 10040.0], [73.5, 10053.0], [73.6, 10062.0], [73.7, 10077.0], [73.8, 10092.0], [73.9, 10105.0], [74.0, 10118.0], [74.1, 10126.0], [74.2, 10136.0], [74.3, 10150.0], [74.4, 10171.0], [74.5, 10190.0], [74.6, 10199.0], [74.7, 10204.0], [74.8, 10212.0], [74.9, 10225.0], [75.0, 10233.0], [75.1, 10242.0], [75.2, 10264.0], [75.3, 10270.0], [75.4, 10275.0], [75.5, 10283.0], [75.6, 10306.0], [75.7, 10321.0], [75.8, 10329.0], [75.9, 10344.0], [76.0, 10356.0], [76.1, 10370.0], [76.2, 10371.0], [76.3, 10392.0], [76.4, 10401.0], [76.5, 10414.0], [76.6, 10430.0], [76.7, 10446.0], [76.8, 10448.0], [76.9, 10455.0], [77.0, 10466.0], [77.1, 10479.0], [77.2, 10495.0], [77.3, 10506.0], [77.4, 10517.0], [77.5, 10523.0], [77.6, 10533.0], [77.7, 10555.0], [77.8, 10565.0], [77.9, 10572.0], [78.0, 10582.0], [78.1, 10597.0], [78.2, 10612.0], [78.3, 10627.0], [78.4, 10645.0], [78.5, 10670.0], [78.6, 10684.0], [78.7, 10690.0], [78.8, 10715.0], [78.9, 10723.0], [79.0, 10752.0], [79.1, 10789.0], [79.2, 10800.0], [79.3, 10816.0], [79.4, 10839.0], [79.5, 10844.0], [79.6, 10850.0], [79.7, 10896.0], [79.8, 10902.0], [79.9, 10933.0], [80.0, 10972.0], [80.1, 11015.0], [80.2, 11048.0], [80.3, 11064.0], [80.4, 11083.0], [80.5, 11091.0], [80.6, 11104.0], [80.7, 11121.0], [80.8, 11142.0], [80.9, 11171.0], [81.0, 11197.0], [81.1, 11214.0], [81.2, 11240.0], [81.3, 11246.0], [81.4, 11263.0], [81.5, 11289.0], [81.6, 11320.0], [81.7, 11360.0], [81.8, 11375.0], [81.9, 11393.0], [82.0, 11403.0], [82.1, 11422.0], [82.2, 11458.0], [82.3, 11466.0], [82.4, 11485.0], [82.5, 11497.0], [82.6, 11510.0], [82.7, 11523.0], [82.8, 11533.0], [82.9, 11546.0], [83.0, 11553.0], [83.1, 11561.0], [83.2, 11572.0], [83.3, 11585.0], [83.4, 11602.0], [83.5, 11615.0], [83.6, 11623.0], [83.7, 11628.0], [83.8, 11642.0], [83.9, 11651.0], [84.0, 11665.0], [84.1, 11675.0], [84.2, 11684.0], [84.3, 11701.0], [84.4, 11717.0], [84.5, 11734.0], [84.6, 11755.0], [84.7, 11762.0], [84.8, 11767.0], [84.9, 11783.0], [85.0, 11798.0], [85.1, 11811.0], [85.2, 11827.0], [85.3, 11840.0], [85.4, 11847.0], [85.5, 11850.0], [85.6, 11855.0], [85.7, 11859.0], [85.8, 11865.0], [85.9, 11874.0], [86.0, 11886.0], [86.1, 11900.0], [86.2, 11925.0], [86.3, 11933.0], [86.4, 11947.0], [86.5, 11955.0], [86.6, 11956.0], [86.7, 11959.0], [86.8, 11967.0], [86.9, 11973.0], [87.0, 11985.0], [87.1, 11993.0], [87.2, 12004.0], [87.3, 12021.0], [87.4, 12025.0], [87.5, 12031.0], [87.6, 12037.0], [87.7, 12040.0], [87.8, 12055.0], [87.9, 12058.0], [88.0, 12064.0], [88.1, 12077.0], [88.2, 12090.0], [88.3, 12105.0], [88.4, 12117.0], [88.5, 12148.0], [88.6, 12157.0], [88.7, 12176.0], [88.8, 12184.0], [88.9, 12192.0], [89.0, 12204.0], [89.1, 12209.0], [89.2, 12216.0], [89.3, 12221.0], [89.4, 12245.0], [89.5, 12253.0], [89.6, 12262.0], [89.7, 12278.0], [89.8, 12284.0], [89.9, 12294.0], [90.0, 12298.0], [90.1, 12306.0], [90.2, 12315.0], [90.3, 12330.0], [90.4, 12346.0], [90.5, 12350.0], [90.6, 12365.0], [90.7, 12385.0], [90.8, 12396.0], [90.9, 12401.0], [91.0, 12410.0], [91.1, 12415.0], [91.2, 12429.0], [91.3, 12448.0], [91.4, 12452.0], [91.5, 12456.0], [91.6, 12473.0], [91.7, 12481.0], [91.8, 12489.0], [91.9, 12509.0], [92.0, 12520.0], [92.1, 12533.0], [92.2, 12552.0], [92.3, 12560.0], [92.4, 12570.0], [92.5, 12582.0], [92.6, 12591.0], [92.7, 12618.0], [92.8, 12624.0], [92.9, 12631.0], [93.0, 12633.0], [93.1, 12643.0], [93.2, 12654.0], [93.3, 12661.0], [93.4, 12675.0], [93.5, 12693.0], [93.6, 12711.0], [93.7, 12728.0], [93.8, 12768.0], [93.9, 12776.0], [94.0, 12785.0], [94.1, 12802.0], [94.2, 12811.0], [94.3, 12820.0], [94.4, 12835.0], [94.5, 12852.0], [94.6, 12863.0], [94.7, 12898.0], [94.8, 12903.0], [94.9, 12909.0], [95.0, 12911.0], [95.1, 12916.0], [95.2, 12924.0], [95.3, 12937.0], [95.4, 12952.0], [95.5, 12961.0], [95.6, 12964.0], [95.7, 12970.0], [95.8, 12976.0], [95.9, 12984.0], [96.0, 12986.0], [96.1, 12990.0], [96.2, 13001.0], [96.3, 13020.0], [96.4, 13031.0], [96.5, 13038.0], [96.6, 13044.0], [96.7, 13060.0], [96.8, 13065.0], [96.9, 13083.0], [97.0, 13098.0], [97.1, 13101.0], [97.2, 13115.0], [97.3, 13128.0], [97.4, 13143.0], [97.5, 13172.0], [97.6, 13183.0], [97.7, 13194.0], [97.8, 13212.0], [97.9, 13253.0], [98.0, 13276.0], [98.1, 13301.0], [98.2, 13320.0], [98.3, 13335.0], [98.4, 13364.0], [98.5, 13402.0], [98.6, 13416.0], [98.7, 13431.0], [98.8, 13465.0], [98.9, 13481.0], [99.0, 13496.0], [99.1, 13524.0], [99.2, 13555.0], [99.3, 13598.0], [99.4, 13673.0], [99.5, 13913.0], [99.6, 15109.0], [99.7, 18882.0], [99.8, 18899.0], [99.9, 18907.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 99.0, "series": [{"data": [[100.0, 2.0], [200.0, 7.0], [300.0, 4.0], [400.0, 4.0], [500.0, 2.0], [600.0, 14.0], [700.0, 20.0], [800.0, 8.0], [900.0, 18.0], [1000.0, 14.0], [1100.0, 10.0], [1200.0, 33.0], [1300.0, 26.0], [1400.0, 29.0], [1500.0, 41.0], [1600.0, 43.0], [1700.0, 35.0], [1800.0, 36.0], [1900.0, 46.0], [2000.0, 38.0], [2100.0, 49.0], [2200.0, 57.0], [2300.0, 56.0], [2400.0, 37.0], [2500.0, 51.0], [2600.0, 50.0], [2700.0, 32.0], [2800.0, 41.0], [2900.0, 43.0], [3000.0, 39.0], [3100.0, 30.0], [3200.0, 55.0], [3300.0, 38.0], [3400.0, 54.0], [3500.0, 23.0], [3600.0, 29.0], [3700.0, 99.0], [3800.0, 36.0], [3900.0, 42.0], [4000.0, 36.0], [4100.0, 33.0], [4200.0, 35.0], [4300.0, 38.0], [4400.0, 29.0], [4500.0, 25.0], [4600.0, 26.0], [4700.0, 32.0], [4800.0, 37.0], [4900.0, 33.0], [5000.0, 15.0], [5100.0, 15.0], [5200.0, 17.0], [5300.0, 20.0], [5400.0, 27.0], [5500.0, 31.0], [5600.0, 15.0], [5700.0, 22.0], [5800.0, 18.0], [5900.0, 16.0], [6000.0, 15.0], [6100.0, 20.0], [6200.0, 32.0], [6300.0, 38.0], [6400.0, 38.0], [6500.0, 41.0], [6600.0, 25.0], [6700.0, 26.0], [6800.0, 75.0], [6900.0, 28.0], [7000.0, 42.0], [7100.0, 71.0], [7300.0, 75.0], [7200.0, 38.0], [7400.0, 51.0], [7500.0, 58.0], [7600.0, 56.0], [7700.0, 50.0], [7800.0, 56.0], [7900.0, 42.0], [8000.0, 35.0], [8100.0, 36.0], [8200.0, 37.0], [8300.0, 48.0], [8400.0, 42.0], [8500.0, 49.0], [8600.0, 52.0], [8700.0, 53.0], [8800.0, 46.0], [8900.0, 53.0], [9000.0, 65.0], [9100.0, 65.0], [9200.0, 58.0], [9300.0, 59.0], [9400.0, 48.0], [9500.0, 58.0], [9600.0, 45.0], [9700.0, 44.0], [9800.0, 33.0], [9900.0, 43.0], [10000.0, 44.0], [10100.0, 39.0], [10200.0, 49.0], [10300.0, 40.0], [10400.0, 42.0], [10500.0, 44.0], [10600.0, 32.0], [10700.0, 22.0], [10800.0, 27.0], [10900.0, 15.0], [11000.0, 27.0], [11100.0, 23.0], [11200.0, 25.0], [11300.0, 20.0], [11400.0, 29.0], [11500.0, 44.0], [11600.0, 45.0], [11700.0, 38.0], [11800.0, 53.0], [11900.0, 52.0], [12000.0, 56.0], [12100.0, 35.0], [12200.0, 53.0], [12300.0, 43.0], [12400.0, 50.0], [12500.0, 41.0], [12600.0, 42.0], [12700.0, 28.0], [12800.0, 33.0], [12900.0, 72.0], [13000.0, 44.0], [13100.0, 35.0], [13200.0, 17.0], [13300.0, 20.0], [13400.0, 27.0], [13500.0, 14.0], [13600.0, 6.0], [13700.0, 1.0], [13800.0, 1.0], [13900.0, 4.0], [14000.0, 2.0], [15100.0, 1.0], [18400.0, 1.0], [18800.0, 8.0], [18900.0, 9.0], [18500.0, 1.0], [19000.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4762.0, "series": [{"data": [[0.0, 15.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 174.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4762.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 61.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.63068168E12, "maxY": 499.248000000001, "series": [{"data": [[1.63068168E12, 245.42800000000014]], "isOverall": false, "label": "getUsersByPage", "isController": false}, {"data": [[1.63068168E12, 2.5]], "isOverall": false, "label": "sendEmail", "isController": false}, {"data": [[1.63068168E12, 249.27400000000026]], "isOverall": false, "label": "getOtherInfo", "isController": false}, {"data": [[1.63068168E12, 251.4979999999999]], "isOverall": false, "label": "getUserInfoByUserId", "isController": false}, {"data": [[1.63068168E12, 247.7459999999999]], "isOverall": false, "label": "getUserNameById", "isController": false}, {"data": [[1.63068168E12, 245.22800000000007]], "isOverall": false, "label": "followOther", "isController": false}, {"data": [[1.63068168E12, 285.8199999999995]], "isOverall": false, "label": "editUser", "isController": false}, {"data": [[1.63068168E12, 2.5]], "isOverall": false, "label": "reset", "isController": false}, {"data": [[1.63068168E12, 499.248000000001]], "isOverall": false, "label": "login", "isController": false}, {"data": [[1.63068168E12, 251.85600000000025]], "isOverall": false, "label": "getUserByUserId", "isController": false}, {"data": [[1.63068168E12, 2.5]], "isOverall": false, "label": "signup", "isController": false}, {"data": [[1.63068168E12, 244.05000000000018]], "isOverall": false, "label": "unFollowOther", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068168E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 353.0, "minX": 1.0, "maxY": 19012.0, "series": [{"data": [[2.0, 18930.0], [3.0, 18944.0], [4.0, 18504.0], [6.0, 18919.5], [7.0, 18905.0], [9.0, 18903.0], [10.0, 18899.0], [14.0, 18904.0], [17.0, 17498.333333333332], [19.0, 18882.0], [20.0, 18882.0], [21.0, 18878.5], [22.0, 13160.0], [23.0, 13154.0], [24.0, 13653.0], [25.0, 13581.0], [26.0, 13545.0], [27.0, 13543.0], [28.0, 13128.0], [29.0, 13615.0], [35.0, 13100.2], [34.0, 13604.0], [37.0, 13303.0], [38.0, 13083.0], [41.0, 13076.0], [40.0, 13554.5], [42.0, 13076.0], [45.0, 12870.0], [44.0, 13273.0], [51.0, 14043.0], [50.0, 13162.8], [52.0, 13043.0], [55.0, 13027.0], [54.0, 13259.5], [56.0, 13541.0], [59.0, 13169.0], [63.0, 13524.0], [62.0, 13490.333333333334], [66.0, 13001.5], [64.0, 13453.0], [75.0, 13240.5], [73.0, 13461.8], [72.0, 13202.0], [76.0, 12988.0], [83.0, 12811.714285714286], [91.0, 13483.0], [90.0, 13016.42857142857], [94.0, 12976.0], [93.0, 12976.0], [97.0, 13411.0], [96.0, 12970.5], [103.0, 13474.0], [106.0, 12964.5], [104.0, 13055.0], [113.0, 13360.142857142857], [119.0, 12546.333333333334], [120.0, 12859.0], [127.0, 13253.42857142857], [133.0, 13083.333333333334], [130.0, 13186.0], [143.0, 13416.0], [141.0, 13078.333333333334], [138.0, 12841.333333333334], [137.0, 12916.0], [136.0, 13316.0], [150.0, 13409.0], [149.0, 12911.0], [148.0, 12911.0], [147.0, 13410.0], [146.0, 12907.5], [144.0, 13113.0], [159.0, 13090.0], [157.0, 13285.25], [153.0, 12905.0], [152.0, 13606.0], [167.0, 12818.0], [165.0, 12835.0], [164.0, 13181.0], [160.0, 12628.0], [175.0, 13070.142857142857], [174.0, 12815.0], [169.0, 12808.0], [181.0, 13223.0], [179.0, 12802.5], [176.0, 9870.0], [191.0, 12859.666666666666], [188.0, 10500.333333333334], [185.0, 12973.25], [198.0, 12621.5], [196.0, 11918.25], [192.0, 12570.0], [207.0, 12488.0], [206.0, 13211.0], [205.0, 13383.5], [203.0, 12708.0], [201.0, 12726.0], [200.0, 13228.0], [214.0, 12623.0], [212.0, 13194.0], [211.0, 13301.5], [220.0, 13016.333333333334], [217.0, 12998.333333333334], [231.0, 12643.0], [230.0, 12651.5], [226.0, 13159.0], [225.0, 12669.0], [224.0, 13125.75], [239.0, 12636.0], [238.0, 12633.0], [237.0, 12631.0], [236.0, 12632.5], [234.0, 12629.0], [233.0, 12895.0], [247.0, 13598.0], [246.0, 12917.0], [243.0, 12624.0], [242.0, 12620.333333333334], [254.0, 12586.0], [253.0, 13087.0], [252.0, 13576.0], [251.0, 12591.0], [250.0, 13098.0], [249.0, 12591.0], [248.0, 13110.0], [264.0, 12563.5], [268.0, 12208.0], [267.0, 12346.0], [266.0, 9631.0], [265.0, 12567.0], [262.0, 12786.0], [260.0, 13076.0], [259.0, 12575.0], [257.0, 12883.666666666666], [287.0, 12562.5], [283.0, 12018.666666666666], [280.0, 13028.0], [279.0, 13035.0], [278.0, 12466.666666666666], [275.0, 12531.5], [273.0, 12542.0], [272.0, 12795.75], [303.0, 11276.0], [300.0, 12689.333333333334], [294.0, 13483.0], [293.0, 12937.0], [292.0, 12723.0], [290.0, 13000.0], [288.0, 12952.0], [317.0, 12467.0], [316.0, 12311.0], [315.0, 12916.0], [314.0, 12890.0], [312.0, 12475.0], [311.0, 12700.0], [309.0, 12554.0], [335.0, 12032.0], [330.0, 12452.333333333334], [327.0, 11832.5], [323.0, 12584.166666666666], [351.0, 12202.0], [350.0, 12411.0], [349.0, 12783.25], [345.0, 12830.0], [343.0, 12504.6], [338.0, 12434.0], [337.0, 9515.0], [336.0, 12221.0], [367.0, 13183.0], [366.0, 12358.0], [365.0, 12623.0], [363.0, 10619.5], [361.0, 12176.0], [360.0, 12394.5], [356.0, 12700.0], [354.0, 12369.666666666666], [382.0, 13048.0], [383.0, 13142.0], [380.0, 12127.0], [371.0, 12350.666666666666], [368.0, 13183.0], [379.0, 12834.0], [378.0, 12832.0], [377.0, 12940.0], [376.0, 13172.0], [375.0, 12762.0], [373.0, 12348.5], [399.0, 12529.5], [397.0, 10825.0], [395.0, 12279.0], [394.0, 12297.0], [393.0, 12293.5], [391.0, 12407.5], [387.0, 13292.0], [386.0, 12801.0], [384.0, 12858.0], [403.0, 12530.5], [413.0, 12571.0], [415.0, 12158.5], [412.0, 12259.0], [410.0, 12403.5], [408.0, 13111.0], [407.0, 12512.666666666666], [404.0, 9346.0], [401.0, 13269.0], [400.0, 12272.0], [431.0, 12472.6], [426.0, 12216.0], [425.0, 12221.0], [424.0, 12769.0], [423.0, 12119.0], [422.0, 12040.0], [421.0, 12142.5], [419.0, 12548.5], [417.0, 11017.5], [445.0, 12779.6], [440.0, 11129.0], [437.0, 12373.5], [436.0, 13040.0], [432.0, 12218.0], [461.0, 9260.0], [462.0, 12181.0], [460.0, 13082.0], [458.0, 10939.0], [456.0, 12063.0], [455.0, 11987.0], [454.0, 13115.0], [453.0, 9265.0], [452.0, 12002.0], [477.0, 12154.0], [476.0, 11441.333333333334], [473.0, 10385.5], [471.0, 12472.0], [469.0, 12639.666666666666], [466.0, 9243.0], [464.0, 10566.0], [493.0, 9176.0], [492.0, 12106.0], [491.0, 12109.0], [490.0, 12970.666666666666], [487.0, 12418.0], [485.0, 12724.0], [484.0, 12673.0], [483.0, 12144.0], [509.0, 9144.0], [510.0, 12631.0], [508.0, 10570.0], [506.0, 12634.0], [505.0, 11165.0], [502.0, 10535.5], [500.0, 11988.5], [498.0, 12571.0], [496.0, 11968.666666666666], [538.0, 11973.0], [542.0, 11795.0], [536.0, 10505.5], [534.0, 12464.0], [530.0, 11956.0], [528.0, 12988.0], [520.0, 11962.0], [514.0, 13014.5], [512.0, 12061.0], [574.0, 12458.0], [572.0, 9935.666666666666], [568.0, 10858.0], [564.0, 11930.0], [562.0, 12492.0], [554.0, 11641.0], [548.0, 12378.0], [546.0, 12820.0], [582.0, 12439.0], [606.0, 12683.0], [600.0, 11750.0], [596.0, 11241.0], [592.0, 12370.0], [590.0, 11684.0], [588.0, 12253.5], [580.0, 12714.0], [576.0, 12660.5], [636.0, 12291.0], [632.0, 12403.333333333334], [628.0, 12008.5], [626.0, 12291.0], [622.0, 11884.625], [616.0, 8918.0], [614.0, 12292.5], [612.0, 12820.0], [670.0, 12306.0], [668.0, 12087.0], [664.0, 12172.5], [662.0, 11556.0], [652.0, 12019.833333333332], [646.0, 12310.0], [640.0, 11952.25], [676.0, 11718.0], [702.0, 11554.0], [696.0, 11243.0], [686.0, 8780.0], [684.0, 12245.0], [680.0, 11700.0], [678.0, 12279.0], [674.0, 12296.0], [672.0, 12590.0], [732.0, 11756.5], [730.0, 12555.0], [726.0, 12558.0], [724.0, 11412.0], [720.0, 12055.5], [718.0, 11528.0], [712.0, 12243.5], [708.0, 11452.0], [742.0, 12117.0], [754.0, 12065.0], [756.0, 12058.0], [752.0, 11416.0], [750.0, 12079.0], [748.0, 12509.0], [746.0, 12520.0], [744.0, 12473.0], [740.0, 11377.0], [738.0, 10925.666666666666], [794.0, 10171.5], [796.0, 11957.0], [792.0, 11615.5], [790.0, 11320.0], [788.0, 10196.0], [786.0, 11788.333333333334], [778.0, 12450.0], [776.0, 11389.0], [774.0, 12033.0], [768.0, 12025.0], [830.0, 10082.5], [828.0, 11425.333333333334], [820.0, 11910.0], [818.0, 8490.0], [814.0, 8357.0], [812.0, 11973.0], [810.0, 10957.333333333334], [800.0, 9837.5], [838.0, 11851.0], [862.0, 11850.0], [860.0, 11853.0], [858.0, 11033.6], [846.0, 10922.75], [842.0, 12229.5], [840.0, 9770.0], [836.0, 10482.666666666666], [832.0, 11879.5], [878.0, 11798.0], [876.0, 10755.0], [870.0, 11798.0], [868.0, 11952.5], [864.0, 8212.0], [902.0, 11104.0], [924.0, 11970.0], [920.0, 11688.0], [916.0, 11057.0], [910.0, 12148.0], [908.0, 12157.0], [906.0, 11413.0], [904.0, 11041.0], [900.0, 12079.0], [898.0, 11992.8], [956.0, 11615.0], [958.0, 11248.333333333334], [952.0, 11933.0], [950.0, 11624.0], [942.0, 8050.0], [940.0, 11631.0], [936.0, 11084.0], [930.0, 10162.0], [928.0, 11405.666666666666], [988.0, 11523.0], [986.0, 10689.75], [982.0, 10908.0], [978.0, 11759.0], [976.0, 8099.0], [974.0, 11546.0], [970.0, 11566.0], [968.0, 11557.0], [966.0, 11559.0], [960.0, 11602.0], [1022.0, 10849.0], [1018.0, 9485.5], [1012.0, 11243.333333333334], [1006.0, 10450.25], [1002.0, 7925.0], [1000.0, 10873.0], [998.0, 10887.0], [992.0, 10120.333333333334], [1076.0, 11365.5], [1080.0, 11318.0], [1072.0, 11135.5], [1036.0, 11312.0], [1024.0, 9833.0], [1068.0, 11093.5], [1064.0, 10629.0], [1060.0, 7966.0], [1052.0, 10688.0], [1048.0, 11112.0], [1040.0, 11139.0], [1144.0, 11423.0], [1148.0, 9653.5], [1140.0, 11240.0], [1136.0, 10922.333333333334], [1132.0, 10575.0], [1128.0, 10414.0], [1124.0, 7622.0], [1120.0, 11203.0], [1112.0, 9477.0], [1100.0, 7821.0], [1096.0, 10658.0], [1188.0, 11498.5], [1196.0, 11152.0], [1164.0, 11043.333333333334], [1176.0, 9076.5], [1172.0, 10488.0], [1168.0, 10807.0], [1156.0, 9180.4], [1268.0, 10207.0], [1264.0, 8859.0], [1276.0, 7485.0], [1248.0, 8981.5], [1252.0, 7631.0], [1272.0, 10275.0], [1220.0, 10403.0], [1244.0, 10329.5], [1240.0, 7479.5], [1236.0, 8950.0], [1232.0, 9326.0], [1260.0, 8956.5], [1256.0, 10233.0], [1332.0, 11163.0], [1324.0, 9435.0], [1316.0, 10735.0], [1312.0, 7438.0], [1280.0, 7358.0], [1400.0, 9946.0], [1384.0, 9238.0], [1380.0, 10023.0], [1404.0, 9917.0], [1396.0, 9872.0], [1392.0, 7205.0], [1352.0, 10410.0], [1344.0, 11099.0], [1368.0, 10316.0], [1360.0, 10034.0], [1468.0, 10522.0], [1448.0, 9841.0], [1420.0, 8710.5], [1416.0, 10452.0], [1412.0, 10462.0], [1408.0, 9926.0], [1432.0, 10440.0], [1452.0, 9837.0], [1440.0, 8367.5], [1528.0, 10211.0], [1520.0, 9687.0], [1472.0, 10496.0], [1500.0, 9718.0], [1548.0, 9626.0], [1584.0, 6854.0], [1588.0, 9875.0], [1580.0, 10331.666666666666], [1540.0, 10532.0], [1564.0, 9635.0], [1560.0, 9501.0], [1556.0, 10321.0], [1552.0, 9508.5], [1608.0, 10533.0], [1648.0, 10148.5], [1660.0, 9777.0], [1656.0, 9287.0], [1604.0, 9274.0], [1612.0, 9413.0], [1628.0, 10123.0], [1624.0, 9447.0], [1620.0, 9415.0], [1616.0, 10191.0], [1644.0, 10124.0], [1640.0, 6294.0], [1636.0, 10500.0], [1676.0, 9332.0], [1712.0, 9199.0], [1672.0, 10046.0], [1668.0, 9364.0], [1708.0, 10359.0], [1704.0, 10012.666666666666], [1696.0, 9707.166666666666], [1680.0, 9636.0], [1784.0, 10022.0], [1776.0, 9104.0], [1788.0, 9279.5], [1760.0, 9836.0], [1728.0, 9983.8], [1740.0, 9936.0], [1756.0, 6269.0], [1752.0, 9602.666666666666], [1848.0, 9010.0], [1796.0, 9584.5], [1808.0, 9804.0], [1832.0, 8430.0], [1828.0, 9104.0], [1824.0, 9005.0], [1912.0, 9555.0], [1916.0, 9472.0], [1908.0, 8876.0], [1884.0, 9594.0], [1860.0, 8980.5], [1876.0, 8855.0], [1896.0, 9790.5], [1968.0, 9537.25], [1980.0, 8663.0], [1932.0, 9278.75], [1928.0, 9367.5], [1924.0, 9188.0], [1920.0, 9730.0], [1964.0, 8778.0], [1960.0, 9372.0], [1952.0, 8811.0], [1944.0, 8808.5], [2020.0, 8469.0], [2036.0, 8097.0], [2024.0, 8207.25], [2012.0, 5794.0], [1984.0, 8816.0], [1988.0, 9242.5], [2008.0, 9162.5], [2000.0, 9212.5], [2152.0, 8367.0], [2168.0, 9033.25], [2104.0, 9452.666666666666], [2088.0, 8526.75], [2080.0, 9250.25], [2136.0, 8724.0], [2128.0, 8851.5], [2112.0, 9178.0], [2296.0, 8633.0], [2248.0, 8043.0], [2280.0, 8627.75], [2224.0, 9345.0], [2216.0, 9109.5], [2256.0, 8440.5], [2240.0, 8571.0], [2384.0, 8641.333333333334], [2416.0, 8417.0], [2392.0, 7431.666666666667], [2376.0, 8463.5], [2352.0, 8698.333333333334], [2312.0, 8718.666666666668], [2304.0, 9092.0], [2528.0, 7466.333333333334], [2544.0, 8030.666666666667], [2456.0, 8360.0], [2432.0, 8492.333333333334], [2504.0, 7546.0], [2480.0, 8275.0], [2472.0, 4599.0], [2464.0, 8115.2], [2672.0, 7792.0], [2632.0, 7841.2], [2584.0, 7511.0], [2576.0, 7648.0], [2592.0, 7784.5], [2792.0, 7367.75], [2744.0, 3849.0], [2728.0, 7519.25], [2768.0, 7858.0], [2896.0, 5933.75], [2904.0, 6459.0], [2888.0, 7529.0], [2880.0, 3554.0], [2816.0, 7337.0], [2840.0, 6998.0], [2872.0, 6547.0], [2952.0, 5260.8], [3192.0, 6500.300613496932], [3320.0, 5337.5], [3280.0, 5806.0], [3312.0, 6224.0], [3304.0, 5796.25], [3200.0, 5873.0], [3248.0, 6880.0], [3240.0, 6931.0], [3288.0, 5832.0], [3440.0, 4997.0], [3400.0, 6478.0], [3416.0, 5305.0], [3448.0, 4930.0], [3432.0, 3568.5], [3424.0, 6266.0], [3328.0, 6526.0], [3336.0, 5620.0], [3352.0, 5591.0], [3384.0, 5616.75], [3376.0, 5010.25], [3368.0, 5850.666666666667], [3360.0, 5833.666666666667], [3568.0, 4343.25], [3520.0, 2931.0], [3528.0, 4528.25], [3536.0, 4818.0], [3544.0, 2469.25], [3576.0, 4771.0], [3560.0, 5346.0], [3456.0, 2084.0], [3504.0, 4844.5], [3488.0, 2081.0], [3688.0, 3772.6666666666665], [3648.0, 4642.0], [3632.0, 4485.333333333333], [3624.0, 3286.0], [3672.0, 5024.0], [3736.0, 5458.0], [3832.0, 4113.0], [3784.0, 5346.0], [3792.0, 4793.0], [3800.0, 3268.6666666666665], [3728.0, 4430.0], [3720.0, 1643.0], [3768.0, 1535.0], [3760.0, 4390.0], [3752.0, 4245.0], [3744.0, 2911.5], [3864.0, 2674.5], [3936.0, 3689.0], [3904.0, 3925.0], [3912.0, 3911.0], [3928.0, 4400.0], [3856.0, 4596.0], [3840.0, 2672.0], [3896.0, 4479.5], [3888.0, 3978.0], [3880.0, 3985.0], [3872.0, 4574.0], [4080.0, 3206.0], [4064.0, 3763.0], [3976.0, 3715.0], [3984.0, 3111.6666666666665], [4000.0, 4326.0], [4304.0, 3205.0], [4096.0, 2717.5], [4400.0, 2428.0], [4384.0, 1251.2666666666667], [4464.0, 2546.4], [4448.0, 1553.5], [4432.0, 1549.6666666666667], [4416.0, 2519.571428571429], [4560.0, 2907.0], [4496.0, 3219.3333333333335], [4528.0, 3155.5], [4480.0, 2700.0], [4145.0, 3233.5], [4241.0, 3287.0], [4113.0, 3711.3333333333335], [4385.0, 353.0], [4465.0, 3200.0], [4449.0, 2701.7599999999998], [4433.0, 2026.9333333333332], [4417.0, 2130.75], [4401.0, 2374.6923076923076], [4545.0, 2877.5], [4481.0, 2450.5], [4497.0, 2771.0], [4529.0, 1887.5], [2161.0, 9182.666666666666], [2169.0, 9511.0], [2145.0, 9236.0], [2065.0, 9212.333333333334], [2057.0, 8602.0], [2049.0, 9215.333333333332], [2121.0, 9039.75], [2105.0, 9182.0], [2297.0, 8677.0], [2289.0, 8614.0], [2265.0, 8722.0], [2233.0, 8570.0], [2185.0, 9019.5], [2225.0, 9352.0], [2417.0, 8886.0], [2409.0, 8608.5], [2353.0, 8527.0], [2345.0, 8497.0], [2337.0, 8496.8], [2377.0, 7786.0], [2553.0, 7523.8], [2529.0, 7495.0], [2521.0, 8286.2], [2505.0, 8209.0], [2481.0, 4570.0], [2457.0, 8307.0], [2449.0, 8164.0], [2433.0, 8825.0], [2681.0, 5866.0], [2665.0, 6432.333333333334], [2633.0, 4178.0], [2585.0, 7984.0], [2569.0, 8052.2], [2601.0, 7378.0], [2801.0, 7127.75], [2769.0, 6816.0], [2777.0, 6371.0], [2809.0, 7006.0], [2793.0, 7407.0], [2785.0, 6547.8], [2713.0, 6173.666666666667], [2689.0, 7661.0], [2833.0, 5453.5], [2825.0, 5188.0], [2913.0, 6545.0], [2817.0, 7305.0], [2873.0, 7596.0], [2865.0, 7221.5], [2889.0, 6576.0], [2881.0, 7210.0], [3305.0, 5672.0], [3321.0, 6539.0], [3265.0, 6682.0], [3281.0, 6680.0], [3289.0, 6270.0], [3297.0, 5418.75], [3225.0, 6383.5], [3209.0, 6811.5], [3201.0, 6487.0], [3433.0, 5581.0], [3441.0, 2139.0], [3393.0, 5207.4], [3409.0, 4791.666666666667], [3425.0, 5089.0], [3329.0, 6346.5], [3337.0, 6133.0], [3345.0, 6263.333333333333], [3353.0, 6628.0], [3361.0, 6095.0], [3417.0, 5908.0], [3561.0, 2054.0], [3465.0, 5184.0], [3505.0, 4352.0], [3497.0, 5452.0], [3697.0, 3546.3333333333335], [3649.0, 5174.0], [3657.0, 5138.0], [3665.0, 5645.0], [3585.0, 2040.0], [3617.0, 5740.0], [3825.0, 4143.666666666667], [3777.0, 1462.0], [3817.0, 4118.5], [3809.0, 3709.6666666666665], [3769.0, 4217.0], [3761.0, 2994.0], [3753.0, 4925.0], [3953.0, 3725.0], [3913.0, 3829.0], [3921.0, 4332.0], [3929.0, 3777.0], [3937.0, 3763.0], [3849.0, 2625.5], [3897.0, 3863.0], [3889.0, 4869.0], [3873.0, 1294.0], [4065.0, 3760.0], [4081.0, 1012.0], [4073.0, 2521.0], [4033.0, 3731.0], [4057.0, 3778.5], [3969.0, 3804.0], [3977.0, 3714.0], [3993.0, 4857.0], [4025.0, 3734.0], [4009.0, 3790.0], [4242.0, 3231.0], [4338.0, 3244.0], [4114.0, 4380.0], [4402.0, 2106.3125], [4466.0, 3766.0], [4450.0, 2462.375], [4434.0, 2243.0], [4418.0, 2035.5294117647059], [4546.0, 2886.0], [4578.0, 2830.6666666666665], [4482.0, 847.0], [4514.0, 3212.25], [4530.0, 2833.0], [4339.0, 2153.0], [4243.0, 3154.0], [4131.0, 4499.0], [4115.0, 1538.0], [4467.0, 3188.0], [4451.0, 2704.5714285714284], [4387.0, 2524.2], [4435.0, 2199.375], [4419.0, 2367.3333333333335], [4403.0, 3102.5], [4579.0, 3410.166666666667], [4483.0, 2642.833333333333], [4515.0, 1244.0], [1085.0, 9195.0], [1081.0, 10689.0], [1077.0, 7606.0], [1073.0, 7897.0], [1069.0, 10803.0], [1065.0, 7982.0], [1057.0, 10084.0], [1041.0, 10818.0], [1141.0, 11254.0], [1149.0, 11419.0], [1137.0, 7584.0], [1101.0, 11253.0], [1097.0, 10495.0], [1093.0, 10892.75], [1089.0, 9614.5], [1133.0, 7768.0], [1129.0, 10446.0], [1125.0, 10474.0], [1117.0, 9945.666666666666], [1113.0, 7892.0], [1109.0, 7738.5], [1105.0, 10903.0], [1213.0, 9344.0], [1165.0, 11219.0], [1161.0, 10457.5], [1197.0, 10454.0], [1185.0, 9126.5], [1177.0, 7715.0], [1273.0, 7564.0], [1249.0, 7534.0], [1253.0, 7567.0], [1277.0, 11285.0], [1269.0, 7587.0], [1265.0, 11020.0], [1225.0, 9284.666666666666], [1217.0, 7695.0], [1261.0, 11199.0], [1257.0, 11014.0], [1337.0, 10398.0], [1313.0, 10053.0], [1329.0, 8528.0], [1309.0, 7462.0], [1297.0, 10235.0], [1321.0, 8753.0], [1317.0, 7453.0], [1349.0, 8682.5], [1401.0, 7165.0], [1345.0, 11129.0], [1361.0, 7348.0], [1389.0, 10408.0], [1385.0, 10720.0], [1381.0, 10022.0], [1413.0, 10945.0], [1445.0, 10669.333333333334], [1441.0, 10944.0], [1457.0, 7132.5], [1409.0, 10628.0], [1437.0, 9817.5], [1433.0, 9895.0], [1429.0, 10071.666666666666], [1525.0, 10469.5], [1533.0, 9370.4], [1473.0, 9658.0], [1481.0, 10287.333333333334], [1501.0, 9640.0], [1497.0, 10800.0], [1489.0, 10158.2], [1517.0, 10187.75], [1513.0, 9616.0], [1505.0, 8359.5], [1593.0, 8604.333333333334], [1597.0, 9787.5], [1589.0, 10620.0], [1549.0, 9543.0], [1545.0, 10188.5], [1541.0, 9723.0], [1537.0, 10380.25], [1577.0, 9995.0], [1573.0, 8906.0], [1569.0, 10051.666666666666], [1653.0, 8690.666666666666], [1657.0, 10077.0], [1649.0, 9413.0], [1601.0, 10594.0], [1637.0, 9973.0], [1629.0, 9793.0], [1625.0, 10136.0], [1617.0, 9435.0], [1717.0, 9360.0], [1721.0, 10283.0], [1713.0, 10356.0], [1677.0, 10059.0], [1673.0, 9888.0], [1689.0, 9748.0], [1681.0, 10047.0], [1705.0, 10366.0], [1701.0, 9089.4], [1781.0, 9376.6], [1773.0, 10167.0], [1769.0, 9048.0], [1761.0, 9174.0], [1729.0, 10334.0], [1741.0, 9232.0], [1753.0, 10285.0], [1749.0, 9233.0], [1745.0, 9220.0], [1845.0, 9318.666666666666], [1801.0, 10205.0], [1797.0, 10199.0], [1829.0, 9768.0], [1817.0, 9670.75], [1813.0, 9644.8], [1917.0, 8831.0], [1901.0, 8950.5], [1885.0, 9983.0], [1861.0, 10018.0], [1865.0, 8018.0], [1869.0, 9230.0], [1877.0, 9609.0], [1973.0, 9233.0], [1977.0, 9028.0], [1969.0, 9712.0], [1937.0, 9147.5], [1997.0, 9373.0], [1993.0, 8746.0], [2114.0, 9109.0], [2138.0, 9098.5], [2050.0, 9681.0], [2058.0, 9642.0], [2098.0, 9529.666666666666], [2090.0, 9503.0], [2074.0, 9120.166666666666], [2282.0, 8400.0], [2298.0, 8653.0], [2274.0, 9188.0], [2242.0, 9018.5], [2186.0, 5467.0], [2234.0, 8885.0], [2218.0, 8576.5], [2210.0, 9098.4], [2330.0, 8500.0], [2402.0, 8504.333333333334], [2322.0, 8991.8], [2314.0, 8792.5], [2370.0, 8485.0], [2354.0, 8471.0], [2346.0, 8321.0], [2538.0, 6720.666666666667], [2546.0, 8064.5], [2530.0, 7611.0], [2522.0, 7633.0], [2506.0, 4514.0], [2498.0, 8696.666666666666], [2482.0, 8244.0], [2466.0, 8718.0], [2658.0, 4172.0], [2674.0, 5636.5], [2586.0, 7435.0], [2578.0, 8005.0], [2562.0, 7583.0], [2610.0, 7339.666666666667], [2594.0, 6095.5], [2770.0, 3845.0], [2810.0, 6679.0], [2778.0, 7919.0], [2754.0, 3856.6666666666665], [2698.0, 5827.5], [2738.0, 7494.0], [2730.0, 7522.5], [2882.0, 3718.0], [2898.0, 6800.5], [2818.0, 7331.0], [2834.0, 7764.0], [2866.0, 7585.0], [2954.0, 7111.0], [3186.0, 6508.0], [3122.0, 7556.0], [3298.0, 6607.0], [3274.0, 6551.25], [3282.0, 6676.0], [3218.0, 5600.0], [3258.0, 6708.0], [3234.0, 6553.5], [3442.0, 5564.0], [3450.0, 4989.0], [3402.0, 3628.5], [3410.0, 5988.0], [3418.0, 2514.0], [3434.0, 5048.0], [3426.0, 5074.0], [3330.0, 6158.0], [3338.0, 2245.0], [3346.0, 5564.0], [3386.0, 6219.5], [3378.0, 3813.0], [3370.0, 6237.5], [3554.0, 5061.0], [3578.0, 3356.0], [3522.0, 5156.0], [3538.0, 3724.6666666666665], [3458.0, 3727.8333333333335], [3474.0, 4875.0], [3466.0, 4830.0], [3514.0, 4606.4], [3490.0, 5463.0], [3698.0, 5580.0], [3586.0, 3812.3333333333335], [3594.0, 3703.6], [3634.0, 4875.5], [3666.0, 4855.0], [3810.0, 4236.0], [3834.0, 2636.0], [3794.0, 4810.5], [3802.0, 1443.0], [3818.0, 5229.0], [3738.0, 2947.5], [3730.0, 3010.5], [3722.0, 3043.5], [3754.0, 4371.0], [3746.0, 4262.5], [3954.0, 3758.0], [3914.0, 4600.0], [3906.0, 4403.0], [3922.0, 4334.0], [3930.0, 3865.0], [3962.0, 3758.8], [3866.0, 4539.5], [3858.0, 2617.5], [3850.0, 1240.0], [3842.0, 2629.5], [3882.0, 3861.0], [3874.0, 3984.0], [4090.0, 3660.0], [4082.0, 3715.0], [4042.0, 3462.9], [4074.0, 3739.0], [3970.0, 4045.5], [3978.0, 3819.2], [4002.0, 3771.0], [4116.0, 3403.0], [4388.0, 2346.1470588235284], [4452.0, 2364.8888888888887], [4436.0, 2436.6], [4420.0, 2243.0], [4404.0, 2423.0], [4548.0, 3131.0], [4580.0, 1958.0], [4516.0, 2307.3333333333335], [4484.0, 2680.0], [4149.0, 3640.0], [4133.0, 3351.0], [4117.0, 4156.0], [4389.0, 1566.1538461538462], [4453.0, 2505.5833333333335], [4437.0, 2112.75], [4421.0, 1731.0], [4405.0, 2244.4285714285716], [4549.0, 3128.0], [4501.0, 887.0], [4485.0, 2470.6666666666665], [2163.0, 9076.5], [2155.0, 9224.0], [2139.0, 9531.0], [2131.0, 9014.666666666666], [2107.0, 8838.5], [2059.0, 8612.0], [2075.0, 9190.0], [2067.0, 9688.0], [2099.0, 9571.0], [2091.0, 9324.0], [2283.0, 9171.0], [2299.0, 7952.0], [2275.0, 9173.0], [2267.0, 8692.0], [2235.0, 8883.0], [2179.0, 8846.0], [2203.0, 9157.0], [2195.0, 8864.714285714284], [2227.0, 8487.5], [2323.0, 8575.0], [2403.0, 7848.0], [2315.0, 8907.0], [2395.0, 8442.0], [2371.0, 8526.666666666666], [2363.0, 7925.75], [2347.0, 8540.0], [2531.0, 8671.0], [2547.0, 7527.0], [2555.0, 7547.0], [2539.0, 7384.0], [2451.0, 7705.0], [2435.0, 8313.0], [2499.0, 7740.0], [2491.0, 8217.8], [2483.0, 8274.0], [2467.0, 8277.0], [2587.0, 4327.0], [2683.0, 7935.5], [2675.0, 7749.0], [2659.0, 7202.0], [2571.0, 8320.5], [2563.0, 8041.0], [2643.0, 7070.857142857143], [2627.0, 6785.0], [2611.0, 7218.0], [2603.0, 6701.0], [2795.0, 7609.5], [2803.0, 7036.5], [2763.0, 5893.8], [2771.0, 7801.0], [2707.0, 7302.5], [2691.0, 7106.333333333333], [2739.0, 7899.0], [2731.0, 8098.0], [2915.0, 6758.25], [2899.0, 7594.0], [2827.0, 7562.5], [2819.0, 6749.0], [2875.0, 5539.5], [2867.0, 7547.0], [2907.0, 7046.333333333333], [2883.0, 6569.0], [2955.0, 6515.5], [3227.0, 6608.5], [3307.0, 4786.5], [3299.0, 6258.0], [3315.0, 4974.666666666667], [3291.0, 4545.0], [3323.0, 4093.0], [3203.0, 5032.0], [3259.0, 6389.666666666667], [3251.0, 5955.333333333333], [3243.0, 6475.0], [3427.0, 5945.0], [3451.0, 2271.0], [3395.0, 6317.5], [3403.0, 5980.0], [3387.0, 6027.0], [3339.0, 6143.0], [3355.0, 4408.0], [3363.0, 3993.0], [3579.0, 4764.0], [3467.0, 5534.0], [3459.0, 6001.0], [3507.0, 4802.0], [3547.0, 4599.0], [3539.0, 5858.0], [3611.0, 4996.25], [3707.0, 3094.5], [3651.0, 3452.5], [3683.0, 3963.0], [3603.0, 5272.0], [3587.0, 1919.0], [3643.0, 3508.8], [3635.0, 4685.0], [3827.0, 4656.0], [3835.0, 4083.0], [3779.0, 4548.25], [3795.0, 4138.0], [3803.0, 4147.0], [3811.0, 5230.0], [3715.0, 4598.5], [3723.0, 4361.0], [3731.0, 4350.0], [3755.0, 4921.0], [3747.0, 1542.0], [3939.0, 2788.3333333333335], [3907.0, 3920.0], [3963.0, 4130.333333333333], [3915.0, 3806.0], [3923.0, 3800.5], [3931.0, 3300.0], [3867.0, 4038.0], [3851.0, 4004.0], [3899.0, 2498.0], [3891.0, 3961.0], [3875.0, 3967.0], [4075.0, 4461.0], [4083.0, 4741.0], [4067.0, 3728.5], [3987.0, 3427.6666666666665], [3995.0, 3661.0], [4019.0, 4852.0], [4003.0, 3344.571428571429], [4150.0, 3374.0], [4342.0, 3214.0], [4246.0, 3640.5], [4134.0, 3453.0], [4118.0, 3456.0], [4406.0, 3046.0], [4470.0, 1735.5], [4454.0, 2625.625], [4438.0, 2100.0], [4422.0, 1581.3333333333333], [4390.0, 1665.0], [4550.0, 1202.0], [4566.0, 2664.625], [4582.0, 3101.0], [4534.0, 985.5], [4486.0, 2747.0], [4343.0, 3357.0], [4295.0, 3831.5], [4247.0, 2225.0], [4151.0, 3370.0], [4135.0, 3763.0], [4103.0, 3389.875], [4391.0, 2384.5], [4471.0, 2463.5], [4359.0, 1349.0], [4455.0, 2571.166666666667], [4439.0, 2075.0], [4407.0, 1718.5], [4583.0, 2993.0], [4503.0, 2576.0], [4487.0, 2572.0], [541.0, 12098.666666666666], [537.0, 12575.0], [533.0, 11970.666666666666], [529.0, 12548.0], [527.0, 11408.0], [519.0, 11951.75], [515.0, 11859.0], [573.0, 8983.0], [569.0, 12330.0], [565.0, 9017.0], [563.0, 11715.0], [561.0, 10372.5], [559.0, 12217.2], [551.0, 12392.0], [549.0, 11959.0], [545.0, 12365.333333333334], [607.0, 11141.0], [605.0, 12456.0], [603.0, 12131.5], [583.0, 12852.0], [581.0, 8951.0], [579.0, 12299.0], [577.0, 8986.0], [629.0, 8911.0], [623.0, 11750.0], [613.0, 12108.0], [611.0, 12467.0], [671.0, 12297.0], [669.0, 12302.0], [665.0, 11636.0], [659.0, 12240.333333333332], [653.0, 12321.0], [645.0, 11761.5], [643.0, 11871.0], [679.0, 8806.0], [699.0, 10469.5], [701.0, 11825.0], [697.0, 12262.0], [677.0, 12572.0], [675.0, 12288.0], [673.0, 12664.0], [691.0, 12429.0], [689.0, 12122.5], [687.0, 11586.0], [685.0, 8774.0], [683.0, 10514.0], [681.0, 12625.0], [735.0, 11786.0], [729.0, 12158.0], [727.0, 12187.0], [725.0, 12559.0], [717.0, 10761.5], [713.0, 8718.0], [707.0, 12002.2], [743.0, 12088.0], [763.0, 11716.0], [767.0, 11833.25], [761.0, 11651.5], [741.0, 12099.0], [739.0, 12166.0], [759.0, 10693.666666666666], [755.0, 11387.0], [751.0, 11393.0], [749.0, 8628.0], [747.0, 12518.0], [745.0, 12109.0], [799.0, 12315.0], [795.0, 11948.0], [789.0, 12012.0], [783.0, 12004.0], [781.0, 11842.0], [779.0, 12452.0], [777.0, 12010.0], [775.0, 12456.0], [773.0, 11945.8], [825.0, 12009.75], [821.0, 12347.0], [819.0, 11933.0], [817.0, 12148.5], [815.0, 11934.0], [813.0, 11620.5], [807.0, 12079.42857142857], [801.0, 11956.0], [863.0, 11031.0], [861.0, 8394.0], [859.0, 11083.0], [853.0, 11849.5], [851.0, 11851.6], [837.0, 11852.0], [833.0, 11940.0], [891.0, 8184.5], [893.0, 11401.5], [889.0, 11455.0], [887.0, 11584.5], [883.0, 11097.0], [879.0, 11784.0], [877.0, 12243.0], [875.0, 10088.5], [869.0, 12245.0], [923.0, 11671.5], [925.0, 11665.0], [921.0, 12100.0], [901.0, 8170.0], [899.0, 11769.0], [919.0, 11622.5], [917.0, 11696.0], [915.0, 11497.5], [913.0, 11879.5], [911.0, 12028.0], [909.0, 8278.0], [907.0, 11734.0], [953.0, 11802.4], [957.0, 11713.666666666666], [959.0, 11609.0], [955.0, 11628.0], [949.0, 12077.0], [947.0, 11628.0], [939.0, 11655.0], [931.0, 11015.0], [935.0, 11370.0], [933.0, 11524.5], [967.0, 11569.0], [989.0, 11973.0], [987.0, 11846.0], [981.0, 11481.0], [975.0, 11560.0], [973.0, 10446.666666666666], [969.0, 8125.0], [965.0, 11583.0], [961.0, 11572.0], [1021.0, 9935.333333333334], [1009.0, 10351.333333333334], [1001.0, 8064.0], [999.0, 11823.0], [993.0, 11524.0], [1038.0, 9689.0], [1086.0, 7962.0], [1074.0, 11732.0], [1070.0, 10721.0], [1066.0, 7796.0], [1062.0, 11117.5], [1054.0, 9392.5], [1046.0, 9885.0], [1042.0, 10704.0], [1034.0, 10355.25], [1030.0, 11123.0], [1146.0, 9094.0], [1150.0, 7834.0], [1142.0, 10552.0], [1098.0, 10517.0], [1094.0, 7712.0], [1130.0, 11106.0], [1126.0, 11593.0], [1122.0, 9720.0], [1118.0, 11676.0], [1114.0, 10612.0], [1110.0, 7669.0], [1106.0, 11672.0], [1206.0, 9065.000000000002], [1198.0, 10323.0], [1194.0, 10045.166666666668], [1186.0, 10471.0], [1178.0, 7690.0], [1170.0, 9127.0], [1222.0, 9008.0], [1274.0, 10272.0], [1254.0, 7376.0], [1270.0, 11308.0], [1246.0, 11215.5], [1230.0, 8222.75], [1226.0, 10268.0], [1242.0, 9001.0], [1238.0, 9390.0], [1234.0, 7580.5], [1262.0, 10306.0], [1258.0, 10273.0], [1334.0, 9315.5], [1314.0, 10902.0], [1306.0, 10526.333333333334], [1298.0, 7447.0], [1286.0, 8816.5], [1282.0, 8891.0], [1398.0, 8607.0], [1406.0, 10466.0], [1378.0, 9784.5], [1402.0, 11012.0], [1394.0, 9147.5], [1374.0, 9657.0], [1358.0, 10847.5], [1354.0, 10345.0], [1366.0, 8284.25], [1390.0, 7284.0], [1386.0, 11056.0], [1422.0, 10447.0], [1470.0, 8426.5], [1414.0, 9772.0], [1410.0, 9928.0], [1438.0, 9340.0], [1434.0, 9995.0], [1426.0, 10104.75], [1454.0, 10867.0], [1450.0, 10706.5], [1446.0, 10559.0], [1442.0, 9729.0], [1478.0, 7982.666666666667], [1502.0, 10420.0], [1522.0, 9976.0], [1486.0, 9755.0], [1482.0, 9752.0], [1514.0, 10765.5], [1510.0, 9904.333333333334], [1498.0, 8909.0], [1494.0, 8992.666666666666], [1490.0, 9654.0], [1594.0, 10242.0], [1590.0, 9538.0], [1570.0, 9432.0], [1566.0, 9924.0], [1538.0, 10690.0], [1550.0, 10697.0], [1558.0, 10483.0], [1554.0, 9982.0], [1650.0, 10479.0], [1662.0, 10446.0], [1634.0, 9947.0], [1654.0, 10280.0], [1630.0, 10332.0], [1602.0, 10008.5], [1606.0, 10034.0], [1614.0, 10561.0], [1622.0, 9463.0], [1618.0, 9379.0], [1638.0, 10143.0], [1718.0, 9580.5], [1678.0, 9111.0], [1666.0, 9521.75], [1710.0, 9578.0], [1690.0, 10039.0], [1686.0, 9124.666666666666], [1790.0, 9073.5], [1770.0, 9268.0], [1758.0, 9880.0], [1734.0, 9322.8], [1742.0, 9221.0], [1754.0, 10296.0], [1746.0, 9658.333333333334], [1850.0, 9084.5], [1854.0, 8183.666666666667], [1846.0, 8880.0], [1842.0, 9572.333333333334], [1822.0, 9551.75], [1818.0, 9005.0], [1834.0, 9336.0], [1914.0, 9928.0], [1918.0, 9526.0], [1910.0, 9572.0], [1858.0, 8133.666666666667], [1866.0, 10059.0], [1862.0, 9663.0], [1882.0, 9342.666666666666], [1898.0, 9455.5], [1894.0, 8676.333333333334], [1982.0, 9065.5], [1926.0, 7416.0], [1922.0, 9111.5], [1962.0, 8787.5], [1950.0, 9222.5], [1942.0, 8745.8], [1998.0, 8653.0], [2042.0, 9281.0], [2046.0, 9744.0], [2034.0, 9280.0], [2030.0, 7547.5], [1986.0, 9598.0], [1994.0, 8699.0], [2006.0, 9240.5], [2002.0, 9386.5], [2164.0, 8514.0], [2124.0, 9272.0], [2148.0, 8752.5], [2108.0, 9172.0], [2060.0, 8688.0], [2076.0, 9246.0], [2068.0, 8849.5], [2084.0, 8996.5], [2132.0, 9425.0], [2116.0, 8962.5], [2276.0, 8855.5], [2284.0, 8089.0], [2236.0, 9267.0], [2188.0, 8656.5], [2204.0, 9000.0], [2196.0, 9020.0], [2228.0, 8161.0], [2268.0, 8675.2], [2260.0, 8659.0], [2412.0, 6945.333333333333], [2404.0, 8443.0], [2396.0, 7178.666666666667], [2388.0, 7952.75], [2324.0, 9080.0], [2316.0, 8525.0], [2332.0, 8759.0], [2540.0, 8147.0], [2532.0, 7659.0], [2548.0, 8116.0], [2436.0, 8854.0], [2516.0, 7967.0], [2492.0, 8755.0], [2468.0, 8279.0], [2676.0, 7746.0], [2684.0, 4034.0], [2668.0, 7401.666666666667], [2652.0, 6880.142857142857], [2636.0, 6467.0], [2604.0, 7917.0], [2588.0, 7404.0], [2580.0, 6562.0], [2564.0, 7576.0], [2812.0, 7076.0], [2764.0, 7479.0], [2772.0, 6885.0], [2756.0, 6897.5], [2788.0, 7718.666666666667], [2716.0, 7333.5], [2700.0, 5798.0], [2692.0, 4042.0], [2748.0, 5433.0], [2740.0, 6878.0], [2724.0, 5979.4], [2780.0, 7935.5], [2892.0, 5505.666666666667], [2908.0, 6451.0], [2820.0, 6679.0], [2836.0, 5120.0], [2876.0, 6617.0], [2956.0, 6609.0], [3196.0, 7004.75], [3188.0, 6504.0], [3308.0, 6285.0], [3316.0, 6555.0], [3268.0, 6165.2], [3276.0, 6686.0], [3284.0, 6326.0], [3300.0, 5816.0], [3212.0, 6715.0], [3220.0, 6873.0], [3260.0, 5659.0], [3244.0, 6386.0], [3236.0, 6654.5], [3428.0, 5067.0], [3436.0, 5256.0], [3444.0, 3749.0], [3404.0, 6321.0], [3412.0, 5983.5], [3420.0, 6189.0], [3388.0, 6012.0], [3332.0, 4531.5], [3356.0, 5545.0], [3380.0, 3862.0], [3372.0, 5207.5], [3484.0, 4801.625], [3524.0, 5378.0], [3540.0, 4811.0], [3564.0, 3229.666666666667], [3460.0, 4874.0], [3476.0, 4927.666666666667], [3516.0, 5181.0], [3500.0, 2938.6666666666665], [3548.0, 5364.0], [3692.0, 4655.5], [3684.0, 4482.0], [3660.0, 2587.3333333333335], [3604.0, 3929.9999999999995], [3612.0, 1881.0], [3644.0, 1750.0], [3676.0, 4250.5], [3820.0, 4642.0], [3740.0, 3505.5], [3780.0, 1475.0], [3788.0, 3858.25], [3796.0, 4148.0], [3828.0, 5175.0], [3732.0, 4344.0], [3724.0, 4350.0], [3716.0, 1628.0], [3772.0, 4333.0], [3764.0, 2658.0], [3756.0, 4302.0], [3748.0, 1660.0], [3948.0, 3142.0], [3908.0, 3903.0], [3916.0, 4938.0], [3932.0, 3824.0], [3940.0, 3827.0], [3860.0, 3979.5], [3900.0, 3952.0], [3892.0, 3960.0], [3884.0, 2609.0], [3876.0, 3920.0], [4076.0, 3201.0], [4060.0, 4079.0], [4092.0, 4150.0], [3980.0, 4316.5], [4020.0, 4038.166666666667], [4012.0, 3912.625], [4136.0, 3552.0], [4120.0, 2465.0], [4248.0, 3261.0], [4392.0, 821.9444444444445], [4360.0, 2292.0], [4472.0, 2171.0], [4456.0, 2454.0], [4440.0, 2457.0], [4424.0, 2013.0], [4408.0, 2138.75], [4568.0, 3680.5], [4488.0, 2000.25], [4520.0, 2838.0], [4536.0, 2361.75], [4504.0, 2719.454545454546], [4137.0, 3414.0], [4153.0, 2407.0], [4249.0, 3012.25], [4473.0, 3002.5], [4457.0, 2843.0], [4393.0, 1334.875], [4441.0, 2251.75], [4425.0, 2798.5], [4409.0, 2443.375], [4505.0, 1611.0], [4537.0, 2860.3333333333335], [2149.0, 9142.0], [2173.0, 8967.5], [2053.0, 8904.333333333334], [2117.0, 9589.0], [2101.0, 9595.0], [2301.0, 8261.5], [2285.0, 8166.0], [2269.0, 7859.0], [2261.0, 8009.0], [2253.0, 8804.2], [2205.0, 8299.0], [2197.0, 9423.0], [2221.0, 8513.666666666666], [2405.0, 8490.0], [2421.0, 7445.0], [2429.0, 8462.166666666668], [2413.0, 7901.0], [2309.0, 8801.0], [2325.0, 8572.0], [2317.0, 8587.0], [2349.0, 8039.0], [2341.0, 8690.0], [2389.0, 8391.0], [2381.0, 8257.0], [2541.0, 7543.0], [2533.0, 7444.0], [2509.0, 6977.333333333333], [2437.0, 7641.0], [2477.0, 7903.2], [2677.0, 7740.0], [2669.0, 4122.0], [2653.0, 4205.0], [2645.0, 7517.0], [2605.0, 7375.0], [2573.0, 8253.5], [2765.0, 7471.0], [2813.0, 6263.0], [2773.0, 6797.0], [2805.0, 7633.0], [2797.0, 6824.0], [2717.0, 7290.5], [2701.0, 7625.0], [2821.0, 6748.0], [2845.0, 7495.4], [2877.0, 7527.0], [2869.0, 6602.0], [2861.0, 6553.0], [2853.0, 6977.5], [2901.0, 3430.0], [2885.0, 7176.5], [3325.0, 6088.5], [3269.0, 5801.0], [3205.0, 5918.0], [3253.0, 6346.5], [3245.0, 6893.0], [3405.0, 4896.0], [3413.0, 2683.0], [3437.0, 4791.0], [3333.0, 5466.0], [3477.0, 5494.0], [3485.0, 4937.0], [3533.0, 3513.2], [3581.0, 4462.0], [3525.0, 5947.0], [3469.0, 5197.5], [3509.0, 5143.0], [3501.0, 5447.0], [3493.0, 4003.6666666666665], [3549.0, 1494.0], [3653.0, 5075.0], [3661.0, 1693.0], [3693.0, 1700.0], [3589.0, 3981.0], [3645.0, 4574.0], [3629.0, 4238.0], [3621.0, 3605.0], [3677.0, 5124.0], [3829.0, 4132.0], [3781.0, 4270.0], [3789.0, 1462.0], [3797.0, 1405.0], [3837.0, 4081.5], [3821.0, 4189.0], [3813.0, 4170.0], [3717.0, 4497.0], [3725.0, 4324.0], [3733.0, 4397.0], [3757.0, 4299.0], [3749.0, 1541.0], [3941.0, 3732.0], [3909.0, 3932.0], [3957.0, 3802.0], [3917.0, 3807.0], [3925.0, 4321.5], [3861.0, 4019.0], [3853.0, 3147.5], [3901.0, 4990.0], [3885.0, 3976.0], [3877.0, 4540.0], [4045.0, 3783.0], [4061.0, 3708.0], [4093.0, 3693.0], [4069.0, 3747.5], [3989.0, 3589.0], [4029.0, 3655.0], [4021.0, 3781.0], [4154.0, 3330.0], [4122.0, 3965.0], [4106.0, 4002.3333333333335], [4394.0, 1108.3333333333333], [4458.0, 2777.285714285714], [4442.0, 2664.75], [4426.0, 2191.6666666666665], [4410.0, 1977.8], [4506.0, 3137.5], [4538.0, 1908.0], [4490.0, 3285.0], [4155.0, 3306.0], [4107.0, 3465.0], [4251.0, 2765.5], [4459.0, 2293.0], [4443.0, 2917.0], [4427.0, 1685.5], [4395.0, 2296.0], [4587.0, 3060.0], [4539.0, 949.0], [1087.0, 11289.0], [1079.0, 10683.5], [1063.0, 11811.0], [1059.0, 9615.0], [1051.0, 10412.0], [1143.0, 11240.0], [1151.0, 10527.0], [1139.0, 9499.0], [1131.0, 11258.0], [1127.0, 7769.0], [1123.0, 11456.0], [1119.0, 7636.0], [1107.0, 10631.0], [1103.0, 10297.5], [1099.0, 11262.0], [1095.0, 7865.0], [1211.0, 9503.0], [1215.0, 10946.5], [1159.0, 8677.333333333334], [1195.0, 10455.0], [1183.0, 9550.5], [1179.0, 7798.0], [1171.0, 11544.0], [1279.0, 10451.0], [1251.0, 7546.5], [1275.0, 10276.0], [1271.0, 10190.0], [1267.0, 8893.0], [1219.0, 8991.0], [1335.0, 10111.0], [1339.0, 8638.0], [1343.0, 9585.5], [1315.0, 10742.0], [1331.0, 9960.5], [1311.0, 9340.5], [1295.0, 9139.444444444445], [1307.0, 7518.0], [1303.0, 8400.5], [1327.0, 10694.0], [1319.0, 10660.5], [1395.0, 9974.0], [1403.0, 7234.0], [1407.0, 7156.0], [1399.0, 7239.0], [1359.0, 10588.0], [1355.0, 9955.0], [1347.0, 10325.5], [1371.0, 9064.0], [1363.0, 10752.0], [1391.0, 11063.0], [1459.0, 10323.0], [1467.0, 7140.0], [1471.0, 10525.0], [1463.0, 10189.25], [1415.0, 7218.0], [1411.0, 9920.0], [1435.0, 7170.0], [1431.0, 10788.5], [1455.0, 10723.0], [1451.0, 9697.0], [1447.0, 9761.0], [1527.0, 9941.5], [1507.0, 10100.5], [1523.0, 10753.0], [1503.0, 9713.0], [1475.0, 8799.0], [1483.0, 10645.0], [1495.0, 9731.0], [1491.0, 10449.0], [1519.0, 10497.0], [1595.0, 10611.0], [1599.0, 10049.0], [1547.0, 8229.5], [1539.0, 10371.0], [1559.0, 6901.0], [1555.0, 10309.0], [1583.0, 10090.333333333334], [1611.0, 9521.333333333334], [1615.0, 10565.0], [1607.0, 10200.0], [1603.0, 10401.0], [1643.0, 10241.333333333334], [1639.0, 10373.0], [1635.0, 10135.0], [1631.0, 10514.0], [1623.0, 10170.0], [1719.0, 9359.0], [1723.0, 9912.25], [1675.0, 10235.0], [1671.0, 9570.666666666666], [1667.0, 10062.0], [1687.0, 10022.0], [1683.0, 7515.0], [1711.0, 9132.0], [1707.0, 9331.5], [1767.0, 9225.5], [1771.0, 10119.0], [1759.0, 9873.5], [1739.0, 9395.4], [1755.0, 9910.0], [1747.0, 8994.0], [1851.0, 9703.0], [1855.0, 10053.0], [1803.0, 9674.75], [1839.0, 9350.0], [1835.0, 9634.0], [1823.0, 9187.0], [1871.0, 9268.0], [1915.0, 9441.0], [1911.0, 9556.0], [1907.0, 9010.333333333332], [1899.0, 8909.0], [1891.0, 9176.666666666668], [1863.0, 8889.0], [1883.0, 8918.0], [1879.0, 9263.5], [1875.0, 9658.75], [1975.0, 9273.5], [1979.0, 8474.0], [1971.0, 9090.5], [1967.0, 8671.0], [1959.0, 9352.142857142857], [1951.0, 9478.0], [1935.0, 9143.333333333334], [2039.0, 7655.0], [2031.0, 9277.0], [2015.0, 9272.0], [2011.0, 9098.333333333334], [2158.0, 7630.0], [2134.0, 9296.0], [2110.0, 7974.0], [2054.0, 9293.0], [2062.0, 8530.5], [2254.0, 9224.0], [2294.0, 8972.0], [2270.0, 8046.0], [2238.0, 9075.5], [2182.0, 9332.333333333334], [2230.0, 8834.5], [2222.0, 8939.0], [2422.0, 7790.0], [2414.0, 7824.0], [2398.0, 8438.0], [2374.0, 8283.333333333334], [2366.0, 8136.0], [2358.0, 8577.25], [2342.0, 4877.0], [2534.0, 7570.0], [2510.0, 7646.0], [2486.0, 8427.333333333334], [2446.0, 8087.111111111111], [2478.0, 8227.0], [2470.0, 8020.5], [2574.0, 7479.0], [2622.0, 6977.0], [2678.0, 7165.0], [2654.0, 7177.0], [2614.0, 6653.0], [2606.0, 7887.0], [2598.0, 6321.0], [2758.0, 5344.5], [2774.0, 6792.0], [2742.0, 7252.0], [2694.0, 7641.5], [2710.0, 6065.666666666667], [2886.0, 7633.0], [2910.0, 4989.5], [2878.0, 7525.0], [2838.0, 7481.0], [2862.0, 7232.0], [2854.0, 6370.6], [2958.0, 6811.5], [3198.0, 6710.0], [3270.0, 6332.0], [3310.0, 4654.0], [3278.0, 6313.0], [3262.0, 6570.0], [3206.0, 6387.5], [3214.0, 5853.0], [3230.0, 6669.666666666667], [3238.0, 6336.0], [3294.0, 4451.0], [3438.0, 5571.0], [3406.0, 5338.0], [3414.0, 2057.0], [3422.0, 5671.0], [3446.0, 5591.0], [3430.0, 4890.5], [3334.0, 5540.0], [3342.0, 6057.333333333333], [3350.0, 5501.0], [3366.0, 6059.5], [3574.0, 4265.833333333333], [3534.0, 5886.0], [3558.0, 3341.0], [3518.0, 5437.0], [3502.0, 2155.0], [3494.0, 5466.0], [3550.0, 4729.0], [3710.0, 2827.0], [3694.0, 4529.0], [3654.0, 5159.0], [3646.0, 5186.0], [3614.0, 5746.0], [3638.0, 3885.333333333333], [3622.0, 5747.0], [3670.0, 2450.25], [3822.0, 4160.0], [3838.0, 3960.0], [3790.0, 4230.0], [3830.0, 1288.0], [3814.0, 4200.0], [3742.0, 4373.0], [3734.0, 4418.0], [3718.0, 1630.0], [3766.0, 4372.0], [3758.0, 4396.0], [3750.0, 4381.0], [3870.0, 4074.6666666666665], [3926.0, 4546.0], [3910.0, 3923.0], [3934.0, 4127.5], [3862.0, 3953.0], [3854.0, 4072.0], [3894.0, 2580.5], [3886.0, 5034.0], [3878.0, 4003.0], [4078.0, 4189.5], [4094.0, 989.0], [4062.0, 3741.4615384615386], [4086.0, 4031.0], [4070.0, 4312.0], [3998.0, 4951.0], [4030.0, 3775.0], [4014.0, 3275.0], [4140.0, 3366.0], [4348.0, 3220.0], [4156.0, 4089.0], [4124.0, 3460.0], [4252.0, 4478.0], [4396.0, 2370.0], [4460.0, 2656.4545454545455], [4444.0, 2555.714285714286], [4428.0, 2697.0], [4412.0, 1779.8333333333333], [4572.0, 2709.6756756756763], [4492.0, 2704.5], [4524.0, 3159.0], [4125.0, 2484.0], [4109.0, 3930.5], [4445.0, 2390.1428571428573], [4461.0, 3069.0], [4429.0, 1454.0], [4397.0, 3444.0], [4413.0, 2153.3333333333335], [4573.0, 1111.0], [4509.0, 2791.8], [2151.0, 8197.333333333334], [2175.0, 8781.0], [2095.0, 9192.25], [2287.0, 8648.5], [2271.0, 8716.0], [2247.0, 8951.0], [2183.0, 9469.0], [2231.0, 9303.0], [2223.0, 9323.0], [2415.0, 7785.0], [2423.0, 8309.0], [2399.0, 4723.0], [2367.0, 8508.0], [2359.0, 8525.0], [2351.0, 8039.0], [2535.0, 8102.0], [2463.0, 8500.5], [2503.0, 8208.75], [2495.0, 7749.333333333333], [2479.0, 8251.0], [2471.0, 8273.0], [2671.0, 7836.5], [2679.0, 7175.0], [2583.0, 7946.333333333333], [2655.0, 7862.0], [2615.0, 7325.0], [2607.0, 7923.0], [2599.0, 7924.0], [2719.0, 7333.0], [2815.0, 5205.5], [2807.0, 7096.5], [2767.0, 5623.5], [2703.0, 7893.0], [2751.0, 6105.0], [2743.0, 6820.0], [2735.0, 6602.0], [2831.0, 6048.0], [2847.0, 5141.0], [2823.0, 7011.0], [2879.0, 6465.0], [2863.0, 7704.0], [2855.0, 6672.0], [2903.0, 5880.333333333333], [2887.0, 6555.0], [3175.0, 3572.0], [3191.0, 6481.191919191918], [3311.0, 6629.0], [3287.0, 6408.0], [3223.0, 6112.666666666667], [3207.0, 6823.0], [3255.0, 5994.0], [3247.0, 5810.0], [3239.0, 2752.0], [3447.0, 4487.0], [3439.0, 1695.0], [3399.0, 5233.0], [3335.0, 5595.0], [3351.0, 5231.75], [3359.0, 6657.0], [3423.0, 2053.0], [3487.0, 3316.0], [3575.0, 4733.0], [3559.0, 3882.0], [3471.0, 5513.5], [3463.0, 5356.0], [3495.0, 4907.0], [3711.0, 5042.0], [3703.0, 3915.8], [3655.0, 5141.0], [3663.0, 1477.0], [3687.0, 1820.0], [3615.0, 5748.0], [3607.0, 3762.6666666666665], [3647.0, 1794.0], [3679.0, 3173.0], [3831.0, 5169.0], [3783.0, 1545.5], [3815.0, 5216.0], [3775.0, 1533.25], [3719.0, 4494.0], [3727.0, 3021.5], [3735.0, 4278.0], [3767.0, 3585.0], [3751.0, 1554.0], [3911.0, 1196.0], [3927.0, 3783.0], [3871.0, 3915.0], [3855.0, 3975.0], [3847.0, 3441.2], [3903.0, 3887.5], [3887.0, 3979.0], [4079.0, 3720.0], [4063.0, 3722.0], [4087.0, 3708.0], [4071.0, 4322.0], [4031.0, 4166.285714285715], [3991.0, 3753.3333333333335], [4350.0, 4215.0], [4142.0, 2146.3333333333335], [4110.0, 3445.0], [4398.0, 1888.4666666666667], [4446.0, 3041.0], [4462.0, 2858.6666666666665], [4430.0, 2552.0], [4414.0, 2304.964285714286], [4558.0, 2864.571428571429], [4574.0, 2477.0], [4510.0, 2178.0], [4542.0, 2388.428571428571], [4127.0, 3431.0], [4399.0, 2730.6666666666665], [4463.0, 2531.1176470588234], [4383.0, 658.0], [4447.0, 2640.8], [4431.0, 1774.6774193548383], [4415.0, 2070.909090909091], [4575.0, 1974.0], [4511.0, 3150.0], [4527.0, 3130.0], [1.0, 19012.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[2490.1703910614606, 7368.407621707891]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 4587.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 153776.28333333333, "minX": 1.63068168E12, "maxY": 786419.6833333333, "series": [{"data": [[1.63068168E12, 786419.6833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63068168E12, 153776.28333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068168E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7368.407621707891, "minX": 1.63068168E12, "maxY": 7368.407621707891, "series": [{"data": [[1.63068168E12, 7368.407621707891]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068168E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7298.949521149244, "minX": 1.63068168E12, "maxY": 7298.949521149244, "series": [{"data": [[1.63068168E12, 7298.949521149244]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068168E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4457.250598563446, "minX": 1.63068168E12, "maxY": 4457.250598563446, "series": [{"data": [[1.63068168E12, 4457.250598563446]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068168E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 217.0, "minX": 1.63068168E12, "maxY": 19012.0, "series": [{"data": [[1.63068168E12, 19012.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63068168E12, 12310.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63068168E12, 13498.879999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63068168E12, 12914.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63068168E12, 217.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63068168E12, 7688.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068168E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 782.0, "minX": 21.0, "maxY": 18899.0, "series": [{"data": [[540.0, 2278.0], [177.0, 13043.0], [62.0, 782.0], [310.0, 2993.0], [328.0, 4989.0], [21.0, 18899.0], [371.0, 7423.0], [424.0, 11625.5], [447.0, 10190.0], [457.0, 3928.5], [452.0, 6739.0], [456.0, 8690.5], [464.0, 12414.0], [503.0, 9482.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[540.0, 2455.0], [310.0, 3362.0], [457.0, 3722.0], [452.0, 6176.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 540.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 21.0, "maxY": 18899.0, "series": [{"data": [[540.0, 2261.0], [177.0, 12999.0], [62.0, 781.5], [310.0, 2991.0], [328.0, 4988.0], [21.0, 18899.0], [371.0, 7391.0], [424.0, 11605.0], [447.0, 10130.0], [457.0, 3921.5], [452.0, 6713.0], [456.0, 8650.5], [464.0, 12377.5], [503.0, 9451.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[540.0, 0.0], [310.0, 0.0], [457.0, 0.0], [452.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 540.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.53333333333333, "minX": 1.63068168E12, "maxY": 83.53333333333333, "series": [{"data": [[1.63068168E12, 83.53333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068168E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.63068168E12, "maxY": 82.51666666666667, "series": [{"data": [[1.63068168E12, 82.51666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63068168E12, 1.0166666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068168E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.63068168E12, "maxY": 82.51666666666667, "series": [{"data": [[1.63068168E12, 1.0166666666666666]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63068168E12, 82.51666666666667]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068168E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.63068168E12, "maxY": 82.51666666666667, "series": [{"data": [[1.63068168E12, 82.51666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63068168E12, 1.0166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068168E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

