/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "maxY": 1654.0, "series": [{"data": [[0.0, 34.0], [0.1, 37.0], [0.2, 37.0], [0.3, 38.0], [0.4, 39.0], [0.5, 39.0], [0.6, 39.0], [0.7, 40.0], [0.8, 40.0], [0.9, 40.0], [1.0, 40.0], [1.1, 41.0], [1.2, 41.0], [1.3, 41.0], [1.4, 41.0], [1.5, 41.0], [1.6, 42.0], [1.7, 42.0], [1.8, 42.0], [1.9, 42.0], [2.0, 43.0], [2.1, 43.0], [2.2, 43.0], [2.3, 43.0], [2.4, 43.0], [2.5, 44.0], [2.6, 44.0], [2.7, 44.0], [2.8, 44.0], [2.9, 44.0], [3.0, 44.0], [3.1, 44.0], [3.2, 45.0], [3.3, 45.0], [3.4, 45.0], [3.5, 45.0], [3.6, 45.0], [3.7, 45.0], [3.8, 45.0], [3.9, 46.0], [4.0, 46.0], [4.1, 46.0], [4.2, 46.0], [4.3, 46.0], [4.4, 46.0], [4.5, 46.0], [4.6, 47.0], [4.7, 47.0], [4.8, 47.0], [4.9, 47.0], [5.0, 47.0], [5.1, 47.0], [5.2, 47.0], [5.3, 47.0], [5.4, 47.0], [5.5, 48.0], [5.6, 48.0], [5.7, 48.0], [5.8, 48.0], [5.9, 48.0], [6.0, 48.0], [6.1, 48.0], [6.2, 49.0], [6.3, 49.0], [6.4, 49.0], [6.5, 49.0], [6.6, 49.0], [6.7, 49.0], [6.8, 50.0], [6.9, 50.0], [7.0, 50.0], [7.1, 50.0], [7.2, 50.0], [7.3, 50.0], [7.4, 50.0], [7.5, 50.0], [7.6, 50.0], [7.7, 50.0], [7.8, 51.0], [7.9, 51.0], [8.0, 51.0], [8.1, 51.0], [8.2, 51.0], [8.3, 51.0], [8.4, 51.0], [8.5, 52.0], [8.6, 52.0], [8.7, 52.0], [8.8, 52.0], [8.9, 52.0], [9.0, 52.0], [9.1, 52.0], [9.2, 53.0], [9.3, 53.0], [9.4, 53.0], [9.5, 53.0], [9.6, 53.0], [9.7, 53.0], [9.8, 54.0], [9.9, 54.0], [10.0, 54.0], [10.1, 54.0], [10.2, 54.0], [10.3, 54.0], [10.4, 55.0], [10.5, 55.0], [10.6, 55.0], [10.7, 55.0], [10.8, 56.0], [10.9, 56.0], [11.0, 56.0], [11.1, 56.0], [11.2, 56.0], [11.3, 57.0], [11.4, 57.0], [11.5, 57.0], [11.6, 58.0], [11.7, 58.0], [11.8, 58.0], [11.9, 58.0], [12.0, 59.0], [12.1, 59.0], [12.2, 59.0], [12.3, 59.0], [12.4, 60.0], [12.5, 60.0], [12.6, 61.0], [12.7, 61.0], [12.8, 61.0], [12.9, 61.0], [13.0, 62.0], [13.1, 62.0], [13.2, 62.0], [13.3, 63.0], [13.4, 63.0], [13.5, 63.0], [13.6, 64.0], [13.7, 64.0], [13.8, 64.0], [13.9, 64.0], [14.0, 65.0], [14.1, 65.0], [14.2, 65.0], [14.3, 66.0], [14.4, 66.0], [14.5, 66.0], [14.6, 66.0], [14.7, 67.0], [14.8, 67.0], [14.9, 67.0], [15.0, 67.0], [15.1, 68.0], [15.2, 68.0], [15.3, 68.0], [15.4, 68.0], [15.5, 68.0], [15.6, 69.0], [15.7, 69.0], [15.8, 69.0], [15.9, 69.0], [16.0, 70.0], [16.1, 70.0], [16.2, 70.0], [16.3, 70.0], [16.4, 71.0], [16.5, 71.0], [16.6, 71.0], [16.7, 71.0], [16.8, 71.0], [16.9, 72.0], [17.0, 72.0], [17.1, 72.0], [17.2, 72.0], [17.3, 73.0], [17.4, 73.0], [17.5, 73.0], [17.6, 73.0], [17.7, 73.0], [17.8, 74.0], [17.9, 74.0], [18.0, 74.0], [18.1, 75.0], [18.2, 75.0], [18.3, 75.0], [18.4, 75.0], [18.5, 76.0], [18.6, 76.0], [18.7, 76.0], [18.8, 76.0], [18.9, 76.0], [19.0, 76.0], [19.1, 77.0], [19.2, 77.0], [19.3, 77.0], [19.4, 77.0], [19.5, 77.0], [19.6, 77.0], [19.7, 77.0], [19.8, 78.0], [19.9, 78.0], [20.0, 78.0], [20.1, 79.0], [20.2, 79.0], [20.3, 79.0], [20.4, 79.0], [20.5, 80.0], [20.6, 80.0], [20.7, 80.0], [20.8, 80.0], [20.9, 80.0], [21.0, 81.0], [21.1, 81.0], [21.2, 81.0], [21.3, 81.0], [21.4, 81.0], [21.5, 81.0], [21.6, 82.0], [21.7, 82.0], [21.8, 82.0], [21.9, 82.0], [22.0, 83.0], [22.1, 83.0], [22.2, 83.0], [22.3, 83.0], [22.4, 83.0], [22.5, 84.0], [22.6, 84.0], [22.7, 84.0], [22.8, 85.0], [22.9, 85.0], [23.0, 85.0], [23.1, 85.0], [23.2, 85.0], [23.3, 86.0], [23.4, 86.0], [23.5, 86.0], [23.6, 86.0], [23.7, 87.0], [23.8, 87.0], [23.9, 87.0], [24.0, 87.0], [24.1, 88.0], [24.2, 88.0], [24.3, 88.0], [24.4, 88.0], [24.5, 89.0], [24.6, 89.0], [24.7, 89.0], [24.8, 89.0], [24.9, 90.0], [25.0, 90.0], [25.1, 90.0], [25.2, 90.0], [25.3, 91.0], [25.4, 91.0], [25.5, 92.0], [25.6, 92.0], [25.7, 93.0], [25.8, 93.0], [25.9, 93.0], [26.0, 93.0], [26.1, 94.0], [26.2, 94.0], [26.3, 95.0], [26.4, 95.0], [26.5, 95.0], [26.6, 95.0], [26.7, 96.0], [26.8, 96.0], [26.9, 96.0], [27.0, 96.0], [27.1, 97.0], [27.2, 97.0], [27.3, 98.0], [27.4, 98.0], [27.5, 98.0], [27.6, 99.0], [27.7, 99.0], [27.8, 99.0], [27.9, 100.0], [28.0, 100.0], [28.1, 100.0], [28.2, 100.0], [28.3, 101.0], [28.4, 101.0], [28.5, 101.0], [28.6, 101.0], [28.7, 102.0], [28.8, 102.0], [28.9, 103.0], [29.0, 103.0], [29.1, 103.0], [29.2, 103.0], [29.3, 104.0], [29.4, 104.0], [29.5, 105.0], [29.6, 105.0], [29.7, 105.0], [29.8, 106.0], [29.9, 107.0], [30.0, 107.0], [30.1, 107.0], [30.2, 108.0], [30.3, 108.0], [30.4, 108.0], [30.5, 109.0], [30.6, 109.0], [30.7, 110.0], [30.8, 110.0], [30.9, 110.0], [31.0, 110.0], [31.1, 111.0], [31.2, 111.0], [31.3, 112.0], [31.4, 112.0], [31.5, 112.0], [31.6, 113.0], [31.7, 113.0], [31.8, 114.0], [31.9, 114.0], [32.0, 115.0], [32.1, 115.0], [32.2, 116.0], [32.3, 116.0], [32.4, 117.0], [32.5, 117.0], [32.6, 118.0], [32.7, 119.0], [32.8, 120.0], [32.9, 120.0], [33.0, 121.0], [33.1, 121.0], [33.2, 122.0], [33.3, 123.0], [33.4, 123.0], [33.5, 124.0], [33.6, 124.0], [33.7, 125.0], [33.8, 126.0], [33.9, 126.0], [34.0, 127.0], [34.1, 128.0], [34.2, 128.0], [34.3, 129.0], [34.4, 130.0], [34.5, 130.0], [34.6, 131.0], [34.7, 131.0], [34.8, 131.0], [34.9, 133.0], [35.0, 134.0], [35.1, 135.0], [35.2, 136.0], [35.3, 136.0], [35.4, 137.0], [35.5, 138.0], [35.6, 139.0], [35.7, 140.0], [35.8, 140.0], [35.9, 141.0], [36.0, 142.0], [36.1, 143.0], [36.2, 143.0], [36.3, 145.0], [36.4, 146.0], [36.5, 147.0], [36.6, 150.0], [36.7, 151.0], [36.8, 152.0], [36.9, 153.0], [37.0, 154.0], [37.1, 155.0], [37.2, 157.0], [37.3, 158.0], [37.4, 160.0], [37.5, 160.0], [37.6, 161.0], [37.7, 162.0], [37.8, 163.0], [37.9, 163.0], [38.0, 165.0], [38.1, 165.0], [38.2, 167.0], [38.3, 168.0], [38.4, 169.0], [38.5, 170.0], [38.6, 171.0], [38.7, 173.0], [38.8, 173.0], [38.9, 175.0], [39.0, 176.0], [39.1, 176.0], [39.2, 178.0], [39.3, 179.0], [39.4, 181.0], [39.5, 183.0], [39.6, 184.0], [39.7, 185.0], [39.8, 187.0], [39.9, 188.0], [40.0, 189.0], [40.1, 190.0], [40.2, 191.0], [40.3, 193.0], [40.4, 194.0], [40.5, 195.0], [40.6, 197.0], [40.7, 199.0], [40.8, 200.0], [40.9, 201.0], [41.0, 202.0], [41.1, 203.0], [41.2, 204.0], [41.3, 206.0], [41.4, 207.0], [41.5, 208.0], [41.6, 210.0], [41.7, 213.0], [41.8, 213.0], [41.9, 215.0], [42.0, 216.0], [42.1, 217.0], [42.2, 219.0], [42.3, 220.0], [42.4, 221.0], [42.5, 223.0], [42.6, 225.0], [42.7, 226.0], [42.8, 227.0], [42.9, 228.0], [43.0, 230.0], [43.1, 231.0], [43.2, 232.0], [43.3, 233.0], [43.4, 234.0], [43.5, 235.0], [43.6, 236.0], [43.7, 236.0], [43.8, 237.0], [43.9, 238.0], [44.0, 239.0], [44.1, 240.0], [44.2, 241.0], [44.3, 242.0], [44.4, 243.0], [44.5, 243.0], [44.6, 244.0], [44.7, 245.0], [44.8, 246.0], [44.9, 247.0], [45.0, 247.0], [45.1, 248.0], [45.2, 249.0], [45.3, 249.0], [45.4, 250.0], [45.5, 251.0], [45.6, 252.0], [45.7, 253.0], [45.8, 253.0], [45.9, 254.0], [46.0, 254.0], [46.1, 255.0], [46.2, 256.0], [46.3, 256.0], [46.4, 257.0], [46.5, 258.0], [46.6, 259.0], [46.7, 260.0], [46.8, 261.0], [46.9, 263.0], [47.0, 264.0], [47.1, 266.0], [47.2, 269.0], [47.3, 272.0], [47.4, 274.0], [47.5, 277.0], [47.6, 281.0], [47.7, 283.0], [47.8, 284.0], [47.9, 285.0], [48.0, 286.0], [48.1, 288.0], [48.2, 289.0], [48.3, 291.0], [48.4, 292.0], [48.5, 294.0], [48.6, 295.0], [48.7, 296.0], [48.8, 297.0], [48.9, 300.0], [49.0, 302.0], [49.1, 306.0], [49.2, 308.0], [49.3, 311.0], [49.4, 313.0], [49.5, 316.0], [49.6, 317.0], [49.7, 318.0], [49.8, 320.0], [49.9, 323.0], [50.0, 326.0], [50.1, 329.0], [50.2, 331.0], [50.3, 334.0], [50.4, 335.0], [50.5, 338.0], [50.6, 341.0], [50.7, 343.0], [50.8, 344.0], [50.9, 347.0], [51.0, 349.0], [51.1, 352.0], [51.2, 353.0], [51.3, 357.0], [51.4, 359.0], [51.5, 361.0], [51.6, 363.0], [51.7, 363.0], [51.8, 364.0], [51.9, 365.0], [52.0, 367.0], [52.1, 367.0], [52.2, 369.0], [52.3, 370.0], [52.4, 371.0], [52.5, 373.0], [52.6, 374.0], [52.7, 375.0], [52.8, 376.0], [52.9, 377.0], [53.0, 378.0], [53.1, 379.0], [53.2, 380.0], [53.3, 380.0], [53.4, 381.0], [53.5, 382.0], [53.6, 383.0], [53.7, 385.0], [53.8, 386.0], [53.9, 388.0], [54.0, 389.0], [54.1, 390.0], [54.2, 391.0], [54.3, 392.0], [54.4, 393.0], [54.5, 394.0], [54.6, 395.0], [54.7, 396.0], [54.8, 397.0], [54.9, 398.0], [55.0, 399.0], [55.1, 400.0], [55.2, 401.0], [55.3, 402.0], [55.4, 403.0], [55.5, 405.0], [55.6, 405.0], [55.7, 406.0], [55.8, 407.0], [55.9, 407.0], [56.0, 408.0], [56.1, 410.0], [56.2, 410.0], [56.3, 411.0], [56.4, 411.0], [56.5, 412.0], [56.6, 413.0], [56.7, 414.0], [56.8, 415.0], [56.9, 415.0], [57.0, 417.0], [57.1, 419.0], [57.2, 420.0], [57.3, 421.0], [57.4, 423.0], [57.5, 424.0], [57.6, 425.0], [57.7, 428.0], [57.8, 428.0], [57.9, 430.0], [58.0, 434.0], [58.1, 435.0], [58.2, 438.0], [58.3, 442.0], [58.4, 444.0], [58.5, 446.0], [58.6, 447.0], [58.7, 449.0], [58.8, 451.0], [58.9, 452.0], [59.0, 453.0], [59.1, 454.0], [59.2, 455.0], [59.3, 456.0], [59.4, 457.0], [59.5, 457.0], [59.6, 459.0], [59.7, 462.0], [59.8, 464.0], [59.9, 466.0], [60.0, 468.0], [60.1, 473.0], [60.2, 475.0], [60.3, 477.0], [60.4, 479.0], [60.5, 484.0], [60.6, 485.0], [60.7, 487.0], [60.8, 488.0], [60.9, 490.0], [61.0, 491.0], [61.1, 493.0], [61.2, 494.0], [61.3, 496.0], [61.4, 498.0], [61.5, 500.0], [61.6, 500.0], [61.7, 502.0], [61.8, 503.0], [61.9, 504.0], [62.0, 505.0], [62.1, 507.0], [62.2, 507.0], [62.3, 508.0], [62.4, 509.0], [62.5, 510.0], [62.6, 511.0], [62.7, 512.0], [62.8, 514.0], [62.9, 515.0], [63.0, 515.0], [63.1, 518.0], [63.2, 519.0], [63.3, 521.0], [63.4, 523.0], [63.5, 524.0], [63.6, 525.0], [63.7, 526.0], [63.8, 528.0], [63.9, 528.0], [64.0, 529.0], [64.1, 531.0], [64.2, 532.0], [64.3, 534.0], [64.4, 535.0], [64.5, 536.0], [64.6, 537.0], [64.7, 537.0], [64.8, 538.0], [64.9, 539.0], [65.0, 540.0], [65.1, 541.0], [65.2, 542.0], [65.3, 543.0], [65.4, 544.0], [65.5, 545.0], [65.6, 545.0], [65.7, 546.0], [65.8, 547.0], [65.9, 548.0], [66.0, 548.0], [66.1, 549.0], [66.2, 549.0], [66.3, 550.0], [66.4, 550.0], [66.5, 551.0], [66.6, 552.0], [66.7, 553.0], [66.8, 553.0], [66.9, 554.0], [67.0, 555.0], [67.1, 556.0], [67.2, 557.0], [67.3, 558.0], [67.4, 558.0], [67.5, 559.0], [67.6, 560.0], [67.7, 561.0], [67.8, 563.0], [67.9, 566.0], [68.0, 570.0], [68.1, 573.0], [68.2, 579.0], [68.3, 587.0], [68.4, 603.0], [68.5, 607.0], [68.6, 609.0], [68.7, 612.0], [68.8, 614.0], [68.9, 619.0], [69.0, 624.0], [69.1, 628.0], [69.2, 630.0], [69.3, 632.0], [69.4, 633.0], [69.5, 635.0], [69.6, 639.0], [69.7, 641.0], [69.8, 643.0], [69.9, 644.0], [70.0, 646.0], [70.1, 648.0], [70.2, 651.0], [70.3, 652.0], [70.4, 652.0], [70.5, 653.0], [70.6, 654.0], [70.7, 654.0], [70.8, 655.0], [70.9, 657.0], [71.0, 657.0], [71.1, 658.0], [71.2, 659.0], [71.3, 660.0], [71.4, 660.0], [71.5, 661.0], [71.6, 663.0], [71.7, 664.0], [71.8, 667.0], [71.9, 668.0], [72.0, 669.0], [72.1, 671.0], [72.2, 672.0], [72.3, 673.0], [72.4, 674.0], [72.5, 675.0], [72.6, 677.0], [72.7, 678.0], [72.8, 679.0], [72.9, 682.0], [73.0, 683.0], [73.1, 684.0], [73.2, 685.0], [73.3, 687.0], [73.4, 689.0], [73.5, 690.0], [73.6, 691.0], [73.7, 693.0], [73.8, 693.0], [73.9, 694.0], [74.0, 695.0], [74.1, 696.0], [74.2, 697.0], [74.3, 699.0], [74.4, 700.0], [74.5, 701.0], [74.6, 703.0], [74.7, 705.0], [74.8, 705.0], [74.9, 707.0], [75.0, 709.0], [75.1, 711.0], [75.2, 713.0], [75.3, 716.0], [75.4, 717.0], [75.5, 719.0], [75.6, 720.0], [75.7, 721.0], [75.8, 723.0], [75.9, 723.0], [76.0, 725.0], [76.1, 727.0], [76.2, 728.0], [76.3, 731.0], [76.4, 732.0], [76.5, 734.0], [76.6, 735.0], [76.7, 737.0], [76.8, 738.0], [76.9, 740.0], [77.0, 741.0], [77.1, 742.0], [77.2, 743.0], [77.3, 745.0], [77.4, 747.0], [77.5, 748.0], [77.6, 749.0], [77.7, 749.0], [77.8, 751.0], [77.9, 751.0], [78.0, 753.0], [78.1, 754.0], [78.2, 756.0], [78.3, 757.0], [78.4, 761.0], [78.5, 764.0], [78.6, 767.0], [78.7, 773.0], [78.8, 777.0], [78.9, 781.0], [79.0, 783.0], [79.1, 785.0], [79.2, 786.0], [79.3, 786.0], [79.4, 787.0], [79.5, 788.0], [79.6, 789.0], [79.7, 790.0], [79.8, 791.0], [79.9, 793.0], [80.0, 794.0], [80.1, 795.0], [80.2, 795.0], [80.3, 797.0], [80.4, 798.0], [80.5, 799.0], [80.6, 803.0], [80.7, 805.0], [80.8, 808.0], [80.9, 809.0], [81.0, 811.0], [81.1, 812.0], [81.2, 813.0], [81.3, 814.0], [81.4, 815.0], [81.5, 817.0], [81.6, 818.0], [81.7, 819.0], [81.8, 820.0], [81.9, 821.0], [82.0, 822.0], [82.1, 823.0], [82.2, 824.0], [82.3, 825.0], [82.4, 826.0], [82.5, 827.0], [82.6, 828.0], [82.7, 828.0], [82.8, 829.0], [82.9, 830.0], [83.0, 830.0], [83.1, 831.0], [83.2, 831.0], [83.3, 832.0], [83.4, 833.0], [83.5, 833.0], [83.6, 834.0], [83.7, 834.0], [83.8, 835.0], [83.9, 836.0], [84.0, 836.0], [84.1, 837.0], [84.2, 838.0], [84.3, 840.0], [84.4, 841.0], [84.5, 842.0], [84.6, 842.0], [84.7, 843.0], [84.8, 843.0], [84.9, 844.0], [85.0, 845.0], [85.1, 846.0], [85.2, 848.0], [85.3, 849.0], [85.4, 851.0], [85.5, 852.0], [85.6, 853.0], [85.7, 854.0], [85.8, 855.0], [85.9, 855.0], [86.0, 856.0], [86.1, 857.0], [86.2, 858.0], [86.3, 860.0], [86.4, 861.0], [86.5, 863.0], [86.6, 864.0], [86.7, 865.0], [86.8, 866.0], [86.9, 867.0], [87.0, 868.0], [87.1, 869.0], [87.2, 869.0], [87.3, 870.0], [87.4, 870.0], [87.5, 871.0], [87.6, 871.0], [87.7, 871.0], [87.8, 872.0], [87.9, 872.0], [88.0, 872.0], [88.1, 873.0], [88.2, 874.0], [88.3, 874.0], [88.4, 875.0], [88.5, 875.0], [88.6, 875.0], [88.7, 876.0], [88.8, 876.0], [88.9, 877.0], [89.0, 877.0], [89.1, 878.0], [89.2, 878.0], [89.3, 879.0], [89.4, 879.0], [89.5, 880.0], [89.6, 880.0], [89.7, 880.0], [89.8, 881.0], [89.9, 882.0], [90.0, 882.0], [90.1, 882.0], [90.2, 883.0], [90.3, 883.0], [90.4, 884.0], [90.5, 885.0], [90.6, 886.0], [90.7, 887.0], [90.8, 888.0], [90.9, 889.0], [91.0, 890.0], [91.1, 890.0], [91.2, 891.0], [91.3, 892.0], [91.4, 892.0], [91.5, 893.0], [91.6, 895.0], [91.7, 896.0], [91.8, 897.0], [91.9, 898.0], [92.0, 900.0], [92.1, 902.0], [92.2, 903.0], [92.3, 905.0], [92.4, 910.0], [92.5, 912.0], [92.6, 914.0], [92.7, 917.0], [92.8, 923.0], [92.9, 930.0], [93.0, 931.0], [93.1, 933.0], [93.2, 936.0], [93.3, 937.0], [93.4, 939.0], [93.5, 942.0], [93.6, 944.0], [93.7, 949.0], [93.8, 951.0], [93.9, 953.0], [94.0, 956.0], [94.1, 957.0], [94.2, 960.0], [94.3, 961.0], [94.4, 965.0], [94.5, 971.0], [94.6, 978.0], [94.7, 980.0], [94.8, 981.0], [94.9, 982.0], [95.0, 983.0], [95.1, 984.0], [95.2, 985.0], [95.3, 986.0], [95.4, 989.0], [95.5, 993.0], [95.6, 996.0], [95.7, 999.0], [95.8, 1002.0], [95.9, 1010.0], [96.0, 1016.0], [96.1, 1042.0], [96.2, 1055.0], [96.3, 1061.0], [96.4, 1080.0], [96.5, 1096.0], [96.6, 1120.0], [96.7, 1139.0], [96.8, 1153.0], [96.9, 1168.0], [97.0, 1177.0], [97.1, 1180.0], [97.2, 1180.0], [97.3, 1182.0], [97.4, 1184.0], [97.5, 1187.0], [97.6, 1188.0], [97.7, 1188.0], [97.8, 1189.0], [97.9, 1191.0], [98.0, 1193.0], [98.1, 1194.0], [98.2, 1195.0], [98.3, 1198.0], [98.4, 1198.0], [98.5, 1199.0], [98.6, 1201.0], [98.7, 1203.0], [98.8, 1204.0], [98.9, 1206.0], [99.0, 1210.0], [99.1, 1211.0], [99.2, 1214.0], [99.3, 1215.0], [99.4, 1218.0], [99.5, 1224.0], [99.6, 1227.0], [99.7, 1329.0], [99.8, 1416.0], [99.9, 1581.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 1673.0, "series": [{"data": [[0.0, 1673.0], [600.0, 362.0], [700.0, 368.0], [200.0, 486.0], [800.0, 689.0], [900.0, 226.0], [1000.0, 46.0], [1100.0, 119.0], [300.0, 371.0], [1200.0, 71.0], [1300.0, 5.0], [1400.0, 4.0], [1500.0, 5.0], [400.0, 386.0], [1600.0, 4.0], [100.0, 773.0], [500.0, 412.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3697.0, "series": [{"data": [[0.0, 3697.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2294.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 141.7545000000001, "minX": 1.63137126E12, "maxY": 731.845499999999, "series": [{"data": [[1.63137132E12, 141.7545000000001]], "isOverall": false, "label": "deleteWants", "isController": false}, {"data": [[1.63137126E12, 731.845499999999]], "isOverall": false, "label": "checkFavorite", "isController": false}, {"data": [[1.63137132E12, 226.22749999999982]], "isOverall": false, "label": "addWants", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137132E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 1578.5, "series": [{"data": [[2.0, 627.75], [3.0, 307.0], [4.0, 303.0], [5.0, 558.0], [6.0, 554.0], [7.0, 171.5], [8.0, 566.0], [9.0, 217.0], [10.0, 52.0], [11.0, 560.5], [12.0, 567.0], [13.0, 559.0], [14.0, 149.4], [15.0, 550.0], [16.0, 547.0], [17.0, 170.0], [18.0, 52.0], [19.0, 50.0], [21.0, 555.25], [22.0, 183.25], [23.0, 578.0], [24.0, 216.0], [25.0, 215.66666666666666], [26.0, 41.8], [27.0, 185.28571428571428], [28.0, 46.4], [29.0, 717.5], [30.0, 39.0], [31.0, 43.0], [33.0, 121.0], [32.0, 346.8], [34.0, 118.42857142857144], [35.0, 77.13333333333334], [36.0, 42.00000000000001], [37.0, 42.25], [39.0, 72.11764705882354], [38.0, 298.8333333333333], [40.0, 41.0], [41.0, 300.0], [43.0, 126.69230769230768], [42.0, 44.2], [45.0, 100.22222222222223], [44.0, 77.9375], [47.0, 80.5], [46.0, 50.0], [49.0, 74.66666666666666], [48.0, 248.0], [51.0, 110.75], [50.0, 51.06666666666666], [53.0, 239.16666666666663], [52.0, 154.8], [55.0, 122.10256410256412], [54.0, 471.90909090909093], [57.0, 167.79999999999998], [56.0, 248.92857142857144], [59.0, 207.9705882352942], [58.0, 195.90909090909093], [61.0, 343.6896551724136], [60.0, 121.00000000000003], [63.0, 245.9], [62.0, 270.875], [66.0, 879.2333333333333], [65.0, 166.7], [64.0, 241.40000000000003], [67.0, 76.53333333333332], [70.0, 85.69230769230771], [69.0, 81.48], [71.0, 101.3125], [68.0, 82.58333333333333], [72.0, 80.6060606060606], [75.0, 70.73333333333332], [73.0, 79.625], [74.0, 98.60000000000001], [78.0, 139.66666666666666], [79.0, 116.92307692307692], [77.0, 88.23529411764706], [76.0, 144.5], [83.0, 96.22857142857143], [80.0, 113.81818181818181], [82.0, 111.16666666666666], [81.0, 87.33333333333333], [86.0, 107.63157894736844], [87.0, 102.50000000000001], [85.0, 95.12], [84.0, 102.88235294117646], [88.0, 94.41025641025641], [89.0, 159.28571428571428], [91.0, 132.9], [90.0, 542.0], [95.0, 91.4], [93.0, 117.69999999999999], [94.0, 158.25], [92.0, 80.66666666666667], [97.0, 149.30434782608697], [98.0, 119.93333333333334], [96.0, 93.16666666666666], [99.0, 158.11111111111111], [102.0, 200.16666666666666], [103.0, 156.0], [101.0, 127.66666666666666], [100.0, 105.0], [105.0, 574.1176470588235], [107.0, 140.1904761904762], [106.0, 190.0], [104.0, 155.54545454545453], [111.0, 140.52380952380952], [110.0, 173.53333333333333], [108.0, 141.13793103448273], [109.0, 110.30000000000001], [114.0, 142.5], [112.0, 154.44444444444446], [113.0, 154.60000000000002], [115.0, 272.6428571428571], [119.0, 177.16666666666669], [117.0, 248.42857142857144], [116.0, 123.14285714285715], [118.0, 146.0], [123.0, 309.2], [122.0, 319.1428571428571], [120.0, 393.0], [121.0, 251.26666666666665], [126.0, 228.16666666666666], [125.0, 195.33333333333331], [124.0, 280.66666666666663], [127.0, 314.2], [135.0, 950.939393939394], [134.0, 980.0], [130.0, 111.33333333333334], [128.0, 349.6666666666667], [131.0, 434.75], [133.0, 550.0], [132.0, 547.0], [139.0, 908.3599999999999], [137.0, 385.7826086956522], [136.0, 871.1428571428571], [141.0, 250.58333333333334], [140.0, 318.4666666666667], [138.0, 184.11111111111114], [143.0, 199.0], [142.0, 293.125], [151.0, 194.6], [148.0, 287.0], [147.0, 207.66666666666666], [145.0, 182.5], [146.0, 320.1666666666667], [144.0, 278.8181818181818], [150.0, 553.0], [149.0, 637.6666666666666], [159.0, 151.45454545454547], [153.0, 305.4285714285714], [152.0, 191.0], [155.0, 183.8], [154.0, 291.8], [158.0, 378.5], [157.0, 128.0], [156.0, 151.66666666666666], [167.0, 225.27272727272725], [165.0, 207.04999999999998], [162.0, 183.14285714285714], [161.0, 201.5], [166.0, 183.8], [164.0, 157.5], [163.0, 358.7], [160.0, 144.33333333333334], [175.0, 266.6363636363637], [174.0, 257.40740740740745], [173.0, 366.6470588235294], [172.0, 350.34999999999997], [168.0, 212.7142857142857], [170.0, 164.93548387096772], [169.0, 168.89473684210526], [171.0, 159.625], [183.0, 350.77777777777777], [182.0, 327.1111111111111], [181.0, 267.0454545454546], [180.0, 301.8333333333334], [179.0, 276.5588235294117], [178.0, 210.08695652173913], [177.0, 254.51612903225808], [176.0, 175.3823529411765], [187.0, 598.5833333333334], [186.0, 512.0], [185.0, 299.6666666666666], [184.0, 354.375], [189.0, 191.23529411764707], [190.0, 265.7], [188.0, 383.5], [191.0, 272.0], [199.0, 305.3333333333333], [196.0, 244.7058823529412], [197.0, 223.3913043478261], [198.0, 193.59374999999994], [195.0, 109.0], [194.0, 247.88888888888889], [192.0, 160.0], [193.0, 264.57142857142856], [204.0, 327.33333333333337], [203.0, 223.5], [202.0, 511.6521739130434], [201.0, 359.8125], [206.0, 198.70370370370364], [200.0, 225.77777777777777], [207.0, 171.83333333333331], [205.0, 182.92592592592598], [215.0, 320.0], [212.0, 199.8], [213.0, 244.0], [211.0, 245.27777777777777], [208.0, 177.1363636363636], [210.0, 213.62500000000003], [214.0, 295.0], [209.0, 528.0], [223.0, 345.15384615384613], [222.0, 455.5], [221.0, 492.66666666666674], [220.0, 576.5], [219.0, 364.0], [218.0, 432.8333333333333], [217.0, 541.8571428571428], [216.0, 525.0], [230.0, 844.2], [229.0, 632.6], [228.0, 862.0], [226.0, 481.0], [225.0, 493.0], [231.0, 226.4], [227.0, 403.3333333333333], [224.0, 274.0], [238.0, 591.5], [237.0, 257.0], [236.0, 231.4], [235.0, 234.88888888888889], [234.0, 439.0], [233.0, 298.5], [232.0, 224.33333333333334], [239.0, 525.0], [247.0, 194.5], [245.0, 246.14285714285714], [243.0, 215.8], [244.0, 336.0], [246.0, 296.0], [242.0, 528.0], [241.0, 518.0], [240.0, 525.0], [252.0, 303.5833333333333], [251.0, 245.55555555555554], [248.0, 343.83333333333337], [250.0, 376.0], [249.0, 311.6666666666667], [253.0, 283.75], [255.0, 518.0], [254.0, 308.5], [258.0, 449.66666666666663], [266.0, 265.38095238095235], [267.0, 539.5], [265.0, 286.84615384615387], [271.0, 229.41666666666669], [270.0, 338.1], [259.0, 443.5], [268.0, 238.5263157894737], [269.0, 256.5], [264.0, 193.0], [263.0, 392.64285714285717], [262.0, 201.3], [261.0, 631.6666666666666], [260.0, 539.8571428571429], [257.0, 342.77777777777777], [256.0, 849.5], [286.0, 338.8125], [287.0, 362.17647058823525], [285.0, 315.73333333333335], [284.0, 298.66666666666663], [283.0, 285.2857142857142], [281.0, 214.14999999999995], [282.0, 266.43999999999994], [280.0, 248.99999999999997], [279.0, 282.15], [272.0, 224.85000000000002], [274.0, 289.45454545454544], [273.0, 278.30769230769226], [275.0, 269.19999999999993], [277.0, 274.1199999999999], [276.0, 238.11111111111111], [278.0, 297.66666666666663], [289.0, 542.3846153846152], [288.0, 432.87499999999994], [303.0, 253.0], [300.0, 357.5], [302.0, 379.85714285714283], [291.0, 439.6666666666667], [290.0, 383.1666666666667], [299.0, 359.1666666666667], [298.0, 314.75], [297.0, 310.62500000000006], [296.0, 326.3333333333333], [292.0, 266.84210526315786], [294.0, 220.2], [293.0, 281.55555555555554], [295.0, 266.7142857142857], [307.0, 301.33333333333337], [319.0, 366.82608695652175], [312.0, 278.037037037037], [318.0, 270.7272727272728], [316.0, 301.05263157894746], [317.0, 365.3333333333333], [313.0, 299.3529411764706], [314.0, 256.40000000000003], [315.0, 349.8], [309.0, 300.0], [310.0, 381.6875], [311.0, 301.8888888888889], [304.0, 275.0], [306.0, 321.9473684210526], [305.0, 258.15384615384613], [308.0, 392.8181818181818], [323.0, 518.1666666666667], [327.0, 602.4999999999999], [328.0, 546.5], [329.0, 284.8], [331.0, 111.5], [330.0, 332.99999999999994], [335.0, 386.57142857142856], [332.0, 186.5], [334.0, 343.2], [333.0, 298.83333333333337], [326.0, 375.99999999999994], [325.0, 430.0], [324.0, 437.8], [322.0, 361.03999999999996], [321.0, 353.375], [320.0, 361.75], [338.0, 442.0], [336.0, 592.3], [342.0, 467.6666666666667], [343.0, 232.0], [340.0, 369.0], [345.0, 297.1], [344.0, 513.0], [339.0, 325.0666666666667], [348.0, 228.43750000000003], [351.0, 103.0], [350.0, 411.5], [337.0, 331.0], [346.0, 203.66666666666666], [347.0, 426.1], [354.0, 634.5], [358.0, 618.8571428571429], [359.0, 436.0], [353.0, 358.75], [357.0, 284.3333333333333], [356.0, 407.5], [355.0, 404.4], [365.0, 311.3333333333333], [367.0, 333.0], [363.0, 256.0], [362.0, 278.3333333333333], [361.0, 335.5], [366.0, 239.0], [364.0, 343.0], [375.0, 481.57142857142856], [376.0, 604.7272727272727], [373.0, 429.0], [372.0, 452.0909090909092], [368.0, 363.3333333333333], [371.0, 310.6666666666667], [377.0, 297.3], [374.0, 322.0], [370.0, 450.0], [398.0, 411.8], [386.0, 664.6], [385.0, 308.5], [384.0, 369.5], [387.0, 336.3571428571429], [399.0, 370.0], [397.0, 341.0], [396.0, 407.6666666666667], [395.0, 412.0], [394.0, 393.8571428571429], [392.0, 340.3333333333333], [393.0, 387.8333333333333], [390.0, 399.6666666666667], [389.0, 377.0], [388.0, 389.0], [415.0, 677.6666666666666], [409.0, 651.2222222222222], [408.0, 389.25], [405.0, 678.3], [406.0, 458.0], [407.0, 391.6666666666667], [400.0, 345.2], [404.0, 461.5833333333333], [413.0, 417.25], [412.0, 404.2], [410.0, 385.6666666666667], [411.0, 420.0], [421.0, 658.0], [417.0, 422.2307692307692], [440.0, 674.8333333333333], [434.0, 682.4], [433.0, 687.5], [432.0, 672.0], [462.0, 700.5789473684209], [461.0, 723.0], [460.0, 706.5], [469.0, 724.0], [467.0, 646.0], [495.0, 694.1666666666666], [489.0, 704.5555555555555], [488.0, 707.25], [487.0, 708.5], [483.0, 716.3333333333334], [482.0, 724.0], [481.0, 717.0], [511.0, 721.4], [510.0, 701.0], [505.0, 697.75], [501.0, 704.3333333333334], [523.0, 726.1], [522.0, 718.0], [521.0, 722.0], [558.0, 567.1666666666666], [555.0, 383.7777777777778], [560.0, 490.6], [559.0, 584.25], [551.0, 746.5], [557.0, 385.25], [556.0, 490.33333333333337], [554.0, 368.0], [553.0, 666.5], [552.0, 750.0], [565.0, 330.0], [564.0, 848.5], [563.0, 859.0], [562.0, 802.0], [561.0, 796.0], [566.0, 830.5555555555557], [607.0, 515.7142857142857], [606.0, 654.0], [604.0, 417.0], [603.0, 368.0], [605.0, 822.0], [577.0, 837.5], [613.0, 823.0], [608.0, 746.0], [609.0, 598.1111111111111], [639.0, 840.0], [616.0, 834.1999999999999], [615.0, 813.0], [614.0, 806.3333333333334], [612.0, 833.6666666666666], [611.0, 814.1666666666666], [671.0, 848.2777777777778], [670.0, 870.0], [655.0, 852.6250000000001], [644.0, 841.875], [643.0, 847.4], [642.0, 883.6666666666666], [641.0, 832.2], [640.0, 820.0], [697.0, 408.6], [698.0, 467.952380952381], [688.0, 886.9], [678.0, 861.8571428571429], [722.0, 497.0], [719.0, 517.0], [707.0, 875.3333333333334], [706.0, 872.0], [709.0, 860.4], [708.0, 853.5], [728.0, 485.0], [729.0, 475.0], [727.0, 504.0], [726.0, 536.0], [725.0, 524.0], [723.0, 410.0], [724.0, 546.1818181818182], [749.0, 889.4375], [760.0, 882.2727272727273], [748.0, 882.0], [747.0, 888.0], [746.0, 887.25], [745.0, 852.5], [743.0, 859.0], [742.0, 845.0], [741.0, 890.5], [740.0, 879.0], [739.0, 879.5], [738.0, 880.8], [777.0, 888.0714285714286], [776.0, 878.6666666666666], [807.0, 601.1428571428571], [806.0, 647.5], [824.0, 891.1499999999999], [823.0, 867.0], [803.0, 879.0], [802.0, 901.8000000000001], [801.0, 903.75], [800.0, 879.5], [863.0, 684.0], [862.0, 645.0], [849.0, 893.9999999999999], [865.0, 849.4], [894.0, 885.8666666666667], [879.0, 909.5714285714286], [878.0, 900.3333333333334], [877.0, 895.0], [867.0, 904.3636363636364], [864.0, 922.0], [924.0, 865.8823529411765], [927.0, 756.0], [913.0, 886.5], [912.0, 877.0], [915.0, 868.0], [914.0, 891.0], [926.0, 786.0], [925.0, 785.0], [923.0, 786.0], [922.0, 829.0], [921.0, 788.0], [920.0, 836.0], [911.0, 877.0], [910.0, 874.0], [917.0, 874.0], [916.0, 941.0], [941.0, 819.0], [959.0, 783.5714285714286], [958.0, 807.3333333333334], [955.0, 816.8275862068966], [935.0, 786.0], [932.0, 825.0], [931.0, 796.0], [930.0, 867.4285714285713], [928.0, 786.0], [942.0, 794.0], [944.0, 869.55], [947.0, 816.0], [945.0, 794.0], [948.0, 869.0], [939.0, 800.0], [938.0, 751.0], [937.0, 826.25], [936.0, 770.6666666666666], [963.0, 759.1999999999999], [972.0, 755.1764705882352], [973.0, 816.8], [974.0, 840.25], [960.0, 805.0], [975.0, 855.0], [971.0, 709.6666666666666], [970.0, 824.0], [969.0, 827.4444444444445], [968.0, 803.2], [967.0, 772.625], [984.0, 836.3333333333334], [986.0, 795.15], [988.0, 877.5000000000001], [987.0, 852.8333333333333], [976.0, 869.3125], [991.0, 864.6666666666666], [990.0, 863.5], [989.0, 813.0465116279071], [980.0, 766.0], [977.0, 777.5], [982.0, 881.4], [983.0, 866.3333333333334], [981.0, 976.25], [985.0, 852.4285714285714], [966.0, 776.0], [964.0, 847.3214285714286], [965.0, 754.6], [962.0, 779.7619047619048], [961.0, 772.1], [998.0, 876.2285714285714], [994.0, 850.0], [1004.0, 821.5], [1005.0, 870.4666666666665], [1006.0, 1006.8], [993.0, 835.5], [992.0, 839.6666666666666], [1007.0, 804.3181818181818], [1002.0, 876.0833333333334], [1003.0, 988.0], [1001.0, 1015.6666666666666], [1000.0, 922.0], [997.0, 853.875], [1021.0, 868.3333333333334], [1020.0, 827.0], [1023.0, 916.2], [1008.0, 911.0], [1022.0, 881.0], [1010.0, 770.3333333333333], [1011.0, 839.0], [1009.0, 906.4], [1013.0, 748.0], [1012.0, 862.5], [1015.0, 807.0], [1014.0, 677.5], [1019.0, 748.0], [1018.0, 839.5], [1017.0, 870.8333333333333], [1016.0, 815.6739130434783], [999.0, 840.0], [996.0, 778.5714285714288], [995.0, 795.6923076923076], [1032.0, 840.8275862068965], [1029.0, 859.5], [1031.0, 1055.0], [1030.0, 950.25], [1028.0, 913.0], [1026.0, 935.3636363636364], [1024.0, 956.6], [1054.0, 981.25], [1053.0, 987.2], [1052.0, 980.0], [1051.0, 992.3333333333334], [1050.0, 985.0], [1049.0, 986.0], [1048.0, 984.3333333333334], [1047.0, 989.0], [1046.0, 985.0], [1045.0, 988.0], [1044.0, 989.0], [1034.0, 830.6666666666666], [1036.0, 835.0], [1084.0, 1008.5], [1056.0, 986.0], [1064.0, 1013.2], [1059.0, 984.0], [1071.0, 982.0], [1070.0, 983.0], [1080.0, 982.0], [1077.0, 980.5], [1111.0, 1362.6666666666667], [1105.0, 927.1666666666667], [1103.0, 1572.0], [1123.0, 1014.0], [1122.0, 940.0], [1102.0, 1190.2], [1098.0, 959.6666666666666], [1096.0, 1003.0], [1094.0, 1003.5], [1092.0, 999.0], [1091.0, 998.0], [1101.0, 1450.3333333333333], [1118.0, 944.6666666666666], [1117.0, 933.0], [1115.0, 937.6666666666666], [1110.0, 1354.0], [1109.0, 1578.5], [1108.0, 1063.0], [1126.0, 926.0], [1125.0, 980.0], [1.0, 308.5]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[366.60666666666634, 413.38866666666706]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1126.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10566.666666666666, "minX": 1.63137126E12, "maxY": 28915.733333333334, "series": [{"data": [[1.63137126E12, 10566.666666666666], [1.63137132E12, 21133.333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63137126E12, 13944.333333333334], [1.63137132E12, 28915.733333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137132E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 208.5922499999997, "minX": 1.63137126E12, "maxY": 822.9814999999983, "series": [{"data": [[1.63137126E12, 822.9814999999983], [1.63137132E12, 208.5922499999997]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137132E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 208.58075000000022, "minX": 1.63137126E12, "maxY": 822.9539999999986, "series": [{"data": [[1.63137126E12, 822.9539999999986], [1.63137132E12, 208.58075000000022]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137132E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 37.13874999999993, "minX": 1.63137126E12, "maxY": 429.2389999999999, "series": [{"data": [[1.63137126E12, 429.2389999999999], [1.63137132E12, 37.13874999999993]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137132E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 34.0, "minX": 1.63137126E12, "maxY": 1654.0, "series": [{"data": [[1.63137126E12, 1654.0], [1.63137132E12, 1462.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63137126E12, 1115.7000000000012], [1.63137132E12, 501.9000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63137126E12, 1227.99], [1.63137132E12, 738.9599999999991]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63137126E12, 1197.9499999999998], [1.63137132E12, 543.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63137126E12, 288.0], [1.63137132E12, 34.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63137126E12, 831.0], [1.63137132E12, 123.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137132E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 55.0, "minX": 151.0, "maxY": 872.0, "series": [{"data": [[1126.0, 872.0], [151.0, 417.0], [1251.0, 167.0], [165.0, 550.0], [723.0, 819.0], [839.0, 406.0], [875.0, 55.0], [870.0, 147.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1251.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 55.0, "minX": 151.0, "maxY": 872.0, "series": [{"data": [[1126.0, 872.0], [151.0, 417.0], [1251.0, 167.0], [165.0, 550.0], [723.0, 819.0], [839.0, 406.0], [875.0, 55.0], [870.0, 147.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1251.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 39.8, "minX": 1.63137126E12, "maxY": 60.2, "series": [{"data": [[1.63137126E12, 39.8], [1.63137132E12, 60.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137132E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63137126E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63137126E12, 33.333333333333336], [1.63137132E12, 66.66666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137132E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63137126E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63137126E12, 33.333333333333336], [1.63137132E12, 66.66666666666667]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137132E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63137126E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63137126E12, 33.333333333333336], [1.63137132E12, 66.66666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137132E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

