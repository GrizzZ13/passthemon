/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 47.0, "minX": 0.0, "maxY": 6959.0, "series": [{"data": [[0.0, 47.0], [0.1, 53.0], [0.2, 55.0], [0.3, 56.0], [0.4, 58.0], [0.5, 59.0], [0.6, 59.0], [0.7, 61.0], [0.8, 61.0], [0.9, 62.0], [1.0, 62.0], [1.1, 63.0], [1.2, 64.0], [1.3, 64.0], [1.4, 65.0], [1.5, 65.0], [1.6, 65.0], [1.7, 65.0], [1.8, 66.0], [1.9, 66.0], [2.0, 67.0], [2.1, 67.0], [2.2, 67.0], [2.3, 67.0], [2.4, 68.0], [2.5, 68.0], [2.6, 68.0], [2.7, 69.0], [2.8, 69.0], [2.9, 69.0], [3.0, 69.0], [3.1, 70.0], [3.2, 70.0], [3.3, 70.0], [3.4, 71.0], [3.5, 71.0], [3.6, 71.0], [3.7, 72.0], [3.8, 72.0], [3.9, 73.0], [4.0, 73.0], [4.1, 73.0], [4.2, 73.0], [4.3, 73.0], [4.4, 74.0], [4.5, 74.0], [4.6, 74.0], [4.7, 74.0], [4.8, 75.0], [4.9, 75.0], [5.0, 75.0], [5.1, 75.0], [5.2, 76.0], [5.3, 76.0], [5.4, 76.0], [5.5, 76.0], [5.6, 76.0], [5.7, 77.0], [5.8, 77.0], [5.9, 77.0], [6.0, 77.0], [6.1, 78.0], [6.2, 78.0], [6.3, 78.0], [6.4, 78.0], [6.5, 78.0], [6.6, 79.0], [6.7, 79.0], [6.8, 79.0], [6.9, 79.0], [7.0, 79.0], [7.1, 79.0], [7.2, 80.0], [7.3, 80.0], [7.4, 80.0], [7.5, 80.0], [7.6, 81.0], [7.7, 81.0], [7.8, 81.0], [7.9, 81.0], [8.0, 81.0], [8.1, 81.0], [8.2, 82.0], [8.3, 82.0], [8.4, 82.0], [8.5, 82.0], [8.6, 82.0], [8.7, 82.0], [8.8, 83.0], [8.9, 83.0], [9.0, 83.0], [9.1, 83.0], [9.2, 83.0], [9.3, 83.0], [9.4, 84.0], [9.5, 84.0], [9.6, 84.0], [9.7, 84.0], [9.8, 84.0], [9.9, 85.0], [10.0, 85.0], [10.1, 85.0], [10.2, 85.0], [10.3, 85.0], [10.4, 85.0], [10.5, 86.0], [10.6, 86.0], [10.7, 86.0], [10.8, 86.0], [10.9, 86.0], [11.0, 86.0], [11.1, 86.0], [11.2, 87.0], [11.3, 87.0], [11.4, 87.0], [11.5, 87.0], [11.6, 87.0], [11.7, 87.0], [11.8, 88.0], [11.9, 88.0], [12.0, 88.0], [12.1, 88.0], [12.2, 88.0], [12.3, 88.0], [12.4, 88.0], [12.5, 88.0], [12.6, 89.0], [12.7, 89.0], [12.8, 89.0], [12.9, 89.0], [13.0, 89.0], [13.1, 90.0], [13.2, 90.0], [13.3, 90.0], [13.4, 90.0], [13.5, 90.0], [13.6, 90.0], [13.7, 90.0], [13.8, 90.0], [13.9, 90.0], [14.0, 91.0], [14.1, 91.0], [14.2, 91.0], [14.3, 91.0], [14.4, 91.0], [14.5, 91.0], [14.6, 91.0], [14.7, 92.0], [14.8, 92.0], [14.9, 92.0], [15.0, 92.0], [15.1, 92.0], [15.2, 92.0], [15.3, 92.0], [15.4, 93.0], [15.5, 93.0], [15.6, 93.0], [15.7, 93.0], [15.8, 93.0], [15.9, 93.0], [16.0, 93.0], [16.1, 94.0], [16.2, 94.0], [16.3, 94.0], [16.4, 94.0], [16.5, 94.0], [16.6, 94.0], [16.7, 94.0], [16.8, 94.0], [16.9, 95.0], [17.0, 95.0], [17.1, 95.0], [17.2, 95.0], [17.3, 95.0], [17.4, 95.0], [17.5, 95.0], [17.6, 95.0], [17.7, 96.0], [17.8, 96.0], [17.9, 96.0], [18.0, 96.0], [18.1, 96.0], [18.2, 96.0], [18.3, 97.0], [18.4, 97.0], [18.5, 97.0], [18.6, 97.0], [18.7, 97.0], [18.8, 97.0], [18.9, 97.0], [19.0, 97.0], [19.1, 98.0], [19.2, 98.0], [19.3, 98.0], [19.4, 98.0], [19.5, 98.0], [19.6, 98.0], [19.7, 98.0], [19.8, 99.0], [19.9, 99.0], [20.0, 99.0], [20.1, 99.0], [20.2, 99.0], [20.3, 99.0], [20.4, 99.0], [20.5, 100.0], [20.6, 100.0], [20.7, 100.0], [20.8, 100.0], [20.9, 100.0], [21.0, 100.0], [21.1, 100.0], [21.2, 101.0], [21.3, 101.0], [21.4, 101.0], [21.5, 101.0], [21.6, 101.0], [21.7, 102.0], [21.8, 102.0], [21.9, 102.0], [22.0, 102.0], [22.1, 102.0], [22.2, 102.0], [22.3, 103.0], [22.4, 103.0], [22.5, 103.0], [22.6, 103.0], [22.7, 103.0], [22.8, 103.0], [22.9, 104.0], [23.0, 104.0], [23.1, 104.0], [23.2, 104.0], [23.3, 105.0], [23.4, 105.0], [23.5, 105.0], [23.6, 105.0], [23.7, 105.0], [23.8, 106.0], [23.9, 106.0], [24.0, 106.0], [24.1, 107.0], [24.2, 107.0], [24.3, 107.0], [24.4, 107.0], [24.5, 108.0], [24.6, 108.0], [24.7, 108.0], [24.8, 109.0], [24.9, 109.0], [25.0, 109.0], [25.1, 109.0], [25.2, 110.0], [25.3, 110.0], [25.4, 110.0], [25.5, 111.0], [25.6, 111.0], [25.7, 112.0], [25.8, 112.0], [25.9, 112.0], [26.0, 113.0], [26.1, 113.0], [26.2, 114.0], [26.3, 114.0], [26.4, 115.0], [26.5, 115.0], [26.6, 116.0], [26.7, 116.0], [26.8, 117.0], [26.9, 117.0], [27.0, 118.0], [27.1, 119.0], [27.2, 119.0], [27.3, 120.0], [27.4, 121.0], [27.5, 122.0], [27.6, 123.0], [27.7, 124.0], [27.8, 125.0], [27.9, 127.0], [28.0, 127.0], [28.1, 129.0], [28.2, 130.0], [28.3, 132.0], [28.4, 134.0], [28.5, 136.0], [28.6, 139.0], [28.7, 140.0], [28.8, 143.0], [28.9, 145.0], [29.0, 148.0], [29.1, 150.0], [29.2, 152.0], [29.3, 155.0], [29.4, 156.0], [29.5, 158.0], [29.6, 161.0], [29.7, 163.0], [29.8, 166.0], [29.9, 169.0], [30.0, 174.0], [30.1, 178.0], [30.2, 183.0], [30.3, 188.0], [30.4, 193.0], [30.5, 197.0], [30.6, 203.0], [30.7, 208.0], [30.8, 215.0], [30.9, 223.0], [31.0, 231.0], [31.1, 232.0], [31.2, 237.0], [31.3, 240.0], [31.4, 247.0], [31.5, 254.0], [31.6, 262.0], [31.7, 276.0], [31.8, 284.0], [31.9, 302.0], [32.0, 317.0], [32.1, 325.0], [32.2, 337.0], [32.3, 343.0], [32.4, 349.0], [32.5, 359.0], [32.6, 364.0], [32.7, 373.0], [32.8, 379.0], [32.9, 389.0], [33.0, 393.0], [33.1, 398.0], [33.2, 405.0], [33.3, 416.0], [33.4, 426.0], [33.5, 436.0], [33.6, 448.0], [33.7, 456.0], [33.8, 460.0], [33.9, 464.0], [34.0, 468.0], [34.1, 478.0], [34.2, 486.0], [34.3, 492.0], [34.4, 502.0], [34.5, 507.0], [34.6, 510.0], [34.7, 512.0], [34.8, 513.0], [34.9, 515.0], [35.0, 520.0], [35.1, 523.0], [35.2, 524.0], [35.3, 526.0], [35.4, 529.0], [35.5, 531.0], [35.6, 534.0], [35.7, 536.0], [35.8, 537.0], [35.9, 540.0], [36.0, 542.0], [36.1, 544.0], [36.2, 546.0], [36.3, 549.0], [36.4, 550.0], [36.5, 551.0], [36.6, 552.0], [36.7, 553.0], [36.8, 554.0], [36.9, 555.0], [37.0, 556.0], [37.1, 557.0], [37.2, 559.0], [37.3, 560.0], [37.4, 562.0], [37.5, 562.0], [37.6, 563.0], [37.7, 564.0], [37.8, 566.0], [37.9, 567.0], [38.0, 568.0], [38.1, 569.0], [38.2, 570.0], [38.3, 571.0], [38.4, 572.0], [38.5, 572.0], [38.6, 573.0], [38.7, 574.0], [38.8, 575.0], [38.9, 576.0], [39.0, 577.0], [39.1, 577.0], [39.2, 578.0], [39.3, 578.0], [39.4, 579.0], [39.5, 579.0], [39.6, 580.0], [39.7, 580.0], [39.8, 581.0], [39.9, 581.0], [40.0, 581.0], [40.1, 582.0], [40.2, 582.0], [40.3, 584.0], [40.4, 584.0], [40.5, 585.0], [40.6, 585.0], [40.7, 586.0], [40.8, 586.0], [40.9, 587.0], [41.0, 587.0], [41.1, 588.0], [41.2, 588.0], [41.3, 589.0], [41.4, 590.0], [41.5, 591.0], [41.6, 591.0], [41.7, 591.0], [41.8, 592.0], [41.9, 593.0], [42.0, 593.0], [42.1, 594.0], [42.2, 595.0], [42.3, 596.0], [42.4, 596.0], [42.5, 597.0], [42.6, 598.0], [42.7, 599.0], [42.8, 600.0], [42.9, 600.0], [43.0, 601.0], [43.1, 602.0], [43.2, 602.0], [43.3, 602.0], [43.4, 603.0], [43.5, 604.0], [43.6, 605.0], [43.7, 605.0], [43.8, 606.0], [43.9, 607.0], [44.0, 609.0], [44.1, 609.0], [44.2, 610.0], [44.3, 612.0], [44.4, 614.0], [44.5, 615.0], [44.6, 616.0], [44.7, 618.0], [44.8, 621.0], [44.9, 623.0], [45.0, 626.0], [45.1, 628.0], [45.2, 634.0], [45.3, 635.0], [45.4, 638.0], [45.5, 642.0], [45.6, 645.0], [45.7, 646.0], [45.8, 651.0], [45.9, 658.0], [46.0, 663.0], [46.1, 668.0], [46.2, 673.0], [46.3, 681.0], [46.4, 689.0], [46.5, 693.0], [46.6, 698.0], [46.7, 703.0], [46.8, 708.0], [46.9, 709.0], [47.0, 714.0], [47.1, 719.0], [47.2, 723.0], [47.3, 725.0], [47.4, 730.0], [47.5, 733.0], [47.6, 735.0], [47.7, 738.0], [47.8, 742.0], [47.9, 744.0], [48.0, 746.0], [48.1, 748.0], [48.2, 751.0], [48.3, 755.0], [48.4, 758.0], [48.5, 762.0], [48.6, 763.0], [48.7, 766.0], [48.8, 768.0], [48.9, 771.0], [49.0, 772.0], [49.1, 774.0], [49.2, 776.0], [49.3, 781.0], [49.4, 784.0], [49.5, 785.0], [49.6, 788.0], [49.7, 792.0], [49.8, 796.0], [49.9, 799.0], [50.0, 803.0], [50.1, 805.0], [50.2, 808.0], [50.3, 813.0], [50.4, 815.0], [50.5, 817.0], [50.6, 818.0], [50.7, 821.0], [50.8, 823.0], [50.9, 827.0], [51.0, 831.0], [51.1, 835.0], [51.2, 837.0], [51.3, 841.0], [51.4, 844.0], [51.5, 846.0], [51.6, 851.0], [51.7, 853.0], [51.8, 855.0], [51.9, 857.0], [52.0, 858.0], [52.1, 861.0], [52.2, 862.0], [52.3, 864.0], [52.4, 867.0], [52.5, 871.0], [52.6, 873.0], [52.7, 876.0], [52.8, 877.0], [52.9, 883.0], [53.0, 885.0], [53.1, 888.0], [53.2, 893.0], [53.3, 897.0], [53.4, 899.0], [53.5, 902.0], [53.6, 903.0], [53.7, 904.0], [53.8, 906.0], [53.9, 908.0], [54.0, 909.0], [54.1, 915.0], [54.2, 917.0], [54.3, 920.0], [54.4, 924.0], [54.5, 926.0], [54.6, 927.0], [54.7, 931.0], [54.8, 934.0], [54.9, 935.0], [55.0, 939.0], [55.1, 942.0], [55.2, 944.0], [55.3, 946.0], [55.4, 950.0], [55.5, 955.0], [55.6, 956.0], [55.7, 958.0], [55.8, 959.0], [55.9, 960.0], [56.0, 963.0], [56.1, 966.0], [56.2, 969.0], [56.3, 970.0], [56.4, 972.0], [56.5, 973.0], [56.6, 976.0], [56.7, 977.0], [56.8, 979.0], [56.9, 982.0], [57.0, 986.0], [57.1, 989.0], [57.2, 991.0], [57.3, 995.0], [57.4, 999.0], [57.5, 1002.0], [57.6, 1007.0], [57.7, 1011.0], [57.8, 1014.0], [57.9, 1018.0], [58.0, 1022.0], [58.1, 1025.0], [58.2, 1029.0], [58.3, 1034.0], [58.4, 1037.0], [58.5, 1042.0], [58.6, 1046.0], [58.7, 1049.0], [58.8, 1052.0], [58.9, 1054.0], [59.0, 1058.0], [59.1, 1060.0], [59.2, 1062.0], [59.3, 1064.0], [59.4, 1066.0], [59.5, 1069.0], [59.6, 1070.0], [59.7, 1074.0], [59.8, 1076.0], [59.9, 1080.0], [60.0, 1086.0], [60.1, 1090.0], [60.2, 1096.0], [60.3, 1120.0], [60.4, 1126.0], [60.5, 1137.0], [60.6, 1140.0], [60.7, 1150.0], [60.8, 1156.0], [60.9, 1162.0], [61.0, 1168.0], [61.1, 1171.0], [61.2, 1182.0], [61.3, 1190.0], [61.4, 1198.0], [61.5, 1203.0], [61.6, 1211.0], [61.7, 1213.0], [61.8, 1218.0], [61.9, 1221.0], [62.0, 1225.0], [62.1, 1227.0], [62.2, 1229.0], [62.3, 1231.0], [62.4, 1233.0], [62.5, 1236.0], [62.6, 1239.0], [62.7, 1241.0], [62.8, 1244.0], [62.9, 1247.0], [63.0, 1249.0], [63.1, 1252.0], [63.2, 1254.0], [63.3, 1259.0], [63.4, 1262.0], [63.5, 1265.0], [63.6, 1266.0], [63.7, 1268.0], [63.8, 1270.0], [63.9, 1271.0], [64.0, 1274.0], [64.1, 1274.0], [64.2, 1275.0], [64.3, 1276.0], [64.4, 1277.0], [64.5, 1278.0], [64.6, 1280.0], [64.7, 1281.0], [64.8, 1285.0], [64.9, 1290.0], [65.0, 1293.0], [65.1, 1295.0], [65.2, 1298.0], [65.3, 1301.0], [65.4, 1303.0], [65.5, 1304.0], [65.6, 1306.0], [65.7, 1307.0], [65.8, 1309.0], [65.9, 1311.0], [66.0, 1312.0], [66.1, 1314.0], [66.2, 1315.0], [66.3, 1317.0], [66.4, 1318.0], [66.5, 1322.0], [66.6, 1324.0], [66.7, 1328.0], [66.8, 1332.0], [66.9, 1334.0], [67.0, 1338.0], [67.1, 1344.0], [67.2, 1347.0], [67.3, 1349.0], [67.4, 1351.0], [67.5, 1353.0], [67.6, 1358.0], [67.7, 1364.0], [67.8, 1367.0], [67.9, 1370.0], [68.0, 1372.0], [68.1, 1377.0], [68.2, 1381.0], [68.3, 1385.0], [68.4, 1390.0], [68.5, 1394.0], [68.6, 1398.0], [68.7, 1400.0], [68.8, 1406.0], [68.9, 1409.0], [69.0, 1413.0], [69.1, 1417.0], [69.2, 1424.0], [69.3, 1432.0], [69.4, 1440.0], [69.5, 1448.0], [69.6, 1458.0], [69.7, 1467.0], [69.8, 1471.0], [69.9, 1477.0], [70.0, 1482.0], [70.1, 1485.0], [70.2, 1493.0], [70.3, 1497.0], [70.4, 1499.0], [70.5, 1502.0], [70.6, 1506.0], [70.7, 1510.0], [70.8, 1513.0], [70.9, 1519.0], [71.0, 1523.0], [71.1, 1531.0], [71.2, 1535.0], [71.3, 1541.0], [71.4, 1544.0], [71.5, 1550.0], [71.6, 1559.0], [71.7, 1566.0], [71.8, 1579.0], [71.9, 1583.0], [72.0, 1589.0], [72.1, 1597.0], [72.2, 1604.0], [72.3, 1609.0], [72.4, 1615.0], [72.5, 1617.0], [72.6, 1620.0], [72.7, 1623.0], [72.8, 1642.0], [72.9, 1645.0], [73.0, 1649.0], [73.1, 1662.0], [73.2, 1672.0], [73.3, 1678.0], [73.4, 1693.0], [73.5, 1713.0], [73.6, 1725.0], [73.7, 1742.0], [73.8, 1751.0], [73.9, 1758.0], [74.0, 1763.0], [74.1, 1784.0], [74.2, 1797.0], [74.3, 1804.0], [74.4, 1813.0], [74.5, 1821.0], [74.6, 1825.0], [74.7, 1828.0], [74.8, 1834.0], [74.9, 1843.0], [75.0, 1858.0], [75.1, 1868.0], [75.2, 1883.0], [75.3, 1888.0], [75.4, 1898.0], [75.5, 1906.0], [75.6, 1924.0], [75.7, 1934.0], [75.8, 1940.0], [75.9, 1948.0], [76.0, 1965.0], [76.1, 1999.0], [76.2, 2004.0], [76.3, 2012.0], [76.4, 2020.0], [76.5, 2033.0], [76.6, 2043.0], [76.7, 2055.0], [76.8, 2066.0], [76.9, 2081.0], [77.0, 2085.0], [77.1, 2089.0], [77.2, 2099.0], [77.3, 2106.0], [77.4, 2112.0], [77.5, 2117.0], [77.6, 2126.0], [77.7, 2130.0], [77.8, 2134.0], [77.9, 2139.0], [78.0, 2143.0], [78.1, 2155.0], [78.2, 2165.0], [78.3, 2178.0], [78.4, 2183.0], [78.5, 2191.0], [78.6, 2202.0], [78.7, 2213.0], [78.8, 2220.0], [78.9, 2225.0], [79.0, 2229.0], [79.1, 2235.0], [79.2, 2241.0], [79.3, 2244.0], [79.4, 2250.0], [79.5, 2253.0], [79.6, 2257.0], [79.7, 2264.0], [79.8, 2269.0], [79.9, 2276.0], [80.0, 2281.0], [80.1, 2293.0], [80.2, 2301.0], [80.3, 2310.0], [80.4, 2319.0], [80.5, 2329.0], [80.6, 2337.0], [80.7, 2346.0], [80.8, 2354.0], [80.9, 2378.0], [81.0, 2387.0], [81.1, 2401.0], [81.2, 2409.0], [81.3, 2418.0], [81.4, 2420.0], [81.5, 2424.0], [81.6, 2432.0], [81.7, 2434.0], [81.8, 2444.0], [81.9, 2447.0], [82.0, 2448.0], [82.1, 2460.0], [82.2, 2469.0], [82.3, 2482.0], [82.4, 2490.0], [82.5, 2493.0], [82.6, 2500.0], [82.7, 2516.0], [82.8, 2531.0], [82.9, 2536.0], [83.0, 2550.0], [83.1, 2563.0], [83.2, 2572.0], [83.3, 2587.0], [83.4, 2605.0], [83.5, 2616.0], [83.6, 2630.0], [83.7, 2635.0], [83.8, 2644.0], [83.9, 2654.0], [84.0, 2664.0], [84.1, 2676.0], [84.2, 2685.0], [84.3, 2694.0], [84.4, 2705.0], [84.5, 2713.0], [84.6, 2721.0], [84.7, 2728.0], [84.8, 2739.0], [84.9, 2749.0], [85.0, 2765.0], [85.1, 2769.0], [85.2, 2779.0], [85.3, 2787.0], [85.4, 2794.0], [85.5, 2800.0], [85.6, 2810.0], [85.7, 2818.0], [85.8, 2825.0], [85.9, 2833.0], [86.0, 2842.0], [86.1, 2859.0], [86.2, 2873.0], [86.3, 2888.0], [86.4, 2901.0], [86.5, 2915.0], [86.6, 2928.0], [86.7, 2936.0], [86.8, 2947.0], [86.9, 2953.0], [87.0, 2960.0], [87.1, 2963.0], [87.2, 2966.0], [87.3, 2974.0], [87.4, 2986.0], [87.5, 2990.0], [87.6, 3001.0], [87.7, 3013.0], [87.8, 3020.0], [87.9, 3023.0], [88.0, 3029.0], [88.1, 3035.0], [88.2, 3040.0], [88.3, 3051.0], [88.4, 3056.0], [88.5, 3060.0], [88.6, 3066.0], [88.7, 3070.0], [88.8, 3073.0], [88.9, 3075.0], [89.0, 3079.0], [89.1, 3086.0], [89.2, 3096.0], [89.3, 3103.0], [89.4, 3111.0], [89.5, 3124.0], [89.6, 3132.0], [89.7, 3149.0], [89.8, 3163.0], [89.9, 3199.0], [90.0, 3206.0], [90.1, 3235.0], [90.2, 3267.0], [90.3, 3285.0], [90.4, 3297.0], [90.5, 3306.0], [90.6, 3319.0], [90.7, 3359.0], [90.8, 3368.0], [90.9, 3377.0], [91.0, 3381.0], [91.1, 3383.0], [91.2, 3398.0], [91.3, 3404.0], [91.4, 3411.0], [91.5, 3428.0], [91.6, 3440.0], [91.7, 3446.0], [91.8, 3455.0], [91.9, 3480.0], [92.0, 3515.0], [92.1, 3573.0], [92.2, 3578.0], [92.3, 3583.0], [92.4, 3588.0], [92.5, 3597.0], [92.6, 3608.0], [92.7, 3609.0], [92.8, 3621.0], [92.9, 3636.0], [93.0, 3646.0], [93.1, 3659.0], [93.2, 3667.0], [93.3, 3688.0], [93.4, 3698.0], [93.5, 3705.0], [93.6, 3710.0], [93.7, 3711.0], [93.8, 3713.0], [93.9, 3715.0], [94.0, 3717.0], [94.1, 3719.0], [94.2, 3720.0], [94.3, 3721.0], [94.4, 3723.0], [94.5, 3725.0], [94.6, 3728.0], [94.7, 3732.0], [94.8, 3740.0], [94.9, 3746.0], [95.0, 3749.0], [95.1, 3751.0], [95.2, 3760.0], [95.3, 3764.0], [95.4, 3772.0], [95.5, 3779.0], [95.6, 3797.0], [95.7, 3802.0], [95.8, 3812.0], [95.9, 3827.0], [96.0, 3845.0], [96.1, 3859.0], [96.2, 3884.0], [96.3, 3901.0], [96.4, 3934.0], [96.5, 3950.0], [96.6, 3968.0], [96.7, 3986.0], [96.8, 4021.0], [96.9, 4036.0], [97.0, 4048.0], [97.1, 4056.0], [97.2, 4074.0], [97.3, 4075.0], [97.4, 4086.0], [97.5, 4098.0], [97.6, 4111.0], [97.7, 4122.0], [97.8, 4139.0], [97.9, 4146.0], [98.0, 4200.0], [98.1, 4223.0], [98.2, 4267.0], [98.3, 4312.0], [98.4, 4385.0], [98.5, 4484.0], [98.6, 4523.0], [98.7, 4657.0], [98.8, 4733.0], [98.9, 4845.0], [99.0, 4921.0], [99.1, 5065.0], [99.2, 5141.0], [99.3, 5264.0], [99.4, 5403.0], [99.5, 5511.0], [99.6, 6063.0], [99.7, 6256.0], [99.8, 6523.0], [99.9, 6580.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1227.0, "series": [{"data": [[0.0, 1227.0], [600.0, 233.0], [700.0, 195.0], [800.0, 210.0], [900.0, 241.0], [1000.0, 167.0], [1100.0, 73.0], [1200.0, 229.0], [1300.0, 203.0], [1400.0, 107.0], [1500.0, 105.0], [1600.0, 76.0], [1700.0, 50.0], [1800.0, 69.0], [1900.0, 43.0], [2000.0, 66.0], [2100.0, 82.0], [2200.0, 96.0], [2300.0, 53.0], [2400.0, 89.0], [2500.0, 49.0], [2600.0, 58.0], [2700.0, 69.0], [2800.0, 54.0], [2900.0, 70.0], [3000.0, 103.0], [3100.0, 38.0], [3200.0, 31.0], [3300.0, 49.0], [3400.0, 44.0], [3500.0, 34.0], [3600.0, 52.0], [3700.0, 136.0], [3800.0, 37.0], [3900.0, 26.0], [4000.0, 47.0], [4200.0, 17.0], [4100.0, 29.0], [4300.0, 9.0], [4400.0, 7.0], [4600.0, 7.0], [4500.0, 5.0], [4800.0, 7.0], [4700.0, 8.0], [5000.0, 6.0], [5100.0, 9.0], [4900.0, 2.0], [5200.0, 3.0], [5300.0, 4.0], [5400.0, 6.0], [5600.0, 3.0], [5500.0, 2.0], [5700.0, 1.0], [6100.0, 1.0], [6000.0, 4.0], [6200.0, 3.0], [6300.0, 1.0], [6500.0, 10.0], [6800.0, 3.0], [6900.0, 2.0], [100.0, 606.0], [200.0, 79.0], [300.0, 76.0], [400.0, 76.0], [500.0, 503.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2160.0, "series": [{"data": [[0.0, 2064.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2160.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1756.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 20.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 125.89599999999987, "minX": 1.63137522E12, "maxY": 996.0640000000002, "series": [{"data": [[1.63137522E12, 125.89599999999987]], "isOverall": false, "label": "deleteWants", "isController": false}, {"data": [[1.63137522E12, 996.0640000000002]], "isOverall": false, "label": "checkFavorite", "isController": false}, {"data": [[1.63137522E12, 624.5660000000008]], "isOverall": false, "label": "addWants", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137522E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 55.0, "minX": 1.0, "maxY": 6063.0, "series": [{"data": [[2.0, 1074.0], [3.0, 4930.666666666667], [4.0, 1069.0], [5.0, 4951.333333333333], [6.0, 1400.3333333333335], [7.0, 3319.0], [8.0, 1306.0], [9.0, 1312.0], [10.0, 1198.75], [11.0, 1314.0], [12.0, 1069.5], [13.0, 4920.000000000001], [14.0, 2966.0], [15.0, 3915.5], [16.0, 2494.75], [17.0, 1201.5], [18.0, 1186.0], [19.0, 1187.0], [20.0, 5168.8], [21.0, 2795.6666666666665], [22.0, 6063.0], [23.0, 2151.5], [24.0, 5745.0], [25.0, 2122.0], [26.0, 3752.5], [27.0, 2240.0], [28.0, 2623.6666666666665], [29.0, 3543.5], [30.0, 2218.5], [31.0, 1340.0], [33.0, 2185.75], [32.0, 4139.666666666667], [35.0, 3296.0], [34.0, 3344.5], [37.0, 1814.6666666666665], [36.0, 3337.0], [38.0, 5264.0], [39.0, 1182.25], [41.0, 3507.0], [40.0, 3425.0], [43.0, 2608.6666666666665], [42.0, 2125.25], [45.0, 2499.0], [44.0, 2604.3333333333335], [47.0, 2143.5], [46.0, 3224.0], [48.0, 3213.5], [51.0, 1721.6666666666665], [50.0, 3165.75], [53.0, 2568.4], [52.0, 1307.0], [55.0, 3115.5], [54.0, 2405.6666666666665], [57.0, 2304.3333333333335], [56.0, 1988.5], [59.0, 4757.0], [58.0, 3134.5], [61.0, 1301.3636363636365], [63.0, 5039.0], [62.0, 940.5], [67.0, 2390.0], [66.0, 2645.5], [65.0, 1125.0], [64.0, 2458.0], [71.0, 321.7], [70.0, 387.42857142857144], [69.0, 542.6], [68.0, 464.9166666666667], [74.0, 220.90625000000009], [73.0, 529.5238095238096], [75.0, 75.15625000000001], [72.0, 599.2222222222222], [79.0, 275.56521739130426], [78.0, 235.49999999999991], [77.0, 181.9], [76.0, 478.1818181818182], [83.0, 513.3809523809524], [81.0, 281.5652173913044], [80.0, 694.5714285714286], [82.0, 88.0], [87.0, 212.03030303030303], [86.0, 338.4117647058823], [85.0, 227.9354838709677], [84.0, 280.77272727272737], [91.0, 213.99999999999994], [90.0, 231.8214285714286], [89.0, 271.1739130434783], [88.0, 162.01724137931035], [95.0, 155.23611111111111], [94.0, 185.1590909090909], [93.0, 144.77333333333337], [92.0, 209.61764705882356], [99.0, 430.5348837209304], [97.0, 216.26470588235287], [96.0, 143.578313253012], [98.0, 142.89285714285714], [101.0, 406.4999999999999], [103.0, 291.030303030303], [102.0, 183.81249999999997], [100.0, 193.07692307692307], [107.0, 249.5555555555555], [106.0, 333.1052631578947], [105.0, 253.20000000000002], [104.0, 1314.2083333333333], [110.0, 870.8181818181819], [108.0, 310.38095238095246], [109.0, 101.0], [111.0, 111.36363636363636], [114.0, 680.2857142857143], [113.0, 2125.0], [112.0, 108.55555555555556], [115.0, 99.88888888888889], [118.0, 4173.0], [117.0, 2119.5], [119.0, 99.5], [116.0, 164.0], [123.0, 803.0], [122.0, 561.0000000000001], [121.0, 785.0], [120.0, 4339.0], [126.0, 1141.25], [125.0, 1162.5], [124.0, 526.4], [134.0, 779.375], [133.0, 1504.8000000000002], [132.0, 1087.25], [131.0, 4056.0], [130.0, 3951.0], [129.0, 1833.285714285714], [128.0, 98.0], [135.0, 1277.0], [143.0, 3105.6666666666665], [141.0, 1897.6666666666667], [140.0, 1386.0], [139.0, 649.3333333333334], [138.0, 1145.5555555555557], [136.0, 3139.3333333333335], [137.0, 220.8], [142.0, 291.8333333333333], [151.0, 1110.4], [150.0, 1417.25], [149.0, 1794.3333333333333], [148.0, 2151.0], [147.0, 751.6666666666666], [146.0, 2431.25], [144.0, 1807.0], [145.0, 285.1428571428571], [156.0, 2508.75], [153.0, 380.25], [154.0, 284.1666666666667], [155.0, 379.0], [157.0, 691.8333333333333], [159.0, 209.6], [158.0, 1280.0], [152.0, 1278.0], [164.0, 3020.0], [162.0, 1565.0], [161.0, 922.8333333333333], [160.0, 3297.6], [163.0, 324.2], [166.0, 701.0], [167.0, 1259.0], [165.0, 1271.0], [170.0, 265.0], [168.0, 55.0], [172.0, 234.0], [171.0, 234.5], [173.0, 316.0], [174.0, 491.3333333333333], [175.0, 568.6666666666667], [169.0, 1391.0], [181.0, 3799.9411764705883], [176.0, 291.1666666666667], [183.0, 610.1111111111111], [179.0, 1264.0], [178.0, 1265.0], [177.0, 1279.0], [184.0, 116.72727272727273], [189.0, 328.8], [190.0, 332.2352941176471], [186.0, 252.44444444444446], [185.0, 1293.6666666666667], [198.0, 1891.5], [195.0, 1335.0], [194.0, 2107.0], [193.0, 3086.5], [196.0, 135.8], [197.0, 155.0], [192.0, 142.5], [207.0, 2823.0], [206.0, 2079.666666666667], [204.0, 1915.0], [203.0, 3718.0], [200.0, 3732.0], [201.0, 98.0], [205.0, 295.33333333333337], [214.0, 111.42857142857143], [213.0, 89.33333333333334], [210.0, 89.875], [211.0, 84.0], [209.0, 113.0], [215.0, 234.5], [212.0, 604.0], [208.0, 214.0], [221.0, 151.2], [223.0, 512.2352941176471], [222.0, 426.09090909090907], [219.0, 191.77777777777777], [216.0, 146.83333333333334], [217.0, 195.7058823529412], [218.0, 296.0], [231.0, 592.9000000000001], [230.0, 1030.0], [229.0, 1471.2727272727273], [228.0, 1139.521739130435], [224.0, 347.77777777777777], [226.0, 464.42857142857144], [227.0, 575.0], [225.0, 420.8333333333333], [233.0, 2101.458333333334], [232.0, 483.8571428571428], [234.0, 184.0], [238.0, 153.66666666666666], [239.0, 233.22222222222223], [237.0, 237.6], [235.0, 457.6], [236.0, 113.0], [243.0, 360.59999999999997], [242.0, 396.4], [241.0, 316.25], [240.0, 286.25], [247.0, 213.66666666666666], [246.0, 618.4285714285714], [245.0, 588.25], [244.0, 489.4444444444445], [248.0, 714.5652173913043], [255.0, 328.375], [254.0, 505.90909090909093], [253.0, 338.83333333333337], [252.0, 365.6666666666667], [251.0, 557.5], [249.0, 142.1764705882353], [250.0, 1374.6666666666667], [258.0, 2493.583333333333], [271.0, 2914.6666666666665], [257.0, 811.6666666666664], [256.0, 3366.5714285714284], [270.0, 1231.0], [268.0, 2405.0], [259.0, 945.0], [267.0, 1822.5], [265.0, 1235.25], [261.0, 1233.0], [260.0, 1229.0], [286.0, 3451.6], [284.0, 3187.0], [283.0, 2803.6666666666665], [282.0, 2447.75], [281.0, 3746.0], [280.0, 2028.0], [273.0, 3410.4666666666662], [275.0, 1234.5], [278.0, 1381.0], [277.0, 1226.0], [287.0, 1368.0], [285.0, 1221.0], [290.0, 2237.0], [300.0, 3928.3333333333335], [297.0, 3249.6666666666665], [295.0, 3377.25], [289.0, 1213.0], [288.0, 2247.0], [292.0, 3588.1428571428573], [298.0, 1201.0], [296.0, 2225.0], [294.0, 1808.0], [291.0, 2237.0], [319.0, 3959.714285714286], [318.0, 3832.0], [317.0, 4071.0], [315.0, 3832.0], [309.0, 3584.0], [308.0, 3887.0], [305.0, 3740.8], [314.0, 2204.0], [331.0, 4040.0833333333335], [327.0, 1457.5555555555557], [326.0, 1209.0], [325.0, 1135.0], [321.0, 1701.5], [338.0, 3970.166666666667], [336.0, 4102.0], [366.0, 2974.666666666667], [362.0, 3269.6], [358.0, 1839.037037037037], [357.0, 1608.0], [356.0, 2036.75], [359.0, 1126.0], [354.0, 3637.6875000000005], [353.0, 3850.5], [367.0, 2123.0], [364.0, 2127.0], [363.0, 2125.0], [361.0, 2133.0], [360.0, 1112.0], [381.0, 3133.3333333333335], [377.0, 2794.2], [379.0, 1095.0], [378.0, 2108.0], [374.0, 2623.6666666666665], [375.0, 1096.0], [368.0, 2132.0], [373.0, 3574.0], [372.0, 3181.25], [369.0, 3720.3333333333335], [383.0, 1321.0], [382.0, 874.0], [380.0, 1329.0], [371.0, 2126.0], [370.0, 1323.0], [387.0, 3233.3333333333335], [398.0, 2554.6666666666665], [396.0, 2341.5], [395.0, 2806.1818181818185], [394.0, 3719.0], [384.0, 2354.0], [385.0, 1074.0], [397.0, 514.0], [391.0, 1086.0], [390.0, 2102.0], [389.0, 1467.0], [414.0, 1883.8333333333333], [411.0, 3692.5], [405.0, 2466.0], [403.0, 3635.0], [402.0, 1094.75], [401.0, 3525.3333333333335], [409.0, 1070.0], [408.0, 1292.5], [406.0, 1069.0], [404.0, 546.0], [419.0, 3566.875], [427.0, 3642.0], [423.0, 3585.75], [416.0, 687.0], [422.0, 1574.0], [420.0, 513.5], [418.0, 2141.5], [417.0, 2677.666666666667], [430.0, 527.0], [429.0, 2045.0], [428.0, 2078.0], [425.0, 554.0], [424.0, 521.5], [435.0, 3609.0], [447.0, 2330.6666666666665], [444.0, 1728.1666666666665], [442.0, 3576.0], [440.0, 1644.3333333333335], [437.0, 1824.75], [436.0, 3651.428571428571], [434.0, 2330.0], [438.0, 943.0], [432.0, 1055.0], [433.0, 494.0], [445.0, 560.0], [461.0, 3490.0], [463.0, 3749.0], [456.0, 523.0], [460.0, 3673.0], [451.0, 959.0], [459.0, 3717.5], [458.0, 491.0], [457.0, 3185.0], [454.0, 3270.4], [453.0, 1291.0], [452.0, 522.0], [450.0, 3183.4], [449.0, 2225.0], [448.0, 1295.0], [455.0, 1039.0], [462.0, 762.0], [477.0, 2833.6666666666665], [475.0, 2250.5], [473.0, 2434.0], [472.0, 2171.1666666666665], [470.0, 3847.0], [468.0, 1954.5], [467.0, 1186.125], [476.0, 529.0], [466.0, 3344.0], [479.0, 788.5], [492.0, 2371.5], [494.0, 3314.0], [495.0, 1959.5], [493.0, 3768.0], [490.0, 2749.0], [489.0, 3097.222222222222], [487.0, 2245.0], [481.0, 2852.6666666666665], [482.0, 567.0], [486.0, 492.0], [485.0, 522.0], [484.0, 534.0], [497.0, 831.0], [502.0, 1890.0], [508.0, 3227.0], [501.0, 3169.75], [498.0, 2919.5], [507.0, 531.0], [505.0, 2011.0], [504.0, 540.0], [503.0, 534.0], [496.0, 846.0], [500.0, 729.0], [515.0, 2953.0], [539.0, 1861.0], [538.0, 3394.0], [537.0, 842.0], [519.0, 831.0], [518.0, 997.0], [517.0, 787.0], [535.0, 3203.6], [534.0, 835.0], [533.0, 988.0], [532.0, 839.0], [531.0, 516.0], [530.0, 2197.5], [529.0, 3091.7], [528.0, 989.0], [543.0, 547.0], [541.0, 1018.0], [540.0, 564.0], [523.0, 1780.5], [522.0, 1993.0], [521.0, 3145.0], [513.0, 2716.5], [514.0, 515.0], [512.0, 1541.8], [527.0, 729.25], [550.0, 3384.4], [573.0, 2627.777777777778], [575.0, 540.0], [560.0, 1188.5], [574.0, 979.0], [569.0, 740.5], [568.0, 972.0], [551.0, 997.0], [571.0, 956.0], [570.0, 968.0], [572.0, 645.0], [566.0, 2943.5], [565.0, 963.0], [567.0, 404.6666666666667], [561.0, 2977.0], [555.0, 2964.5], [554.0, 519.0], [553.0, 991.0], [552.0, 537.0], [545.0, 2766.0], [549.0, 555.0], [548.0, 1004.0], [547.0, 546.0], [546.0, 542.0], [556.0, 598.0], [558.0, 523.0], [562.0, 523.75], [563.0, 530.0], [564.0, 421.0], [603.0, 2489.142857142857], [598.0, 3163.0], [597.0, 538.0], [599.0, 614.5], [596.0, 2326.166666666667], [592.0, 2308.166666666667], [606.0, 436.0], [607.0, 878.25], [593.0, 552.0], [594.0, 622.3333333333334], [595.0, 970.0], [588.0, 2620.0], [590.0, 987.0], [589.0, 975.0], [576.0, 732.0], [591.0, 974.0], [579.0, 3035.0], [577.0, 1569.0], [587.0, 1793.5], [586.0, 2247.3333333333335], [585.0, 2166.5], [584.0, 550.0], [581.0, 3007.0], [583.0, 772.1428571428572], [601.0, 761.5], [580.0, 3213.0], [633.0, 2396.3333333333335], [635.0, 2419.0], [639.0, 2300.6666666666665], [638.0, 565.5], [637.0, 960.0], [636.0, 560.0], [634.0, 1856.5], [632.0, 1640.3333333333333], [630.0, 2543.4], [631.0, 1787.0], [629.0, 1108.0], [626.0, 1171.5], [627.0, 1009.0], [628.0, 530.0], [625.0, 2515.25], [619.0, 2015.4285714285716], [620.0, 556.3333333333334], [621.0, 556.0], [623.0, 557.0], [609.0, 553.0], [608.0, 1440.0], [622.0, 967.0], [617.0, 809.5], [616.0, 555.0], [614.0, 1368.111111111111], [613.0, 1262.0], [612.0, 651.5], [611.0, 650.5], [610.0, 2442.3999999999996], [615.0, 2574.0], [671.0, 1212.7222222222222], [667.0, 2835.1428571428573], [670.0, 810.5], [669.0, 645.0], [666.0, 536.5454545454545], [665.0, 953.0], [664.0, 566.0], [647.0, 758.0], [661.0, 2133.428571428571], [662.0, 594.6666666666666], [663.0, 951.0], [657.0, 2755.6666666666665], [656.0, 797.0], [652.0, 2271.8888888888887], [646.0, 3079.5], [640.0, 2431.25], [643.0, 574.0], [642.0, 561.5], [645.0, 565.0], [644.0, 964.0], [654.0, 968.0], [653.0, 569.0], [651.0, 708.1666666666666], [650.0, 1360.5], [648.0, 956.0], [658.0, 687.3333333333334], [676.0, 1751.9166666666665], [700.0, 1355.8], [697.0, 2170.0], [699.0, 614.2222222222222], [698.0, 714.5], [679.0, 625.0], [696.0, 677.8571428571428], [677.0, 629.75], [678.0, 797.5], [695.0, 1744.5], [694.0, 796.2], [693.0, 2784.8571428571427], [688.0, 651.4285714285714], [703.0, 603.1428571428571], [702.0, 685.913043478261], [701.0, 685.9090909090909], [690.0, 791.3333333333334], [692.0, 740.0], [691.0, 697.0909090909091], [689.0, 1034.5], [687.0, 3038.0], [682.0, 2460.0], [681.0, 594.6666666666666], [680.0, 942.0], [683.0, 647.8000000000001], [684.0, 624.5], [686.0, 705.0], [685.0, 638.0], [673.0, 734.5], [672.0, 957.0], [675.0, 668.8], [674.0, 963.0], [711.0, 1233.6666666666667], [733.0, 2966.0], [732.0, 1965.307692307692], [731.0, 709.25], [730.0, 719.0], [728.0, 755.4782608695654], [729.0, 706.75], [725.0, 2157.4], [724.0, 908.0], [726.0, 680.4285714285714], [727.0, 631.0], [723.0, 1976.2], [721.0, 674.1], [722.0, 548.0], [720.0, 615.3333333333334], [735.0, 844.0], [734.0, 570.0], [719.0, 1064.2142857142856], [717.0, 2474.375], [718.0, 702.4375], [715.0, 604.4], [716.0, 572.6666666666666], [713.0, 614.4166666666666], [714.0, 805.3000000000001], [710.0, 1334.3333333333333], [709.0, 1272.857142857143], [705.0, 1610.6666666666672], [706.0, 681.9090909090909], [708.0, 825.3333333333334], [707.0, 769.5], [704.0, 644.0], [761.0, 1835.5714285714287], [739.0, 1508.8666666666668], [764.0, 1787.4285714285713], [767.0, 538.4444444444445], [766.0, 837.5], [765.0, 590.0], [763.0, 707.6], [762.0, 1036.0], [760.0, 2224.0], [742.0, 750.3333333333334], [743.0, 417.33333333333337], [740.0, 776.3000000000001], [741.0, 678.8333333333333], [757.0, 1489.1666666666663], [758.0, 1003.0], [759.0, 937.0], [756.0, 657.5], [755.0, 667.5], [754.0, 585.3333333333334], [753.0, 668.75], [752.0, 566.4285714285714], [751.0, 1302.75], [749.0, 2149.3571428571427], [748.0, 676.1111111111111], [750.0, 649.1739130434783], [747.0, 656.5000000000001], [746.0, 659.0], [745.0, 2986.0], [744.0, 1391.75], [737.0, 796.7272727272727], [738.0, 386.0], [736.0, 671.9090909090909], [775.0, 1947.4285714285716], [793.0, 1388.4285714285713], [797.0, 1358.5000000000002], [799.0, 797.2727272727273], [798.0, 818.4285714285714], [794.0, 695.6], [792.0, 1257.0833333333333], [788.0, 1349.4285714285713], [790.0, 759.1764705882352], [791.0, 933.0], [789.0, 748.6666666666666], [787.0, 640.5], [785.0, 724.3333333333334], [786.0, 670.0], [784.0, 1512.2857142857142], [783.0, 795.8666666666667], [782.0, 1296.0], [780.0, 477.5], [781.0, 693.0], [779.0, 2426.0], [776.0, 752.0], [778.0, 815.3333333333334], [777.0, 203.0], [771.0, 1418.8888888888891], [773.0, 574.6363636363636], [772.0, 1233.0], [774.0, 636.4999999999999], [770.0, 1236.0], [769.0, 791.0], [768.0, 920.0], [828.0, 2021.4285714285716], [831.0, 2381.75], [829.0, 1127.0], [830.0, 752.5], [817.0, 729.3333333333334], [816.0, 643.6666666666666], [824.0, 1826.5], [825.0, 595.0], [806.0, 799.0], [823.0, 936.5555555555555], [822.0, 760.7272727272726], [821.0, 1273.0], [818.0, 2873.0], [819.0, 726.0833333333334], [820.0, 881.6666666666666], [813.0, 2039.9999999999998], [809.0, 2436.4], [808.0, 1023.6], [810.0, 918.0], [812.0, 780.3750000000001], [811.0, 797.0], [805.0, 934.0555555555554], [803.0, 1260.8421052631577], [804.0, 826.0], [802.0, 948.0714285714284], [801.0, 558.25], [800.0, 779.4], [815.0, 703.8], [859.0, 1590.2], [860.0, 2848.5], [856.0, 1193.8333333333333], [858.0, 697.5], [838.0, 681.9166666666666], [839.0, 769.6666666666666], [853.0, 2042.0], [855.0, 859.4285714285713], [854.0, 735.8333333333333], [851.0, 522.5], [852.0, 685.9090909090909], [850.0, 1064.142857142857], [849.0, 1267.1200000000001], [863.0, 813.9047619047618], [862.0, 481.75], [861.0, 664.0], [843.0, 1843.2], [841.0, 1434.3333333333333], [842.0, 703.75], [840.0, 711.4], [837.0, 1372.909090909091], [834.0, 573.5], [836.0, 1035.0], [835.0, 783.0], [832.0, 654.2], [846.0, 719.5294117647059], [847.0, 732.0], [844.0, 780.1739130434784], [845.0, 660.6666666666667], [833.0, 552.4285714285714], [869.0, 1612.5714285714284], [892.0, 2732.75], [888.0, 2679.5], [870.0, 617.0], [871.0, 904.0], [887.0, 3111.0], [883.0, 2879.5], [880.0, 757.7692307692307], [877.0, 1428.1666666666667], [873.0, 1340.9285714285713], [875.0, 894.0], [876.0, 711.3333333333334], [874.0, 680.0], [872.0, 771.1428571428571], [866.0, 1709.6923076923076], [868.0, 726.2857142857142], [865.0, 641.8461538461538], [864.0, 837.6666666666666], [879.0, 774.125], [878.0, 769.5], [925.0, 2785.0], [922.0, 2604.75], [918.0, 2816.0], [917.0, 2679.25], [913.0, 2696.5], [909.0, 2532.0], [908.0, 2715.8571428571427], [901.0, 2733.5], [897.0, 2673.6], [958.0, 2639.0], [953.0, 2638.0], [948.0, 2657.0], [942.0, 2590.8], [937.0, 2622.4], [932.0, 2587.75], [928.0, 2674.0], [989.0, 2519.2], [984.0, 2546.5], [978.0, 2476.75], [974.0, 2762.1428571428573], [967.0, 2554.4], [962.0, 2398.0], [1021.0, 2611.1666666666665], [1015.0, 2400.0], [1012.0, 2305.4], [1007.0, 2463.4285714285716], [1000.0, 2512.0], [997.0, 2550.0], [995.0, 2488.166666666667], [1074.0, 2477.5], [1086.0, 2475.8], [1072.0, 2521.8333333333335], [1066.0, 2559.5], [1062.0, 2459.8], [1052.0, 2538.3333333333335], [1024.0, 2705.0], [1030.0, 2485.8333333333335], [1042.0, 2452.0], [1100.0, 2521.0], [1132.0, 2331.3333333333335], [1122.0, 2413.0], [1110.0, 2453.0], [1106.0, 2454.833333333333], [1166.0, 2336.0], [1204.0, 2310.5555555555557], [1162.0, 2166.3333333333335], [1154.0, 2240.6666666666665], [1186.0, 2056.0], [1182.0, 2294.2], [1176.0, 2646.0], [1276.0, 2266.0], [1278.0, 1428.0], [1272.0, 2284.3333333333335], [1220.0, 2698.0], [1242.0, 2222.3333333333335], [1236.0, 2195.142857142857], [1262.0, 2224.5], [1260.0, 2239.0], [1252.0, 2167.6666666666665], [1294.0, 2078.25], [1340.0, 2089.0], [1332.0, 2110.0], [1330.0, 2000.0], [1286.0, 2251.75], [1284.0, 2258.0], [1310.0, 2225.25], [1308.0, 2352.5], [1304.0, 2255.5], [1302.0, 2402.3333333333335], [1300.0, 2251.0], [1296.0, 2169.5], [1388.0, 1750.5], [1384.0, 1840.7142857142858], [1358.0, 2149.0], [1356.0, 1996.3333333333333], [1348.0, 2033.0], [1346.0, 2004.0], [1468.0, 1760.3333333333333], [1460.0, 1622.0], [1454.0, 1891.25], [1450.0, 1847.6249999999998], [1442.0, 1788.375], [1434.0, 1806.1666666666667], [1532.0, 1708.0], [1484.0, 1618.2], [1506.0, 1731.0], [1494.0, 1652.0], [1492.0, 2043.5], [1490.0, 1646.0], [1550.0, 1685.6666666666667], [1590.0, 1481.25], [1596.0, 1509.1666666666667], [1586.0, 1540.8], [1548.0, 1564.0], [1542.0, 1806.8], [1568.0, 1511.0], [1566.0, 1623.0], [1556.0, 1559.6], [1554.0, 2381.0], [1660.0, 1490.0], [1650.0, 1525.0], [1648.0, 1483.5], [1614.0, 1807.1666666666665], [1608.0, 1512.3333333333333], [1644.0, 1687.2], [1722.0, 1583.0], [1724.0, 1429.0], [1698.0, 1574.2], [1700.0, 1417.0], [1714.0, 1376.0], [1666.0, 1471.0], [1676.0, 1252.2], [1680.0, 1447.5], [1708.0, 1419.0], [1706.0, 1458.8333333333333], [1728.0, 1320.0], [1790.0, 1267.6666666666667], [1786.0, 1458.0], [1778.0, 1512.0], [1758.0, 1315.25], [1740.0, 1432.0], [1754.0, 1267.5], [1750.0, 1269.0], [1748.0, 1316.6], [1772.0, 1377.3333333333333], [1766.0, 1330.5], [1764.0, 1400.25], [1760.0, 1349.5], [1846.0, 1118.0], [1840.0, 1199.5], [1850.0, 1137.0], [1854.0, 1362.0], [1852.0, 1326.0], [1824.0, 883.2857142857143], [1828.0, 973.0], [1842.0, 1107.7142857142858], [1822.0, 1043.0], [1792.0, 1159.0], [1796.0, 888.4], [1798.0, 1420.6666666666667], [1794.0, 1075.4], [1804.0, 1277.0], [1802.0, 990.0], [1820.0, 928.0], [1814.0, 1395.0], [1810.0, 1392.0], [1836.0, 1141.3333333333335], [1834.0, 1217.0], [1832.0, 1126.0], [1860.0, 1064.0], [1874.0, 1113.2], [1866.0, 1117.3333333333333], [1864.0, 998.5], [1862.0, 1157.6], [1081.0, 2446.857142857143], [1057.0, 2605.2], [1031.0, 2490.0], [1037.0, 2544.0], [1033.0, 2767.0], [1049.0, 2532.25], [1045.0, 2482.6666666666665], [1151.0, 2254.5], [1125.0, 2597.3333333333335], [1143.0, 2353.25], [1139.0, 2359.25], [1095.0, 2479.777777777778], [1135.0, 2364.0], [1129.0, 2411.25], [1117.0, 2463.5], [1113.0, 2537.6666666666665], [1209.0, 2256.4], [1159.0, 2263.0], [1195.0, 2261.25], [1187.0, 2293.0], [1185.0, 2179.0], [1177.0, 2275.3333333333335], [1169.0, 2101.3333333333335], [1269.0, 2229.714285714286], [1279.0, 2276.0], [1249.0, 2202.0], [1277.0, 2357.5], [1243.0, 2089.0], [1219.0, 2227.3333333333335], [1223.0, 2316.0], [1221.0, 2177.5], [1229.0, 2059.5], [1225.0, 2423.444444444444], [1259.0, 2118.1428571428573], [1341.0, 2275.0], [1339.0, 1812.0], [1343.0, 2387.0], [1337.0, 1912.2], [1285.0, 2255.0], [1301.0, 2958.0], [1297.0, 2253.0], [1323.0, 2130.75], [1319.0, 2119.4444444444443], [1353.0, 1820.5], [1403.0, 1910.5], [1407.0, 1676.0], [1395.0, 1842.5714285714287], [1377.0, 1888.8333333333333], [1371.0, 1844.1666666666665], [1365.0, 1884.5714285714287], [1351.0, 1964.0], [1349.0, 1822.0], [1347.0, 2104.0], [1345.0, 1999.0], [1465.0, 1711.25], [1471.0, 2121.3333333333335], [1461.0, 1809.6666666666667], [1419.0, 1779.0], [1411.0, 1946.2857142857142], [1431.0, 1853.0], [1427.0, 1785.2499999999998], [1485.0, 1615.0], [1525.0, 1790.5], [1479.0, 1612.5], [1477.0, 1682.75], [1473.0, 1807.0], [1517.0, 1883.5], [1515.0, 1729.8333333333335], [1509.0, 1684.5], [1507.0, 1460.0], [1503.0, 1661.0], [1497.0, 1949.0], [1495.0, 1649.0], [1493.0, 1502.0], [1547.0, 1414.0], [1581.0, 1503.8333333333333], [1575.0, 1586.3333333333333], [1569.0, 1555.8], [1567.0, 1876.0], [1657.0, 1506.5], [1663.0, 1477.0], [1639.0, 1510.5], [1635.0, 1585.5], [1655.0, 1502.0], [1651.0, 1834.0], [1605.0, 1665.0], [1601.0, 1641.2], [1631.0, 1717.6666666666667], [1625.0, 1739.0], [1621.0, 1580.7142857142858], [1647.0, 1536.0], [1717.0, 1540.6666666666667], [1727.0, 1441.6666666666667], [1699.0, 1348.0], [1721.0, 1416.5], [1693.0, 1437.8333333333333], [1671.0, 1544.8], [1687.0, 1337.0], [1685.0, 1439.8], [1711.0, 1398.3333333333333], [1707.0, 1096.0], [1781.0, 1405.5], [1787.0, 1526.0], [1779.0, 1594.1666666666667], [1731.0, 1606.3333333333333], [1737.0, 1175.5], [1735.0, 1430.5], [1743.0, 1306.6666666666667], [1849.0, 1101.5], [1847.0, 1020.7], [1853.0, 1078.0], [1827.0, 1089.0], [1825.0, 1279.0], [1855.0, 1159.2222222222222], [1831.0, 1136.8333333333335], [1851.0, 1229.5], [1845.0, 1255.0], [1841.0, 1072.0], [1823.0, 1199.0], [1795.0, 1086.0], [1801.0, 560.0], [1799.0, 867.375], [1805.0, 727.0], [1807.0, 1274.75], [1803.0, 1289.7142857142858], [1821.0, 1376.0], [1819.0, 1163.923076923077], [1811.0, 1339.0], [1817.0, 1292.5], [1815.0, 1370.0], [1809.0, 1148.2], [1839.0, 1189.5714285714287], [1859.0, 948.6], [1869.0, 1101.5714285714287], [1861.0, 1223.0], [1.0, 4018.5]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[582.1743333333327, 1222.9353333333363]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1874.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 42860.066666666666, "minX": 1.63137522E12, "maxY": 87173.25, "series": [{"data": [[1.63137522E12, 87173.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63137522E12, 42860.066666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137522E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1222.9353333333363, "minX": 1.63137522E12, "maxY": 1222.9353333333363, "series": [{"data": [[1.63137522E12, 1222.9353333333363]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137522E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1207.412999999997, "minX": 1.63137522E12, "maxY": 1207.412999999997, "series": [{"data": [[1.63137522E12, 1207.412999999997]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137522E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 286.8015000000002, "minX": 1.63137522E12, "maxY": 286.8015000000002, "series": [{"data": [[1.63137522E12, 286.8015000000002]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137522E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 47.0, "minX": 1.63137522E12, "maxY": 6959.0, "series": [{"data": [[1.63137522E12, 6959.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63137522E12, 3205.9000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63137522E12, 4930.49999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63137522E12, 3749.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63137522E12, 47.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63137522E12, 797.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137522E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 84.0, "minX": 6.0, "maxY": 6523.0, "series": [{"data": [[539.0, 623.0], [36.0, 5274.0], [584.0, 1276.0], [660.0, 3583.0], [171.0, 160.0], [889.0, 103.0], [871.0, 746.0], [940.0, 84.0], [278.0, 1237.0], [74.0, 4384.0], [23.0, 6523.0], [6.0, 1400.0], [450.0, 2544.0], [479.0, 1760.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[278.0, 1509.0], [660.0, 3427.0], [450.0, 2392.0], [479.0, 1497.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 940.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 84.0, "minX": 6.0, "maxY": 6523.0, "series": [{"data": [[539.0, 623.0], [36.0, 5147.5], [584.0, 1276.0], [660.0, 3443.0], [171.0, 160.0], [889.0, 103.0], [871.0, 746.0], [940.0, 84.0], [278.0, 1237.0], [74.0, 4261.5], [23.0, 6523.0], [6.0, 1400.0], [450.0, 2525.0], [479.0, 1758.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[278.0, 1509.0], [660.0, 3427.0], [450.0, 2392.0], [479.0, 1497.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 940.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.63137522E12, "maxY": 100.0, "series": [{"data": [[1.63137522E12, 100.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63137522E12, "maxY": 99.66666666666667, "series": [{"data": [[1.63137522E12, 99.66666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63137522E12, 0.25]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.63137522E12, 0.08333333333333333]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63137522E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.63137522E12, "maxY": 99.66666666666667, "series": [{"data": [[1.63137522E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63137522E12, 99.66666666666667]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137522E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.63137522E12, "maxY": 99.66666666666667, "series": [{"data": [[1.63137522E12, 99.66666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63137522E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63137522E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

