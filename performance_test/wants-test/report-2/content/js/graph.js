/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 87.0, "minX": 0.0, "maxY": 4517.0, "series": [{"data": [[0.0, 87.0], [0.1, 92.0], [0.2, 108.0], [0.3, 111.0], [0.4, 119.0], [0.5, 119.0], [0.6, 125.0], [0.7, 137.0], [0.8, 148.0], [0.9, 158.0], [1.0, 172.0], [1.1, 187.0], [1.2, 192.0], [1.3, 204.0], [1.4, 209.0], [1.5, 210.0], [1.6, 248.0], [1.7, 250.0], [1.8, 259.0], [1.9, 259.0], [2.0, 261.0], [2.1, 263.0], [2.2, 271.0], [2.3, 273.0], [2.4, 275.0], [2.5, 278.0], [2.6, 282.0], [2.7, 284.0], [2.8, 284.0], [2.9, 287.0], [3.0, 289.0], [3.1, 296.0], [3.2, 296.0], [3.3, 297.0], [3.4, 303.0], [3.5, 304.0], [3.6, 306.0], [3.7, 310.0], [3.8, 314.0], [3.9, 319.0], [4.0, 320.0], [4.1, 323.0], [4.2, 324.0], [4.3, 326.0], [4.4, 327.0], [4.5, 331.0], [4.6, 331.0], [4.7, 333.0], [4.8, 334.0], [4.9, 338.0], [5.0, 341.0], [5.1, 350.0], [5.2, 351.0], [5.3, 360.0], [5.4, 364.0], [5.5, 365.0], [5.6, 367.0], [5.7, 370.0], [5.8, 371.0], [5.9, 372.0], [6.0, 372.0], [6.1, 374.0], [6.2, 377.0], [6.3, 379.0], [6.4, 381.0], [6.5, 386.0], [6.6, 388.0], [6.7, 392.0], [6.8, 397.0], [6.9, 408.0], [7.0, 409.0], [7.1, 411.0], [7.2, 414.0], [7.3, 416.0], [7.4, 418.0], [7.5, 419.0], [7.6, 420.0], [7.7, 422.0], [7.8, 423.0], [7.9, 427.0], [8.0, 430.0], [8.1, 437.0], [8.2, 437.0], [8.3, 440.0], [8.4, 440.0], [8.5, 441.0], [8.6, 450.0], [8.7, 455.0], [8.8, 456.0], [8.9, 460.0], [9.0, 466.0], [9.1, 476.0], [9.2, 476.0], [9.3, 490.0], [9.4, 492.0], [9.5, 493.0], [9.6, 496.0], [9.7, 497.0], [9.8, 498.0], [9.9, 500.0], [10.0, 502.0], [10.1, 502.0], [10.2, 509.0], [10.3, 511.0], [10.4, 516.0], [10.5, 527.0], [10.6, 533.0], [10.7, 534.0], [10.8, 536.0], [10.9, 541.0], [11.0, 542.0], [11.1, 544.0], [11.2, 547.0], [11.3, 548.0], [11.4, 552.0], [11.5, 554.0], [11.6, 563.0], [11.7, 564.0], [11.8, 566.0], [11.9, 568.0], [12.0, 581.0], [12.1, 584.0], [12.2, 592.0], [12.3, 597.0], [12.4, 606.0], [12.5, 608.0], [12.6, 613.0], [12.7, 614.0], [12.8, 617.0], [12.9, 617.0], [13.0, 619.0], [13.1, 620.0], [13.2, 623.0], [13.3, 624.0], [13.4, 627.0], [13.5, 628.0], [13.6, 630.0], [13.7, 631.0], [13.8, 635.0], [13.9, 640.0], [14.0, 643.0], [14.1, 644.0], [14.2, 650.0], [14.3, 654.0], [14.4, 660.0], [14.5, 663.0], [14.6, 669.0], [14.7, 673.0], [14.8, 676.0], [14.9, 680.0], [15.0, 685.0], [15.1, 689.0], [15.2, 692.0], [15.3, 693.0], [15.4, 697.0], [15.5, 698.0], [15.6, 699.0], [15.7, 717.0], [15.8, 719.0], [15.9, 730.0], [16.0, 731.0], [16.1, 733.0], [16.2, 737.0], [16.3, 746.0], [16.4, 752.0], [16.5, 754.0], [16.6, 760.0], [16.7, 760.0], [16.8, 762.0], [16.9, 772.0], [17.0, 774.0], [17.1, 780.0], [17.2, 784.0], [17.3, 784.0], [17.4, 789.0], [17.5, 790.0], [17.6, 798.0], [17.7, 798.0], [17.8, 799.0], [17.9, 800.0], [18.0, 806.0], [18.1, 807.0], [18.2, 818.0], [18.3, 818.0], [18.4, 821.0], [18.5, 821.0], [18.6, 824.0], [18.7, 825.0], [18.8, 827.0], [18.9, 827.0], [19.0, 831.0], [19.1, 833.0], [19.2, 841.0], [19.3, 841.0], [19.4, 843.0], [19.5, 844.0], [19.6, 848.0], [19.7, 852.0], [19.8, 858.0], [19.9, 860.0], [20.0, 864.0], [20.1, 865.0], [20.2, 869.0], [20.3, 870.0], [20.4, 872.0], [20.5, 876.0], [20.6, 880.0], [20.7, 884.0], [20.8, 887.0], [20.9, 891.0], [21.0, 899.0], [21.1, 905.0], [21.2, 914.0], [21.3, 922.0], [21.4, 923.0], [21.5, 930.0], [21.6, 934.0], [21.7, 935.0], [21.8, 937.0], [21.9, 939.0], [22.0, 941.0], [22.1, 941.0], [22.2, 943.0], [22.3, 943.0], [22.4, 946.0], [22.5, 950.0], [22.6, 958.0], [22.7, 960.0], [22.8, 970.0], [22.9, 975.0], [23.0, 984.0], [23.1, 988.0], [23.2, 990.0], [23.3, 995.0], [23.4, 998.0], [23.5, 1001.0], [23.6, 1002.0], [23.7, 1002.0], [23.8, 1008.0], [23.9, 1010.0], [24.0, 1011.0], [24.1, 1015.0], [24.2, 1025.0], [24.3, 1025.0], [24.4, 1033.0], [24.5, 1035.0], [24.6, 1045.0], [24.7, 1047.0], [24.8, 1056.0], [24.9, 1059.0], [25.0, 1065.0], [25.1, 1070.0], [25.2, 1074.0], [25.3, 1076.0], [25.4, 1081.0], [25.5, 1082.0], [25.6, 1085.0], [25.7, 1085.0], [25.8, 1088.0], [25.9, 1089.0], [26.0, 1090.0], [26.1, 1092.0], [26.2, 1096.0], [26.3, 1098.0], [26.4, 1104.0], [26.5, 1105.0], [26.6, 1109.0], [26.7, 1109.0], [26.8, 1112.0], [26.9, 1116.0], [27.0, 1128.0], [27.1, 1129.0], [27.2, 1137.0], [27.3, 1139.0], [27.4, 1141.0], [27.5, 1141.0], [27.6, 1148.0], [27.7, 1150.0], [27.8, 1153.0], [27.9, 1157.0], [28.0, 1162.0], [28.1, 1163.0], [28.2, 1163.0], [28.3, 1163.0], [28.4, 1166.0], [28.5, 1168.0], [28.6, 1169.0], [28.7, 1170.0], [28.8, 1177.0], [28.9, 1177.0], [29.0, 1187.0], [29.1, 1193.0], [29.2, 1194.0], [29.3, 1196.0], [29.4, 1199.0], [29.5, 1207.0], [29.6, 1215.0], [29.7, 1221.0], [29.8, 1225.0], [29.9, 1240.0], [30.0, 1244.0], [30.1, 1251.0], [30.2, 1265.0], [30.3, 1265.0], [30.4, 1270.0], [30.5, 1272.0], [30.6, 1277.0], [30.7, 1278.0], [30.8, 1284.0], [30.9, 1285.0], [31.0, 1293.0], [31.1, 1295.0], [31.2, 1302.0], [31.3, 1304.0], [31.4, 1308.0], [31.5, 1317.0], [31.6, 1322.0], [31.7, 1324.0], [31.8, 1330.0], [31.9, 1332.0], [32.0, 1338.0], [32.1, 1344.0], [32.2, 1352.0], [32.3, 1353.0], [32.4, 1353.0], [32.5, 1358.0], [32.6, 1366.0], [32.7, 1369.0], [32.8, 1372.0], [32.9, 1376.0], [33.0, 1376.0], [33.1, 1377.0], [33.2, 1380.0], [33.3, 1382.0], [33.4, 1382.0], [33.5, 1383.0], [33.6, 1386.0], [33.7, 1393.0], [33.8, 1401.0], [33.9, 1406.0], [34.0, 1410.0], [34.1, 1411.0], [34.2, 1418.0], [34.3, 1420.0], [34.4, 1424.0], [34.5, 1426.0], [34.6, 1429.0], [34.7, 1431.0], [34.8, 1432.0], [34.9, 1456.0], [35.0, 1459.0], [35.1, 1462.0], [35.2, 1462.0], [35.3, 1465.0], [35.4, 1469.0], [35.5, 1480.0], [35.6, 1493.0], [35.7, 1499.0], [35.8, 1501.0], [35.9, 1507.0], [36.0, 1510.0], [36.1, 1517.0], [36.2, 1521.0], [36.3, 1523.0], [36.4, 1525.0], [36.5, 1534.0], [36.6, 1542.0], [36.7, 1544.0], [36.8, 1556.0], [36.9, 1560.0], [37.0, 1561.0], [37.1, 1566.0], [37.2, 1567.0], [37.3, 1571.0], [37.4, 1584.0], [37.5, 1595.0], [37.6, 1595.0], [37.7, 1598.0], [37.8, 1599.0], [37.9, 1601.0], [38.0, 1604.0], [38.1, 1607.0], [38.2, 1607.0], [38.3, 1612.0], [38.4, 1615.0], [38.5, 1624.0], [38.6, 1625.0], [38.7, 1629.0], [38.8, 1630.0], [38.9, 1633.0], [39.0, 1635.0], [39.1, 1638.0], [39.2, 1638.0], [39.3, 1641.0], [39.4, 1641.0], [39.5, 1646.0], [39.6, 1646.0], [39.7, 1662.0], [39.8, 1664.0], [39.9, 1668.0], [40.0, 1668.0], [40.1, 1670.0], [40.2, 1675.0], [40.3, 1681.0], [40.4, 1684.0], [40.5, 1685.0], [40.6, 1688.0], [40.7, 1688.0], [40.8, 1689.0], [40.9, 1693.0], [41.0, 1696.0], [41.1, 1698.0], [41.2, 1698.0], [41.3, 1699.0], [41.4, 1699.0], [41.5, 1710.0], [41.6, 1712.0], [41.7, 1716.0], [41.8, 1717.0], [41.9, 1718.0], [42.0, 1720.0], [42.1, 1726.0], [42.2, 1726.0], [42.3, 1729.0], [42.4, 1731.0], [42.5, 1734.0], [42.6, 1735.0], [42.7, 1737.0], [42.8, 1739.0], [42.9, 1741.0], [43.0, 1741.0], [43.1, 1747.0], [43.2, 1750.0], [43.3, 1753.0], [43.4, 1758.0], [43.5, 1761.0], [43.6, 1761.0], [43.7, 1764.0], [43.8, 1765.0], [43.9, 1767.0], [44.0, 1770.0], [44.1, 1775.0], [44.2, 1776.0], [44.3, 1780.0], [44.4, 1781.0], [44.5, 1783.0], [44.6, 1784.0], [44.7, 1784.0], [44.8, 1786.0], [44.9, 1790.0], [45.0, 1794.0], [45.1, 1799.0], [45.2, 1800.0], [45.3, 1802.0], [45.4, 1803.0], [45.5, 1805.0], [45.6, 1806.0], [45.7, 1806.0], [45.8, 1807.0], [45.9, 1812.0], [46.0, 1813.0], [46.1, 1816.0], [46.2, 1817.0], [46.3, 1822.0], [46.4, 1825.0], [46.5, 1828.0], [46.6, 1828.0], [46.7, 1831.0], [46.8, 1832.0], [46.9, 1833.0], [47.0, 1834.0], [47.1, 1838.0], [47.2, 1842.0], [47.3, 1846.0], [47.4, 1846.0], [47.5, 1848.0], [47.6, 1849.0], [47.7, 1852.0], [47.8, 1857.0], [47.9, 1858.0], [48.0, 1858.0], [48.1, 1861.0], [48.2, 1861.0], [48.3, 1868.0], [48.4, 1873.0], [48.5, 1882.0], [48.6, 1883.0], [48.7, 1888.0], [48.8, 1890.0], [48.9, 1893.0], [49.0, 1895.0], [49.1, 1900.0], [49.2, 1901.0], [49.3, 1904.0], [49.4, 1908.0], [49.5, 1909.0], [49.6, 1910.0], [49.7, 1910.0], [49.8, 1913.0], [49.9, 1917.0], [50.0, 1919.0], [50.1, 1924.0], [50.2, 1926.0], [50.3, 1931.0], [50.4, 1931.0], [50.5, 1933.0], [50.6, 1936.0], [50.7, 1942.0], [50.8, 1943.0], [50.9, 1947.0], [51.0, 1952.0], [51.1, 1952.0], [51.2, 1955.0], [51.3, 1960.0], [51.4, 1960.0], [51.5, 1962.0], [51.6, 1970.0], [51.7, 1972.0], [51.8, 1973.0], [51.9, 1977.0], [52.0, 1978.0], [52.1, 1984.0], [52.2, 1985.0], [52.3, 1989.0], [52.4, 1990.0], [52.5, 1995.0], [52.6, 1996.0], [52.7, 2001.0], [52.8, 2005.0], [52.9, 2007.0], [53.0, 2011.0], [53.1, 2014.0], [53.2, 2015.0], [53.3, 2020.0], [53.4, 2021.0], [53.5, 2032.0], [53.6, 2035.0], [53.7, 2037.0], [53.8, 2039.0], [53.9, 2042.0], [54.0, 2044.0], [54.1, 2046.0], [54.2, 2049.0], [54.3, 2050.0], [54.4, 2051.0], [54.5, 2053.0], [54.6, 2053.0], [54.7, 2063.0], [54.8, 2064.0], [54.9, 2069.0], [55.0, 2071.0], [55.1, 2075.0], [55.2, 2080.0], [55.3, 2080.0], [55.4, 2083.0], [55.5, 2086.0], [55.6, 2087.0], [55.7, 2088.0], [55.8, 2089.0], [55.9, 2093.0], [56.0, 2093.0], [56.1, 2094.0], [56.2, 2096.0], [56.3, 2097.0], [56.4, 2097.0], [56.5, 2103.0], [56.6, 2103.0], [56.7, 2106.0], [56.8, 2106.0], [56.9, 2106.0], [57.0, 2107.0], [57.1, 2108.0], [57.2, 2108.0], [57.3, 2113.0], [57.4, 2114.0], [57.5, 2115.0], [57.6, 2116.0], [57.7, 2120.0], [57.8, 2123.0], [57.9, 2124.0], [58.0, 2125.0], [58.1, 2126.0], [58.2, 2127.0], [58.3, 2134.0], [58.4, 2135.0], [58.5, 2137.0], [58.6, 2137.0], [58.7, 2138.0], [58.8, 2141.0], [58.9, 2144.0], [59.0, 2145.0], [59.1, 2146.0], [59.2, 2148.0], [59.3, 2158.0], [59.4, 2161.0], [59.5, 2163.0], [59.6, 2163.0], [59.7, 2164.0], [59.8, 2167.0], [59.9, 2169.0], [60.0, 2170.0], [60.1, 2180.0], [60.2, 2180.0], [60.3, 2184.0], [60.4, 2186.0], [60.5, 2192.0], [60.6, 2192.0], [60.7, 2193.0], [60.8, 2197.0], [60.9, 2199.0], [61.0, 2200.0], [61.1, 2204.0], [61.2, 2204.0], [61.3, 2205.0], [61.4, 2207.0], [61.5, 2213.0], [61.6, 2219.0], [61.7, 2223.0], [61.8, 2224.0], [61.9, 2227.0], [62.0, 2228.0], [62.1, 2240.0], [62.2, 2240.0], [62.3, 2245.0], [62.4, 2245.0], [62.5, 2246.0], [62.6, 2247.0], [62.7, 2256.0], [62.8, 2260.0], [62.9, 2268.0], [63.0, 2271.0], [63.1, 2275.0], [63.2, 2276.0], [63.3, 2284.0], [63.4, 2285.0], [63.5, 2289.0], [63.6, 2293.0], [63.7, 2294.0], [63.8, 2296.0], [63.9, 2302.0], [64.0, 2305.0], [64.1, 2308.0], [64.2, 2309.0], [64.3, 2313.0], [64.4, 2314.0], [64.5, 2316.0], [64.6, 2321.0], [64.7, 2325.0], [64.8, 2327.0], [64.9, 2333.0], [65.0, 2335.0], [65.1, 2336.0], [65.2, 2338.0], [65.3, 2351.0], [65.4, 2352.0], [65.5, 2366.0], [65.6, 2367.0], [65.7, 2374.0], [65.8, 2374.0], [65.9, 2380.0], [66.0, 2390.0], [66.1, 2391.0], [66.2, 2393.0], [66.3, 2400.0], [66.4, 2401.0], [66.5, 2402.0], [66.6, 2403.0], [66.7, 2406.0], [66.8, 2408.0], [66.9, 2411.0], [67.0, 2413.0], [67.1, 2414.0], [67.2, 2415.0], [67.3, 2416.0], [67.4, 2417.0], [67.5, 2426.0], [67.6, 2430.0], [67.7, 2436.0], [67.8, 2450.0], [67.9, 2454.0], [68.0, 2460.0], [68.1, 2463.0], [68.2, 2466.0], [68.3, 2469.0], [68.4, 2470.0], [68.5, 2472.0], [68.6, 2473.0], [68.7, 2485.0], [68.8, 2489.0], [68.9, 2490.0], [69.0, 2493.0], [69.1, 2502.0], [69.2, 2503.0], [69.3, 2505.0], [69.4, 2509.0], [69.5, 2512.0], [69.6, 2516.0], [69.7, 2519.0], [69.8, 2520.0], [69.9, 2525.0], [70.0, 2525.0], [70.1, 2537.0], [70.2, 2537.0], [70.3, 2539.0], [70.4, 2539.0], [70.5, 2541.0], [70.6, 2541.0], [70.7, 2559.0], [70.8, 2560.0], [70.9, 2570.0], [71.0, 2570.0], [71.1, 2577.0], [71.2, 2581.0], [71.3, 2591.0], [71.4, 2596.0], [71.5, 2606.0], [71.6, 2610.0], [71.7, 2613.0], [71.8, 2615.0], [71.9, 2621.0], [72.0, 2627.0], [72.1, 2641.0], [72.2, 2643.0], [72.3, 2647.0], [72.4, 2648.0], [72.5, 2650.0], [72.6, 2651.0], [72.7, 2655.0], [72.8, 2659.0], [72.9, 2661.0], [73.0, 2663.0], [73.1, 2668.0], [73.2, 2669.0], [73.3, 2670.0], [73.4, 2672.0], [73.5, 2674.0], [73.6, 2674.0], [73.7, 2678.0], [73.8, 2684.0], [73.9, 2688.0], [74.0, 2688.0], [74.1, 2693.0], [74.2, 2694.0], [74.3, 2699.0], [74.4, 2699.0], [74.5, 2702.0], [74.6, 2703.0], [74.7, 2714.0], [74.8, 2720.0], [74.9, 2722.0], [75.0, 2722.0], [75.1, 2732.0], [75.2, 2735.0], [75.3, 2742.0], [75.4, 2743.0], [75.5, 2745.0], [75.6, 2745.0], [75.7, 2749.0], [75.8, 2750.0], [75.9, 2751.0], [76.0, 2751.0], [76.1, 2768.0], [76.2, 2771.0], [76.3, 2776.0], [76.4, 2781.0], [76.5, 2789.0], [76.6, 2792.0], [76.7, 2793.0], [76.8, 2794.0], [76.9, 2797.0], [77.0, 2798.0], [77.1, 2800.0], [77.2, 2805.0], [77.3, 2807.0], [77.4, 2812.0], [77.5, 2814.0], [77.6, 2815.0], [77.7, 2823.0], [77.8, 2825.0], [77.9, 2828.0], [78.0, 2828.0], [78.1, 2832.0], [78.2, 2833.0], [78.3, 2838.0], [78.4, 2839.0], [78.5, 2845.0], [78.6, 2845.0], [78.7, 2855.0], [78.8, 2856.0], [78.9, 2863.0], [79.0, 2865.0], [79.1, 2873.0], [79.2, 2873.0], [79.3, 2881.0], [79.4, 2881.0], [79.5, 2886.0], [79.6, 2887.0], [79.7, 2888.0], [79.8, 2893.0], [79.9, 2898.0], [80.0, 2898.0], [80.1, 2902.0], [80.2, 2904.0], [80.3, 2910.0], [80.4, 2912.0], [80.5, 2914.0], [80.6, 2918.0], [80.7, 2923.0], [80.8, 2923.0], [80.9, 2929.0], [81.0, 2932.0], [81.1, 2937.0], [81.2, 2940.0], [81.3, 2960.0], [81.4, 2960.0], [81.5, 2971.0], [81.6, 2978.0], [81.7, 2984.0], [81.8, 2986.0], [81.9, 2995.0], [82.0, 2997.0], [82.1, 3006.0], [82.2, 3025.0], [82.3, 3028.0], [82.4, 3029.0], [82.5, 3034.0], [82.6, 3034.0], [82.7, 3035.0], [82.8, 3036.0], [82.9, 3038.0], [83.0, 3039.0], [83.1, 3050.0], [83.2, 3051.0], [83.3, 3052.0], [83.4, 3052.0], [83.5, 3058.0], [83.6, 3060.0], [83.7, 3061.0], [83.8, 3062.0], [83.9, 3067.0], [84.0, 3074.0], [84.1, 3076.0], [84.2, 3081.0], [84.3, 3086.0], [84.4, 3090.0], [84.5, 3095.0], [84.6, 3098.0], [84.7, 3111.0], [84.8, 3112.0], [84.9, 3124.0], [85.0, 3133.0], [85.1, 3139.0], [85.2, 3139.0], [85.3, 3142.0], [85.4, 3146.0], [85.5, 3160.0], [85.6, 3163.0], [85.7, 3165.0], [85.8, 3167.0], [85.9, 3178.0], [86.0, 3188.0], [86.1, 3206.0], [86.2, 3212.0], [86.3, 3230.0], [86.4, 3231.0], [86.5, 3237.0], [86.6, 3241.0], [86.7, 3257.0], [86.8, 3257.0], [86.9, 3260.0], [87.0, 3266.0], [87.1, 3268.0], [87.2, 3270.0], [87.3, 3273.0], [87.4, 3295.0], [87.5, 3301.0], [87.6, 3302.0], [87.7, 3316.0], [87.8, 3320.0], [87.9, 3340.0], [88.0, 3343.0], [88.1, 3357.0], [88.2, 3362.0], [88.3, 3377.0], [88.4, 3387.0], [88.5, 3390.0], [88.6, 3396.0], [88.7, 3403.0], [88.8, 3406.0], [88.9, 3409.0], [89.0, 3412.0], [89.1, 3428.0], [89.2, 3429.0], [89.3, 3431.0], [89.4, 3432.0], [89.5, 3435.0], [89.6, 3435.0], [89.7, 3443.0], [89.8, 3446.0], [89.9, 3454.0], [90.0, 3456.0], [90.1, 3464.0], [90.2, 3469.0], [90.3, 3472.0], [90.4, 3475.0], [90.5, 3480.0], [90.6, 3482.0], [90.7, 3484.0], [90.8, 3487.0], [90.9, 3490.0], [91.0, 3490.0], [91.1, 3498.0], [91.2, 3499.0], [91.3, 3504.0], [91.4, 3509.0], [91.5, 3516.0], [91.6, 3516.0], [91.7, 3523.0], [91.8, 3529.0], [91.9, 3534.0], [92.0, 3536.0], [92.1, 3541.0], [92.2, 3546.0], [92.3, 3560.0], [92.4, 3565.0], [92.5, 3573.0], [92.6, 3574.0], [92.7, 3575.0], [92.8, 3578.0], [92.9, 3585.0], [93.0, 3589.0], [93.1, 3596.0], [93.2, 3608.0], [93.3, 3613.0], [93.4, 3614.0], [93.5, 3620.0], [93.6, 3621.0], [93.7, 3625.0], [93.8, 3625.0], [93.9, 3630.0], [94.0, 3643.0], [94.1, 3654.0], [94.2, 3655.0], [94.3, 3662.0], [94.4, 3662.0], [94.5, 3673.0], [94.6, 3684.0], [94.7, 3689.0], [94.8, 3695.0], [94.9, 3697.0], [95.0, 3699.0], [95.1, 3701.0], [95.2, 3704.0], [95.3, 3713.0], [95.4, 3715.0], [95.5, 3718.0], [95.6, 3720.0], [95.7, 3721.0], [95.8, 3731.0], [95.9, 3733.0], [96.0, 3739.0], [96.1, 3742.0], [96.2, 3746.0], [96.3, 3747.0], [96.4, 3753.0], [96.5, 3753.0], [96.6, 3766.0], [96.7, 3771.0], [96.8, 3772.0], [96.9, 3772.0], [97.0, 3784.0], [97.1, 3785.0], [97.2, 3786.0], [97.3, 3787.0], [97.4, 3789.0], [97.5, 3790.0], [97.6, 3800.0], [97.7, 3802.0], [97.8, 3806.0], [97.9, 3819.0], [98.0, 3825.0], [98.1, 3826.0], [98.2, 3832.0], [98.3, 3834.0], [98.4, 3836.0], [98.5, 3837.0], [98.6, 3839.0], [98.7, 3839.0], [98.8, 3841.0], [98.9, 3843.0], [99.0, 3851.0], [99.1, 3852.0], [99.2, 3858.0], [99.3, 3858.0], [99.4, 3860.0], [99.5, 3861.0], [99.6, 3879.0], [99.7, 3885.0], [99.8, 3905.0], [99.9, 3907.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 67.0, "series": [{"data": [[0.0, 2.0], [600.0, 50.0], [700.0, 33.0], [800.0, 48.0], [900.0, 36.0], [1000.0, 43.0], [1100.0, 47.0], [1200.0, 25.0], [1300.0, 39.0], [1400.0, 30.0], [1500.0, 31.0], [100.0, 17.0], [1600.0, 54.0], [1700.0, 56.0], [1800.0, 58.0], [1900.0, 55.0], [2000.0, 57.0], [2100.0, 67.0], [2200.0, 43.0], [2300.0, 37.0], [2400.0, 42.0], [2500.0, 35.0], [2600.0, 45.0], [2700.0, 40.0], [2800.0, 44.0], [2900.0, 30.0], [3000.0, 39.0], [3100.0, 22.0], [200.0, 31.0], [3200.0, 20.0], [3300.0, 19.0], [3400.0, 39.0], [3500.0, 28.0], [3600.0, 29.0], [3700.0, 38.0], [3800.0, 33.0], [3900.0, 2.0], [4500.0, 1.0], [300.0, 52.0], [400.0, 46.0], [500.0, 37.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 963.0, "series": [{"data": [[0.0, 149.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 387.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 963.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 241.77800000000016, "minX": 1.63068174E12, "maxY": 246.33999999999972, "series": [{"data": [[1.63068174E12, 241.77800000000016]], "isOverall": false, "label": "deleteWants", "isController": false}, {"data": [[1.63068174E12, 246.33999999999972]], "isOverall": false, "label": "checkFavorite", "isController": false}, {"data": [[1.63068174E12, 245.47600000000006]], "isOverall": false, "label": "addWants", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068174E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 148.0, "minX": 1.0, "maxY": 4168.0, "series": [{"data": [[2.0, 3747.0], [3.0, 3662.0], [6.0, 3753.0], [7.0, 3782.0], [12.0, 3806.5], [13.0, 3860.0], [14.0, 3739.0], [15.0, 3785.0], [16.0, 3697.0], [17.0, 3858.0], [18.0, 3772.0], [20.0, 3848.0], [22.0, 3881.5], [26.0, 3853.5], [27.0, 3843.0], [30.0, 3840.6666666666665], [33.0, 3831.0], [35.0, 3750.25], [39.0, 3760.0], [40.0, 3836.0], [43.0, 3825.0], [42.0, 3840.0], [44.0, 3589.0], [51.0, 3713.0], [52.0, 4168.0], [54.0, 3765.1428571428573], [56.0, 3700.0], [59.0, 3732.3333333333335], [61.0, 3643.0], [60.0, 3766.0], [63.0, 3625.0], [62.0, 3785.0], [64.0, 3756.0], [71.0, 3784.0], [69.0, 3735.5], [68.0, 3747.0], [75.0, 3744.0], [74.0, 3786.0], [73.0, 3750.0], [79.0, 3772.0], [78.0, 3771.0], [77.0, 3578.0], [76.0, 3806.0], [82.0, 3499.0], [81.0, 3758.0], [86.0, 3594.0], [84.0, 3606.5], [91.0, 3689.0], [90.0, 3483.0], [89.0, 3482.0], [88.0, 3708.0], [95.0, 3600.0], [93.0, 3583.5], [99.0, 3575.0], [98.0, 3446.0], [97.0, 3718.0], [96.0, 3731.0], [103.0, 3664.3333333333335], [100.0, 3573.0], [106.0, 3699.0], [105.0, 3575.0], [104.0, 3742.0], [111.0, 3633.0], [109.0, 3672.0], [108.0, 3610.5], [115.0, 3621.0], [114.0, 3581.0], [113.0, 3622.5], [116.0, 3396.0], [123.0, 3479.0], [121.0, 3389.0], [120.0, 3522.25], [127.0, 3557.5], [125.0, 3630.0], [124.0, 3439.0], [134.0, 3575.5], [132.0, 3480.0], [131.0, 3556.5], [129.0, 3608.0], [128.0, 3499.0], [140.0, 3435.0], [139.0, 3504.0], [138.0, 3565.0], [137.0, 3477.0], [136.0, 3502.0], [151.0, 3268.0], [150.0, 3509.0], [149.0, 3456.0], [148.0, 3270.0], [147.0, 3515.5], [145.0, 3486.6], [158.0, 3428.0], [157.0, 3429.0], [156.0, 3491.0], [154.0, 3490.0], [153.0, 3490.0], [152.0, 3492.0], [167.0, 3295.0], [166.0, 3432.0], [165.0, 3429.0], [164.0, 3443.0], [163.0, 3443.0], [161.0, 3464.0], [160.0, 3491.0], [175.0, 3357.0], [174.0, 3377.0], [172.0, 3362.0], [171.0, 3387.0], [169.0, 3454.0], [168.0, 3409.0], [183.0, 3300.0], [182.0, 3312.0], [181.0, 3390.0], [180.0, 3369.0], [178.0, 3316.0], [177.0, 3377.0], [176.0, 3412.0], [191.0, 3262.5], [189.0, 3284.0], [187.0, 3301.0], [186.0, 3222.0], [185.0, 3320.0], [184.0, 3343.0], [197.0, 3139.0], [196.0, 3200.6666666666665], [194.0, 3331.0], [192.0, 3039.0], [207.0, 3080.0], [205.0, 2978.0], [204.0, 3235.0], [203.0, 3221.5], [201.0, 3212.0], [200.0, 3240.3333333333335], [215.0, 3062.0], [214.0, 3167.0], [212.0, 3167.0], [211.0, 3086.0], [210.0, 3260.0], [209.0, 3104.0], [208.0, 3268.0], [223.0, 3032.0], [221.0, 3188.0], [220.0, 3034.0], [219.0, 3160.0], [218.0, 3050.0], [217.0, 3051.0], [216.0, 3052.0], [231.0, 3152.0], [230.0, 2898.0], [229.0, 3164.0], [228.0, 3008.5], [226.0, 3084.3333333333335], [239.0, 3139.0], [238.0, 3081.0], [237.0, 3133.0], [236.0, 2893.0], [235.0, 3112.0], [234.0, 3117.0], [233.0, 2904.0], [232.0, 3124.0], [246.0, 3075.0], [245.0, 2845.0], [244.0, 3067.0], [243.0, 3070.5], [241.0, 3120.0], [254.0, 2881.0], [253.0, 2970.5], [249.0, 2925.6666666666665], [259.0, 3090.0], [270.0, 2951.5], [268.0, 3025.6666666666665], [267.0, 3066.0], [264.0, 3058.0], [263.0, 3057.0], [260.0, 3036.0], [258.0, 3052.0], [257.0, 2916.0], [287.0, 2746.0], [286.0, 2847.0], [281.0, 2883.5], [279.0, 2939.0], [277.0, 2939.4285714285716], [303.0, 2699.0], [302.0, 2844.5], [300.0, 2923.0], [299.0, 2722.0], [298.0, 2860.3333333333335], [295.0, 2893.0], [291.0, 2885.0], [289.0, 2996.0], [318.0, 2828.0], [317.0, 2932.0], [315.0, 2940.0], [314.0, 2760.3333333333335], [311.0, 2960.0], [310.0, 2830.0], [307.0, 3625.0], [335.0, 2782.0], [333.0, 2912.0], [332.0, 2689.5], [330.0, 2789.25], [326.0, 2780.0], [323.0, 3064.0], [320.0, 2660.0], [339.0, 2673.0], [351.0, 2934.3333333333335], [348.0, 2873.0], [347.0, 2641.0], [346.0, 2721.0], [344.0, 2859.5], [342.0, 2858.0], [340.0, 2654.0], [338.0, 2674.0], [337.0, 2902.0], [336.0, 2873.0], [355.0, 2824.5], [367.0, 2685.3333333333335], [364.0, 2683.6666666666665], [361.0, 2610.0], [360.0, 2634.0], [359.0, 2647.0], [357.0, 2743.0], [356.0, 2742.0], [353.0, 2812.0], [352.0, 2828.0], [381.0, 2677.0], [383.0, 2736.0], [380.0, 2633.0], [370.0, 2824.0], [368.0, 2696.0], [378.0, 2813.0], [376.0, 2585.0], [375.0, 2687.0], [374.0, 2525.0], [373.0, 2789.0], [372.0, 2611.0], [387.0, 2797.0], [393.0, 2781.0], [395.0, 2716.0], [392.0, 2651.0], [391.0, 2792.0], [390.0, 2577.0], [389.0, 2793.0], [388.0, 2688.0], [386.0, 2490.0], [385.0, 2724.5], [415.0, 2776.6666666666665], [414.0, 2602.0], [403.0, 2620.0], [401.0, 2537.0], [400.0, 2633.0], [411.0, 2570.0], [410.0, 2524.0], [409.0, 3387.0], [408.0, 2559.0], [407.0, 2525.0], [406.0, 2462.0], [405.0, 2534.5], [431.0, 2470.2], [426.0, 2413.0], [425.0, 2463.0], [424.0, 2639.3333333333335], [421.0, 2430.0], [420.0, 2490.0], [419.0, 2422.0], [418.0, 2732.0], [417.0, 2489.0], [416.0, 2751.0], [447.0, 2406.0], [446.0, 2490.6666666666665], [435.0, 2572.0], [433.0, 2447.5], [443.0, 2415.0], [442.0, 2482.0], [441.0, 3257.0], [440.0, 2655.0], [439.0, 2660.0], [438.0, 2669.0], [437.0, 2504.0], [436.0, 2560.0], [462.0, 2606.0], [463.0, 2426.0], [461.0, 2401.0], [460.0, 2472.0], [459.0, 2374.0], [458.0, 2505.0], [457.0, 2818.0], [455.0, 2400.0], [448.0, 2627.0], [450.0, 2411.0], [449.0, 2403.0], [454.0, 2393.0], [453.0, 2390.0], [452.0, 2452.0], [477.0, 2642.6666666666665], [476.0, 2520.0], [475.0, 2366.0], [472.0, 2395.0], [471.0, 2537.0], [470.0, 2539.0], [469.0, 2335.0], [468.0, 2859.5], [466.0, 2306.5], [464.0, 2433.0], [494.0, 2390.5], [495.0, 2470.0], [492.0, 2164.0], [491.0, 2335.0], [489.0, 2336.0], [488.0, 2308.0], [487.0, 2243.0], [484.0, 2199.0], [483.0, 2296.0], [482.0, 3136.0], [481.0, 2341.25], [509.0, 2220.0], [510.0, 2123.0], [508.0, 2135.0], [499.0, 2305.0], [498.0, 2155.0], [497.0, 2163.0], [496.0, 2247.0], [507.0, 2129.0], [506.0, 3058.0], [505.0, 2308.0], [503.0, 2226.0], [502.0, 2136.0], [501.0, 3076.0], [500.0, 2245.0], [537.0, 2163.0], [541.0, 2137.0], [543.0, 2283.5], [529.0, 2240.0], [528.0, 2257.5], [531.0, 2064.0], [530.0, 2120.0], [540.0, 2186.0], [539.0, 2080.0], [538.0, 2094.0], [536.0, 2136.0], [519.0, 2087.0], [518.0, 2161.0], [517.0, 2170.0], [516.0, 2207.0], [515.0, 2097.0], [514.0, 2106.0], [513.0, 3027.0], [512.0, 2203.0], [526.0, 2181.0], [524.0, 2256.0], [523.0, 2196.5], [521.0, 2243.0], [535.0, 2112.0], [533.0, 2106.5], [561.0, 2146.0], [574.0, 2157.3333333333335], [571.0, 2059.0], [569.0, 2007.0], [568.0, 2031.5], [557.0, 2046.0], [545.0, 2327.0], [544.0, 2093.0], [548.0, 2087.0], [547.0, 2072.0], [551.0, 2920.0], [550.0, 2224.0], [556.0, 2288.0], [555.0, 2069.0], [554.0, 2058.6666666666665], [566.0, 2125.0], [565.0, 2509.0], [564.0, 2139.6666666666665], [560.0, 2065.0], [601.0, 2163.0], [595.0, 1982.0], [606.0, 2245.0], [605.0, 2152.0], [603.0, 2515.0], [590.0, 1993.0], [576.0, 2450.0], [579.0, 2169.0], [577.0, 2014.0], [582.0, 2050.0], [580.0, 2108.0], [589.0, 1997.0], [588.0, 2116.5], [587.0, 2839.0], [585.0, 1990.0], [584.0, 2193.0], [599.0, 1943.0], [598.0, 2743.0], [597.0, 2057.0], [594.0, 2386.75], [626.0, 1838.0], [636.0, 1916.0], [639.0, 2127.0], [625.0, 2156.0], [635.0, 1882.0], [634.0, 1890.0], [633.0, 2019.5], [611.0, 1958.0], [610.0, 2067.0], [609.0, 2247.6666666666665], [623.0, 2246.0], [622.0, 2772.0], [621.0, 2134.5], [617.0, 1919.0], [616.0, 2218.0], [631.0, 1887.0], [630.0, 2282.0], [628.0, 1979.0], [670.0, 1813.0], [671.0, 1913.0], [669.0, 1917.0], [668.0, 2138.6], [665.0, 1798.0], [646.0, 1834.0], [645.0, 2321.0], [644.0, 1960.0], [643.0, 2033.5], [641.0, 2458.5], [654.0, 2144.6666666666665], [648.0, 1993.0], [662.0, 1799.0], [661.0, 1830.0], [659.0, 1843.0], [658.0, 1892.75], [701.0, 1737.0], [703.0, 2283.0], [691.0, 1927.0], [689.0, 2028.5], [700.0, 1952.0], [699.0, 1755.5], [697.0, 1761.0], [696.0, 2001.0], [685.0, 2228.0], [677.0, 1796.0], [675.0, 2164.3333333333335], [672.0, 2581.0], [683.0, 1921.0], [695.0, 1784.0], [694.0, 2539.0], [693.0, 1802.0], [692.0, 1779.0], [734.0, 2252.5], [735.0, 2405.0], [721.0, 2512.0], [720.0, 1668.0], [723.0, 1977.0], [722.0, 1675.0], [725.0, 2089.0], [724.0, 1931.0], [732.0, 2473.0], [731.0, 1625.0], [730.0, 1635.0], [729.0, 1641.0], [728.0, 1942.0], [711.0, 1681.0], [710.0, 2460.0], [709.0, 1717.0], [708.0, 1931.0], [707.0, 1720.5], [719.0, 2519.0], [718.0, 1951.8], [713.0, 2097.0], [727.0, 1868.0], [726.0, 2192.0], [760.0, 2061.5], [764.0, 1965.0], [766.0, 1727.0], [762.0, 1991.0], [754.0, 1679.0], [752.0, 2083.0], [750.0, 1604.0], [740.0, 1807.0], [738.0, 1931.6666666666667], [742.0, 2391.0], [741.0, 2466.0], [749.0, 1865.0], [748.0, 1598.0], [747.0, 1846.0], [746.0, 1847.0], [745.0, 1912.6666666666667], [794.0, 1998.5], [799.0, 1793.6], [793.0, 1753.0], [774.0, 1848.0], [773.0, 2313.0], [772.0, 2016.6666666666667], [790.0, 1842.0], [788.0, 1971.6666666666667], [785.0, 1790.0], [784.0, 1801.0], [783.0, 1629.0], [782.0, 1995.5], [780.0, 1747.6666666666667], [777.0, 1878.6666666666667], [829.0, 1731.0], [826.0, 1803.6666666666667], [806.0, 1747.0], [804.0, 2002.0], [823.0, 1784.0], [822.0, 1707.5], [820.0, 1725.0], [817.0, 2293.5], [815.0, 2106.0], [814.0, 2034.0], [810.0, 2002.5], [850.0, 2224.0], [863.0, 1967.6666666666667], [861.0, 1469.0], [859.0, 1850.2], [838.0, 1994.5], [836.0, 1842.7142857142858], [833.0, 2271.0], [847.0, 1692.6666666666667], [844.0, 2180.0], [843.0, 2273.0], [842.0, 1751.75], [854.0, 1630.0], [853.0, 2219.0], [852.0, 1563.0], [849.0, 1807.0], [848.0, 1507.0], [893.0, 1809.0], [894.0, 1995.0], [891.0, 1996.75], [868.0, 1793.4], [887.0, 1788.5], [885.0, 2047.5], [883.0, 1527.8], [879.0, 2032.0], [877.0, 2050.0], [876.0, 2138.0], [875.0, 1852.5], [873.0, 1909.2], [921.0, 1924.0], [915.0, 1476.0], [924.0, 1686.0], [926.0, 1477.5], [913.0, 1499.0], [912.0, 1962.0], [922.0, 1936.0], [920.0, 1418.0], [903.0, 1499.5], [901.0, 1780.0], [900.0, 1502.0], [899.0, 1510.0], [898.0, 1985.0], [897.0, 1779.3333333333333], [911.0, 1995.0], [908.0, 1525.0], [907.0, 1856.0], [905.0, 1461.0], [904.0, 1741.0], [919.0, 1947.0], [918.0, 1629.0], [917.0, 1827.5], [958.0, 1376.0], [959.0, 1319.0], [957.0, 1493.5], [955.0, 1581.0], [953.0, 1724.0], [935.0, 1695.5], [933.0, 1417.0], [932.0, 1910.0], [931.0, 1673.0], [943.0, 1372.0], [942.0, 1377.0], [941.0, 1638.5], [940.0, 1528.5], [939.0, 1732.5], [951.0, 1483.3333333333333], [948.0, 1850.0], [946.0, 1406.0], [945.0, 1529.5], [990.0, 1373.0], [991.0, 1699.0], [977.0, 1739.0], [976.0, 1720.0], [979.0, 1733.0], [978.0, 1382.0], [989.0, 1684.0], [987.0, 1571.0], [986.0, 1422.5], [985.0, 1688.0], [975.0, 1602.6], [961.0, 1620.0], [964.0, 1566.5], [962.0, 1566.0], [967.0, 1789.0], [966.0, 1564.5], [970.0, 1511.0], [969.0, 1786.0], [968.0, 1337.0], [983.0, 1715.0], [982.0, 1265.0], [981.0, 1407.0], [980.0, 1400.0], [1018.0, 1245.0], [1023.0, 1272.0], [1016.0, 1371.3333333333333], [999.0, 1681.0], [998.0, 1353.0], [997.0, 1193.0], [996.0, 1668.0], [995.0, 1284.5], [993.0, 1290.5], [1013.0, 1326.5], [1011.0, 1187.0], [1010.0, 1139.5], [1008.0, 1502.5], [1006.0, 1434.5], [1004.0, 1161.0], [1003.0, 1153.0], [1002.0, 1624.0], [1001.0, 1576.0], [1056.0, 1092.0], [1084.0, 1062.5], [1058.0, 1172.0], [1062.0, 1276.5], [1060.0, 1168.0], [1064.0, 1198.0], [1082.0, 1150.0], [1074.0, 1521.0], [1024.0, 1291.4], [1028.0, 1225.0], [1054.0, 1445.5], [1048.0, 1115.3333333333333], [1044.0, 1192.0], [1042.0, 1169.0], [1070.0, 1237.75], [1066.0, 1110.0], [1098.0, 1177.0], [1146.0, 1030.0], [1112.0, 1025.0], [1108.0, 1109.0], [1104.0, 1344.0], [1116.0, 1317.0], [1136.0, 959.0], [1100.0, 1116.0], [1096.0, 939.0], [1094.0, 1352.0], [1092.0, 1141.0], [1088.0, 1091.3333333333333], [1118.0, 1195.0], [1138.0, 876.0], [1122.0, 975.0], [1124.0, 1089.0], [1126.0, 936.0], [1132.0, 827.0], [1150.0, 970.0], [1148.0, 946.5], [1144.0, 979.5], [1142.0, 1308.0], [1140.0, 886.0], [1166.0, 909.8], [1160.0, 148.0], [1158.0, 692.5], [1156.0, 751.6666666666667], [1154.0, 943.0], [1170.0, 825.8], [1172.0, 1040.0], [1174.0, 824.0], [1180.0, 1002.0], [1198.0, 636.0], [1196.0, 825.0], [1194.0, 1016.0], [1192.0, 872.0], [1188.0, 905.0], [1186.0, 1109.0], [1184.0, 950.0], [1214.0, 1150.0], [1204.0, 408.0], [1210.0, 499.0], [1208.0, 717.0], [1206.0, 719.0], [1218.0, 791.0], [1230.0, 527.75], [1222.0, 989.0], [1220.0, 833.0], [1224.0, 818.0], [1246.0, 784.0], [1242.0, 430.3333333333333], [1244.0, 613.8333333333333], [1240.0, 563.0], [1238.0, 619.0], [1228.0, 419.0], [1232.0, 243.66666666666666], [1234.0, 746.0], [1236.0, 540.5], [1264.0, 654.0], [1278.0, 657.3333333333334], [1276.0, 531.25], [1274.0, 379.0], [1270.0, 630.0], [1252.0, 585.3333333333334], [1256.0, 650.0], [1262.0, 653.0], [1226.0, 446.75], [1288.0, 631.0], [1292.0, 391.5], [1280.0, 467.3333333333333], [1286.0, 818.0], [1284.0, 847.3333333333334], [1294.0, 561.25], [1312.0, 495.0], [1324.0, 500.0], [1310.0, 560.25], [1308.0, 548.0], [1304.0, 860.0], [1302.0, 592.0], [1298.0, 752.0], [1296.0, 764.0], [1328.0, 435.625], [1334.0, 518.5], [1332.0, 618.0], [1340.0, 534.0], [1350.0, 533.0], [1348.0, 528.0], [1344.0, 654.0], [1079.0, 1291.6], [1085.0, 1089.0], [1059.0, 1293.0], [1063.0, 1560.0], [1073.0, 1160.5], [1055.0, 1182.4], [1027.0, 1184.0], [1025.0, 1282.0], [1029.0, 1078.0], [1037.0, 1343.25], [1033.0, 1359.5], [1047.0, 1523.0], [1041.0, 1308.75], [1071.0, 1124.0], [1065.0, 1163.0], [1095.0, 1351.0], [1115.0, 988.5], [1111.0, 964.0], [1107.0, 1026.0], [1103.0, 1143.6666666666667], [1099.0, 1137.0], [1097.0, 1056.0], [1093.0, 943.0], [1091.0, 1080.5], [1089.0, 1376.0], [1137.0, 1059.0], [1121.0, 751.0], [1123.0, 869.0], [1127.0, 1386.0], [1131.0, 931.0], [1129.0, 1100.0], [1133.0, 1049.0], [1141.0, 1020.5], [1159.0, 844.0], [1205.0, 457.75], [1153.0, 964.6666666666666], [1157.0, 290.5], [1161.0, 296.25], [1163.0, 884.0], [1173.0, 1020.0], [1181.0, 999.3333333333334], [1183.0, 917.0], [1193.0, 1104.0], [1189.0, 807.0], [1187.0, 1221.0], [1185.0, 1001.0], [1215.0, 830.0], [1211.0, 468.5], [1213.0, 570.5], [1203.0, 400.47826086956525], [1209.0, 336.625], [1207.0, 841.0], [1227.0, 340.2], [1225.0, 504.0], [1223.0, 640.5], [1221.0, 790.0], [1219.0, 799.0], [1217.0, 1065.0], [1247.0, 758.5], [1243.0, 343.0], [1241.0, 423.6666666666667], [1239.0, 602.75], [1233.0, 687.3333333333334], [1235.0, 1070.0], [1237.0, 537.0], [1231.0, 369.5], [1265.0, 458.0], [1279.0, 613.0], [1249.0, 779.0], [1277.0, 562.3333333333335], [1275.0, 642.0], [1273.0, 475.6666666666667], [1269.0, 686.5], [1267.0, 597.3333333333334], [1251.0, 590.75], [1253.0, 789.0], [1255.0, 711.5], [1257.0, 568.0], [1229.0, 465.2], [1291.0, 419.0], [1293.0, 515.5], [1289.0, 929.5], [1281.0, 608.0], [1327.0, 460.0], [1323.0, 440.0], [1317.0, 549.5], [1311.0, 487.75], [1309.0, 494.0], [1307.0, 565.5], [1305.0, 554.0], [1303.0, 872.0], [1301.0, 732.0], [1299.0, 597.0], [1297.0, 887.0], [1329.0, 821.0], [1339.0, 537.25], [1349.0, 710.6666666666666], [1347.0, 456.0], [1345.0, 476.0], [1.0, 3905.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[731.6779999999985, 1930.6066666666684]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1350.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10739.0, "minX": 1.63068174E12, "maxY": 186692.81666666668, "series": [{"data": [[1.63068174E12, 186692.81666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63068174E12, 10739.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068174E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1930.6066666666684, "minX": 1.63068174E12, "maxY": 1930.6066666666684, "series": [{"data": [[1.63068174E12, 1930.6066666666684]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068174E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1921.4453333333342, "minX": 1.63068174E12, "maxY": 1921.4453333333342, "series": [{"data": [[1.63068174E12, 1921.4453333333342]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068174E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 247.6433333333334, "minX": 1.63068174E12, "maxY": 247.6433333333334, "series": [{"data": [[1.63068174E12, 247.6433333333334]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068174E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 87.0, "minX": 1.63068174E12, "maxY": 4517.0, "series": [{"data": [[1.63068174E12, 4517.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63068174E12, 3456.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63068174E12, 3851.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63068174E12, 3699.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63068174E12, 87.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63068174E12, 1919.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068174E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 285.5, "minX": 43.0, "maxY": 3836.0, "series": [{"data": [[299.0, 3267.0], [84.0, 285.5], [351.0, 784.0], [43.0, 3836.0], [354.0, 1691.0], [369.0, 2282.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[299.0, 3523.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 369.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 282.5, "minX": 43.0, "maxY": 3835.0, "series": [{"data": [[299.0, 3261.5], [84.0, 282.5], [351.0, 773.0], [43.0, 3835.0], [354.0, 1682.5], [369.0, 2274.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[299.0, 3509.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 369.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.63068174E12, "maxY": 25.0, "series": [{"data": [[1.63068174E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068174E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63068174E12, "maxY": 24.983333333333334, "series": [{"data": [[1.63068174E12, 24.983333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63068174E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63068174E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63068174E12, "maxY": 24.983333333333334, "series": [{"data": [[1.63068174E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63068174E12, 24.983333333333334]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068174E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63068174E12, "maxY": 24.983333333333334, "series": [{"data": [[1.63068174E12, 24.983333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63068174E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63068174E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

