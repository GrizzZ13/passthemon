/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 173.0, "minX": 0.0, "maxY": 8705.0, "series": [{"data": [[0.0, 173.0], [0.1, 190.0], [0.2, 215.0], [0.3, 532.0], [0.4, 536.0], [0.5, 539.0], [0.6, 541.0], [0.7, 549.0], [0.8, 553.0], [0.9, 555.0], [1.0, 558.0], [1.1, 893.0], [1.2, 898.0], [1.3, 912.0], [1.4, 1007.0], [1.5, 1636.0], [1.6, 1649.0], [1.7, 1652.0], [1.8, 1655.0], [1.9, 1659.0], [2.0, 1662.0], [2.1, 1664.0], [2.2, 1669.0], [2.3, 1677.0], [2.4, 1733.0], [2.5, 1737.0], [2.6, 1739.0], [2.7, 1744.0], [2.8, 1747.0], [2.9, 1751.0], [3.0, 1754.0], [3.1, 1758.0], [3.2, 1760.0], [3.3, 1763.0], [3.4, 2431.0], [3.5, 2441.0], [3.6, 2443.0], [3.7, 2447.0], [3.8, 2460.0], [3.9, 2464.0], [4.0, 2484.0], [4.1, 2494.0], [4.2, 2576.0], [4.3, 2585.0], [4.4, 2590.0], [4.5, 2772.0], [4.6, 2784.0], [4.7, 2792.0], [4.8, 2970.0], [4.9, 3010.0], [5.0, 3054.0], [5.1, 3088.0], [5.2, 3135.0], [5.3, 3162.0], [5.4, 3168.0], [5.5, 3170.0], [5.6, 3172.0], [5.7, 3173.0], [5.8, 3175.0], [5.9, 3190.0], [6.0, 3198.0], [6.1, 3207.0], [6.2, 3304.0], [6.3, 3324.0], [6.4, 3403.0], [6.5, 3417.0], [6.6, 3427.0], [6.7, 3440.0], [6.8, 3457.0], [6.9, 3462.0], [7.0, 3479.0], [7.1, 3484.0], [7.2, 3489.0], [7.3, 3507.0], [7.4, 3521.0], [7.5, 3524.0], [7.6, 3530.0], [7.7, 3533.0], [7.8, 3534.0], [7.9, 3537.0], [8.0, 3541.0], [8.1, 3543.0], [8.2, 3545.0], [8.3, 3547.0], [8.4, 3549.0], [8.5, 3550.0], [8.6, 3552.0], [8.7, 3553.0], [8.8, 3555.0], [8.9, 3556.0], [9.0, 3559.0], [9.1, 3561.0], [9.2, 3565.0], [9.3, 3572.0], [9.4, 3577.0], [9.5, 3579.0], [9.6, 3584.0], [9.7, 3586.0], [9.8, 3591.0], [9.9, 3595.0], [10.0, 3599.0], [10.1, 3601.0], [10.2, 3601.0], [10.3, 3607.0], [10.4, 3608.0], [10.5, 3610.0], [10.6, 3612.0], [10.7, 3613.0], [10.8, 3617.0], [10.9, 3620.0], [11.0, 3623.0], [11.1, 3625.0], [11.2, 3627.0], [11.3, 3631.0], [11.4, 3633.0], [11.5, 3636.0], [11.6, 3639.0], [11.7, 3642.0], [11.8, 3648.0], [11.9, 3653.0], [12.0, 3655.0], [12.1, 3658.0], [12.2, 3660.0], [12.3, 3664.0], [12.4, 3666.0], [12.5, 3668.0], [12.6, 3671.0], [12.7, 3674.0], [12.8, 3675.0], [12.9, 3678.0], [13.0, 3684.0], [13.1, 3685.0], [13.2, 3688.0], [13.3, 3690.0], [13.4, 3693.0], [13.5, 3699.0], [13.6, 3701.0], [13.7, 3705.0], [13.8, 3711.0], [13.9, 3716.0], [14.0, 3719.0], [14.1, 3724.0], [14.2, 3732.0], [14.3, 3738.0], [14.4, 3743.0], [14.5, 3743.0], [14.6, 3744.0], [14.7, 3747.0], [14.8, 3748.0], [14.9, 3753.0], [15.0, 3755.0], [15.1, 3756.0], [15.2, 3759.0], [15.3, 3759.0], [15.4, 3762.0], [15.5, 3764.0], [15.6, 3767.0], [15.7, 3772.0], [15.8, 3775.0], [15.9, 3776.0], [16.0, 3778.0], [16.1, 3779.0], [16.2, 3779.0], [16.3, 3782.0], [16.4, 3789.0], [16.5, 3792.0], [16.6, 3795.0], [16.7, 3798.0], [16.8, 3801.0], [16.9, 3802.0], [17.0, 3803.0], [17.1, 3803.0], [17.2, 3805.0], [17.3, 3806.0], [17.4, 3807.0], [17.5, 3808.0], [17.6, 3809.0], [17.7, 3810.0], [17.8, 3811.0], [17.9, 3812.0], [18.0, 3812.0], [18.1, 3813.0], [18.2, 3813.0], [18.3, 3814.0], [18.4, 3815.0], [18.5, 3817.0], [18.6, 3819.0], [18.7, 3820.0], [18.8, 3821.0], [18.9, 3821.0], [19.0, 3821.0], [19.1, 3824.0], [19.2, 3825.0], [19.3, 3826.0], [19.4, 3827.0], [19.5, 3828.0], [19.6, 3830.0], [19.7, 3833.0], [19.8, 3835.0], [19.9, 3836.0], [20.0, 3837.0], [20.1, 3839.0], [20.2, 3841.0], [20.3, 3841.0], [20.4, 3845.0], [20.5, 3846.0], [20.6, 3848.0], [20.7, 3849.0], [20.8, 3850.0], [20.9, 3853.0], [21.0, 3855.0], [21.1, 3856.0], [21.2, 3857.0], [21.3, 3858.0], [21.4, 3859.0], [21.5, 3862.0], [21.6, 3863.0], [21.7, 3864.0], [21.8, 3865.0], [21.9, 3867.0], [22.0, 3867.0], [22.1, 3869.0], [22.2, 3870.0], [22.3, 3871.0], [22.4, 3871.0], [22.5, 3873.0], [22.6, 3875.0], [22.7, 3875.0], [22.8, 3876.0], [22.9, 3877.0], [23.0, 3880.0], [23.1, 3881.0], [23.2, 3881.0], [23.3, 3883.0], [23.4, 3883.0], [23.5, 3884.0], [23.6, 3885.0], [23.7, 3886.0], [23.8, 3886.0], [23.9, 3888.0], [24.0, 3889.0], [24.1, 3890.0], [24.2, 3892.0], [24.3, 3893.0], [24.4, 3895.0], [24.5, 3896.0], [24.6, 3899.0], [24.7, 3901.0], [24.8, 3904.0], [24.9, 3904.0], [25.0, 3906.0], [25.1, 3907.0], [25.2, 3908.0], [25.3, 3910.0], [25.4, 3913.0], [25.5, 3917.0], [25.6, 3919.0], [25.7, 3921.0], [25.8, 3922.0], [25.9, 3925.0], [26.0, 3929.0], [26.1, 3933.0], [26.2, 3939.0], [26.3, 3946.0], [26.4, 3950.0], [26.5, 3954.0], [26.6, 3964.0], [26.7, 3968.0], [26.8, 3975.0], [26.9, 3978.0], [27.0, 3978.0], [27.1, 3982.0], [27.2, 3985.0], [27.3, 3985.0], [27.4, 3987.0], [27.5, 3988.0], [27.6, 3989.0], [27.7, 3990.0], [27.8, 3991.0], [27.9, 3994.0], [28.0, 3997.0], [28.1, 3998.0], [28.2, 3999.0], [28.3, 4000.0], [28.4, 4002.0], [28.5, 4003.0], [28.6, 4005.0], [28.7, 4007.0], [28.8, 4009.0], [28.9, 4011.0], [29.0, 4012.0], [29.1, 4013.0], [29.2, 4016.0], [29.3, 4017.0], [29.4, 4018.0], [29.5, 4019.0], [29.6, 4021.0], [29.7, 4023.0], [29.8, 4025.0], [29.9, 4027.0], [30.0, 4030.0], [30.1, 4032.0], [30.2, 4033.0], [30.3, 4033.0], [30.4, 4035.0], [30.5, 4037.0], [30.6, 4039.0], [30.7, 4041.0], [30.8, 4045.0], [30.9, 4045.0], [31.0, 4047.0], [31.1, 4049.0], [31.2, 4050.0], [31.3, 4054.0], [31.4, 4058.0], [31.5, 4059.0], [31.6, 4060.0], [31.7, 4063.0], [31.8, 4065.0], [31.9, 4068.0], [32.0, 4073.0], [32.1, 4077.0], [32.2, 4078.0], [32.3, 4080.0], [32.4, 4082.0], [32.5, 4084.0], [32.6, 4088.0], [32.7, 4090.0], [32.8, 4095.0], [32.9, 4100.0], [33.0, 4106.0], [33.1, 4108.0], [33.2, 4111.0], [33.3, 4114.0], [33.4, 4117.0], [33.5, 4118.0], [33.6, 4120.0], [33.7, 4121.0], [33.8, 4123.0], [33.9, 4130.0], [34.0, 4134.0], [34.1, 4144.0], [34.2, 4150.0], [34.3, 4152.0], [34.4, 4154.0], [34.5, 4158.0], [34.6, 4163.0], [34.7, 4166.0], [34.8, 4166.0], [34.9, 4168.0], [35.0, 4172.0], [35.1, 4172.0], [35.2, 4173.0], [35.3, 4176.0], [35.4, 4177.0], [35.5, 4178.0], [35.6, 4180.0], [35.7, 4185.0], [35.8, 4190.0], [35.9, 4193.0], [36.0, 4195.0], [36.1, 4197.0], [36.2, 4201.0], [36.3, 4204.0], [36.4, 4208.0], [36.5, 4211.0], [36.6, 4215.0], [36.7, 4220.0], [36.8, 4221.0], [36.9, 4222.0], [37.0, 4227.0], [37.1, 4228.0], [37.2, 4229.0], [37.3, 4237.0], [37.4, 4240.0], [37.5, 4242.0], [37.6, 4248.0], [37.7, 4251.0], [37.8, 4256.0], [37.9, 4258.0], [38.0, 4259.0], [38.1, 4265.0], [38.2, 4268.0], [38.3, 4269.0], [38.4, 4272.0], [38.5, 4273.0], [38.6, 4277.0], [38.7, 4282.0], [38.8, 4284.0], [38.9, 4287.0], [39.0, 4290.0], [39.1, 4291.0], [39.2, 4293.0], [39.3, 4296.0], [39.4, 4300.0], [39.5, 4304.0], [39.6, 4305.0], [39.7, 4308.0], [39.8, 4310.0], [39.9, 4314.0], [40.0, 4315.0], [40.1, 4319.0], [40.2, 4322.0], [40.3, 4324.0], [40.4, 4325.0], [40.5, 4328.0], [40.6, 4329.0], [40.7, 4332.0], [40.8, 4335.0], [40.9, 4338.0], [41.0, 4339.0], [41.1, 4341.0], [41.2, 4345.0], [41.3, 4347.0], [41.4, 4353.0], [41.5, 4355.0], [41.6, 4358.0], [41.7, 4361.0], [41.8, 4363.0], [41.9, 4365.0], [42.0, 4368.0], [42.1, 4369.0], [42.2, 4370.0], [42.3, 4372.0], [42.4, 4374.0], [42.5, 4376.0], [42.6, 4376.0], [42.7, 4377.0], [42.8, 4377.0], [42.9, 4379.0], [43.0, 4379.0], [43.1, 4382.0], [43.2, 4383.0], [43.3, 4384.0], [43.4, 4385.0], [43.5, 4388.0], [43.6, 4388.0], [43.7, 4389.0], [43.8, 4390.0], [43.9, 4390.0], [44.0, 4392.0], [44.1, 4395.0], [44.2, 4398.0], [44.3, 4402.0], [44.4, 4404.0], [44.5, 4405.0], [44.6, 4407.0], [44.7, 4411.0], [44.8, 4412.0], [44.9, 4414.0], [45.0, 4417.0], [45.1, 4419.0], [45.2, 4421.0], [45.3, 4422.0], [45.4, 4423.0], [45.5, 4424.0], [45.6, 4426.0], [45.7, 4427.0], [45.8, 4429.0], [45.9, 4431.0], [46.0, 4432.0], [46.1, 4434.0], [46.2, 4435.0], [46.3, 4436.0], [46.4, 4437.0], [46.5, 4437.0], [46.6, 4438.0], [46.7, 4439.0], [46.8, 4440.0], [46.9, 4441.0], [47.0, 4442.0], [47.1, 4442.0], [47.2, 4443.0], [47.3, 4444.0], [47.4, 4446.0], [47.5, 4447.0], [47.6, 4449.0], [47.7, 4453.0], [47.8, 4453.0], [47.9, 4454.0], [48.0, 4455.0], [48.1, 4455.0], [48.2, 4456.0], [48.3, 4457.0], [48.4, 4458.0], [48.5, 4459.0], [48.6, 4460.0], [48.7, 4461.0], [48.8, 4461.0], [48.9, 4462.0], [49.0, 4463.0], [49.1, 4464.0], [49.2, 4466.0], [49.3, 4466.0], [49.4, 4467.0], [49.5, 4467.0], [49.6, 4467.0], [49.7, 4468.0], [49.8, 4468.0], [49.9, 4469.0], [50.0, 4470.0], [50.1, 4472.0], [50.2, 4475.0], [50.3, 4477.0], [50.4, 4479.0], [50.5, 4479.0], [50.6, 4483.0], [50.7, 4485.0], [50.8, 4486.0], [50.9, 4489.0], [51.0, 4491.0], [51.1, 4491.0], [51.2, 4492.0], [51.3, 4495.0], [51.4, 4496.0], [51.5, 4498.0], [51.6, 4502.0], [51.7, 4503.0], [51.8, 4505.0], [51.9, 4507.0], [52.0, 4508.0], [52.1, 4510.0], [52.2, 4515.0], [52.3, 4518.0], [52.4, 4520.0], [52.5, 4521.0], [52.6, 4522.0], [52.7, 4524.0], [52.8, 4528.0], [52.9, 4531.0], [53.0, 4532.0], [53.1, 4532.0], [53.2, 4537.0], [53.3, 4541.0], [53.4, 4545.0], [53.5, 4548.0], [53.6, 4550.0], [53.7, 4552.0], [53.8, 4553.0], [53.9, 4555.0], [54.0, 4555.0], [54.1, 4556.0], [54.2, 4558.0], [54.3, 4560.0], [54.4, 4561.0], [54.5, 4565.0], [54.6, 4566.0], [54.7, 4569.0], [54.8, 4570.0], [54.9, 4574.0], [55.0, 4578.0], [55.1, 4581.0], [55.2, 4584.0], [55.3, 4589.0], [55.4, 4593.0], [55.5, 4595.0], [55.6, 4598.0], [55.7, 4602.0], [55.8, 4605.0], [55.9, 4610.0], [56.0, 4611.0], [56.1, 4613.0], [56.2, 4618.0], [56.3, 4622.0], [56.4, 4629.0], [56.5, 4631.0], [56.6, 4636.0], [56.7, 4638.0], [56.8, 4641.0], [56.9, 4645.0], [57.0, 4650.0], [57.1, 4652.0], [57.2, 4656.0], [57.3, 4658.0], [57.4, 4662.0], [57.5, 4667.0], [57.6, 4670.0], [57.7, 4673.0], [57.8, 4684.0], [57.9, 4685.0], [58.0, 4686.0], [58.1, 4692.0], [58.2, 4697.0], [58.3, 4704.0], [58.4, 4705.0], [58.5, 4715.0], [58.6, 4736.0], [58.7, 4743.0], [58.8, 4747.0], [58.9, 4756.0], [59.0, 4760.0], [59.1, 4765.0], [59.2, 4768.0], [59.3, 4773.0], [59.4, 4775.0], [59.5, 4779.0], [59.6, 4784.0], [59.7, 4786.0], [59.8, 4788.0], [59.9, 4789.0], [60.0, 4794.0], [60.1, 4796.0], [60.2, 4804.0], [60.3, 4807.0], [60.4, 4813.0], [60.5, 4814.0], [60.6, 4819.0], [60.7, 4821.0], [60.8, 4823.0], [60.9, 4825.0], [61.0, 4829.0], [61.1, 4830.0], [61.2, 4830.0], [61.3, 4831.0], [61.4, 4831.0], [61.5, 4833.0], [61.6, 4833.0], [61.7, 4835.0], [61.8, 4835.0], [61.9, 4836.0], [62.0, 4837.0], [62.1, 4839.0], [62.2, 4853.0], [62.3, 4858.0], [62.4, 4862.0], [62.5, 4866.0], [62.6, 4869.0], [62.7, 4871.0], [62.8, 4872.0], [62.9, 4878.0], [63.0, 4882.0], [63.1, 4890.0], [63.2, 4896.0], [63.3, 4915.0], [63.4, 4918.0], [63.5, 4935.0], [63.6, 4951.0], [63.7, 4958.0], [63.8, 4962.0], [63.9, 4970.0], [64.0, 4976.0], [64.1, 4983.0], [64.2, 4989.0], [64.3, 4991.0], [64.4, 4997.0], [64.5, 5004.0], [64.6, 5023.0], [64.7, 5048.0], [64.8, 5062.0], [64.9, 5077.0], [65.0, 5088.0], [65.1, 5101.0], [65.2, 5103.0], [65.3, 5105.0], [65.4, 5109.0], [65.5, 5112.0], [65.6, 5115.0], [65.7, 5127.0], [65.8, 5140.0], [65.9, 5145.0], [66.0, 5165.0], [66.1, 5175.0], [66.2, 5184.0], [66.3, 5195.0], [66.4, 5197.0], [66.5, 5201.0], [66.6, 5205.0], [66.7, 5216.0], [66.8, 5227.0], [66.9, 5237.0], [67.0, 5243.0], [67.1, 5249.0], [67.2, 5253.0], [67.3, 5281.0], [67.4, 5327.0], [67.5, 5336.0], [67.6, 5340.0], [67.7, 5343.0], [67.8, 5360.0], [67.9, 5382.0], [68.0, 5385.0], [68.1, 5391.0], [68.2, 5400.0], [68.3, 5405.0], [68.4, 5406.0], [68.5, 5410.0], [68.6, 5414.0], [68.7, 5418.0], [68.8, 5422.0], [68.9, 5423.0], [69.0, 5428.0], [69.1, 5431.0], [69.2, 5437.0], [69.3, 5442.0], [69.4, 5445.0], [69.5, 5447.0], [69.6, 5451.0], [69.7, 5455.0], [69.8, 5457.0], [69.9, 5458.0], [70.0, 5462.0], [70.1, 5464.0], [70.2, 5467.0], [70.3, 5470.0], [70.4, 5473.0], [70.5, 5475.0], [70.6, 5476.0], [70.7, 5478.0], [70.8, 5480.0], [70.9, 5484.0], [71.0, 5487.0], [71.1, 5490.0], [71.2, 5492.0], [71.3, 5496.0], [71.4, 5496.0], [71.5, 5497.0], [71.6, 5497.0], [71.7, 5499.0], [71.8, 5502.0], [71.9, 5505.0], [72.0, 5506.0], [72.1, 5509.0], [72.2, 5516.0], [72.3, 5519.0], [72.4, 5521.0], [72.5, 5523.0], [72.6, 5525.0], [72.7, 5533.0], [72.8, 5540.0], [72.9, 5547.0], [73.0, 5554.0], [73.1, 5557.0], [73.2, 5558.0], [73.3, 5560.0], [73.4, 5571.0], [73.5, 5578.0], [73.6, 5593.0], [73.7, 5597.0], [73.8, 5603.0], [73.9, 5606.0], [74.0, 5609.0], [74.1, 5614.0], [74.2, 5617.0], [74.3, 5619.0], [74.4, 5622.0], [74.5, 5627.0], [74.6, 5633.0], [74.7, 5651.0], [74.8, 5654.0], [74.9, 5665.0], [75.0, 5676.0], [75.1, 5681.0], [75.2, 5688.0], [75.3, 5689.0], [75.4, 5693.0], [75.5, 5696.0], [75.6, 5698.0], [75.7, 5703.0], [75.8, 5715.0], [75.9, 5718.0], [76.0, 5730.0], [76.1, 5735.0], [76.2, 5738.0], [76.3, 5751.0], [76.4, 5759.0], [76.5, 5767.0], [76.6, 5808.0], [76.7, 5836.0], [76.8, 5851.0], [76.9, 5864.0], [77.0, 5866.0], [77.1, 5881.0], [77.2, 5886.0], [77.3, 5903.0], [77.4, 5914.0], [77.5, 5953.0], [77.6, 5999.0], [77.7, 6014.0], [77.8, 6025.0], [77.9, 6042.0], [78.0, 6045.0], [78.1, 6053.0], [78.2, 6057.0], [78.3, 6081.0], [78.4, 6089.0], [78.5, 6106.0], [78.6, 6134.0], [78.7, 6150.0], [78.8, 6154.0], [78.9, 6158.0], [79.0, 6167.0], [79.1, 6174.0], [79.2, 6179.0], [79.3, 6180.0], [79.4, 6187.0], [79.5, 6196.0], [79.6, 6215.0], [79.7, 6222.0], [79.8, 6229.0], [79.9, 6243.0], [80.0, 6273.0], [80.1, 6279.0], [80.2, 6281.0], [80.3, 6284.0], [80.4, 6291.0], [80.5, 6297.0], [80.6, 6301.0], [80.7, 6303.0], [80.8, 6312.0], [80.9, 6320.0], [81.0, 6331.0], [81.1, 6335.0], [81.2, 6353.0], [81.3, 6368.0], [81.4, 6376.0], [81.5, 6380.0], [81.6, 6384.0], [81.7, 6387.0], [81.8, 6390.0], [81.9, 6392.0], [82.0, 6394.0], [82.1, 6397.0], [82.2, 6398.0], [82.3, 6399.0], [82.4, 6402.0], [82.5, 6405.0], [82.6, 6406.0], [82.7, 6408.0], [82.8, 6411.0], [82.9, 6413.0], [83.0, 6435.0], [83.1, 6441.0], [83.2, 6444.0], [83.3, 6449.0], [83.4, 6450.0], [83.5, 6455.0], [83.6, 6460.0], [83.7, 6468.0], [83.8, 6476.0], [83.9, 6502.0], [84.0, 6506.0], [84.1, 6574.0], [84.2, 6594.0], [84.3, 6630.0], [84.4, 6640.0], [84.5, 6732.0], [84.6, 6771.0], [84.7, 6830.0], [84.8, 6841.0], [84.9, 6845.0], [85.0, 6868.0], [85.1, 6870.0], [85.2, 6875.0], [85.3, 6878.0], [85.4, 6885.0], [85.5, 6906.0], [85.6, 6912.0], [85.7, 6918.0], [85.8, 6924.0], [85.9, 6928.0], [86.0, 6930.0], [86.1, 6931.0], [86.2, 6932.0], [86.3, 6943.0], [86.4, 6945.0], [86.5, 6947.0], [86.6, 6950.0], [86.7, 6952.0], [86.8, 6953.0], [86.9, 6982.0], [87.0, 6985.0], [87.1, 6997.0], [87.2, 7001.0], [87.3, 7002.0], [87.4, 7004.0], [87.5, 7007.0], [87.6, 7008.0], [87.7, 7012.0], [87.8, 7034.0], [87.9, 7044.0], [88.0, 7047.0], [88.1, 7054.0], [88.2, 7061.0], [88.3, 7064.0], [88.4, 7069.0], [88.5, 7071.0], [88.6, 7072.0], [88.7, 7075.0], [88.8, 7077.0], [88.9, 7078.0], [89.0, 7079.0], [89.1, 7080.0], [89.2, 7082.0], [89.3, 7083.0], [89.4, 7084.0], [89.5, 7086.0], [89.6, 7087.0], [89.7, 7089.0], [89.8, 7092.0], [89.9, 7093.0], [90.0, 7096.0], [90.1, 7098.0], [90.2, 7101.0], [90.3, 7102.0], [90.4, 7107.0], [90.5, 7108.0], [90.6, 7112.0], [90.7, 7114.0], [90.8, 7120.0], [90.9, 7123.0], [91.0, 7126.0], [91.1, 7131.0], [91.2, 7134.0], [91.3, 7143.0], [91.4, 7145.0], [91.5, 7151.0], [91.6, 7156.0], [91.7, 7158.0], [91.8, 7163.0], [91.9, 7166.0], [92.0, 7169.0], [92.1, 7179.0], [92.2, 7180.0], [92.3, 7186.0], [92.4, 7194.0], [92.5, 7196.0], [92.6, 7200.0], [92.7, 7203.0], [92.8, 7204.0], [92.9, 7206.0], [93.0, 7208.0], [93.1, 7209.0], [93.2, 7214.0], [93.3, 7219.0], [93.4, 7223.0], [93.5, 7226.0], [93.6, 7228.0], [93.7, 7230.0], [93.8, 7231.0], [93.9, 7234.0], [94.0, 7235.0], [94.1, 7237.0], [94.2, 7240.0], [94.3, 7243.0], [94.4, 7250.0], [94.5, 7253.0], [94.6, 7258.0], [94.7, 7263.0], [94.8, 7283.0], [94.9, 7294.0], [95.0, 7297.0], [95.1, 7298.0], [95.2, 7301.0], [95.3, 7313.0], [95.4, 7314.0], [95.5, 7317.0], [95.6, 7327.0], [95.7, 7334.0], [95.8, 7335.0], [95.9, 7342.0], [96.0, 7358.0], [96.1, 7408.0], [96.2, 7436.0], [96.3, 7480.0], [96.4, 7507.0], [96.5, 7527.0], [96.6, 7529.0], [96.7, 7596.0], [96.8, 7603.0], [96.9, 7604.0], [97.0, 7685.0], [97.1, 7705.0], [97.2, 7754.0], [97.3, 7831.0], [97.4, 7851.0], [97.5, 7908.0], [97.6, 7953.0], [97.7, 7978.0], [97.8, 7995.0], [97.9, 8003.0], [98.0, 8008.0], [98.1, 8023.0], [98.2, 8070.0], [98.3, 8139.0], [98.4, 8322.0], [98.5, 8360.0], [98.6, 8409.0], [98.7, 8438.0], [98.8, 8442.0], [98.9, 8449.0], [99.0, 8458.0], [99.1, 8467.0], [99.2, 8474.0], [99.3, 8484.0], [99.4, 8491.0], [99.5, 8497.0], [99.6, 8502.0], [99.7, 8507.0], [99.8, 8516.0], [99.9, 8631.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 238.0, "series": [{"data": [[800.0, 3.0], [900.0, 4.0], [1000.0, 2.0], [1100.0, 1.0], [1600.0, 27.0], [1700.0, 31.0], [2400.0, 24.0], [2500.0, 10.0], [2700.0, 7.0], [2800.0, 1.0], [2900.0, 2.0], [3000.0, 9.0], [3100.0, 28.0], [3200.0, 4.0], [3300.0, 6.0], [3400.0, 26.0], [3500.0, 84.0], [3600.0, 104.0], [3700.0, 96.0], [3800.0, 238.0], [3900.0, 108.0], [4000.0, 138.0], [4100.0, 97.0], [4200.0, 98.0], [4300.0, 146.0], [4400.0, 219.0], [4500.0, 122.0], [4600.0, 79.0], [4700.0, 56.0], [4800.0, 93.0], [4900.0, 37.0], [5000.0, 19.0], [5100.0, 41.0], [5300.0, 24.0], [5200.0, 29.0], [5400.0, 108.0], [5500.0, 59.0], [5600.0, 56.0], [5700.0, 28.0], [5800.0, 22.0], [6000.0, 24.0], [5900.0, 10.0], [6100.0, 33.0], [6200.0, 32.0], [6300.0, 52.0], [6400.0, 46.0], [6500.0, 12.0], [6600.0, 6.0], [6700.0, 7.0], [6900.0, 52.0], [6800.0, 23.0], [7100.0, 72.0], [7000.0, 90.0], [7300.0, 29.0], [7200.0, 76.0], [7400.0, 8.0], [7600.0, 11.0], [7500.0, 11.0], [7900.0, 12.0], [7800.0, 7.0], [7700.0, 5.0], [8000.0, 12.0], [8100.0, 1.0], [8400.0, 29.0], [8500.0, 9.0], [8200.0, 2.0], [8300.0, 6.0], [8600.0, 3.0], [8700.0, 1.0], [100.0, 4.0], [200.0, 3.0], [500.0, 26.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2951.0, "series": [{"data": [[0.0, 7.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 36.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2951.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 495.3139999999998, "minX": 1.63090464E12, "maxY": 508.30300000000057, "series": [{"data": [[1.63090464E12, 495.55299999999875]], "isOverall": false, "label": "deleteWants", "isController": false}, {"data": [[1.63090464E12, 495.3139999999998]], "isOverall": false, "label": "checkFavorite", "isController": false}, {"data": [[1.63090464E12, 508.30300000000057]], "isOverall": false, "label": "addWants", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090464E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 173.0, "minX": 1.0, "maxY": 8491.0, "series": [{"data": [[2.0, 7729.0], [3.0, 7084.0], [5.0, 7086.0], [6.0, 7090.0], [7.0, 7083.0], [8.0, 8235.285714285714], [9.0, 7078.0], [10.0, 7089.0], [11.0, 7074.0], [12.0, 7087.0], [13.0, 7761.454545454545], [15.0, 7755.166666666666], [16.0, 7876.333333333333], [17.0, 7393.8], [18.0, 7530.666666666667], [19.0, 7072.0], [20.0, 7663.222222222223], [22.0, 8491.0], [23.0, 7233.666666666667], [24.0, 7242.0], [26.0, 7215.5], [27.0, 7450.500000000001], [30.0, 7234.0], [33.0, 7512.4], [32.0, 7683.0], [35.0, 7859.5], [34.0, 7259.0], [37.0, 7455.0], [36.0, 8385.357142857143], [39.0, 7340.5], [38.0, 7831.0], [41.0, 7234.0], [40.0, 7199.0], [42.0, 7473.333333333333], [43.0, 7230.5], [44.0, 7228.0], [47.0, 7398.375000000001], [49.0, 7211.0], [48.0, 7180.0], [51.0, 7668.0], [50.0, 8471.714285714286], [54.0, 7185.8], [55.0, 7923.5], [59.0, 7164.5], [58.0, 7190.75], [60.0, 7312.299999999999], [62.0, 7738.666666666667], [67.0, 7162.0], [66.0, 7731.4], [65.0, 7206.0], [64.0, 7199.0], [71.0, 7468.0], [70.0, 7322.5], [69.0, 7156.0], [68.0, 7134.0], [75.0, 7176.0], [74.0, 7156.5], [72.0, 7169.0], [78.0, 7214.0], [77.0, 7503.857142857142], [76.0, 7180.0], [79.0, 7337.0], [82.0, 7227.333333333333], [80.0, 7254.5], [83.0, 7124.0], [81.0, 7108.0], [86.0, 6799.5], [85.0, 7378.000000000001], [87.0, 7112.0], [84.0, 7115.0], [90.0, 7302.0], [89.0, 7133.5], [88.0, 7342.0], [94.0, 7108.0], [93.0, 7152.0], [92.0, 7277.666666666667], [95.0, 7309.0], [98.0, 7079.857142857143], [97.0, 6920.0], [96.0, 6871.5], [99.0, 7171.5], [101.0, 6592.0], [100.0, 6801.6], [102.0, 7025.0], [107.0, 7068.0], [105.0, 6791.0], [104.0, 6857.2], [111.0, 6539.875], [110.0, 6715.666666666667], [108.0, 6872.0], [109.0, 7046.0], [115.0, 6804.0], [114.0, 6302.25], [113.0, 7075.0], [112.0, 6866.666666666667], [119.0, 6866.666666666667], [117.0, 7071.0], [118.0, 6455.2], [116.0, 6449.0], [123.0, 5689.0], [122.0, 6146.0], [120.0, 6156.666666666667], [124.0, 5652.5], [126.0, 7247.0], [127.0, 6377.0], [125.0, 6456.5], [133.0, 6212.0], [132.0, 5717.333333333333], [131.0, 6550.5], [129.0, 7255.0], [130.0, 6388.5], [128.0, 6353.0], [143.0, 6138.666666666667], [140.0, 5901.5], [138.0, 5626.0], [142.0, 6695.833333333334], [150.0, 6237.0], [149.0, 6572.6], [148.0, 6960.666666666667], [145.0, 6616.666666666667], [144.0, 6374.0], [158.0, 6794.749999999999], [157.0, 5679.0], [153.0, 5495.2], [156.0, 7165.5], [155.0, 7233.375], [152.0, 7238.0], [167.0, 5865.333333333333], [166.0, 5962.5], [165.0, 6219.0], [175.0, 3787.666666666667], [168.0, 5528.75], [174.0, 173.5], [173.0, 173.0], [183.0, 6504.666666666667], [181.0, 6017.0], [179.0, 5554.0], [178.0, 5831.333333333334], [177.0, 5920.5], [182.0, 6802.75], [180.0, 6307.5], [191.0, 5923.1], [189.0, 5630.0], [184.0, 6275.714285714286], [190.0, 6663.5], [188.0, 6428.75], [187.0, 7047.0], [186.0, 6876.25], [185.0, 7035.0], [192.0, 6362.25], [199.0, 6893.0], [198.0, 7028.8], [196.0, 6425.25], [195.0, 6321.315789473684], [194.0, 7046.0], [193.0, 6504.0], [197.0, 6295.0], [206.0, 5574.5], [205.0, 5708.0], [204.0, 5886.0], [203.0, 5915.0], [202.0, 6695.0], [201.0, 6631.5], [207.0, 6273.25], [213.0, 5456.5], [211.0, 5734.666666666667], [209.0, 6123.5], [223.0, 5686.6], [222.0, 4870.0], [217.0, 3958.8], [221.0, 6076.0], [220.0, 6106.0], [216.0, 6070.857142857142], [230.0, 5300.333333333333], [227.0, 4895.5], [224.0, 5249.333333333333], [229.0, 6081.0], [226.0, 6043.0], [238.0, 5735.666666666667], [237.0, 6498.0], [236.0, 6463.666666666667], [235.0, 6575.0], [234.0, 6227.833333333333], [233.0, 5167.875], [239.0, 6610.75], [247.0, 5084.0], [245.0, 4894.0], [243.0, 5299.333333333334], [241.0, 5581.5], [240.0, 5428.333333333333], [242.0, 6915.749999999999], [246.0, 5492.0], [244.0, 5502.0], [252.0, 5356.0], [248.0, 6247.5], [249.0, 6673.277777777778], [254.0, 5540.5], [251.0, 5574.0], [270.0, 4084.0], [271.0, 3933.0], [269.0, 4081.6666666666665], [266.0, 4576.666666666667], [265.0, 5429.0], [267.0, 5450.0], [264.0, 5211.0], [263.0, 4113.0], [262.0, 4096.5], [260.0, 4519.25], [256.0, 4597.8], [258.0, 5567.8], [268.0, 5538.666666666667], [284.0, 4718.0], [287.0, 4606.0], [276.0, 5860.304347826087], [286.0, 6840.5], [274.0, 6393.333333333333], [275.0, 6395.0], [285.0, 5449.5], [280.0, 5495.0], [278.0, 5476.5], [277.0, 5485.0], [301.0, 4808.333333333333], [302.0, 4910.75], [300.0, 4755.0], [291.0, 5434.4], [289.0, 5318.5], [290.0, 6132.0], [299.0, 4896.0], [298.0, 3905.0], [296.0, 4141.0], [297.0, 6009.5], [303.0, 5791.0], [295.0, 5535.0], [293.0, 4772.0], [294.0, 6243.25], [292.0, 5309.75], [307.0, 5602.0], [304.0, 4756.5], [310.0, 4579.5], [311.0, 5654.0], [306.0, 5254.357142857142], [305.0, 5559.0], [319.0, 5651.333333333333], [318.0, 5620.0], [317.0, 5691.666666666666], [314.0, 5696.4], [312.0, 5883.2], [309.0, 5727.5], [333.0, 5305.666666666667], [335.0, 4212.833333333333], [328.0, 5682.0], [332.0, 4269.75], [327.0, 5756.0], [322.0, 5836.0], [321.0, 5832.0], [323.0, 5802.0], [330.0, 4830.5], [329.0, 4929.0], [334.0, 5447.5], [326.0, 5478.8], [325.0, 5492.0], [324.0, 6045.0], [331.0, 5612.0], [348.0, 4618.333333333333], [350.0, 4995.666666666667], [351.0, 4994.142857142857], [345.0, 5400.5], [344.0, 5360.0], [349.0, 4193.5], [347.0, 4689.0], [346.0, 4959.666666666667], [343.0, 4656.25], [340.0, 4754.571428571428], [342.0, 5576.25], [341.0, 5437.75], [338.0, 4929.142857142857], [336.0, 4865.5], [337.0, 5496.0], [354.0, 5569.0], [357.0, 4118.2], [356.0, 5048.0], [353.0, 5228.75], [352.0, 5341.0], [365.0, 5649.416666666667], [362.0, 5310.5], [355.0, 5340.666666666667], [363.0, 5332.2], [361.0, 5622.0], [382.0, 5110.5], [378.0, 4885.666666666667], [383.0, 4340.666666666667], [379.0, 4465.8], [381.0, 5250.333333333333], [376.0, 5616.181818181819], [377.0, 5385.333333333333], [374.0, 5426.666666666667], [369.0, 5307.25], [371.0, 5605.5], [387.0, 4953.142857142857], [393.0, 4848.5], [395.0, 4530.142857142857], [394.0, 5130.0], [392.0, 3800.0], [396.0, 5215.0], [397.0, 5212.0], [391.0, 5190.0], [390.0, 4914.5], [389.0, 4856.0], [388.0, 5027.6], [385.0, 4114.666666666667], [386.0, 5637.0], [384.0, 4850.0], [403.0, 5241.0], [414.0, 4664.285714285714], [410.0, 5011.125], [409.0, 5170.0], [408.0, 4989.0], [406.0, 5077.0], [405.0, 5355.0], [404.0, 4814.0], [400.0, 5219.5], [402.0, 5578.0], [401.0, 5347.5], [413.0, 5088.0], [412.0, 4800.0], [430.0, 4430.5], [431.0, 5130.125], [425.0, 5288.0], [424.0, 4879.0], [422.0, 4159.0], [427.0, 4862.0], [426.0, 5093.0], [423.0, 4915.666666666667], [416.0, 4842.333333333333], [419.0, 5013.5], [418.0, 4867.0], [421.0, 5121.0], [420.0, 4876.285714285714], [429.0, 4919.333333333333], [428.0, 5028.0], [433.0, 4139.25], [437.0, 4404.090909090909], [436.0, 4408.2], [434.0, 4419.350000000001], [435.0, 5112.0], [432.0, 4422.333333333333], [439.0, 4789.0], [438.0, 4934.333333333333], [447.0, 4692.0], [444.0, 4773.0], [442.0, 4745.142857142858], [441.0, 4712.0], [443.0, 4645.0], [446.0, 4652.0], [445.0, 4746.0], [450.0, 4765.0], [459.0, 4591.333333333333], [458.0, 4013.0], [456.0, 4756.0], [457.0, 4703.333333333333], [455.0, 4796.0], [452.0, 4703.75], [454.0, 4814.0], [448.0, 4741.25], [463.0, 4726.333333333333], [461.0, 4762.333333333333], [451.0, 4549.0], [476.0, 3877.0], [478.0, 4555.333333333333], [479.0, 4441.0], [475.0, 4312.125], [473.0, 4436.333333333333], [477.0, 4570.545454545454], [465.0, 4688.8], [466.0, 4538.333333333333], [464.0, 4621.0], [471.0, 4773.666666666667], [468.0, 4851.5], [483.0, 3829.0], [493.0, 4125.125], [492.0, 4514.230769230768], [489.0, 4149.785714285715], [491.0, 4592.0], [488.0, 4640.333333333333], [495.0, 4273.666666666667], [487.0, 4174.5], [486.0, 4443.0], [484.0, 4577.666666666667], [482.0, 4569.0], [481.0, 4638.25], [480.0, 4622.0], [496.0, 4415.88888888889], [505.0, 4375.25], [508.0, 4408.142857142857], [511.0, 4209.5], [504.0, 3990.0], [499.0, 4435.0], [498.0, 4306.0], [497.0, 4436.0], [506.0, 4410.0], [502.0, 4457.75], [500.0, 4118.0], [507.0, 4290.0], [503.0, 4474.0], [501.0, 4429.333333333333], [537.0, 3817.5], [530.0, 3867.0], [543.0, 4202.166666666667], [542.0, 4213.0], [541.0, 4328.5], [538.0, 4384.75], [540.0, 4461.0], [539.0, 4502.666666666667], [527.0, 4245.666666666667], [512.0, 4433.727272727273], [526.0, 4265.5], [514.0, 4396.75], [515.0, 4102.0], [513.0, 3898.5], [519.0, 911.4444444444443], [536.0, 4232.666666666667], [518.0, 2905.2999999999997], [517.0, 3607.2], [525.0, 4418.142857142857], [524.0, 3965.5], [523.0, 4262.4], [522.0, 3919.0], [520.0, 4287.166666666666], [534.0, 4446.333333333333], [535.0, 4058.0], [533.0, 4224.0], [531.0, 4284.222222222223], [529.0, 4358.5], [528.0, 4285.0], [559.0, 2712.0], [563.0, 4270.285714285715], [562.0, 3826.0], [560.0, 4222.0], [565.0, 4916.0], [567.0, 3957.5], [566.0, 3863.0], [564.0, 4456.0], [575.0, 4282.8], [571.0, 4027.5], [572.0, 4044.5], [574.0, 4341.0], [573.0, 3489.0], [570.0, 4980.294117647058], [569.0, 4440.0], [568.0, 4748.0], [551.0, 558.0], [558.0, 4447.0], [557.0, 3310.7499999999995], [554.0, 3648.833333333333], [556.0, 551.3333333333334], [555.0, 556.0], [553.0, 3243.5], [552.0, 2511.5], [550.0, 4169.0], [549.0, 4215.0], [548.0, 3974.0], [547.0, 4143.8], [546.0, 4483.666666666667], [544.0, 4107.0], [604.0, 3676.0], [595.0, 4638.0], [600.0, 4243.0], [602.0, 3325.0], [601.0, 3951.0], [581.0, 4300.0], [582.0, 4220.0], [580.0, 3931.5], [579.0, 4222.75], [577.0, 4195.0], [576.0, 3496.0], [583.0, 4019.3333333333335], [598.0, 4255.0], [597.0, 4330.5], [596.0, 4527.666666666667], [593.0, 4401.0], [594.0, 3983.25], [592.0, 4349.5], [606.0, 4649.0], [605.0, 3304.0], [591.0, 4184.857142857143], [590.0, 4223.666666666667], [589.0, 4186.714285714285], [588.0, 4320.7], [587.0, 3776.3333333333335], [586.0, 4364.25], [585.0, 4153.2], [584.0, 4053.25], [615.0, 4382.0], [621.0, 4337.25], [624.0, 4082.8333333333335], [625.0, 4027.0], [626.0, 3871.0], [628.0, 4318.0], [627.0, 4170.666666666667], [631.0, 4455.0], [630.0, 3852.25], [620.0, 4221.0], [616.0, 3734.2], [618.0, 4471.0], [619.0, 4648.666666666666], [614.0, 4190.6], [613.0, 4828.0], [612.0, 4077.25], [611.0, 3985.5], [609.0, 4167.8], [608.0, 3944.0], [623.0, 4183.0], [622.0, 3762.0], [639.0, 4831.0], [636.0, 4341.0], [637.0, 3636.0], [635.0, 4362.0], [633.0, 3928.3333333333335], [632.0, 3824.0], [668.0, 4255.0], [657.0, 4217.333333333333], [664.0, 4255.3], [670.0, 4481.666666666667], [669.0, 3546.3333333333335], [671.0, 3861.0], [656.0, 3552.0], [665.0, 4363.5], [666.0, 3879.5], [644.0, 4441.0], [643.0, 3572.0], [646.0, 3713.0], [642.0, 4279.666666666667], [640.0, 4177.5], [641.0, 3618.0], [661.0, 4352.2], [660.0, 3880.5], [663.0, 4075.0], [662.0, 3985.0], [659.0, 4668.0], [658.0, 3936.3333333333335], [655.0, 4243.666666666667], [654.0, 4270.25], [653.0, 3897.0], [651.0, 4438.818181818182], [648.0, 4281.0], [649.0, 3859.6], [650.0, 3549.0], [702.0, 4017.0], [703.0, 4091.5], [688.0, 3974.0], [699.0, 4112.0], [701.0, 4379.0], [698.0, 4169.5], [696.0, 3928.4285714285716], [679.0, 3815.0], [697.0, 3506.0], [677.0, 4119.0], [676.0, 4369.0], [674.0, 4107.166666666667], [673.0, 3555.0], [672.0, 3610.0], [678.0, 3727.6], [687.0, 4187.4], [686.0, 3885.0], [685.0, 4316.0], [684.0, 4366.666666666667], [683.0, 4218.8], [682.0, 3855.0], [680.0, 4228.625], [681.0, 3811.0], [693.0, 4354.285714285715], [694.0, 3726.6666666666665], [692.0, 3701.5], [690.0, 4185.666666666667], [689.0, 3971.75], [733.0, 4018.5], [730.0, 3933.9411764705883], [732.0, 4422.0], [705.0, 4166.222222222223], [718.0, 3776.0], [717.0, 3651.0], [706.0, 4385.0], [708.0, 3901.0], [707.0, 3931.0], [728.0, 4350.25], [710.0, 3836.4], [726.0, 4204.0], [725.0, 4408.0], [724.0, 4081.0], [723.0, 4148.0], [722.0, 4285.3], [720.0, 4208.0], [735.0, 4435.0], [716.0, 4310.4], [713.0, 3794.0], [714.0, 4406.5], [712.0, 4195.142857142857], [764.0, 4468.0], [765.0, 4107.555555555556], [767.0, 3674.0], [752.0, 4305.8], [766.0, 4391.0], [763.0, 4157.083333333333], [742.0, 4467.25], [743.0, 3645.0], [761.0, 3590.0], [741.0, 3952.0], [738.0, 4108.900000000001], [739.0, 3247.5], [737.0, 3890.5], [736.0, 4230.666666666667], [759.0, 4234.666666666667], [758.0, 3800.6666666666665], [756.0, 4073.6666666666665], [755.0, 3674.0], [754.0, 3822.5], [751.0, 4366.5], [747.0, 3797.5], [750.0, 3806.0], [748.0, 3643.5], [746.0, 4163.25], [745.0, 3919.0], [744.0, 3988.625], [794.0, 4362.0], [775.0, 3952.0], [798.0, 4014.909090909091], [784.0, 4431.333333333333], [787.0, 4436.5], [789.0, 3535.8333333333335], [785.0, 4489.0], [778.0, 4239.5], [781.0, 4428.5], [782.0, 3445.285714285714], [768.0, 4045.5], [783.0, 3559.0], [779.0, 4243.833333333334], [774.0, 4173.0], [773.0, 3649.75], [772.0, 4361.0], [771.0, 4493.0], [770.0, 4368.5], [769.0, 3994.5], [796.0, 4137.5], [795.0, 4237.0], [793.0, 4389.0], [792.0, 4460.0], [806.0, 4306.5], [826.0, 4039.285714285714], [830.0, 3851.5], [829.0, 3556.0], [831.0, 3806.0], [828.0, 4127.5], [827.0, 4308.75], [825.0, 4140.714285714285], [824.0, 4046.0], [820.0, 4128.6], [819.0, 4126.272727272727], [817.0, 4052.0], [818.0, 4324.75], [816.0, 4308.666666666667], [814.0, 4307.5], [815.0, 3820.0], [801.0, 4403.5], [800.0, 4130.571428571428], [805.0, 4143.5], [803.0, 4143.363636363636], [807.0, 4135.666666666667], [813.0, 4077.6666666666665], [812.0, 4279.6], [811.0, 3965.5714285714284], [810.0, 3960.2], [808.0, 4426.25], [858.0, 3905.1428571428573], [863.0, 4037.6666666666665], [848.0, 3662.0], [850.0, 3579.0], [849.0, 3712.0], [853.0, 4195.2], [852.0, 3779.0], [851.0, 4090.3333333333335], [862.0, 3818.0], [861.0, 3833.5], [860.0, 4275.666666666666], [859.0, 3591.0], [857.0, 4108.5], [839.0, 4464.0], [838.0, 4103.090909090909], [835.0, 4260.0], [834.0, 4191.090909090908], [833.0, 4160.0], [832.0, 4152.0], [847.0, 3926.3333333333335], [846.0, 4336.25], [845.0, 3814.3333333333335], [855.0, 3998.8], [854.0, 3952.0], [844.0, 4084.3333333333335], [841.0, 4036.0000000000005], [842.0, 4163.0], [840.0, 4237.666666666667], [895.0, 3878.0], [890.0, 3945.1666666666665], [889.0, 4018.0], [888.0, 3722.25], [894.0, 3978.5], [893.0, 3686.0], [892.0, 4038.75], [871.0, 3872.4], [869.0, 4272.0], [870.0, 4012.5], [868.0, 4029.875], [865.0, 3881.75], [867.0, 3589.0], [866.0, 3677.0], [887.0, 4376.0], [886.0, 4318.0], [885.0, 3898.0], [884.0, 3591.0], [883.0, 3698.0], [882.0, 4021.75], [881.0, 3714.3333333333335], [880.0, 3960.285714285714], [879.0, 4112.5], [876.0, 3928.25], [878.0, 3709.0], [877.0, 3928.3333333333335], [875.0, 4047.3333333333335], [874.0, 4002.0], [873.0, 3846.0], [872.0, 3789.0], [914.0, 3988.5], [926.0, 3652.75], [927.0, 3555.0], [923.0, 3714.6666666666665], [922.0, 3776.0], [920.0, 3717.3333333333335], [903.0, 4014.0], [900.0, 3812.0], [898.0, 3875.25], [897.0, 3976.1666666666665], [911.0, 4042.0], [896.0, 3578.0], [917.0, 3944.2], [918.0, 3902.5], [916.0, 3656.75], [915.0, 4203.0], [913.0, 3940.75], [912.0, 3662.4285714285716], [910.0, 4017.3333333333335], [909.0, 4215.0], [907.0, 3959.3749999999995], [906.0, 3896.4], [905.0, 4022.3333333333335], [904.0, 3542.8333333333335], [942.0, 3747.0], [940.0, 3131.6666666666665], [947.0, 3511.466666666667], [938.0, 3416.0], [939.0, 3753.0], [936.0, 3345.5], [937.0, 3552.0], [934.0, 3861.4999999999995], [929.0, 3839.1250000000005], [943.0, 3191.0], [933.0, 3617.6666666666665], [931.0, 3555.5], [930.0, 4036.076923076923], [948.0, 3464.0], [950.0, 3171.0], [949.0, 3188.0], [946.0, 3779.0], [945.0, 3172.5], [958.0, 3185.6666666666665], [955.0, 3178.3333333333335], [952.0, 3169.5], [935.0, 3550.0], [941.0, 3299.0], [989.0, 2498.3333333333335], [990.0, 2547.6], [976.0, 1657.75], [980.0, 1709.75], [978.0, 1649.5], [988.0, 2531.7894736842104], [986.0, 2626.8888888888887], [984.0, 2269.8333333333335], [987.0, 2441.0], [985.0, 2442.0], [970.0, 2962.0], [968.0, 1652.0], [972.0, 1652.3333333333333], [960.0, 3170.0], [963.0, 1638.5], [961.0, 3180.0], [966.0, 1677.0], [964.0, 1660.0], [971.0, 1654.0], [983.0, 1659.2], [981.0, 1745.833333333333], [1000.0, 962.0], [1.0, 7907.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[499.7210000000001, 4850.608666666674]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21473.183333333334, "minX": 1.63090464E12, "maxY": 43813.03333333333, "series": [{"data": [[1.63090464E12, 43813.03333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63090464E12, 21473.183333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090464E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4850.608666666674, "minX": 1.63090464E12, "maxY": 4850.608666666674, "series": [{"data": [[1.63090464E12, 4850.608666666674]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090464E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4835.474666666659, "minX": 1.63090464E12, "maxY": 4835.474666666659, "series": [{"data": [[1.63090464E12, 4835.474666666659]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090464E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2729.2566666666703, "minX": 1.63090464E12, "maxY": 2729.2566666666703, "series": [{"data": [[1.63090464E12, 2729.2566666666703]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090464E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 173.0, "minX": 1.63090464E12, "maxY": 8705.0, "series": [{"data": [[1.63090464E12, 8705.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63090464E12, 7096.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63090464E12, 8458.300000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63090464E12, 7297.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63090464E12, 173.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63090464E12, 4470.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090464E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 910.0, "minX": 10.0, "maxY": 8409.0, "series": [{"data": [[35.0, 1747.0], [148.0, 4056.5], [144.0, 6288.0], [624.0, 4154.5], [159.0, 5496.0], [10.0, 910.0], [42.0, 2486.0], [45.0, 3202.0], [187.0, 6982.0], [14.0, 3143.0], [67.0, 7194.0], [64.0, 7218.0], [17.0, 8365.0], [82.0, 7947.0], [93.0, 4229.0], [23.0, 1660.0], [386.0, 4468.0], [103.0, 5558.0], [401.0, 3733.0], [113.0, 4752.0], [119.0, 5496.0], [124.0, 7117.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[144.0, 6444.0], [82.0, 8409.0], [45.0, 3524.0], [401.0, 4024.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 624.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 10.0, "maxY": 8409.0, "series": [{"data": [[35.0, 1747.0], [148.0, 4056.5], [144.0, 6288.0], [624.0, 4153.5], [159.0, 5487.0], [10.0, 907.0], [42.0, 2486.0], [45.0, 3202.0], [187.0, 6982.0], [14.0, 3143.0], [67.0, 7126.0], [64.0, 7218.0], [17.0, 8360.0], [82.0, 7947.0], [93.0, 4215.0], [23.0, 1660.0], [386.0, 4461.0], [103.0, 5558.0], [401.0, 3733.0], [113.0, 4733.0], [119.0, 5484.0], [124.0, 7117.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[144.0, 0.0], [82.0, 8409.0], [45.0, 3523.0], [401.0, 3791.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 624.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.63090464E12, "maxY": 50.0, "series": [{"data": [[1.63090464E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090464E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63090464E12, "maxY": 49.9, "series": [{"data": [[1.63090464E12, 49.9]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63090464E12, 0.08333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.63090464E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090464E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.63090464E12, "maxY": 49.9, "series": [{"data": [[1.63090464E12, 0.1]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63090464E12, 49.9]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090464E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.63090464E12, "maxY": 49.9, "series": [{"data": [[1.63090464E12, 49.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63090464E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090464E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

