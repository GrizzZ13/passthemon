/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 21137.0, "series": [{"data": [[0.0, 24.0], [0.1, 29.0], [0.2, 32.0], [0.3, 34.0], [0.4, 36.0], [0.5, 38.0], [0.6, 40.0], [0.7, 41.0], [0.8, 42.0], [0.9, 45.0], [1.0, 45.0], [1.1, 47.0], [1.2, 50.0], [1.3, 51.0], [1.4, 54.0], [1.5, 55.0], [1.6, 56.0], [1.7, 58.0], [1.8, 59.0], [1.9, 60.0], [2.0, 62.0], [2.1, 64.0], [2.2, 67.0], [2.3, 69.0], [2.4, 70.0], [2.5, 71.0], [2.6, 72.0], [2.7, 73.0], [2.8, 75.0], [2.9, 76.0], [3.0, 78.0], [3.1, 79.0], [3.2, 80.0], [3.3, 82.0], [3.4, 83.0], [3.5, 84.0], [3.6, 85.0], [3.7, 87.0], [3.8, 89.0], [3.9, 91.0], [4.0, 93.0], [4.1, 95.0], [4.2, 96.0], [4.3, 97.0], [4.4, 98.0], [4.5, 99.0], [4.6, 101.0], [4.7, 102.0], [4.8, 103.0], [4.9, 105.0], [5.0, 108.0], [5.1, 109.0], [5.2, 113.0], [5.3, 118.0], [5.4, 120.0], [5.5, 122.0], [5.6, 123.0], [5.7, 125.0], [5.8, 128.0], [5.9, 129.0], [6.0, 132.0], [6.1, 134.0], [6.2, 136.0], [6.3, 140.0], [6.4, 141.0], [6.5, 143.0], [6.6, 145.0], [6.7, 147.0], [6.8, 149.0], [6.9, 154.0], [7.0, 160.0], [7.1, 166.0], [7.2, 173.0], [7.3, 179.0], [7.4, 185.0], [7.5, 189.0], [7.6, 191.0], [7.7, 197.0], [7.8, 200.0], [7.9, 203.0], [8.0, 206.0], [8.1, 212.0], [8.2, 216.0], [8.3, 229.0], [8.4, 238.0], [8.5, 241.0], [8.6, 251.0], [8.7, 257.0], [8.8, 265.0], [8.9, 269.0], [9.0, 273.0], [9.1, 277.0], [9.2, 283.0], [9.3, 286.0], [9.4, 291.0], [9.5, 295.0], [9.6, 300.0], [9.7, 303.0], [9.8, 307.0], [9.9, 312.0], [10.0, 314.0], [10.1, 315.0], [10.2, 319.0], [10.3, 323.0], [10.4, 324.0], [10.5, 326.0], [10.6, 327.0], [10.7, 329.0], [10.8, 331.0], [10.9, 333.0], [11.0, 338.0], [11.1, 339.0], [11.2, 342.0], [11.3, 344.0], [11.4, 346.0], [11.5, 350.0], [11.6, 353.0], [11.7, 357.0], [11.8, 362.0], [11.9, 364.0], [12.0, 368.0], [12.1, 369.0], [12.2, 374.0], [12.3, 379.0], [12.4, 382.0], [12.5, 384.0], [12.6, 386.0], [12.7, 389.0], [12.8, 392.0], [12.9, 394.0], [13.0, 396.0], [13.1, 398.0], [13.2, 402.0], [13.3, 410.0], [13.4, 415.0], [13.5, 421.0], [13.6, 423.0], [13.7, 427.0], [13.8, 430.0], [13.9, 434.0], [14.0, 436.0], [14.1, 439.0], [14.2, 445.0], [14.3, 448.0], [14.4, 451.0], [14.5, 457.0], [14.6, 465.0], [14.7, 467.0], [14.8, 473.0], [14.9, 477.0], [15.0, 482.0], [15.1, 486.0], [15.2, 490.0], [15.3, 491.0], [15.4, 494.0], [15.5, 497.0], [15.6, 499.0], [15.7, 502.0], [15.8, 504.0], [15.9, 506.0], [16.0, 509.0], [16.1, 511.0], [16.2, 513.0], [16.3, 515.0], [16.4, 521.0], [16.5, 524.0], [16.6, 527.0], [16.7, 530.0], [16.8, 534.0], [16.9, 539.0], [17.0, 552.0], [17.1, 557.0], [17.2, 559.0], [17.3, 567.0], [17.4, 571.0], [17.5, 575.0], [17.6, 581.0], [17.7, 585.0], [17.8, 591.0], [17.9, 596.0], [18.0, 601.0], [18.1, 604.0], [18.2, 607.0], [18.3, 610.0], [18.4, 613.0], [18.5, 615.0], [18.6, 617.0], [18.7, 623.0], [18.8, 628.0], [18.9, 633.0], [19.0, 639.0], [19.1, 642.0], [19.2, 646.0], [19.3, 649.0], [19.4, 653.0], [19.5, 660.0], [19.6, 670.0], [19.7, 676.0], [19.8, 676.0], [19.9, 679.0], [20.0, 682.0], [20.1, 684.0], [20.2, 687.0], [20.3, 693.0], [20.4, 701.0], [20.5, 706.0], [20.6, 710.0], [20.7, 714.0], [20.8, 720.0], [20.9, 726.0], [21.0, 734.0], [21.1, 735.0], [21.2, 739.0], [21.3, 745.0], [21.4, 748.0], [21.5, 757.0], [21.6, 764.0], [21.7, 768.0], [21.8, 774.0], [21.9, 778.0], [22.0, 782.0], [22.1, 784.0], [22.2, 791.0], [22.3, 796.0], [22.4, 801.0], [22.5, 805.0], [22.6, 810.0], [22.7, 815.0], [22.8, 818.0], [22.9, 821.0], [23.0, 823.0], [23.1, 826.0], [23.2, 829.0], [23.3, 834.0], [23.4, 838.0], [23.5, 841.0], [23.6, 843.0], [23.7, 848.0], [23.8, 851.0], [23.9, 853.0], [24.0, 859.0], [24.1, 862.0], [24.2, 865.0], [24.3, 868.0], [24.4, 872.0], [24.5, 876.0], [24.6, 880.0], [24.7, 885.0], [24.8, 888.0], [24.9, 893.0], [25.0, 896.0], [25.1, 899.0], [25.2, 904.0], [25.3, 907.0], [25.4, 910.0], [25.5, 912.0], [25.6, 914.0], [25.7, 920.0], [25.8, 922.0], [25.9, 926.0], [26.0, 928.0], [26.1, 932.0], [26.2, 935.0], [26.3, 938.0], [26.4, 939.0], [26.5, 941.0], [26.6, 944.0], [26.7, 947.0], [26.8, 951.0], [26.9, 954.0], [27.0, 955.0], [27.1, 958.0], [27.2, 962.0], [27.3, 967.0], [27.4, 970.0], [27.5, 973.0], [27.6, 976.0], [27.7, 981.0], [27.8, 987.0], [27.9, 990.0], [28.0, 994.0], [28.1, 997.0], [28.2, 999.0], [28.3, 1002.0], [28.4, 1004.0], [28.5, 1006.0], [28.6, 1010.0], [28.7, 1012.0], [28.8, 1015.0], [28.9, 1018.0], [29.0, 1022.0], [29.1, 1027.0], [29.2, 1030.0], [29.3, 1033.0], [29.4, 1038.0], [29.5, 1039.0], [29.6, 1041.0], [29.7, 1045.0], [29.8, 1048.0], [29.9, 1052.0], [30.0, 1055.0], [30.1, 1056.0], [30.2, 1058.0], [30.3, 1064.0], [30.4, 1068.0], [30.5, 1070.0], [30.6, 1074.0], [30.7, 1076.0], [30.8, 1078.0], [30.9, 1079.0], [31.0, 1081.0], [31.1, 1083.0], [31.2, 1085.0], [31.3, 1088.0], [31.4, 1091.0], [31.5, 1094.0], [31.6, 1095.0], [31.7, 1097.0], [31.8, 1102.0], [31.9, 1104.0], [32.0, 1106.0], [32.1, 1112.0], [32.2, 1115.0], [32.3, 1120.0], [32.4, 1123.0], [32.5, 1127.0], [32.6, 1129.0], [32.7, 1136.0], [32.8, 1141.0], [32.9, 1145.0], [33.0, 1148.0], [33.1, 1153.0], [33.2, 1156.0], [33.3, 1161.0], [33.4, 1171.0], [33.5, 1175.0], [33.6, 1178.0], [33.7, 1181.0], [33.8, 1183.0], [33.9, 1187.0], [34.0, 1190.0], [34.1, 1196.0], [34.2, 1201.0], [34.3, 1203.0], [34.4, 1210.0], [34.5, 1218.0], [34.6, 1223.0], [34.7, 1228.0], [34.8, 1230.0], [34.9, 1232.0], [35.0, 1238.0], [35.1, 1239.0], [35.2, 1245.0], [35.3, 1251.0], [35.4, 1253.0], [35.5, 1259.0], [35.6, 1264.0], [35.7, 1268.0], [35.8, 1270.0], [35.9, 1276.0], [36.0, 1279.0], [36.1, 1286.0], [36.2, 1289.0], [36.3, 1292.0], [36.4, 1294.0], [36.5, 1300.0], [36.6, 1302.0], [36.7, 1305.0], [36.8, 1308.0], [36.9, 1312.0], [37.0, 1314.0], [37.1, 1318.0], [37.2, 1321.0], [37.3, 1327.0], [37.4, 1331.0], [37.5, 1334.0], [37.6, 1337.0], [37.7, 1339.0], [37.8, 1340.0], [37.9, 1346.0], [38.0, 1348.0], [38.1, 1354.0], [38.2, 1362.0], [38.3, 1366.0], [38.4, 1368.0], [38.5, 1371.0], [38.6, 1374.0], [38.7, 1376.0], [38.8, 1378.0], [38.9, 1381.0], [39.0, 1383.0], [39.1, 1388.0], [39.2, 1390.0], [39.3, 1393.0], [39.4, 1395.0], [39.5, 1397.0], [39.6, 1401.0], [39.7, 1404.0], [39.8, 1409.0], [39.9, 1415.0], [40.0, 1419.0], [40.1, 1422.0], [40.2, 1427.0], [40.3, 1431.0], [40.4, 1438.0], [40.5, 1448.0], [40.6, 1458.0], [40.7, 1462.0], [40.8, 1464.0], [40.9, 1474.0], [41.0, 1479.0], [41.1, 1489.0], [41.2, 1496.0], [41.3, 1501.0], [41.4, 1504.0], [41.5, 1509.0], [41.6, 1518.0], [41.7, 1521.0], [41.8, 1529.0], [41.9, 1533.0], [42.0, 1541.0], [42.1, 1543.0], [42.2, 1546.0], [42.3, 1551.0], [42.4, 1558.0], [42.5, 1564.0], [42.6, 1576.0], [42.7, 1585.0], [42.8, 1590.0], [42.9, 1602.0], [43.0, 1609.0], [43.1, 1614.0], [43.2, 1625.0], [43.3, 1634.0], [43.4, 1640.0], [43.5, 1656.0], [43.6, 1665.0], [43.7, 1669.0], [43.8, 1673.0], [43.9, 1677.0], [44.0, 1681.0], [44.1, 1685.0], [44.2, 1689.0], [44.3, 1698.0], [44.4, 1704.0], [44.5, 1706.0], [44.6, 1709.0], [44.7, 1712.0], [44.8, 1716.0], [44.9, 1720.0], [45.0, 1721.0], [45.1, 1724.0], [45.2, 1726.0], [45.3, 1732.0], [45.4, 1736.0], [45.5, 1754.0], [45.6, 1765.0], [45.7, 1785.0], [45.8, 1804.0], [45.9, 1810.0], [46.0, 1824.0], [46.1, 1836.0], [46.2, 1841.0], [46.3, 1861.0], [46.4, 1882.0], [46.5, 1889.0], [46.6, 1898.0], [46.7, 1905.0], [46.8, 1914.0], [46.9, 1935.0], [47.0, 1950.0], [47.1, 1960.0], [47.2, 1976.0], [47.3, 2006.0], [47.4, 2016.0], [47.5, 2044.0], [47.6, 2060.0], [47.7, 2074.0], [47.8, 2085.0], [47.9, 2093.0], [48.0, 2106.0], [48.1, 2122.0], [48.2, 2140.0], [48.3, 2155.0], [48.4, 2169.0], [48.5, 2187.0], [48.6, 2188.0], [48.7, 2196.0], [48.8, 2200.0], [48.9, 2208.0], [49.0, 2220.0], [49.1, 2236.0], [49.2, 2244.0], [49.3, 2253.0], [49.4, 2258.0], [49.5, 2261.0], [49.6, 2267.0], [49.7, 2274.0], [49.8, 2279.0], [49.9, 2282.0], [50.0, 2286.0], [50.1, 2289.0], [50.2, 2292.0], [50.3, 2293.0], [50.4, 2296.0], [50.5, 2299.0], [50.6, 2305.0], [50.7, 2308.0], [50.8, 2312.0], [50.9, 2314.0], [51.0, 2316.0], [51.1, 2319.0], [51.2, 2320.0], [51.3, 2322.0], [51.4, 2327.0], [51.5, 2330.0], [51.6, 2336.0], [51.7, 2340.0], [51.8, 2345.0], [51.9, 2351.0], [52.0, 2356.0], [52.1, 2360.0], [52.2, 2363.0], [52.3, 2368.0], [52.4, 2372.0], [52.5, 2375.0], [52.6, 2377.0], [52.7, 2380.0], [52.8, 2381.0], [52.9, 2383.0], [53.0, 2386.0], [53.1, 2387.0], [53.2, 2390.0], [53.3, 2394.0], [53.4, 2398.0], [53.5, 2400.0], [53.6, 2401.0], [53.7, 2404.0], [53.8, 2405.0], [53.9, 2408.0], [54.0, 2414.0], [54.1, 2418.0], [54.2, 2423.0], [54.3, 2429.0], [54.4, 2432.0], [54.5, 2436.0], [54.6, 2442.0], [54.7, 2445.0], [54.8, 2449.0], [54.9, 2451.0], [55.0, 2454.0], [55.1, 2464.0], [55.2, 2468.0], [55.3, 2470.0], [55.4, 2474.0], [55.5, 2480.0], [55.6, 2488.0], [55.7, 2496.0], [55.8, 2503.0], [55.9, 2506.0], [56.0, 2509.0], [56.1, 2515.0], [56.2, 2518.0], [56.3, 2525.0], [56.4, 2532.0], [56.5, 2535.0], [56.6, 2539.0], [56.7, 2540.0], [56.8, 2547.0], [56.9, 2553.0], [57.0, 2554.0], [57.1, 2568.0], [57.2, 2572.0], [57.3, 2578.0], [57.4, 2586.0], [57.5, 2591.0], [57.6, 2599.0], [57.7, 2608.0], [57.8, 2611.0], [57.9, 2613.0], [58.0, 2616.0], [58.1, 2620.0], [58.2, 2622.0], [58.3, 2626.0], [58.4, 2628.0], [58.5, 2632.0], [58.6, 2635.0], [58.7, 2638.0], [58.8, 2641.0], [58.9, 2647.0], [59.0, 2652.0], [59.1, 2655.0], [59.2, 2658.0], [59.3, 2660.0], [59.4, 2663.0], [59.5, 2667.0], [59.6, 2671.0], [59.7, 2672.0], [59.8, 2676.0], [59.9, 2684.0], [60.0, 2687.0], [60.1, 2692.0], [60.2, 2697.0], [60.3, 2702.0], [60.4, 2705.0], [60.5, 2710.0], [60.6, 2714.0], [60.7, 2718.0], [60.8, 2720.0], [60.9, 2724.0], [61.0, 2727.0], [61.1, 2733.0], [61.2, 2737.0], [61.3, 2749.0], [61.4, 2754.0], [61.5, 2761.0], [61.6, 2776.0], [61.7, 2786.0], [61.8, 2790.0], [61.9, 2796.0], [62.0, 2805.0], [62.1, 2811.0], [62.2, 2823.0], [62.3, 2835.0], [62.4, 2844.0], [62.5, 2856.0], [62.6, 2864.0], [62.7, 2869.0], [62.8, 2877.0], [62.9, 2885.0], [63.0, 2895.0], [63.1, 2910.0], [63.2, 2917.0], [63.3, 2921.0], [63.4, 2937.0], [63.5, 2944.0], [63.6, 2953.0], [63.7, 2958.0], [63.8, 2965.0], [63.9, 2973.0], [64.0, 2980.0], [64.1, 2989.0], [64.2, 2996.0], [64.3, 3001.0], [64.4, 3008.0], [64.5, 3020.0], [64.6, 3025.0], [64.7, 3033.0], [64.8, 3039.0], [64.9, 3046.0], [65.0, 3053.0], [65.1, 3061.0], [65.2, 3070.0], [65.3, 3083.0], [65.4, 3098.0], [65.5, 3110.0], [65.6, 3128.0], [65.7, 3137.0], [65.8, 3144.0], [65.9, 3150.0], [66.0, 3155.0], [66.1, 3162.0], [66.2, 3167.0], [66.3, 3172.0], [66.4, 3183.0], [66.5, 3189.0], [66.6, 3191.0], [66.7, 3199.0], [66.8, 3205.0], [66.9, 3210.0], [67.0, 3213.0], [67.1, 3217.0], [67.2, 3221.0], [67.3, 3231.0], [67.4, 3236.0], [67.5, 3239.0], [67.6, 3241.0], [67.7, 3244.0], [67.8, 3247.0], [67.9, 3251.0], [68.0, 3254.0], [68.1, 3259.0], [68.2, 3264.0], [68.3, 3277.0], [68.4, 3285.0], [68.5, 3293.0], [68.6, 3298.0], [68.7, 3304.0], [68.8, 3313.0], [68.9, 3319.0], [69.0, 3328.0], [69.1, 3339.0], [69.2, 3341.0], [69.3, 3352.0], [69.4, 3357.0], [69.5, 3363.0], [69.6, 3373.0], [69.7, 3383.0], [69.8, 3400.0], [69.9, 3407.0], [70.0, 3419.0], [70.1, 3432.0], [70.2, 3440.0], [70.3, 3446.0], [70.4, 3448.0], [70.5, 3453.0], [70.6, 3459.0], [70.7, 3471.0], [70.8, 3478.0], [70.9, 3483.0], [71.0, 3488.0], [71.1, 3495.0], [71.2, 3500.0], [71.3, 3508.0], [71.4, 3519.0], [71.5, 3527.0], [71.6, 3532.0], [71.7, 3540.0], [71.8, 3545.0], [71.9, 3549.0], [72.0, 3554.0], [72.1, 3559.0], [72.2, 3563.0], [72.3, 3566.0], [72.4, 3571.0], [72.5, 3577.0], [72.6, 3579.0], [72.7, 3588.0], [72.8, 3592.0], [72.9, 3594.0], [73.0, 3597.0], [73.1, 3600.0], [73.2, 3602.0], [73.3, 3609.0], [73.4, 3614.0], [73.5, 3621.0], [73.6, 3623.0], [73.7, 3626.0], [73.8, 3633.0], [73.9, 3638.0], [74.0, 3640.0], [74.1, 3645.0], [74.2, 3662.0], [74.3, 3668.0], [74.4, 3674.0], [74.5, 3684.0], [74.6, 3696.0], [74.7, 3705.0], [74.8, 3716.0], [74.9, 3724.0], [75.0, 3734.0], [75.1, 3748.0], [75.2, 3750.0], [75.3, 3764.0], [75.4, 3771.0], [75.5, 3782.0], [75.6, 3786.0], [75.7, 3792.0], [75.8, 3795.0], [75.9, 3801.0], [76.0, 3807.0], [76.1, 3814.0], [76.2, 3820.0], [76.3, 3824.0], [76.4, 3826.0], [76.5, 3829.0], [76.6, 3835.0], [76.7, 3841.0], [76.8, 3844.0], [76.9, 3850.0], [77.0, 3855.0], [77.1, 3862.0], [77.2, 3866.0], [77.3, 3869.0], [77.4, 3873.0], [77.5, 3880.0], [77.6, 3886.0], [77.7, 3893.0], [77.8, 3899.0], [77.9, 3904.0], [78.0, 3909.0], [78.1, 3912.0], [78.2, 3920.0], [78.3, 3926.0], [78.4, 3936.0], [78.5, 3938.0], [78.6, 3941.0], [78.7, 3945.0], [78.8, 3954.0], [78.9, 3960.0], [79.0, 3969.0], [79.1, 3978.0], [79.2, 3987.0], [79.3, 4000.0], [79.4, 4024.0], [79.5, 4033.0], [79.6, 4040.0], [79.7, 4048.0], [79.8, 4058.0], [79.9, 4072.0], [80.0, 4078.0], [80.1, 4087.0], [80.2, 4097.0], [80.3, 4107.0], [80.4, 4125.0], [80.5, 4138.0], [80.6, 4155.0], [80.7, 4159.0], [80.8, 4173.0], [80.9, 4185.0], [81.0, 4190.0], [81.1, 4207.0], [81.2, 4224.0], [81.3, 4234.0], [81.4, 4239.0], [81.5, 4252.0], [81.6, 4263.0], [81.7, 4266.0], [81.8, 4270.0], [81.9, 4280.0], [82.0, 4284.0], [82.1, 4289.0], [82.2, 4293.0], [82.3, 4300.0], [82.4, 4307.0], [82.5, 4312.0], [82.6, 4322.0], [82.7, 4324.0], [82.8, 4331.0], [82.9, 4335.0], [83.0, 4341.0], [83.1, 4351.0], [83.2, 4354.0], [83.3, 4360.0], [83.4, 4364.0], [83.5, 4372.0], [83.6, 4376.0], [83.7, 4386.0], [83.8, 4397.0], [83.9, 4406.0], [84.0, 4422.0], [84.1, 4435.0], [84.2, 4440.0], [84.3, 4446.0], [84.4, 4481.0], [84.5, 4492.0], [84.6, 4517.0], [84.7, 4534.0], [84.8, 4540.0], [84.9, 4545.0], [85.0, 4548.0], [85.1, 4554.0], [85.2, 4561.0], [85.3, 4576.0], [85.4, 4591.0], [85.5, 4598.0], [85.6, 4632.0], [85.7, 4645.0], [85.8, 4653.0], [85.9, 4659.0], [86.0, 4678.0], [86.1, 4693.0], [86.2, 4742.0], [86.3, 4805.0], [86.4, 4840.0], [86.5, 4881.0], [86.6, 4962.0], [86.7, 5035.0], [86.8, 5055.0], [86.9, 5067.0], [87.0, 5078.0], [87.1, 5086.0], [87.2, 5116.0], [87.3, 5140.0], [87.4, 5157.0], [87.5, 5194.0], [87.6, 5230.0], [87.7, 5311.0], [87.8, 5340.0], [87.9, 5386.0], [88.0, 5398.0], [88.1, 5428.0], [88.2, 5588.0], [88.3, 5679.0], [88.4, 5764.0], [88.5, 5887.0], [88.6, 6065.0], [88.7, 6087.0], [88.8, 6110.0], [88.9, 6122.0], [89.0, 6135.0], [89.1, 6142.0], [89.2, 6216.0], [89.3, 6338.0], [89.4, 6355.0], [89.5, 6364.0], [89.6, 6384.0], [89.7, 6413.0], [89.8, 6429.0], [89.9, 6444.0], [90.0, 6453.0], [90.1, 6505.0], [90.2, 6580.0], [90.3, 6604.0], [90.4, 6620.0], [90.5, 6659.0], [90.6, 6669.0], [90.7, 6701.0], [90.8, 6812.0], [90.9, 6911.0], [91.0, 6935.0], [91.1, 6952.0], [91.2, 7004.0], [91.3, 7054.0], [91.4, 7075.0], [91.5, 7084.0], [91.6, 7097.0], [91.7, 7112.0], [91.8, 7133.0], [91.9, 7149.0], [92.0, 7163.0], [92.1, 7172.0], [92.2, 7188.0], [92.3, 7197.0], [92.4, 7203.0], [92.5, 7213.0], [92.6, 7221.0], [92.7, 7226.0], [92.8, 7233.0], [92.9, 7237.0], [93.0, 7246.0], [93.1, 7255.0], [93.2, 7262.0], [93.3, 7265.0], [93.4, 7269.0], [93.5, 7273.0], [93.6, 7275.0], [93.7, 7278.0], [93.8, 7285.0], [93.9, 7287.0], [94.0, 7290.0], [94.1, 7294.0], [94.2, 7303.0], [94.3, 7306.0], [94.4, 7311.0], [94.5, 7312.0], [94.6, 7316.0], [94.7, 7321.0], [94.8, 7324.0], [94.9, 7327.0], [95.0, 7329.0], [95.1, 7333.0], [95.2, 7336.0], [95.3, 7338.0], [95.4, 7342.0], [95.5, 7344.0], [95.6, 7347.0], [95.7, 7353.0], [95.8, 7355.0], [95.9, 7363.0], [96.0, 7366.0], [96.1, 7370.0], [96.2, 7377.0], [96.3, 7393.0], [96.4, 7402.0], [96.5, 7407.0], [96.6, 7422.0], [96.7, 7441.0], [96.8, 7498.0], [96.9, 7605.0], [97.0, 8698.0], [97.1, 8734.0], [97.2, 8880.0], [97.3, 9498.0], [97.4, 10356.0], [97.5, 10754.0], [97.6, 11382.0], [97.7, 11388.0], [97.8, 11519.0], [97.9, 11528.0], [98.0, 11538.0], [98.1, 11548.0], [98.2, 11554.0], [98.3, 11564.0], [98.4, 11578.0], [98.5, 11583.0], [98.6, 11592.0], [98.7, 11598.0], [98.8, 11605.0], [98.9, 11613.0], [99.0, 11621.0], [99.1, 11626.0], [99.2, 11631.0], [99.3, 11647.0], [99.4, 11653.0], [99.5, 11700.0], [99.6, 11758.0], [99.7, 11763.0], [99.8, 21029.0], [99.9, 21034.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 273.0, "series": [{"data": [[0.0, 273.0], [100.0, 191.0], [200.0, 108.0], [300.0, 216.0], [400.0, 149.0], [500.0, 141.0], [600.0, 145.0], [700.0, 119.0], [800.0, 164.0], [900.0, 186.0], [1000.0, 212.0], [1100.0, 144.0], [1200.0, 140.0], [1300.0, 187.0], [1400.0, 102.0], [1500.0, 96.0], [1600.0, 86.0], [1700.0, 87.0], [1800.0, 52.0], [1900.0, 36.0], [2000.0, 44.0], [2100.0, 49.0], [2200.0, 104.0], [2300.0, 177.0], [2400.0, 136.0], [2500.0, 113.0], [2600.0, 159.0], [2700.0, 100.0], [2800.0, 65.0], [2900.0, 76.0], [3000.0, 70.0], [3100.0, 76.0], [3200.0, 116.0], [3300.0, 69.0], [3400.0, 84.0], [3500.0, 113.0], [3600.0, 92.0], [3700.0, 73.0], [3800.0, 119.0], [3900.0, 89.0], [4000.0, 57.0], [4100.0, 50.0], [4200.0, 73.0], [4300.0, 93.0], [4500.0, 59.0], [4600.0, 36.0], [4400.0, 41.0], [4800.0, 15.0], [4700.0, 11.0], [5000.0, 30.0], [5100.0, 24.0], [4900.0, 6.0], [5300.0, 19.0], [5200.0, 9.0], [5500.0, 8.0], [5400.0, 7.0], [5600.0, 6.0], [5700.0, 4.0], [5800.0, 5.0], [5900.0, 2.0], [6100.0, 24.0], [6000.0, 15.0], [6200.0, 1.0], [6300.0, 26.0], [6400.0, 27.0], [6600.0, 26.0], [6500.0, 10.0], [6700.0, 5.0], [6800.0, 7.0], [6900.0, 18.0], [7100.0, 43.0], [7000.0, 26.0], [7200.0, 109.0], [7300.0, 134.0], [7400.0, 26.0], [7500.0, 4.0], [7600.0, 1.0], [8100.0, 1.0], [8500.0, 1.0], [8600.0, 3.0], [8700.0, 10.0], [8200.0, 1.0], [9100.0, 1.0], [9200.0, 1.0], [8800.0, 2.0], [9300.0, 1.0], [9400.0, 3.0], [9900.0, 1.0], [10300.0, 5.0], [10500.0, 4.0], [10700.0, 2.0], [10600.0, 1.0], [10800.0, 4.0], [11300.0, 7.0], [11500.0, 60.0], [11600.0, 47.0], [11700.0, 17.0], [21000.0, 12.0], [21100.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3496.0, "series": [{"data": [[0.0, 940.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1537.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3496.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 27.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.100000000000001, "minX": 1.63090326E12, "maxY": 1082.2090000000007, "series": [{"data": [[1.63090326E12, 804.2321608040185], [1.63090332E12, 8.100000000000001]], "isOverall": false, "label": "deleteWants", "isController": false}, {"data": [[1.63090332E12, 855.3079999999987]], "isOverall": false, "label": "checkFavorite", "isController": false}, {"data": [[1.63090326E12, 1082.2090000000007]], "isOverall": false, "label": "addWants", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090332E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.0, "maxY": 21082.0, "series": [{"data": [[2.0, 21035.5], [3.0, 1421.0], [5.0, 1608.0], [6.0, 7953.333333333333], [7.0, 1339.0], [8.0, 16139.0], [9.0, 11579.0], [10.0, 21032.75], [11.0, 1379.5], [15.0, 1503.75], [16.0, 4671.0], [17.0, 9641.444444444445], [18.0, 10252.153846153846], [19.0, 5453.5], [20.0, 1544.0], [21.0, 1410.5], [22.0, 4567.666666666667], [23.0, 1457.0], [24.0, 4343.5], [25.0, 1447.5], [26.0, 4371.0], [27.0, 2819.0], [28.0, 1602.0], [29.0, 1540.0], [30.0, 3471.5], [33.0, 2798.0], [32.0, 3276.3333333333335], [35.0, 4128.0], [34.0, 4126.0], [37.0, 1332.0], [36.0, 1563.0], [39.0, 1302.0], [41.0, 3718.0], [45.0, 1482.0], [44.0, 2335.0], [47.0, 46.0], [49.0, 5326.0], [48.0, 4653.5], [51.0, 2491.0], [50.0, 3118.0], [53.0, 6505.75], [52.0, 3255.5], [55.0, 6868.2], [54.0, 3526.285714285714], [57.0, 8043.0], [56.0, 11613.5], [58.0, 1959.3333333333335], [59.0, 6509.0], [61.0, 3417.2], [60.0, 1807.4], [62.0, 9112.75], [63.0, 7238.6], [67.0, 3743.833333333334], [64.0, 1981.857142857143], [65.0, 6941.0], [69.0, 10787.249999999998], [68.0, 3001.0], [71.0, 9774.25], [70.0, 5918.0], [74.0, 8059.2], [73.0, 2796.5], [72.0, 4143.6], [75.0, 6531.5], [79.0, 846.7500000000001], [77.0, 2948.0], [76.0, 4792.75], [78.0, 10208.6], [83.0, 8862.5], [82.0, 4180.4], [81.0, 6068.5], [80.0, 11625.0], [87.0, 3907.5], [84.0, 7316.0], [86.0, 8051.0], [85.0, 4836.0], [91.0, 6654.4], [90.0, 790.5], [89.0, 2364.3333333333335], [88.0, 9495.0], [95.0, 1715.5], [93.0, 6140.2], [94.0, 7937.5], [92.0, 4252.0], [99.0, 2238.0], [97.0, 4651.333333333333], [98.0, 7910.5], [96.0, 6699.333333333334], [103.0, 5564.333333333333], [102.0, 6308.833333333334], [100.0, 3095.0], [101.0, 11625.0], [107.0, 2064.5], [104.0, 1465.0], [105.0, 7884.916666666667], [106.0, 4167.0], [111.0, 432.0], [110.0, 2836.5], [109.0, 2757.5], [108.0, 2664.0], [115.0, 1908.6666666666665], [114.0, 2594.0], [113.0, 1936.5], [119.0, 7040.25], [118.0, 5039.8], [117.0, 8957.25], [116.0, 11613.0], [121.0, 5708.666666666666], [120.0, 4659.0], [123.0, 4556.166666666666], [122.0, 7701.0], [127.0, 1830.6666666666667], [125.0, 5793.333333333334], [126.0, 3880.0], [124.0, 10665.125], [135.0, 2894.5], [134.0, 2805.5], [132.0, 7804.818181818182], [131.0, 2594.5], [130.0, 1938.5], [129.0, 3874.0], [128.0, 4112.0], [143.0, 3082.0], [141.0, 6783.0], [139.0, 6503.0], [137.0, 3282.3333333333335], [136.0, 8163.4], [142.0, 129.5], [140.0, 3829.0], [138.0, 3843.0], [151.0, 1865.625], [149.0, 2679.5], [148.0, 1740.0], [146.0, 2674.3333333333335], [144.0, 5901.428571428572], [147.0, 8334.333333333334], [145.0, 7433.5], [150.0, 10340.333333333334], [159.0, 1585.0], [158.0, 2122.75], [156.0, 4208.5], [154.0, 5221.5], [153.0, 3680.6666666666665], [157.0, 3795.333333333333], [155.0, 7172.0], [152.0, 7410.0], [166.0, 2784.5], [165.0, 1924.0], [164.0, 3372.75], [163.0, 2938.0], [162.0, 4402.5], [161.0, 3382.3333333333335], [167.0, 4510.666666666667], [160.0, 7349.4], [175.0, 1840.0], [172.0, 1362.1111111111109], [170.0, 2670.5], [169.0, 3067.2], [168.0, 4282.333333333333], [174.0, 3943.333333333333], [173.0, 2609.8333333333335], [171.0, 8401.0], [183.0, 3333.0], [182.0, 1123.0], [181.0, 2876.0], [178.0, 2187.0], [177.0, 1455.857142857143], [176.0, 1238.0], [179.0, 4135.0], [189.0, 3126.0], [188.0, 1794.75], [186.0, 2652.0], [185.0, 3118.6666666666665], [184.0, 1807.0], [187.0, 1111.75], [191.0, 3916.0], [190.0, 4324.0], [198.0, 2294.3333333333335], [196.0, 2874.5], [195.0, 3027.4], [193.0, 1558.0], [192.0, 2122.0], [199.0, 2289.2], [197.0, 3919.0], [206.0, 3241.5], [205.0, 1522.0], [204.0, 1106.0], [203.0, 3065.6666666666665], [202.0, 3677.5714285714284], [201.0, 2490.5], [200.0, 1621.75], [215.0, 1027.0], [214.0, 2765.75], [212.0, 1349.1000000000001], [208.0, 2727.0], [210.0, 3951.5], [222.0, 2810.5], [221.0, 3128.6666666666665], [220.0, 1578.0], [218.0, 1555.0], [216.0, 2604.5], [223.0, 1199.0], [219.0, 3853.5], [217.0, 3782.5], [231.0, 2302.0], [229.0, 2521.75], [228.0, 1793.3333333333333], [226.0, 3106.3333333333335], [225.0, 1791.4], [230.0, 169.75], [224.0, 190.0], [239.0, 1269.0], [238.0, 2558.0], [237.0, 2658.5], [236.0, 2369.0], [235.0, 3462.5], [234.0, 1459.5], [232.0, 2491.0], [233.0, 3596.0], [247.0, 3219.25], [246.0, 2596.0], [245.0, 1218.0], [244.0, 1252.0], [243.0, 1304.7142857142858], [241.0, 1425.6666666666667], [240.0, 2707.6666666666665], [242.0, 3828.0], [255.0, 2017.0], [253.0, 1171.0], [252.0, 987.0], [251.0, 958.0], [250.0, 3181.0], [249.0, 1130.0], [248.0, 2420.0], [254.0, 3644.6666666666665], [269.0, 1681.0], [270.0, 3104.0], [268.0, 1039.5], [258.0, 3550.0], [266.0, 511.0], [267.0, 3562.5], [265.0, 5028.428571428572], [264.0, 1305.375], [271.0, 3721.0], [263.0, 2503.8], [261.0, 196.0], [262.0, 3910.5], [257.0, 3143.6666666666665], [256.0, 2248.5], [285.0, 420.6666666666667], [284.0, 992.0], [275.0, 6433.0], [283.0, 1038.5], [282.0, 3970.0], [281.0, 4338.0], [280.0, 3960.0], [286.0, 2597.6666666666665], [287.0, 980.8], [279.0, 2247.5], [278.0, 2443.0], [277.0, 2878.6666666666665], [276.0, 1150.75], [274.0, 4082.333333333333], [273.0, 5795.166666666667], [302.0, 2633.6666666666665], [303.0, 1233.8], [301.0, 974.0], [300.0, 2302.0], [291.0, 2882.6666666666665], [290.0, 5864.307692307692], [288.0, 1799.0], [289.0, 3947.0], [299.0, 2328.5], [298.0, 2009.0], [296.0, 2501.0], [297.0, 3702.0], [295.0, 2436.5], [294.0, 1776.3333333333335], [292.0, 5904.0], [293.0, 3662.0], [307.0, 2739.0], [317.0, 2236.5], [319.0, 1550.25], [318.0, 1222.25], [312.0, 2350.4], [316.0, 2289.0], [315.0, 2365.25], [314.0, 7288.0], [313.0, 3569.5833333333335], [311.0, 2902.0], [310.0, 2818.5], [308.0, 1185.9166666666667], [309.0, 2902.0], [306.0, 912.0], [305.0, 6348.611111111111], [323.0, 2988.0], [333.0, 2126.5714285714284], [334.0, 967.5], [335.0, 2439.6], [332.0, 550.3333333333333], [329.0, 440.5], [331.0, 154.0], [330.0, 1571.2000000000003], [328.0, 2204.6], [325.0, 1462.0], [324.0, 1580.0], [322.0, 742.6666666666666], [321.0, 907.0], [320.0, 2472.5], [326.0, 3579.0], [327.0, 331.3333333333333], [351.0, 2400.5], [350.0, 1503.75], [349.0, 4084.0], [348.0, 3958.0], [347.0, 848.0], [346.0, 4223.0], [345.0, 1921.6666666666667], [344.0, 5842.90909090909], [342.0, 3693.0], [341.0, 2828.2], [340.0, 310.6666666666667], [339.0, 602.75], [337.0, 4053.0], [338.0, 2251.714285714286], [336.0, 1544.2222222222222], [365.0, 4421.083333333333], [366.0, 5255.8], [360.0, 4868.0], [361.0, 3833.0], [367.0, 6557.2], [364.0, 3256.0], [355.0, 6667.333333333333], [363.0, 1865.3333333333335], [362.0, 4314.166666666667], [359.0, 2408.2], [358.0, 4127.0], [357.0, 912.3333333333334], [356.0, 5558.0], [354.0, 4776.75], [353.0, 1950.3333333333335], [352.0, 5549.5], [370.0, 988.0], [383.0, 5782.23076923077], [381.0, 935.5], [382.0, 4002.6666666666665], [371.0, 5080.454545454545], [380.0, 6534.666666666667], [379.0, 1700.7142857142858], [378.0, 7076.0], [374.0, 2300.3999999999996], [372.0, 3881.125], [373.0, 2061.5], [368.0, 3558.4285714285716], [369.0, 3734.0], [375.0, 1403.6666666666667], [377.0, 1905.0], [376.0, 6370.0], [398.0, 2527.0], [397.0, 1285.8], [396.0, 5610.5], [395.0, 2694.166666666667], [394.0, 4982.5], [393.0, 4154.666666666667], [392.0, 1792.3333333333335], [399.0, 3635.333333333333], [390.0, 3037.0], [389.0, 6826.95], [388.0, 2371.5], [387.0, 755.0], [385.0, 1643.6666666666665], [386.0, 6120.0], [391.0, 6146.333333333333], [384.0, 6455.233333333334], [412.0, 3783.5], [414.0, 2368.0], [415.0, 3956.666666666667], [408.0, 3318.75], [413.0, 4882.0], [411.0, 1303.5], [410.0, 5656.5], [409.0, 3071.75], [404.0, 7453.416666666667], [405.0, 339.75], [406.0, 5509.333333333333], [400.0, 5165.857142857143], [407.0, 3890.6666666666665], [403.0, 1720.625], [402.0, 8717.0], [401.0, 581.0], [417.0, 1052.0], [424.0, 3831.0], [430.0, 2492.0], [429.0, 6050.0], [428.0, 3254.0], [419.0, 3807.5], [418.0, 6011.666666666667], [431.0, 5231.6], [427.0, 2791.25], [425.0, 3745.0], [426.0, 7335.0], [423.0, 6176.6], [422.0, 2316.0], [421.0, 4058.333333333333], [420.0, 2840.8], [416.0, 2143.0], [444.0, 1718.923076923077], [447.0, 2521.375], [446.0, 4098.666666666667], [445.0, 4205.0], [440.0, 1815.1428571428573], [441.0, 4951.0], [443.0, 3875.6666666666665], [442.0, 7234.0], [439.0, 4958.2], [438.0, 454.3333333333333], [432.0, 1247.3333333333333], [437.0, 3202.4], [436.0, 2457.0], [434.0, 3592.1666666666665], [435.0, 3637.0], [433.0, 1845.1428571428573], [462.0, 4790.75], [459.0, 5290.8], [458.0, 4540.6], [456.0, 3139.8333333333335], [455.0, 5204.0], [448.0, 5118.5], [452.0, 3705.0], [454.0, 7265.5], [451.0, 2095.6666666666665], [450.0, 6059.666666666667], [449.0, 2495.0], [463.0, 5970.333333333333], [461.0, 2992.0], [460.0, 3594.0], [479.0, 5078.5], [472.0, 2484.0], [470.0, 3133.25], [469.0, 6339.5], [468.0, 5378.5], [478.0, 5410.5], [477.0, 5777.666666666667], [476.0, 5395.5], [467.0, 3655.5], [465.0, 6113.666666666667], [464.0, 3847.0], [471.0, 3572.0], [475.0, 5415.0], [474.0, 5995.333333333333], [473.0, 5574.5], [493.0, 2322.75], [492.0, 3941.0], [488.0, 4042.5], [486.0, 2383.0], [495.0, 3483.5], [494.0, 3164.166666666667], [490.0, 5349.0], [485.0, 5422.25], [483.0, 6139.833333333333], [481.0, 3449.0], [480.0, 3557.0], [487.0, 7161.5], [499.0, 757.0], [503.0, 2375.5], [508.0, 1221.0], [502.0, 1198.625], [497.0, 659.3333333333334], [496.0, 6940.0], [498.0, 1404.1666666666667], [509.0, 2405.142857142857], [506.0, 1705.0], [505.0, 3249.4], [504.0, 525.0], [507.0, 494.3333333333333], [510.0, 5285.75], [511.0, 498.0], [501.0, 2095.75], [500.0, 4182.571428571428], [514.0, 1791.8], [540.0, 2897.25], [538.0, 1293.6666666666667], [534.0, 4701.222222222223], [532.0, 3297.0], [530.0, 4578.428571428572], [542.0, 6348.25], [528.0, 6496.222222222223], [520.0, 501.3333333333333], [524.0, 3550.25], [526.0, 3484.0], [512.0, 5421.666666666667], [516.0, 4270.0], [536.0, 6359.0], [570.0, 2040.5], [574.0, 1831.0], [560.0, 3405.5714285714284], [572.0, 2144.0], [568.0, 3471.2], [550.0, 3304.5], [548.0, 3598.5], [546.0, 2920.0], [544.0, 3625.0], [558.0, 2221.0], [554.0, 3187.0], [552.0, 3192.5], [556.0, 3187.0], [566.0, 943.0], [564.0, 2553.75], [562.0, 2515.6666666666665], [592.0, 3023.0], [596.0, 5271.0], [598.0, 3390.5], [594.0, 2744.0], [606.0, 3508.0], [604.0, 2596.0], [602.0, 3181.3333333333335], [600.0, 2891.0], [590.0, 1630.642857142857], [588.0, 3263.0], [586.0, 1008.6666666666666], [584.0, 3946.857142857143], [582.0, 1993.875], [580.0, 5292.6], [578.0, 1269.181818181818], [576.0, 3270.833333333333], [632.0, 3652.0], [634.0, 1633.0], [628.0, 3731.0], [636.0, 1269.0], [624.0, 776.0], [614.0, 3019.833333333333], [612.0, 751.0], [610.0, 2824.5], [608.0, 3824.5], [622.0, 633.6666666666665], [620.0, 4062.5], [618.0, 1130.0], [616.0, 3706.75], [630.0, 2537.3333333333335], [626.0, 1836.5], [646.0, 3871.0], [670.0, 2078.6666666666665], [668.0, 1744.0], [664.0, 2835.75], [644.0, 964.0], [642.0, 2206.5], [640.0, 2499.6], [656.0, 2497.8], [658.0, 2230.6666666666665], [660.0, 3537.0], [662.0, 2485.3333333333335], [650.0, 5350.0], [648.0, 1905.0], [696.0, 935.0], [698.0, 3077.25], [700.0, 1932.0], [688.0, 5246.0], [702.0, 2856.0], [678.0, 2116.0], [676.0, 2064.5], [674.0, 3270.25], [672.0, 2448.0], [692.0, 2677.0], [686.0, 3448.4], [684.0, 2614.6], [682.0, 2181.666666666667], [680.0, 2475.6666666666665], [728.0, 1610.6], [734.0, 4462.5], [732.0, 2708.875], [730.0, 1102.0], [718.0, 2433.0], [706.0, 1697.0], [704.0, 2182.0], [708.0, 2152.5], [710.0, 2285.0], [716.0, 2776.0], [712.0, 2672.0], [714.0, 2547.0], [726.0, 2042.6666666666665], [724.0, 3234.0], [722.0, 2022.0], [720.0, 2260.571428571429], [762.0, 2523.3333333333335], [764.0, 1332.0], [760.0, 935.0], [742.0, 3771.0], [758.0, 3702.285714285714], [756.0, 2733.0], [754.0, 2265.3333333333335], [740.0, 2763.5], [750.0, 3170.5], [738.0, 3790.0], [736.0, 3828.0], [748.0, 1580.5555555555557], [746.0, 2358.0], [744.0, 2305.0], [766.0, 2219.0], [792.0, 694.0], [794.0, 2210.6666666666665], [796.0, 1840.5], [798.0, 1407.75], [784.0, 3480.4], [786.0, 1786.0], [770.0, 2427.5], [768.0, 2671.6666666666665], [774.0, 3692.0], [772.0, 4991.333333333333], [782.0, 876.6666666666666], [780.0, 1626.7142857142858], [776.0, 2526.285714285714], [778.0, 2214.5], [790.0, 1645.5714285714287], [788.0, 3787.4], [826.0, 1528.3333333333333], [830.0, 2838.2], [822.0, 4730.0], [820.0, 6130.0], [818.0, 3590.0], [816.0, 2065.0], [828.0, 1569.5], [808.0, 1760.3333333333335], [810.0, 5188.0], [814.0, 2108.5], [812.0, 3846.8], [806.0, 2614.375], [804.0, 6608.0], [802.0, 3130.6666666666665], [838.0, 2262.75], [836.0, 2684.0], [844.0, 2825.5], [846.0, 2975.2], [842.0, 2369.4], [840.0, 2672.0], [858.0, 5867.0], [856.0, 3225.5], [834.0, 4863.375000000001], [862.0, 2217.0], [852.0, 2176.0], [854.0, 2587.0], [850.0, 2789.5], [892.0, 4199.0], [882.0, 1553.3333333333333], [886.0, 1674.3333333333335], [884.0, 3205.5], [880.0, 2618.0], [890.0, 3152.0], [878.0, 1506.6666666666665], [888.0, 3154.5], [870.0, 6312.0], [868.0, 3108.0], [866.0, 2165.8571428571427], [876.0, 877.5], [874.0, 2643.3333333333335], [872.0, 3419.0], [902.0, 5624.0], [926.0, 1568.5], [922.0, 6098.5], [920.0, 2058.833333333333], [916.0, 2685.4], [914.0, 2620.0], [900.0, 3151.333333333333], [898.0, 953.4], [896.0, 6070.0], [910.0, 2354.5], [908.0, 2945.3333333333335], [904.0, 2388.0], [954.0, 821.5], [952.0, 1796.0], [958.0, 847.3333333333334], [948.0, 2006.333333333333], [946.0, 4994.333333333333], [950.0, 6067.0], [942.0, 1027.5], [928.0, 1116.0], [930.0, 3834.0], [934.0, 2538.0], [940.0, 2821.0], [938.0, 1032.3333333333333], [936.0, 3620.0], [956.0, 2711.666666666667], [964.0, 3037.0], [990.0, 2842.0], [976.0, 2170.5], [988.0, 1065.0], [978.0, 946.0], [960.0, 2344.0], [962.0, 1004.0], [966.0, 3034.0], [986.0, 1888.0], [970.0, 749.0], [968.0, 1494.3333333333335], [972.0, 994.0], [974.0, 975.5], [980.0, 947.25], [982.0, 3168.5], [1022.0, 1634.857142857143], [1010.0, 3085.285714285714], [1008.0, 6144.0], [1012.0, 3414.0], [1014.0, 2044.0], [1020.0, 2728.5], [1006.0, 640.0], [992.0, 2470.0], [994.0, 2187.0], [1004.0, 1224.2], [1002.0, 4869.333333333333], [1000.0, 3760.8333333333335], [996.0, 2602.1428571428573], [998.0, 2397.666666666667], [1018.0, 4324.0], [1016.0, 3851.4], [1028.0, 4352.0], [1060.0, 988.0], [1084.0, 4435.0], [1036.0, 1958.8], [1024.0, 4374.4], [1052.0, 2714.0], [1048.0, 3061.0], [1040.0, 2540.0], [1072.0, 2815.0], [1080.0, 3925.1428571428564], [1068.0, 3281.0], [1064.0, 3113.5], [1140.0, 633.6153846153846], [1144.0, 2362.0], [1148.0, 2716.5], [1120.0, 455.0], [1136.0, 2007.5], [1100.0, 386.0], [1096.0, 2366.3333333333335], [1088.0, 4374.0], [1116.0, 2949.0], [1112.0, 3913.333333333333], [1108.0, 2607.6], [1104.0, 1923.0], [1132.0, 592.5], [1128.0, 4078.1666666666665], [1208.0, 2660.0], [1184.0, 4475.0], [1188.0, 5198.5], [1192.0, 2897.5], [1204.0, 3058.75], [1200.0, 3836.5], [1160.0, 2201.428571428571], [1164.0, 3212.0], [1180.0, 2497.0], [1172.0, 846.0], [1168.0, 3971.071428571429], [1176.0, 2464.0], [1196.0, 4461.6], [1276.0, 1316.3333333333333], [1248.0, 1906.0], [1256.0, 3605.3333333333335], [1252.0, 1870.0], [1260.0, 870.0], [1272.0, 1519.0], [1268.0, 1111.0], [1264.0, 528.0], [1228.0, 3941.4], [1220.0, 2078.4444444444443], [1224.0, 2457.0], [1216.0, 1808.3333333333333], [1236.0, 2119.0], [1232.0, 4402.9], [1240.0, 4114.0], [1244.0, 2436.1874999999995], [1292.0, 1002.0], [1328.0, 2448.0], [1332.0, 768.0], [1312.0, 2369.5], [1316.0, 3546.0], [1336.0, 653.0], [1288.0, 2553.5], [1284.0, 2256.0], [1280.0, 1558.6666666666667], [1308.0, 981.0], [1304.0, 1914.25], [1296.0, 1519.0], [1300.0, 2028.3333333333333], [1320.0, 625.0], [1324.0, 2037.75], [1392.0, 607.0], [1396.0, 1496.0], [1384.0, 2387.0], [1404.0, 2524.3333333333335], [1344.0, 620.5], [1372.0, 2478.0], [1348.0, 1869.857142857143], [1356.0, 912.0], [1368.0, 801.5], [1364.0, 558.0], [1360.0, 1777.6666666666667], [1412.0, 3075.0], [1408.0, 2393.75], [1440.0, 3529.0], [1456.0, 494.0], [1420.0, 2398.8064516129043], [1416.0, 2333.6666666666665], [1436.0, 2535.4], [1432.0, 1615.571428571429], [1428.0, 2383.5357142857147], [1424.0, 1409.142857142857], [1444.0, 2360.0], [1528.0, 2199.1428571428573], [1524.0, 1125.818181818182], [1508.0, 957.6666666666666], [1504.0, 2541.5], [1512.0, 776.0], [1532.0, 2214.4], [1520.0, 2727.0], [1484.0, 2596.25], [1472.0, 537.3714285714285], [1476.0, 2318.4], [1480.0, 1590.75], [1500.0, 462.5], [1496.0, 2280.2], [1488.0, 2283.75], [1492.0, 2694.3333333333335], [1540.0, 1968.2], [1584.0, 1620.0], [1568.0, 1749.25], [1588.0, 1407.8], [1592.0, 2612.0], [1536.0, 2076.0], [1544.0, 1404.5], [1548.0, 2650.6666666666665], [1556.0, 1221.3333333333335], [1552.0, 2412.0], [1560.0, 2735.0], [1580.0, 1340.0], [1608.0, 2059.0], [1648.0, 2016.0], [1660.0, 1211.0], [1652.0, 1498.5], [1604.0, 455.0], [1628.0, 1148.1875], [1624.0, 1394.5], [1620.0, 1772.0], [1616.0, 1914.5], [1644.0, 1783.0], [1640.0, 2196.0], [1696.0, 324.0], [1704.0, 295.5], [1676.0, 430.0], [1672.0, 1301.0], [1668.0, 1609.6666666666667], [1664.0, 1820.5], [1684.0, 1286.5], [1776.0, 303.0], [1784.0, 341.0], [1788.0, 1095.0], [1768.0, 322.0], [1772.0, 981.0], [1728.0, 1202.0], [1732.0, 1206.5], [1736.0, 1141.0], [1756.0, 287.5], [1748.0, 1149.5], [1848.0, 82.0], [1852.0, 108.0], [1828.0, 125.0], [1832.0, 298.33333333333337], [1792.0, 1016.5], [1816.0, 189.0], [1812.0, 182.25], [1844.0, 367.0], [1916.0, 61.0], [1912.0, 54.0], [1900.0, 51.333333333333336], [1908.0, 73.0], [1868.0, 99.0], [1856.0, 73.0], [1876.0, 47.0], [1928.0, 51.0], [1968.0, 56.0], [1952.0, 75.0], [1956.0, 95.0], [1924.0, 51.0], [1948.0, 97.0], [1944.0, 94.5], [1936.0, 54.0], [1964.0, 140.0], [2000.0, 46.333333333333336], [1988.0, 43.0], [1984.0, 46.0], [1081.0, 4360.0], [1061.0, 1544.0], [1057.0, 4312.0], [1085.0, 2901.0], [1037.0, 730.8333333333334], [1073.0, 3391.0], [1033.0, 4350.5], [1029.0, 4368.0], [1025.0, 4311.0], [1053.0, 1702.0], [1049.0, 3488.166666666667], [1041.0, 930.0], [1069.0, 1992.5], [1065.0, 4309.0], [1141.0, 4527.0], [1149.0, 2955.714285714286], [1129.0, 1710.5], [1121.0, 936.0], [1093.0, 4327.0], [1089.0, 2630.5], [1117.0, 3241.666666666667], [1109.0, 2936.0], [1105.0, 3816.5], [1133.0, 2516.0], [1213.0, 2977.0], [1193.0, 4657.5], [1189.0, 3093.3333333333335], [1185.0, 4207.333333333333], [1201.0, 3284.714285714286], [1205.0, 3322.0], [1209.0, 3068.25], [1181.0, 3001.0], [1153.0, 2558.25], [1165.0, 2585.095238095238], [1161.0, 4176.333333333333], [1169.0, 2550.875], [1173.0, 4275.75], [1177.0, 4376.666666666667], [1197.0, 2743.125], [1229.0, 2944.0], [1269.0, 1068.0], [1249.0, 1078.0], [1273.0, 1066.2], [1277.0, 2603.5], [1253.0, 3690.0], [1225.0, 2246.5], [1221.0, 3675.0], [1217.0, 3547.0], [1233.0, 3451.0], [1237.0, 5417.0], [1241.0, 2491.25], [1329.0, 2044.0], [1337.0, 1223.0], [1317.0, 2553.0], [1333.0, 2375.625], [1293.0, 2680.75], [1289.0, 768.0], [1285.0, 1007.0], [1281.0, 1578.6], [1305.0, 1209.0], [1309.0, 2582.3333333333335], [1297.0, 2390.0], [1301.0, 2854.0], [1325.0, 2399.5], [1321.0, 2924.6666666666665], [1397.0, 2686.0], [1401.0, 2420.0], [1377.0, 1167.0], [1385.0, 1493.0], [1393.0, 553.75], [1369.0, 732.0], [1349.0, 2605.285714285714], [1353.0, 619.5], [1389.0, 2541.0], [1413.0, 2124.5], [1417.0, 1894.0], [1445.0, 1731.0], [1421.0, 744.3333333333333], [1433.0, 382.0], [1409.0, 1518.6666666666667], [1437.0, 2280.0], [1429.0, 1774.3333333333333], [1425.0, 2495.6666666666665], [1453.0, 473.0], [1533.0, 2698.5], [1525.0, 1505.0], [1505.0, 1330.0], [1513.0, 2388.2], [1509.0, 2312.5], [1517.0, 2684.0], [1529.0, 2072.1666666666665], [1501.0, 1885.0], [1521.0, 2532.0], [1485.0, 3361.0], [1481.0, 2668.833333333333], [1477.0, 2337.0], [1497.0, 243.5], [1493.0, 2369.0], [1489.0, 2493.2], [1589.0, 1926.0], [1593.0, 1408.25], [1597.0, 1965.25], [1569.0, 2532.0], [1541.0, 2466.5], [1537.0, 1918.0], [1549.0, 2216.5333333333338], [1545.0, 2705.5], [1585.0, 2506.0], [1557.0, 2353.714285714286], [1553.0, 2660.0], [1581.0, 2604.6666666666665], [1653.0, 1707.5], [1657.0, 1818.0], [1661.0, 1875.6666666666667], [1633.0, 2289.0], [1641.0, 1390.5], [1649.0, 1679.6666666666667], [1613.0, 1065.3333333333333], [1609.0, 1759.6666666666667], [1601.0, 1984.8333333333333], [1629.0, 2361.0], [1625.0, 1454.0], [1621.0, 1196.0], [1617.0, 2248.0], [1725.0, 1212.0], [1685.0, 1261.0], [1673.0, 1312.0], [1669.0, 1634.0], [1665.0, 1429.5], [1709.0, 1214.0], [1785.0, 499.0], [1761.0, 1070.0], [1765.0, 350.0], [1769.0, 1033.5], [1781.0, 382.5], [1757.0, 1138.0], [1729.0, 1054.0], [1733.0, 254.0], [1741.0, 1158.5], [1745.0, 1210.0], [1773.0, 1104.0], [1797.0, 571.5], [1813.0, 172.0], [1841.0, 568.8571428571429], [1845.0, 323.3333333333333], [1809.0, 187.24999999999997], [1901.0, 71.0], [1905.0, 58.333333333333336], [1869.0, 67.53982300884955], [1873.0, 51.0], [1977.0, 78.0], [1981.0, 171.33333333333334], [1953.0, 66.0], [1961.0, 68.0], [1973.0, 61.0], [1969.0, 137.5], [1921.0, 75.33333333333333], [1945.0, 65.5], [1937.0, 69.33333333333333], [1997.0, 128.4], [1993.0, 73.5], [1989.0, 47.333333333333336], [519.0, 1219.8333333333333], [537.0, 3066.5], [539.0, 6370.25], [541.0, 1603.0], [531.0, 3448.0], [533.0, 3264.0], [543.0, 3598.5], [527.0, 2065.0], [521.0, 2922.6], [523.0, 3404.428571428571], [525.0, 3317.0], [517.0, 494.6666666666667], [513.0, 493.5], [515.0, 2511.0], [551.0, 3305.5], [569.0, 1760.2], [575.0, 4124.5], [561.0, 7081.0], [573.0, 4756.0], [559.0, 3553.5], [547.0, 4297.666666666667], [545.0, 6493.333333333333], [549.0, 6509.0], [555.0, 3295.0], [557.0, 3191.0], [553.0, 2967.6666666666665], [565.0, 3582.0], [567.0, 3770.0], [563.0, 3921.2], [593.0, 3531.0], [583.0, 2350.5], [591.0, 1012.0], [597.0, 943.0], [599.0, 5004.0], [595.0, 965.0], [605.0, 2368.3333333333335], [607.0, 1958.0], [603.0, 3515.0], [601.0, 3109.0], [589.0, 2610.0], [587.0, 3997.0], [585.0, 7345.5], [581.0, 1571.75], [579.0, 1287.7], [577.0, 5982.333333333333], [633.0, 2355.6666666666665], [635.0, 3182.0], [639.0, 3816.5], [637.0, 4582.8], [625.0, 2425.222222222222], [615.0, 2153.3333333333335], [613.0, 2282.428571428571], [609.0, 1480.6153846153845], [611.0, 2391.0], [623.0, 2004.142857142857], [621.0, 3477.857142857143], [619.0, 3851.6], [617.0, 3685.1666666666665], [631.0, 2638.5714285714284], [629.0, 3872.0], [627.0, 1846.0], [647.0, 3909.0], [655.0, 3588.5714285714284], [669.0, 2610.4285714285716], [667.0, 976.8571428571428], [665.0, 2559.0], [645.0, 3961.0], [643.0, 2073.6666666666665], [641.0, 2059.3333333333335], [659.0, 3137.0], [663.0, 2301.0], [661.0, 2790.0], [671.0, 2914.0], [657.0, 7228.0], [653.0, 3735.0], [651.0, 762.0], [649.0, 1049.923076923077], [699.0, 2989.0], [703.0, 2552.0], [679.0, 1085.8], [697.0, 3530.5], [677.0, 2121.75], [675.0, 3295.0], [673.0, 2240.5], [687.0, 3309.0], [695.0, 1861.0], [693.0, 1395.6666666666665], [691.0, 650.0], [689.0, 1204.2], [685.0, 2181.0], [683.0, 2619.0], [681.0, 4921.666666666667], [729.0, 2532.0], [723.0, 2585.75], [735.0, 1527.5], [731.0, 2866.5], [719.0, 1919.5], [705.0, 2595.5], [709.0, 2825.1111111111113], [707.0, 1960.0], [711.0, 1904.0], [717.0, 2057.5], [715.0, 2761.5], [713.0, 2551.5], [727.0, 1948.0], [725.0, 1918.0], [721.0, 2067.6666666666665], [743.0, 2767.0], [763.0, 1718.0], [761.0, 6662.5], [767.0, 5510.333333333333], [765.0, 5067.0], [755.0, 4018.333333333333], [753.0, 2557.5], [751.0, 3158.6], [741.0, 3341.0], [739.0, 4711.0], [737.0, 4312.333333333333], [749.0, 1516.0], [747.0, 4117.333333333333], [795.0, 3590.75], [787.0, 2261.75], [797.0, 3074.0], [799.0, 5610.333333333333], [785.0, 970.0], [793.0, 923.6666666666667], [775.0, 2814.75], [773.0, 782.0], [771.0, 2563.0], [783.0, 1371.0], [769.0, 3217.0], [781.0, 1639.1666666666665], [777.0, 1632.0], [779.0, 5730.0], [791.0, 1705.0], [789.0, 1890.0], [817.0, 5237.0], [831.0, 2532.0], [823.0, 2141.0], [821.0, 2540.3333333333335], [819.0, 2524.0], [827.0, 1624.0], [809.0, 5175.666666666667], [815.0, 6050.0], [811.0, 6854.0], [805.0, 5056.0], [825.0, 3648.0], [803.0, 2054.0], [801.0, 3359.333333333333], [839.0, 3138.0], [845.0, 4096.0], [847.0, 2975.0], [843.0, 3308.333333333333], [841.0, 6434.5], [859.0, 4199.666666666666], [857.0, 5215.0], [833.0, 2461.8], [837.0, 4680.25], [835.0, 6454.0], [863.0, 6318.5], [849.0, 2952.0], [855.0, 3133.3333333333335], [853.0, 4065.3333333333335], [861.0, 4549.5], [895.0, 3038.5], [889.0, 859.1111111111111], [887.0, 3827.333333333333], [885.0, 3107.5], [881.0, 2397.0], [893.0, 3227.0], [891.0, 3173.0], [869.0, 2315.0], [867.0, 4638.0], [879.0, 2287.0], [877.0, 1784.0], [875.0, 2509.5], [873.0, 1032.0], [927.0, 2387.0], [925.0, 2478.142857142857], [913.0, 818.0], [923.0, 830.6666666666666], [921.0, 1847.5], [919.0, 2600.25], [917.0, 6120.0], [915.0, 830.4], [901.0, 1431.0], [903.0, 3573.0], [899.0, 2393.0], [897.0, 1929.0], [911.0, 1241.0], [909.0, 2320.0], [907.0, 2759.6666666666665], [957.0, 3723.6666666666665], [959.0, 2294.0], [953.0, 2723.428571428571], [947.0, 3500.714285714286], [945.0, 2768.333333333333], [951.0, 2050.0], [933.0, 805.2857142857142], [929.0, 5076.0], [935.0, 2514.0], [941.0, 2529.0], [939.0, 3194.0], [937.0, 3999.0], [955.0, 2723.0], [987.0, 562.0], [965.0, 1894.6666666666665], [991.0, 2708.9999999999995], [977.0, 2586.0], [989.0, 1774.4], [975.0, 906.7500000000001], [961.0, 1455.0], [963.0, 1025.0], [967.0, 2063.0], [985.0, 4249.166666666667], [971.0, 939.0], [973.0, 989.6666666666666], [979.0, 1874.25], [983.0, 5086.0], [1019.0, 2031.0], [1023.0, 548.0], [1013.0, 2671.0], [1015.0, 2570.625], [1021.0, 1321.3333333333335], [1007.0, 2927.0], [993.0, 2724.333333333333], [1005.0, 1449.857142857143], [1001.0, 1876.5], [997.0, 2326.5], [1017.0, 3776.3333333333335], [995.0, 3343.2], [1082.0, 504.0], [1062.0, 1317.9999999999998], [1086.0, 1261.5], [1058.0, 2362.0], [1054.0, 2147.0], [1026.0, 4357.0], [1034.0, 3548.1363636363635], [1042.0, 2572.5], [1078.0, 4399.666666666667], [1038.0, 1930.5], [1070.0, 3842.0], [1066.0, 3479.0], [1142.0, 2094.3333333333335], [1122.0, 2765.5], [1146.0, 2733.8], [1150.0, 1732.0], [1138.0, 3497.833333333333], [1102.0, 1453.5], [1098.0, 4372.0], [1094.0, 3794.5], [1090.0, 2108.5], [1118.0, 478.6666666666667], [1114.0, 2971.0], [1110.0, 2200.0], [1106.0, 1668.25], [1134.0, 2400.0], [1130.0, 516.5], [1126.0, 846.2], [1206.0, 2642.3333333333335], [1210.0, 2173.75], [1194.0, 265.0], [1214.0, 733.0], [1186.0, 2340.0], [1190.0, 4283.0], [1202.0, 2147.1666666666665], [1166.0, 2337.3], [1158.0, 3216.4], [1182.0, 3847.0], [1154.0, 1379.0], [1162.0, 3602.5], [1178.0, 3026.2], [1174.0, 4560.0], [1198.0, 1857.6666666666665], [1278.0, 1879.0], [1270.0, 951.25], [1250.0, 1840.0], [1258.0, 1437.6666666666667], [1254.0, 1721.2], [1262.0, 1588.25], [1274.0, 824.0], [1266.0, 1273.333333333333], [1230.0, 3329.75], [1226.0, 1643.0], [1218.0, 2294.0], [1246.0, 2880.4], [1234.0, 3552.666666666667], [1238.0, 3515.0], [1242.0, 3671.3333333333335], [1290.0, 585.0], [1330.0, 1838.0], [1318.0, 3561.0], [1294.0, 1626.8333333333335], [1286.0, 972.0], [1282.0, 2010.5], [1310.0, 630.0], [1306.0, 3617.0], [1302.0, 1302.25], [1298.0, 2853.25], [1326.0, 1862.6666666666667], [1322.0, 1964.0], [1406.0, 1050.0], [1350.0, 681.0], [1382.0, 1949.0], [1386.0, 1368.3333333333335], [1378.0, 2534.0], [1398.0, 2259.0], [1394.0, 852.0], [1346.0, 606.0], [1374.0, 2245.6666666666665], [1370.0, 2547.5], [1354.0, 1917.4], [1366.0, 2356.0], [1362.0, 489.0], [1390.0, 1345.0], [1410.0, 3375.5], [1458.0, 468.0], [1418.0, 388.5], [1414.0, 3488.5], [1422.0, 1448.6666666666667], [1438.0, 2042.4444444444443], [1434.0, 2132.5], [1430.0, 1249.4], [1426.0, 1387.7777777777776], [1442.0, 2322.25], [1530.0, 2481.0], [1534.0, 2700.1826086956526], [1506.0, 2449.0], [1510.0, 2470.0], [1518.0, 1477.6666666666667], [1526.0, 1749.25], [1522.0, 387.0], [1486.0, 2420.0], [1482.0, 2474.3333333333335], [1478.0, 292.0], [1494.0, 2641.6666666666665], [1498.0, 2949.6666666666665], [1490.0, 3255.0], [1590.0, 2546.0], [1586.0, 1385.3333333333333], [1578.0, 1838.0], [1574.0, 2627.0], [1594.0, 2450.0], [1538.0, 2401.0], [1542.0, 2616.0], [1546.0, 2493.3333333333335], [1550.0, 2265.25], [1554.0, 2586.0], [1558.0, 2567.2], [1562.0, 2427.5], [1610.0, 458.0], [1614.0, 2340.6666666666665], [1650.0, 1529.0], [1658.0, 1889.0], [1654.0, 1905.0], [1606.0, 2528.0], [1602.0, 1426.0], [1630.0, 1837.5], [1626.0, 2199.0], [1622.0, 1391.25], [1618.0, 1394.5], [1638.0, 2261.6666666666665], [1634.0, 2341.0], [1646.0, 1813.5], [1662.0, 1899.0], [1722.0, 290.0], [1718.0, 292.0], [1702.0, 322.0], [1706.0, 292.0], [1714.0, 1148.0], [1686.0, 857.5], [1670.0, 1724.0], [1666.0, 1453.5], [1778.0, 775.0], [1730.0, 1229.0], [1774.0, 853.0], [1826.0, 134.5151515151515], [1834.0, 677.0], [1822.0, 142.5], [1842.0, 753.5], [1810.0, 169.66666666666666], [1914.0, 77.0], [1918.0, 50.333333333333336], [1866.0, 108.0], [1862.0, 79.0], [1886.0, 58.0], [1878.0, 41.0], [1902.0, 69.8], [1974.0, 133.0], [1958.0, 127.5], [1950.0, 429.0], [1946.0, 96.0], [1942.0, 108.0], [1938.0, 99.8627450980392], [1966.0, 88.5], [1986.0, 49.5], [1087.0, 2100.666666666667], [1079.0, 696.3333333333334], [1059.0, 3381.6], [1083.0, 2757.0], [1035.0, 3039.0], [1047.0, 2167.3333333333335], [1043.0, 1039.0], [1071.0, 2163.0], [1067.0, 1658.0], [1143.0, 3649.0], [1123.0, 891.5], [1131.0, 2958.0], [1147.0, 3909.5], [1103.0, 2559.0], [1099.0, 893.5], [1095.0, 746.0], [1119.0, 1870.6666666666667], [1091.0, 3005.0], [1111.0, 2990.0], [1107.0, 4550.0], [1135.0, 1841.5], [1211.0, 1993.0], [1191.0, 1308.0], [1187.0, 3947.0], [1215.0, 2021.4], [1203.0, 3295.0], [1207.0, 3402.0], [1167.0, 2803.5], [1179.0, 2656.428571428571], [1183.0, 3791.375], [1163.0, 1392.0], [1159.0, 1968.0], [1171.0, 3963.0], [1175.0, 4435.75], [1199.0, 3003.0], [1195.0, 2275.6], [1231.0, 3421.0], [1271.0, 1584.5], [1275.0, 3592.0], [1279.0, 3609.0], [1251.0, 879.3333333333333], [1259.0, 2119.0], [1219.0, 1823.0], [1227.0, 4058.0], [1223.0, 2371.0], [1247.0, 2368.2], [1243.0, 1555.2], [1235.0, 4294.0], [1239.0, 3817.4285714285716], [1331.0, 2935.75], [1335.0, 1366.5], [1343.0, 574.0], [1315.0, 599.0], [1287.0, 2451.0], [1283.0, 3616.5], [1303.0, 1870.0], [1299.0, 718.0], [1407.0, 2210.142857142857], [1399.0, 2285.0], [1383.0, 1364.0], [1387.0, 1648.3333333333333], [1395.0, 1500.5], [1367.0, 2591.6666666666665], [1351.0, 524.0], [1359.0, 483.5], [1391.0, 2090.6], [1415.0, 1486.4], [1443.0, 3484.0], [1463.0, 339.0], [1419.0, 1370.25], [1411.0, 2535.5555555555557], [1435.0, 2726.0], [1439.0, 2264.0], [1431.0, 395.0], [1427.0, 2049.0], [1451.0, 2153.6666666666665], [1447.0, 395.0], [1487.0, 1372.0], [1531.0, 2093.4], [1535.0, 1053.0], [1515.0, 2286.5], [1519.0, 2173.75], [1475.0, 2681.1], [1523.0, 2919.0], [1483.0, 753.0], [1479.0, 2930.5], [1499.0, 2129.375], [1495.0, 2401.0], [1491.0, 1728.7142857142858], [1595.0, 1870.0], [1591.0, 1516.5], [1579.0, 2250.5], [1575.0, 2434.3333333333335], [1571.0, 2629.0], [1559.0, 846.6666666666666], [1563.0, 2662.142857142857], [1539.0, 2163.428571428571], [1543.0, 1978.3333333333333], [1547.0, 2750.0], [1551.0, 1626.25], [1555.0, 2400.0], [1583.0, 1967.75], [1651.0, 1204.0], [1655.0, 1111.3333333333333], [1659.0, 442.0], [1635.0, 1300.0], [1639.0, 1412.0], [1615.0, 1358.0], [1607.0, 2509.25], [1603.0, 2204.6666666666665], [1631.0, 2187.0], [1619.0, 2201.0], [1623.0, 2203.0], [1647.0, 1220.0], [1723.0, 1218.0], [1727.0, 405.0], [1699.0, 1285.0], [1707.0, 764.5], [1719.0, 276.0], [1715.0, 286.0], [1671.0, 1269.0], [1667.0, 1196.0], [1683.0, 330.0], [1711.0, 270.0], [1783.0, 1179.0], [1779.0, 301.5], [1735.0, 1229.0], [1743.0, 216.0], [1751.0, 1203.0], [1803.0, 196.5], [1823.0, 151.66666666666666], [1847.0, 99.0], [1855.0, 127.0], [1831.0, 380.0], [1795.0, 623.1076923076923], [1811.0, 185.5], [1807.0, 598.0], [1843.0, 771.0], [1911.0, 41.0], [1907.0, 68.0], [1899.0, 53.0], [1891.0, 43.5], [1867.0, 115.66666666666667], [1863.0, 134.0], [1875.0, 31.0], [1903.0, 64.5], [1979.0, 77.0], [1955.0, 91.66666666666667], [1963.0, 77.0], [1971.0, 229.0], [1943.0, 133.0], [1939.0, 100.5], [1991.0, 101.0], [1.0, 21082.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[912.5890000000002, 2724.0191666666615]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13972.983333333334, "minX": 1.63090326E12, "maxY": 66504.65, "series": [{"data": [[1.63090326E12, 21296.233333333334], [1.63090332E12, 66504.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63090326E12, 28892.683333333334], [1.63090332E12, 13972.983333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090332E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1721.9473684210525, "minX": 1.63090326E12, "maxY": 4713.20646766169, "series": [{"data": [[1.63090326E12, 1721.9473684210525], [1.63090332E12, 4713.20646766169]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090332E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1705.1754385964934, "minX": 1.63090326E12, "maxY": 4491.79054726368, "series": [{"data": [[1.63090326E12, 1705.1754385964934], [1.63090332E12, 4491.79054726368]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090332E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 734.2388471177946, "minX": 1.63090326E12, "maxY": 2685.6542288557216, "series": [{"data": [[1.63090326E12, 734.2388471177946], [1.63090332E12, 2685.6542288557216]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090332E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.63090326E12, "maxY": 11778.0, "series": [{"data": [[1.63090326E12, 5596.0], [1.63090332E12, 11778.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63090326E12, 3669.1], [1.63090332E12, 7404.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63090326E12, 4592.660000000001], [1.63090332E12, 11666.239999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63090326E12, 4026.0999999999995], [1.63090332E12, 11550.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63090326E12, 24.0], [1.63090332E12, 66.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63090326E12, 1319.0], [1.63090332E12, 4138.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090332E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 87.0, "minX": 1.0, "maxY": 21087.0, "series": [{"data": [[137.0, 1424.0], [545.0, 2415.0], [596.0, 1070.0], [147.0, 616.0], [151.0, 2685.0], [158.0, 196.0], [48.0, 1706.5], [52.0, 1587.5], [231.0, 4199.0], [280.0, 4053.0], [19.0, 7605.0], [327.0, 3099.0], [330.0, 7287.0], [20.0, 10807.0], [361.0, 820.0], [91.0, 6417.0], [382.0, 3579.5], [398.0, 87.0], [395.0, 4359.0], [105.0, 3896.0], [476.0, 2686.5], [119.0, 340.0], [506.0, 619.0], [124.0, 11600.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 21087.0], [280.0, 1733.0], [151.0, 2724.0], [158.0, 21027.0], [327.0, 2958.0], [330.0, 7364.0], [395.0, 4552.0], [119.0, 21032.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 596.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 11600.5, "series": [{"data": [[137.0, 1424.0], [545.0, 2408.0], [596.0, 1056.5], [147.0, 616.0], [151.0, 2683.5], [158.0, 196.0], [48.0, 1706.5], [52.0, 1587.5], [231.0, 4199.0], [280.0, 3938.0], [19.0, 7162.0], [327.0, 3099.0], [330.0, 7277.0], [20.0, 6237.0], [361.0, 784.0], [91.0, 6416.0], [382.0, 3579.5], [398.0, 84.5], [395.0, 4353.0], [105.0, 3846.0], [476.0, 2679.0], [119.0, 340.0], [506.0, 614.5], [124.0, 11600.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [280.0, 1732.0], [151.0, 2703.0], [158.0, 0.0], [327.0, 2957.0], [330.0, 7363.0], [395.0, 4551.5], [119.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 596.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63090326E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63090326E12, 66.66666666666667], [1.63090332E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090332E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090326E12, "maxY": 66.46666666666667, "series": [{"data": [[1.63090326E12, 66.46666666666667], [1.63090332E12, 33.083333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63090326E12, 0.03333333333333333], [1.63090332E12, 0.18333333333333332]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.63090332E12, 0.23333333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63090332E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090326E12, "maxY": 66.46666666666667, "series": [{"data": [[1.63090326E12, 0.03333333333333333], [1.63090332E12, 0.4166666666666667]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63090326E12, 66.46666666666667], [1.63090332E12, 33.083333333333336]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090332E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63090326E12, "maxY": 66.46666666666667, "series": [{"data": [[1.63090326E12, 66.46666666666667], [1.63090332E12, 33.083333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63090326E12, 0.03333333333333333], [1.63090332E12, 0.4166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63090332E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

