/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 641.0, "minX": 0.0, "maxY": 21036.0, "series": [{"data": [[0.0, 641.0], [0.1, 716.0], [0.2, 794.0], [0.3, 951.0], [0.4, 1019.0], [0.5, 1022.0], [0.6, 1065.0], [0.7, 1071.0], [0.8, 1074.0], [0.9, 1082.0], [1.0, 1092.0], [1.1, 1095.0], [1.2, 1103.0], [1.3, 1106.0], [1.4, 1109.0], [1.5, 1120.0], [1.6, 1123.0], [1.7, 1125.0], [1.8, 1131.0], [1.9, 1135.0], [2.0, 1138.0], [2.1, 1138.0], [2.2, 1139.0], [2.3, 1141.0], [2.4, 1143.0], [2.5, 1144.0], [2.6, 1145.0], [2.7, 1145.0], [2.8, 1146.0], [2.9, 1152.0], [3.0, 1155.0], [3.1, 1162.0], [3.2, 1169.0], [3.3, 1182.0], [3.4, 1188.0], [3.5, 1192.0], [3.6, 1200.0], [3.7, 1205.0], [3.8, 1208.0], [3.9, 1214.0], [4.0, 1230.0], [4.1, 1233.0], [4.2, 1233.0], [4.3, 1236.0], [4.4, 1237.0], [4.5, 1241.0], [4.6, 1243.0], [4.7, 1261.0], [4.8, 1266.0], [4.9, 1271.0], [5.0, 1272.0], [5.1, 1278.0], [5.2, 1286.0], [5.3, 1295.0], [5.4, 1303.0], [5.5, 1332.0], [5.6, 1364.0], [5.7, 1384.0], [5.8, 1410.0], [5.9, 1427.0], [6.0, 1439.0], [6.1, 1456.0], [6.2, 1465.0], [6.3, 1465.0], [6.4, 1498.0], [6.5, 1511.0], [6.6, 1520.0], [6.7, 1527.0], [6.8, 1529.0], [6.9, 1533.0], [7.0, 1549.0], [7.1, 1553.0], [7.2, 1568.0], [7.3, 1569.0], [7.4, 1586.0], [7.5, 1599.0], [7.6, 1616.0], [7.7, 1617.0], [7.8, 1713.0], [7.9, 1721.0], [8.0, 1830.0], [8.1, 1844.0], [8.2, 1892.0], [8.3, 1999.0], [8.4, 2020.0], [8.5, 2021.0], [8.6, 2079.0], [8.7, 2087.0], [8.8, 2099.0], [8.9, 2106.0], [9.0, 2145.0], [9.1, 2152.0], [9.2, 2157.0], [9.3, 2161.0], [9.4, 2180.0], [9.5, 2180.0], [9.6, 2181.0], [9.7, 2186.0], [9.8, 2188.0], [9.9, 2189.0], [10.0, 2218.0], [10.1, 2228.0], [10.2, 2244.0], [10.3, 2252.0], [10.4, 2278.0], [10.5, 2279.0], [10.6, 2290.0], [10.7, 2294.0], [10.8, 2329.0], [10.9, 2342.0], [11.0, 2351.0], [11.1, 2352.0], [11.2, 2362.0], [11.3, 2376.0], [11.4, 2417.0], [11.5, 2424.0], [11.6, 2435.0], [11.7, 2436.0], [11.8, 2440.0], [11.9, 2442.0], [12.0, 2451.0], [12.1, 2454.0], [12.2, 2468.0], [12.3, 2474.0], [12.4, 2480.0], [12.5, 2485.0], [12.6, 2508.0], [12.7, 2512.0], [12.8, 2524.0], [12.9, 2528.0], [13.0, 2537.0], [13.1, 2541.0], [13.2, 2558.0], [13.3, 2560.0], [13.4, 2572.0], [13.5, 2576.0], [13.6, 2580.0], [13.7, 2583.0], [13.8, 2593.0], [13.9, 2609.0], [14.0, 2621.0], [14.1, 2647.0], [14.2, 2662.0], [14.3, 2691.0], [14.4, 2727.0], [14.5, 2731.0], [14.6, 2803.0], [14.7, 2805.0], [14.8, 2821.0], [14.9, 2834.0], [15.0, 2879.0], [15.1, 2921.0], [15.2, 2952.0], [15.3, 2952.0], [15.4, 2961.0], [15.5, 2966.0], [15.6, 2978.0], [15.7, 2984.0], [15.8, 3001.0], [15.9, 3012.0], [16.0, 3023.0], [16.1, 3034.0], [16.2, 3040.0], [16.3, 3074.0], [16.4, 3080.0], [16.5, 3093.0], [16.6, 3113.0], [16.7, 3117.0], [16.8, 3123.0], [16.9, 3133.0], [17.0, 3165.0], [17.1, 3171.0], [17.2, 3190.0], [17.3, 3193.0], [17.4, 3195.0], [17.5, 3200.0], [17.6, 3219.0], [17.7, 3223.0], [17.8, 3235.0], [17.9, 3245.0], [18.0, 3250.0], [18.1, 3251.0], [18.2, 3259.0], [18.3, 3262.0], [18.4, 3266.0], [18.5, 3271.0], [18.6, 3283.0], [18.7, 3289.0], [18.8, 3300.0], [18.9, 3313.0], [19.0, 3319.0], [19.1, 3338.0], [19.2, 3352.0], [19.3, 3355.0], [19.4, 3357.0], [19.5, 3359.0], [19.6, 3365.0], [19.7, 3370.0], [19.8, 3376.0], [19.9, 3389.0], [20.0, 3400.0], [20.1, 3405.0], [20.2, 3418.0], [20.3, 3419.0], [20.4, 3428.0], [20.5, 3436.0], [20.6, 3453.0], [20.7, 3461.0], [20.8, 3474.0], [20.9, 3474.0], [21.0, 3486.0], [21.1, 3506.0], [21.2, 3512.0], [21.3, 3522.0], [21.4, 3529.0], [21.5, 3536.0], [21.6, 3567.0], [21.7, 3582.0], [21.8, 3596.0], [21.9, 3633.0], [22.0, 3706.0], [22.1, 3737.0], [22.2, 3764.0], [22.3, 3769.0], [22.4, 3785.0], [22.5, 3789.0], [22.6, 3817.0], [22.7, 3845.0], [22.8, 3873.0], [22.9, 3873.0], [23.0, 3889.0], [23.1, 3898.0], [23.2, 3912.0], [23.3, 3921.0], [23.4, 3944.0], [23.5, 3950.0], [23.6, 3952.0], [23.7, 3955.0], [23.8, 3959.0], [23.9, 3962.0], [24.0, 3962.0], [24.1, 3965.0], [24.2, 3989.0], [24.3, 3992.0], [24.4, 4016.0], [24.5, 4029.0], [24.6, 4033.0], [24.7, 4038.0], [24.8, 4042.0], [24.9, 4050.0], [25.0, 4050.0], [25.1, 4052.0], [25.2, 4055.0], [25.3, 4056.0], [25.4, 4059.0], [25.5, 4063.0], [25.6, 4064.0], [25.7, 4070.0], [25.8, 4075.0], [25.9, 4077.0], [26.0, 4080.0], [26.1, 4081.0], [26.2, 4084.0], [26.3, 4091.0], [26.4, 4094.0], [26.5, 4103.0], [26.6, 4108.0], [26.7, 4109.0], [26.8, 4115.0], [26.9, 4117.0], [27.0, 4123.0], [27.1, 4125.0], [27.2, 4133.0], [27.3, 4135.0], [27.4, 4137.0], [27.5, 4141.0], [27.6, 4146.0], [27.7, 4149.0], [27.8, 4164.0], [27.9, 4167.0], [28.0, 4172.0], [28.1, 4175.0], [28.2, 4183.0], [28.3, 4186.0], [28.4, 4190.0], [28.5, 4190.0], [28.6, 4204.0], [28.7, 4208.0], [28.8, 4209.0], [28.9, 4209.0], [29.0, 4216.0], [29.1, 4220.0], [29.2, 4230.0], [29.3, 4242.0], [29.4, 4251.0], [29.5, 4273.0], [29.6, 4291.0], [29.7, 4294.0], [29.8, 4296.0], [29.9, 4297.0], [30.0, 4336.0], [30.1, 4363.0], [30.2, 4373.0], [30.3, 4378.0], [30.4, 4414.0], [30.5, 4420.0], [30.6, 4422.0], [30.7, 4422.0], [30.8, 4459.0], [30.9, 4460.0], [31.0, 4482.0], [31.1, 4489.0], [31.2, 4500.0], [31.3, 4500.0], [31.4, 4515.0], [31.5, 4532.0], [31.6, 4553.0], [31.7, 4565.0], [31.8, 4613.0], [31.9, 4625.0], [32.0, 4685.0], [32.1, 4700.0], [32.2, 4719.0], [32.3, 4725.0], [32.4, 4733.0], [32.5, 4744.0], [32.6, 4749.0], [32.7, 4754.0], [32.8, 4756.0], [32.9, 4764.0], [33.0, 4788.0], [33.1, 4794.0], [33.2, 4800.0], [33.3, 4801.0], [33.4, 4821.0], [33.5, 4823.0], [33.6, 4826.0], [33.7, 4827.0], [33.8, 4833.0], [33.9, 4851.0], [34.0, 4869.0], [34.1, 4873.0], [34.2, 4875.0], [34.3, 4877.0], [34.4, 4879.0], [34.5, 4889.0], [34.6, 4891.0], [34.7, 4906.0], [34.8, 4907.0], [34.9, 4915.0], [35.0, 4917.0], [35.1, 4923.0], [35.2, 4923.0], [35.3, 4927.0], [35.4, 4927.0], [35.5, 4930.0], [35.6, 4934.0], [35.7, 4942.0], [35.8, 4942.0], [35.9, 4950.0], [36.0, 4957.0], [36.1, 4959.0], [36.2, 4959.0], [36.3, 4962.0], [36.4, 4967.0], [36.5, 4977.0], [36.6, 4980.0], [36.7, 4989.0], [36.8, 4990.0], [36.9, 4994.0], [37.0, 5000.0], [37.1, 5024.0], [37.2, 5034.0], [37.3, 5039.0], [37.4, 5039.0], [37.5, 5063.0], [37.6, 5067.0], [37.7, 5071.0], [37.8, 5071.0], [37.9, 5074.0], [38.0, 5078.0], [38.1, 5090.0], [38.2, 5090.0], [38.3, 5108.0], [38.4, 5110.0], [38.5, 5122.0], [38.6, 5124.0], [38.7, 5128.0], [38.8, 5148.0], [38.9, 5160.0], [39.0, 5166.0], [39.1, 5187.0], [39.2, 5192.0], [39.3, 5212.0], [39.4, 5213.0], [39.5, 5223.0], [39.6, 5229.0], [39.7, 5236.0], [39.8, 5243.0], [39.9, 5294.0], [40.0, 5300.0], [40.1, 5349.0], [40.2, 5352.0], [40.3, 5504.0], [40.4, 5537.0], [40.5, 5594.0], [40.6, 5595.0], [40.7, 5608.0], [40.8, 5623.0], [40.9, 5627.0], [41.0, 5648.0], [41.1, 5653.0], [41.2, 5657.0], [41.3, 5680.0], [41.4, 5688.0], [41.5, 5709.0], [41.6, 5756.0], [41.7, 5795.0], [41.8, 5799.0], [41.9, 5833.0], [42.0, 5839.0], [42.1, 5893.0], [42.2, 5893.0], [42.3, 5936.0], [42.4, 5943.0], [42.5, 5961.0], [42.6, 5962.0], [42.7, 5973.0], [42.8, 5979.0], [42.9, 5986.0], [43.0, 6005.0], [43.1, 6040.0], [43.2, 6048.0], [43.3, 6079.0], [43.4, 6081.0], [43.5, 6094.0], [43.6, 6097.0], [43.7, 6115.0], [43.8, 6119.0], [43.9, 6127.0], [44.0, 6136.0], [44.1, 6145.0], [44.2, 6145.0], [44.3, 6164.0], [44.4, 6165.0], [44.5, 6172.0], [44.6, 6185.0], [44.7, 6192.0], [44.8, 6195.0], [44.9, 6207.0], [45.0, 6208.0], [45.1, 6224.0], [45.2, 6232.0], [45.3, 6238.0], [45.4, 6241.0], [45.5, 6248.0], [45.6, 6261.0], [45.7, 6278.0], [45.8, 6280.0], [45.9, 6291.0], [46.0, 6304.0], [46.1, 6321.0], [46.2, 6325.0], [46.3, 6335.0], [46.4, 6338.0], [46.5, 6352.0], [46.6, 6353.0], [46.7, 6381.0], [46.8, 6656.0], [46.9, 6718.0], [47.0, 6737.0], [47.1, 6750.0], [47.2, 6755.0], [47.3, 6780.0], [47.4, 6794.0], [47.5, 6800.0], [47.6, 6808.0], [47.7, 6811.0], [47.8, 6839.0], [47.9, 6863.0], [48.0, 6893.0], [48.1, 6939.0], [48.2, 6940.0], [48.3, 6948.0], [48.4, 6962.0], [48.5, 6968.0], [48.6, 6983.0], [48.7, 6993.0], [48.8, 6995.0], [48.9, 7047.0], [49.0, 7049.0], [49.1, 7053.0], [49.2, 7057.0], [49.3, 7066.0], [49.4, 7069.0], [49.5, 7072.0], [49.6, 7084.0], [49.7, 7090.0], [49.8, 7090.0], [49.9, 7101.0], [50.0, 7101.0], [50.1, 7109.0], [50.2, 7114.0], [50.3, 7119.0], [50.4, 7121.0], [50.5, 7124.0], [50.6, 7132.0], [50.7, 7178.0], [50.8, 7182.0], [50.9, 7202.0], [51.0, 7223.0], [51.1, 7229.0], [51.2, 7238.0], [51.3, 7251.0], [51.4, 7251.0], [51.5, 7260.0], [51.6, 7263.0], [51.7, 7272.0], [51.8, 7279.0], [51.9, 7297.0], [52.0, 7300.0], [52.1, 7308.0], [52.2, 7312.0], [52.3, 7313.0], [52.4, 7317.0], [52.5, 7320.0], [52.6, 7320.0], [52.7, 7327.0], [52.8, 7335.0], [52.9, 7340.0], [53.0, 7358.0], [53.1, 7362.0], [53.2, 7368.0], [53.3, 7374.0], [53.4, 7377.0], [53.5, 7385.0], [53.6, 7391.0], [53.7, 7396.0], [53.8, 7397.0], [53.9, 7403.0], [54.0, 7406.0], [54.1, 7422.0], [54.2, 7430.0], [54.3, 7437.0], [54.4, 7441.0], [54.5, 7455.0], [54.6, 7462.0], [54.7, 7478.0], [54.8, 7500.0], [54.9, 7552.0], [55.0, 7722.0], [55.1, 7772.0], [55.2, 7799.0], [55.3, 7843.0], [55.4, 7843.0], [55.5, 7857.0], [55.6, 7857.0], [55.7, 7859.0], [55.8, 7860.0], [55.9, 7864.0], [56.0, 7871.0], [56.1, 7886.0], [56.2, 7891.0], [56.3, 7899.0], [56.4, 7902.0], [56.5, 7903.0], [56.6, 7905.0], [56.7, 7911.0], [56.8, 7912.0], [56.9, 7920.0], [57.0, 7926.0], [57.1, 7929.0], [57.2, 7933.0], [57.3, 7948.0], [57.4, 7956.0], [57.5, 7967.0], [57.6, 7970.0], [57.7, 7976.0], [57.8, 7984.0], [57.9, 8001.0], [58.0, 8022.0], [58.1, 8029.0], [58.2, 8035.0], [58.3, 8041.0], [58.4, 8042.0], [58.5, 8061.0], [58.6, 8067.0], [58.7, 8072.0], [58.8, 8083.0], [58.9, 8092.0], [59.0, 8095.0], [59.1, 8098.0], [59.2, 8105.0], [59.3, 8118.0], [59.4, 8135.0], [59.5, 8144.0], [59.6, 8150.0], [59.7, 8156.0], [59.8, 8167.0], [59.9, 8192.0], [60.0, 8193.0], [60.1, 8232.0], [60.2, 8256.0], [60.3, 8270.0], [60.4, 8277.0], [60.5, 8284.0], [60.6, 8286.0], [60.7, 8290.0], [60.8, 8292.0], [60.9, 8311.0], [61.0, 8326.0], [61.1, 8329.0], [61.2, 8338.0], [61.3, 8344.0], [61.4, 8345.0], [61.5, 8351.0], [61.6, 8352.0], [61.7, 8360.0], [61.8, 8370.0], [61.9, 8373.0], [62.0, 8377.0], [62.1, 8393.0], [62.2, 8406.0], [62.3, 8409.0], [62.4, 8412.0], [62.5, 8439.0], [62.6, 8439.0], [62.7, 8442.0], [62.8, 8443.0], [62.9, 8476.0], [63.0, 8494.0], [63.1, 8514.0], [63.2, 8517.0], [63.3, 8536.0], [63.4, 8542.0], [63.5, 8571.0], [63.6, 8584.0], [63.7, 8594.0], [63.8, 8607.0], [63.9, 8627.0], [64.0, 8630.0], [64.1, 8637.0], [64.2, 8640.0], [64.3, 8664.0], [64.4, 8674.0], [64.5, 8716.0], [64.6, 8751.0], [64.7, 8761.0], [64.8, 8771.0], [64.9, 8778.0], [65.0, 8790.0], [65.1, 8816.0], [65.2, 8835.0], [65.3, 8861.0], [65.4, 8873.0], [65.5, 8970.0], [65.6, 8973.0], [65.7, 8981.0], [65.8, 8982.0], [65.9, 8996.0], [66.0, 9012.0], [66.1, 9032.0], [66.2, 9048.0], [66.3, 9092.0], [66.4, 9106.0], [66.5, 9141.0], [66.6, 9161.0], [66.7, 9201.0], [66.8, 9203.0], [66.9, 9229.0], [67.0, 9231.0], [67.1, 9242.0], [67.2, 9245.0], [67.3, 9269.0], [67.4, 9309.0], [67.5, 9352.0], [67.6, 9353.0], [67.7, 9382.0], [67.8, 9409.0], [67.9, 9416.0], [68.0, 9419.0], [68.1, 9425.0], [68.2, 9432.0], [68.3, 9447.0], [68.4, 9459.0], [68.5, 9460.0], [68.6, 9461.0], [68.7, 9466.0], [68.8, 9467.0], [68.9, 9478.0], [69.0, 9486.0], [69.1, 9509.0], [69.2, 9513.0], [69.3, 9527.0], [69.4, 9531.0], [69.5, 9547.0], [69.6, 9558.0], [69.7, 9565.0], [69.8, 9566.0], [69.9, 9575.0], [70.0, 9575.0], [70.1, 9589.0], [70.2, 9594.0], [70.3, 9601.0], [70.4, 9612.0], [70.5, 9618.0], [70.6, 9619.0], [70.7, 9624.0], [70.8, 9628.0], [70.9, 9629.0], [71.0, 9630.0], [71.1, 9646.0], [71.2, 9652.0], [71.3, 9698.0], [71.4, 9706.0], [71.5, 9764.0], [71.6, 9770.0], [71.7, 9785.0], [71.8, 9789.0], [71.9, 9824.0], [72.0, 9832.0], [72.1, 9845.0], [72.2, 9862.0], [72.3, 9957.0], [72.4, 9998.0], [72.5, 10129.0], [72.6, 10169.0], [72.7, 10195.0], [72.8, 10198.0], [72.9, 10208.0], [73.0, 10213.0], [73.1, 10221.0], [73.2, 10223.0], [73.3, 10252.0], [73.4, 10255.0], [73.5, 10263.0], [73.6, 10264.0], [73.7, 10285.0], [73.8, 10294.0], [73.9, 10311.0], [74.0, 10329.0], [74.1, 10365.0], [74.2, 10414.0], [74.3, 10476.0], [74.4, 10578.0], [74.5, 10592.0], [74.6, 10613.0], [74.7, 10641.0], [74.8, 10653.0], [74.9, 10660.0], [75.0, 10665.0], [75.1, 10692.0], [75.2, 10694.0], [75.3, 10698.0], [75.4, 10705.0], [75.5, 10719.0], [75.6, 10731.0], [75.7, 10737.0], [75.8, 10743.0], [75.9, 10747.0], [76.0, 10752.0], [76.1, 10755.0], [76.2, 10757.0], [76.3, 10761.0], [76.4, 10767.0], [76.5, 10776.0], [76.6, 10782.0], [76.7, 10791.0], [76.8, 10799.0], [76.9, 10801.0], [77.0, 10801.0], [77.1, 10806.0], [77.2, 10809.0], [77.3, 10823.0], [77.4, 10825.0], [77.5, 10833.0], [77.6, 10842.0], [77.7, 10852.0], [77.8, 10854.0], [77.9, 10865.0], [78.0, 10867.0], [78.1, 10890.0], [78.2, 10898.0], [78.3, 10981.0], [78.4, 10989.0], [78.5, 11001.0], [78.6, 11043.0], [78.7, 11083.0], [78.8, 11087.0], [78.9, 11127.0], [79.0, 11136.0], [79.1, 11147.0], [79.2, 11154.0], [79.3, 11169.0], [79.4, 11177.0], [79.5, 11180.0], [79.6, 11185.0], [79.7, 11190.0], [79.8, 11191.0], [79.9, 11200.0], [80.0, 11202.0], [80.1, 11208.0], [80.2, 11210.0], [80.3, 11215.0], [80.4, 11216.0], [80.5, 11221.0], [80.6, 11223.0], [80.7, 11228.0], [80.8, 11231.0], [80.9, 11237.0], [81.0, 11240.0], [81.1, 11251.0], [81.2, 11261.0], [81.3, 11279.0], [81.4, 11281.0], [81.5, 11292.0], [81.6, 11292.0], [81.7, 11313.0], [81.8, 11319.0], [81.9, 11324.0], [82.0, 11333.0], [82.1, 11336.0], [82.2, 11340.0], [82.3, 11358.0], [82.4, 11367.0], [82.5, 11384.0], [82.6, 11389.0], [82.7, 11392.0], [82.8, 11401.0], [82.9, 11407.0], [83.0, 11410.0], [83.1, 11421.0], [83.2, 11422.0], [83.3, 11430.0], [83.4, 11432.0], [83.5, 11445.0], [83.6, 11446.0], [83.7, 11476.0], [83.8, 11476.0], [83.9, 11487.0], [84.0, 11510.0], [84.1, 11517.0], [84.2, 11517.0], [84.3, 11528.0], [84.4, 11547.0], [84.5, 11548.0], [84.6, 11553.0], [84.7, 11582.0], [84.8, 11602.0], [84.9, 11610.0], [85.0, 11615.0], [85.1, 11655.0], [85.2, 11660.0], [85.3, 11665.0], [85.4, 11674.0], [85.5, 11697.0], [85.6, 11697.0], [85.7, 11707.0], [85.8, 11723.0], [85.9, 11746.0], [86.0, 11764.0], [86.1, 11783.0], [86.2, 11788.0], [86.3, 11803.0], [86.4, 11817.0], [86.5, 11826.0], [86.6, 11828.0], [86.7, 11846.0], [86.8, 11848.0], [86.9, 11854.0], [87.0, 11857.0], [87.1, 11867.0], [87.2, 11878.0], [87.3, 11903.0], [87.4, 11909.0], [87.5, 11918.0], [87.6, 11941.0], [87.7, 11949.0], [87.8, 11983.0], [87.9, 12007.0], [88.0, 12021.0], [88.1, 12059.0], [88.2, 12060.0], [88.3, 12075.0], [88.4, 12076.0], [88.5, 12094.0], [88.6, 12095.0], [88.7, 12100.0], [88.8, 12103.0], [88.9, 12111.0], [89.0, 12113.0], [89.1, 12119.0], [89.2, 12119.0], [89.3, 12122.0], [89.4, 12123.0], [89.5, 12133.0], [89.6, 12134.0], [89.7, 12150.0], [89.8, 12151.0], [89.9, 12152.0], [90.0, 12158.0], [90.1, 12164.0], [90.2, 12166.0], [90.3, 12168.0], [90.4, 12169.0], [90.5, 12176.0], [90.6, 12182.0], [90.7, 12188.0], [90.8, 12189.0], [90.9, 12196.0], [91.0, 12198.0], [91.1, 12221.0], [91.2, 12222.0], [91.3, 12228.0], [91.4, 12231.0], [91.5, 12234.0], [91.6, 12234.0], [91.7, 12236.0], [91.8, 12238.0], [91.9, 12242.0], [92.0, 12242.0], [92.1, 12248.0], [92.2, 12248.0], [92.3, 12264.0], [92.4, 12266.0], [92.5, 12270.0], [92.6, 12279.0], [92.7, 12283.0], [92.8, 12286.0], [92.9, 12342.0], [93.0, 12349.0], [93.1, 12352.0], [93.2, 12358.0], [93.3, 12361.0], [93.4, 12362.0], [93.5, 12363.0], [93.6, 12363.0], [93.7, 12365.0], [93.8, 12375.0], [93.9, 12380.0], [94.0, 12395.0], [94.1, 12407.0], [94.2, 12417.0], [94.3, 12427.0], [94.4, 12435.0], [94.5, 12448.0], [94.6, 12482.0], [94.7, 12501.0], [94.8, 12507.0], [94.9, 12521.0], [95.0, 12537.0], [95.1, 12574.0], [95.2, 12587.0], [95.3, 12591.0], [95.4, 12601.0], [95.5, 12623.0], [95.6, 12645.0], [95.7, 12648.0], [95.8, 12698.0], [95.9, 12725.0], [96.0, 12762.0], [96.1, 12772.0], [96.2, 12813.0], [96.3, 12825.0], [96.4, 12854.0], [96.5, 12889.0], [96.6, 13048.0], [96.7, 13085.0], [96.8, 13156.0], [96.9, 13158.0], [97.0, 13168.0], [97.1, 13185.0], [97.2, 13188.0], [97.3, 13190.0], [97.4, 13204.0], [97.5, 13212.0], [97.6, 13232.0], [97.7, 13232.0], [97.8, 13241.0], [97.9, 13241.0], [98.0, 13247.0], [98.1, 13252.0], [98.2, 13279.0], [98.3, 13282.0], [98.4, 13292.0], [98.5, 13294.0], [98.6, 13315.0], [98.7, 13321.0], [98.8, 13332.0], [98.9, 13342.0], [99.0, 13387.0], [99.1, 13402.0], [99.2, 13422.0], [99.3, 13431.0], [99.4, 13575.0], [99.5, 13779.0], [99.6, 13808.0], [99.7, 13815.0], [99.8, 21024.0], [99.9, 21025.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 36.0, "series": [{"data": [[600.0, 1.0], [700.0, 3.0], [900.0, 1.0], [1000.0, 12.0], [1100.0, 36.0], [1200.0, 27.0], [1300.0, 6.0], [1400.0, 11.0], [1500.0, 16.0], [1600.0, 4.0], [1700.0, 2.0], [1800.0, 5.0], [1900.0, 1.0], [2000.0, 8.0], [2100.0, 17.0], [2200.0, 11.0], [2300.0, 9.0], [2400.0, 18.0], [2500.0, 20.0], [2600.0, 7.0], [2700.0, 4.0], [2800.0, 7.0], [2900.0, 11.0], [3000.0, 11.0], [3100.0, 14.0], [3200.0, 20.0], [3300.0, 18.0], [3400.0, 16.0], [3500.0, 12.0], [3600.0, 2.0], [3700.0, 9.0], [3800.0, 8.0], [3900.0, 19.0], [4000.0, 31.0], [4100.0, 32.0], [4200.0, 20.0], [4300.0, 7.0], [4600.0, 5.0], [4400.0, 12.0], [4500.0, 8.0], [4700.0, 17.0], [4800.0, 22.0], [4900.0, 34.0], [5000.0, 19.0], [5100.0, 15.0], [5200.0, 11.0], [5300.0, 5.0], [5600.0, 12.0], [5500.0, 5.0], [5700.0, 6.0], [5800.0, 6.0], [5900.0, 11.0], [6000.0, 10.0], [6100.0, 18.0], [6200.0, 17.0], [6300.0, 12.0], [6600.0, 2.0], [6700.0, 8.0], [6900.0, 12.0], [6800.0, 9.0], [7000.0, 15.0], [7100.0, 16.0], [7300.0, 28.0], [7200.0, 16.0], [7400.0, 14.0], [7500.0, 3.0], [7700.0, 4.0], [7800.0, 17.0], [7900.0, 23.0], [8000.0, 19.0], [8100.0, 13.0], [8200.0, 12.0], [8600.0, 10.0], [8300.0, 20.0], [8400.0, 13.0], [8500.0, 11.0], [8700.0, 9.0], [8800.0, 6.0], [8900.0, 8.0], [9000.0, 6.0], [9100.0, 5.0], [9200.0, 10.0], [9400.0, 20.0], [9700.0, 7.0], [9300.0, 6.0], [9600.0, 16.0], [9500.0, 18.0], [9900.0, 3.0], [10000.0, 1.0], [9800.0, 6.0], [10200.0, 16.0], [10100.0, 5.0], [10300.0, 4.0], [10600.0, 12.0], [10500.0, 3.0], [10700.0, 22.0], [10400.0, 3.0], [10800.0, 21.0], [11100.0, 15.0], [11200.0, 26.0], [10900.0, 4.0], [11000.0, 6.0], [11300.0, 17.0], [11400.0, 18.0], [11600.0, 13.0], [11500.0, 12.0], [11700.0, 9.0], [11800.0, 16.0], [11900.0, 8.0], [12000.0, 13.0], [12100.0, 36.0], [12200.0, 27.0], [12500.0, 11.0], [12600.0, 7.0], [12300.0, 17.0], [12700.0, 5.0], [12400.0, 10.0], [12800.0, 6.0], [13000.0, 2.0], [13100.0, 10.0], [13200.0, 18.0], [13300.0, 7.0], [13400.0, 5.0], [13700.0, 2.0], [13800.0, 2.0], [13500.0, 1.0], [14600.0, 1.0], [21000.0, 3.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1398.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 97.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1398.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 250.5579999999998, "minX": 1.63046412E12, "maxY": 250.6979999999999, "series": [{"data": [[1.63046412E12, 250.6979999999999]], "isOverall": false, "label": "deleteWants", "isController": false}, {"data": [[1.63046412E12, 250.57999999999964]], "isOverall": false, "label": "checkFavorite", "isController": false}, {"data": [[1.63046412E12, 250.5579999999998]], "isOverall": false, "label": "addWants", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046412E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 721.0, "minX": 1.0, "maxY": 21036.0, "series": [{"data": [[2.0, 21025.0], [3.0, 21036.0], [4.0, 14687.0], [6.0, 13306.5], [8.0, 13372.5], [9.0, 13815.0], [10.0, 13342.0], [12.0, 13434.5], [13.0, 13332.0], [14.0, 13279.0], [15.0, 13431.0], [18.0, 13517.0], [19.0, 13288.0], [20.0, 13292.0], [21.0, 13261.0], [22.0, 13798.0], [23.0, 13402.0], [24.0, 13252.0], [25.0, 13247.0], [26.0, 13282.0], [27.0, 13232.0], [28.0, 13322.0], [29.0, 13779.0], [31.0, 13345.5], [33.0, 13241.0], [32.0, 13242.0], [34.0, 13402.0], [37.0, 13241.0], [36.0, 13209.5], [39.0, 13190.0], [38.0, 13197.0], [41.0, 13237.0], [40.0, 13168.0], [43.0, 13173.0], [45.0, 13185.0], [44.0, 13156.0], [46.0, 13232.0], [49.0, 13149.0], [48.0, 13172.5], [51.0, 13048.0], [50.0, 13085.0], [52.0, 12545.0], [55.0, 12501.0], [54.0, 12593.5], [57.0, 12644.0], [56.0, 12521.0], [59.0, 12507.0], [58.0, 12482.0], [61.0, 12407.0], [60.0, 12894.0], [63.0, 12380.0], [62.0, 12375.0], [66.0, 12363.0], [65.0, 12448.0], [64.0, 12365.0], [71.0, 12095.0], [70.0, 12349.0], [69.0, 12362.0], [68.0, 12626.0], [75.0, 12842.0], [74.0, 12361.0], [73.0, 12854.0], [72.0, 12825.0], [78.0, 12120.0], [77.0, 12367.5], [83.0, 12342.0], [82.0, 12352.5], [80.0, 12358.0], [87.0, 12813.0], [86.0, 12521.0], [85.0, 12482.0], [91.0, 12283.0], [90.0, 12251.0], [89.0, 12286.0], [88.0, 12417.0], [95.0, 12762.0], [94.0, 12242.0], [93.0, 12401.0], [92.0, 12248.0], [99.0, 12236.0], [98.0, 12266.0], [97.0, 12780.0], [96.0, 12435.0], [103.0, 12356.5], [101.0, 12233.0], [100.0, 12264.0], [107.0, 12248.0], [106.0, 12760.0], [105.0, 12358.0], [104.0, 12772.0], [111.0, 12231.0], [110.0, 12234.0], [109.0, 12236.0], [108.0, 12362.0], [115.0, 12286.5], [113.0, 12363.0], [112.0, 12698.0], [118.0, 12227.0], [123.0, 12662.0], [122.0, 12317.5], [127.0, 12167.0], [126.0, 12175.666666666666], [135.0, 12228.0], [134.0, 12232.0], [132.0, 12151.0], [131.0, 12234.0], [130.0, 12182.0], [129.0, 12166.0], [128.0, 12198.0], [143.0, 12191.0], [141.0, 12395.0], [140.0, 12152.0], [139.0, 12151.0], [138.0, 12133.0], [137.0, 12158.0], [136.0, 12648.0], [151.0, 12134.0], [150.0, 12103.0], [149.0, 12122.0], [148.0, 12029.5], [146.0, 12645.0], [145.0, 12119.0], [159.0, 12198.0], [158.0, 12601.0], [157.0, 12172.666666666666], [154.0, 12124.0], [153.0, 12623.0], [152.0, 12094.0], [167.0, 12095.0], [165.0, 12189.0], [164.0, 12091.5], [163.0, 12243.0], [161.0, 12123.0], [160.0, 12583.0], [174.0, 12238.0], [173.0, 12133.0], [172.0, 12324.5], [169.0, 12574.0], [168.0, 12111.0], [182.0, 11857.0], [181.0, 11854.0], [180.0, 11867.0], [179.0, 12150.5], [177.0, 12164.0], [176.0, 12114.0], [190.0, 11903.0], [189.0, 11800.0], [188.0, 11833.5], [186.0, 11853.0], [185.0, 11890.666666666666], [199.0, 11947.0], [198.0, 11706.0], [197.0, 11878.0], [196.0, 11957.25], [192.0, 11807.0], [206.0, 11674.0], [205.0, 11697.0], [204.0, 11803.0], [202.0, 11764.0], [201.0, 11777.0], [200.0, 11846.0], [215.0, 11646.0], [213.0, 12147.0], [212.0, 11602.0], [211.0, 11746.0], [210.0, 11803.0], [209.0, 11676.0], [208.0, 11783.5], [223.0, 11547.0], [222.0, 11707.0], [221.0, 11582.0], [220.0, 11615.0], [219.0, 11877.5], [217.0, 11662.0], [216.0, 11607.0], [231.0, 11983.0], [230.0, 11496.5], [228.0, 11523.0], [227.0, 12036.0], [226.0, 11553.0], [225.0, 11515.0], [224.0, 11610.0], [239.0, 11914.0], [238.0, 11389.0], [237.0, 11430.0], [236.0, 11392.0], [235.0, 11432.0], [234.0, 11517.0], [232.0, 11510.0], [247.0, 11099.0], [246.0, 11407.0], [245.0, 11319.0], [244.0, 11358.0], [243.0, 11864.0], [242.0, 11426.0], [241.0, 11532.5], [255.0, 11367.0], [254.0, 11480.0], [253.0, 11783.0], [252.0, 11443.0], [251.0, 11560.0], [250.0, 11333.0], [249.0, 11476.0], [248.0, 11340.0], [269.0, 11402.0], [271.0, 11222.0], [268.0, 11063.0], [259.0, 11083.0], [258.0, 11384.0], [257.0, 11528.0], [256.0, 11281.0], [267.0, 11261.0], [266.0, 11292.0], [265.0, 11422.0], [264.0, 11367.0], [263.0, 11289.0], [262.0, 11446.0], [261.0, 11463.0], [260.0, 11421.0], [285.0, 11697.0], [286.0, 10989.0], [284.0, 11190.0], [275.0, 11390.5], [273.0, 11231.0], [272.0, 11411.0], [283.0, 11147.0], [281.0, 11228.0], [280.0, 11210.0], [279.0, 11319.0], [278.0, 11215.0], [277.0, 11240.0], [276.0, 11324.0], [302.0, 11211.5], [303.0, 11251.0], [300.0, 11180.0], [291.0, 11410.0], [290.0, 11499.5], [288.0, 11285.0], [299.0, 11247.0], [297.0, 11204.0], [296.0, 11147.0], [295.0, 11267.0], [294.0, 11190.0], [293.0, 11216.0], [292.0, 11292.0], [318.0, 10858.0], [319.0, 11127.0], [317.0, 11208.0], [316.0, 11211.0], [315.0, 11087.0], [314.0, 11136.0], [313.0, 11179.0], [311.0, 11223.0], [305.0, 11168.0], [304.0, 11169.0], [307.0, 11279.0], [306.0, 11154.0], [310.0, 11237.0], [309.0, 11344.0], [308.0, 11225.0], [334.0, 10773.0], [335.0, 10833.0], [333.0, 10958.0], [332.0, 10890.0], [331.0, 10854.0], [330.0, 11221.0], [329.0, 10791.0], [328.0, 10865.0], [327.0, 10989.0], [320.0, 11194.0], [323.0, 10898.0], [322.0, 11218.0], [326.0, 10789.0], [325.0, 10806.0], [324.0, 11001.0], [348.0, 10800.0], [350.0, 10799.0], [351.0, 10805.0], [349.0, 10823.0], [347.0, 10664.0], [345.0, 10764.5], [343.0, 10755.0], [337.0, 10776.0], [336.0, 10761.0], [339.0, 10760.0], [338.0, 10889.0], [342.0, 10852.0], [341.0, 10755.0], [340.0, 10825.0], [365.0, 10814.0], [366.0, 10414.0], [364.0, 10719.0], [355.0, 10801.0], [354.0, 10867.0], [353.0, 10842.0], [352.0, 10757.0], [363.0, 10641.0], [362.0, 10595.5], [360.0, 10731.0], [359.0, 10665.0], [358.0, 10743.0], [357.0, 10829.0], [356.0, 10752.0], [380.0, 10587.0], [382.0, 10578.0], [383.0, 10705.0], [381.0, 10592.0], [378.0, 10697.0], [377.0, 10683.5], [373.0, 10737.0], [372.0, 10708.5], [370.0, 10746.0], [369.0, 11191.0], [368.0, 10959.0], [398.0, 10295.0], [399.0, 9906.0], [397.0, 10285.0], [396.0, 10210.5], [394.0, 10257.0], [393.0, 10245.0], [392.0, 10263.0], [391.0, 10694.0], [385.0, 10671.0], [384.0, 10660.0], [387.0, 10660.0], [386.0, 10294.0], [390.0, 10653.0], [389.0, 10584.0], [388.0, 10311.0], [402.0, 10342.0], [414.0, 10020.0], [413.0, 9987.0], [410.0, 9841.0], [409.0, 10329.0], [408.0, 10226.5], [406.0, 10213.0], [405.0, 10215.0], [404.0, 10268.0], [401.0, 10221.0], [400.0, 10223.0], [430.0, 9309.0], [431.0, 9666.0], [429.0, 9706.0], [428.0, 9764.0], [427.0, 9862.0], [426.0, 9363.0], [425.0, 9382.0], [424.0, 9824.0], [423.0, 9777.0], [417.0, 10206.0], [416.0, 10193.5], [419.0, 9785.0], [418.0, 9770.0], [422.0, 9806.0], [421.0, 9607.0], [444.0, 9531.0], [446.0, 9624.0], [447.0, 9630.0], [445.0, 9601.0], [443.0, 9607.0], [441.0, 9672.0], [439.0, 9231.0], [432.0, 9634.0], [435.0, 9629.0], [433.0, 9565.0], [438.0, 9618.0], [437.0, 9612.0], [436.0, 10073.0], [462.0, 9576.0], [463.0, 9957.0], [461.0, 9535.5], [451.0, 9628.0], [450.0, 9612.0], [449.0, 9624.0], [448.0, 9245.0], [459.0, 9589.0], [458.0, 9203.0], [457.0, 9998.0], [456.0, 9520.0], [455.0, 9269.0], [454.0, 9571.0], [453.0, 9596.0], [452.0, 9208.0], [478.0, 9536.0], [479.0, 9459.0], [477.0, 9092.0], [476.0, 9460.0], [475.0, 9547.0], [474.0, 9474.0], [473.0, 9575.0], [472.0, 9106.0], [471.0, 9141.0], [465.0, 9363.5], [467.0, 9594.0], [466.0, 9575.0], [470.0, 9500.0], [468.0, 9127.0], [494.0, 9015.0], [495.0, 9012.0], [493.0, 9352.0], [492.0, 9032.0], [491.0, 9416.0], [490.0, 8992.0], [489.0, 9486.0], [488.0, 9415.0], [487.0, 9419.0], [480.0, 9467.0], [483.0, 8996.0], [482.0, 9443.0], [486.0, 9478.0], [485.0, 9527.0], [484.0, 9432.0], [499.0, 9461.0], [510.0, 9409.0], [511.0, 8835.0], [509.0, 9372.0], [507.0, 9121.666666666666], [504.0, 9220.0], [502.0, 8981.0], [501.0, 9353.0], [500.0, 9619.0], [498.0, 9459.0], [497.0, 9464.0], [496.0, 9348.0], [536.0, 8383.0], [542.0, 8565.5], [543.0, 8359.0], [529.0, 8345.0], [528.0, 8412.0], [540.0, 8344.0], [539.0, 8361.0], [537.0, 8716.0], [527.0, 8751.0], [512.0, 8861.0], [517.0, 9117.0], [514.0, 9221.5], [519.0, 8459.0], [518.0, 8443.0], [526.0, 8873.0], [525.0, 8761.0], [524.0, 8439.0], [523.0, 8421.0], [522.0, 9229.0], [521.0, 8771.0], [520.0, 8816.0], [535.0, 8393.0], [534.0, 8563.5], [532.0, 8771.0], [531.0, 8988.5], [569.0, 8571.0], [573.0, 8588.0], [575.0, 8379.5], [560.0, 8209.0], [562.0, 8192.0], [561.0, 8594.0], [564.0, 8286.0], [563.0, 8652.0], [572.0, 8154.0], [571.0, 8584.0], [570.0, 8627.0], [568.0, 8143.0], [551.0, 8647.0], [549.0, 8290.0], [548.0, 8270.0], [547.0, 8640.0], [546.0, 8304.0], [545.0, 8279.0], [544.0, 8360.0], [559.0, 9048.0], [558.0, 8607.0], [557.0, 8193.0], [556.0, 9056.0], [555.0, 8706.0], [554.0, 8637.0], [553.0, 8256.0], [552.0, 8329.0], [567.0, 8408.0], [565.0, 8232.0], [601.0, 8514.0], [606.0, 8040.0], [607.0, 8439.0], [593.0, 8514.0], [592.0, 8525.0], [595.0, 8536.0], [594.0, 8095.0], [597.0, 8042.0], [596.0, 8071.0], [605.0, 8022.0], [604.0, 8117.0], [602.0, 8029.0], [600.0, 8035.0], [583.0, 8548.0], [582.0, 8105.0], [581.0, 8092.0], [580.0, 8494.0], [579.0, 8083.0], [578.0, 8135.0], [577.0, 8156.0], [576.0, 8118.0], [591.0, 8088.0], [590.0, 8041.0], [589.0, 8095.0], [588.0, 8072.0], [587.0, 8098.0], [586.0, 8504.0], [585.0, 8542.0], [599.0, 8061.0], [598.0, 8442.0], [633.0, 7929.0], [638.0, 7933.0], [639.0, 7908.0], [624.0, 7956.0], [626.0, 7897.0], [625.0, 7948.0], [628.0, 7942.0], [627.0, 8344.0], [637.0, 8121.0], [635.0, 8327.0], [634.0, 7926.0], [632.0, 7912.0], [615.0, 7988.0], [614.0, 7973.0], [613.0, 8382.5], [611.0, 8476.0], [610.0, 8517.0], [609.0, 8028.0], [608.0, 8409.0], [623.0, 8373.0], [622.0, 7967.0], [621.0, 7970.0], [620.0, 7929.0], [619.0, 7976.0], [618.0, 8423.5], [616.0, 7984.0], [631.0, 8338.0], [630.0, 8204.5], [668.0, 7455.0], [671.0, 7532.0], [657.0, 7799.0], [656.0, 7858.0], [659.0, 7858.0], [658.0, 7824.0], [661.0, 7920.0], [660.0, 7860.0], [670.0, 7466.0], [669.0, 8265.0], [667.0, 7903.0], [666.0, 7435.0], [665.0, 7500.0], [664.0, 7905.0], [654.0, 7899.0], [640.0, 7903.0], [642.0, 8292.0], [641.0, 8289.0], [644.0, 7911.0], [643.0, 8377.0], [647.0, 8277.0], [646.0, 7871.5], [653.0, 8674.0], [652.0, 8352.0], [651.0, 7843.0], [650.0, 7843.0], [649.0, 8311.0], [648.0, 7876.0], [663.0, 8284.0], [662.0, 7902.0], [697.0, 7368.0], [702.0, 7308.0], [703.0, 7300.0], [690.0, 7618.0], [688.0, 7396.0], [692.0, 7462.0], [691.0, 7385.0], [701.0, 7312.0], [700.0, 7348.0], [698.0, 7871.0], [696.0, 7382.0], [679.0, 7864.0], [678.0, 7406.5], [676.0, 7441.0], [675.0, 7401.0], [674.0, 7430.0], [673.0, 7406.0], [672.0, 7478.0], [687.0, 7403.0], [686.0, 7361.0], [685.0, 7437.0], [684.0, 7391.0], [683.0, 7422.0], [682.0, 7395.0], [681.0, 7377.0], [680.0, 7552.0], [695.0, 7613.0], [693.0, 7313.0], [729.0, 7251.0], [734.0, 7180.0], [735.0, 7251.0], [721.0, 7279.0], [720.0, 7258.0], [723.0, 7772.0], [722.0, 8045.0], [725.0, 7266.0], [724.0, 7362.0], [732.0, 7238.0], [731.0, 7197.0], [730.0, 7227.0], [728.0, 7757.0], [711.0, 7320.0], [710.0, 7320.0], [709.0, 7297.0], [708.0, 8144.0], [707.0, 7329.0], [705.0, 7584.0], [719.0, 7229.0], [718.0, 7263.0], [717.0, 7272.0], [716.0, 7251.0], [715.0, 7279.0], [714.0, 7309.5], [712.0, 7317.0], [727.0, 7327.0], [726.0, 7260.0], [761.0, 7072.0], [766.0, 7069.0], [767.0, 6965.0], [753.0, 7049.0], [752.0, 7124.0], [755.0, 7089.0], [754.0, 7072.0], [757.0, 7043.0], [756.0, 7066.0], [765.0, 6953.5], [763.0, 6993.0], [762.0, 7047.0], [760.0, 7053.0], [742.0, 7101.0], [740.0, 7177.0], [739.0, 7123.0], [738.0, 7121.0], [737.0, 7722.0], [736.0, 7223.0], [751.0, 7132.0], [750.0, 7100.0], [749.0, 7119.0], [748.0, 7103.0], [747.0, 7109.0], [746.0, 7084.0], [745.0, 7114.0], [744.0, 7104.0], [759.0, 7057.0], [758.0, 7060.0], [793.0, 6280.0], [798.0, 6810.0], [799.0, 6780.0], [784.0, 6808.0], [786.0, 6335.0], [785.0, 6800.0], [789.0, 6326.0], [788.0, 6328.5], [797.0, 6336.0], [795.0, 6261.0], [794.0, 6318.0], [792.0, 6338.0], [775.0, 6909.0], [774.0, 6940.0], [773.0, 6942.0], [772.0, 6948.0], [771.0, 6983.0], [770.0, 6962.0], [769.0, 7053.0], [768.0, 6986.0], [783.0, 6811.0], [782.0, 6839.0], [781.0, 6893.0], [780.0, 6841.0], [779.0, 6863.0], [778.0, 7372.0], [777.0, 7202.0], [776.0, 7441.0], [791.0, 6321.0], [790.0, 6325.0], [825.0, 6208.0], [830.0, 6119.0], [831.0, 6115.0], [817.0, 6190.0], [816.0, 6758.0], [819.0, 6741.0], [818.0, 6241.0], [829.0, 6120.0], [828.0, 6581.0], [826.0, 6164.0], [815.0, 6195.0], [800.0, 6358.0], [802.0, 6800.0], [801.0, 6352.0], [805.0, 6234.0], [804.0, 6664.0], [807.0, 6222.0], [806.0, 6278.0], [814.0, 6737.0], [813.0, 6547.0], [811.0, 6232.0], [810.0, 6207.0], [809.0, 6243.0], [808.0, 6248.0], [823.0, 6145.0], [822.0, 6192.0], [821.0, 6224.0], [820.0, 6287.0], [857.0, 5910.0], [862.0, 5943.0], [863.0, 5986.0], [848.0, 6794.0], [850.0, 6005.0], [849.0, 5985.0], [853.0, 6063.0], [851.0, 5979.0], [861.0, 5893.0], [860.0, 5943.0], [859.0, 5964.5], [856.0, 6750.0], [839.0, 6205.0], [838.0, 6115.0], [837.0, 6208.0], [836.0, 6110.5], [834.0, 6097.0], [833.0, 6136.0], [832.0, 6656.0], [847.0, 6172.0], [846.0, 6185.0], [845.0, 6079.0], [844.0, 6081.0], [843.0, 6048.0], [842.0, 6083.0], [841.0, 6145.0], [840.0, 6162.0], [855.0, 6718.0], [854.0, 6048.0], [889.0, 5708.0], [893.0, 5666.0], [894.0, 5125.0], [881.0, 5756.0], [880.0, 5187.0], [883.0, 5205.0], [882.0, 5756.0], [885.0, 5709.0], [884.0, 5223.0], [892.0, 5300.0], [891.0, 5265.0], [890.0, 5680.0], [888.0, 5688.0], [871.0, 5812.0], [870.0, 5833.0], [869.0, 5839.0], [868.0, 5893.0], [867.0, 5795.0], [866.0, 5848.0], [865.0, 6669.0], [864.0, 6040.0], [879.0, 5212.0], [878.0, 5336.0], [877.0, 6025.0], [876.0, 5349.0], [875.0, 5352.0], [874.0, 5243.0], [873.0, 5504.0], [872.0, 5573.0], [887.0, 5973.0], [886.0, 5294.0], [920.0, 4993.0], [926.0, 5668.0], [927.0, 5120.0], [912.0, 5078.0], [914.0, 5128.0], [913.0, 5073.0], [925.0, 5160.0], [923.0, 4982.0], [922.0, 5025.0], [911.0, 5594.0], [897.0, 5122.0], [896.0, 5171.5], [899.0, 5653.0], [898.0, 5108.0], [901.0, 5623.0], [900.0, 5648.0], [903.0, 5110.0], [902.0, 5627.0], [910.0, 5080.0], [909.0, 5090.0], [908.0, 5357.0], [906.0, 5181.0], [905.0, 5071.0], [904.0, 5936.0], [919.0, 5034.0], [918.0, 5038.0], [917.0, 5595.0], [916.0, 5055.0], [953.0, 5657.0], [957.0, 4930.0], [959.0, 4824.0], [944.0, 4962.0], [946.0, 4970.0], [945.0, 4959.0], [948.0, 4989.0], [947.0, 4851.0], [956.0, 4924.0], [955.0, 4907.0], [954.0, 5652.0], [952.0, 5067.0], [935.0, 5059.0], [934.0, 4927.0], [933.0, 4934.0], [932.0, 5159.0], [931.0, 5039.0], [930.0, 4957.0], [929.0, 4959.0], [928.0, 5192.0], [943.0, 4875.0], [942.0, 4963.666666666667], [939.0, 5148.0], [938.0, 5000.0], [937.0, 4917.0], [936.0, 4923.0], [951.0, 4828.0], [949.0, 4833.0], [985.0, 4929.0], [990.0, 4899.0], [991.0, 4889.0], [976.0, 5213.0], [979.0, 4728.5], [977.0, 4500.0], [981.0, 4385.0], [980.0, 4548.0], [989.0, 4891.0], [988.0, 4363.0], [987.0, 4486.5], [984.0, 4922.0], [967.0, 5480.0], [965.0, 5604.0], [964.0, 4915.0], [963.0, 5063.0], [962.0, 4994.0], [961.0, 5074.0], [960.0, 4821.0], [975.0, 4947.0], [974.0, 4553.0], [973.0, 4500.0], [972.0, 4532.0], [971.0, 5229.0], [970.0, 4969.333333333333], [983.0, 4923.0], [982.0, 5166.0], [1016.0, 4373.0], [1020.0, 4733.0], [1023.0, 4296.0], [1009.0, 4220.0], [1008.0, 4363.0], [1012.0, 4750.0], [1010.0, 4764.0], [1022.0, 4167.0], [1021.0, 4175.0], [1019.0, 4273.0], [1018.0, 4990.0], [1017.0, 5006.0], [1007.0, 5024.0], [993.0, 4877.0], [992.0, 4460.0], [996.0, 4441.5], [994.0, 4862.0], [999.0, 4482.0], [998.0, 4421.0], [1006.0, 4785.0], [1005.0, 4797.0], [1004.0, 4801.0], [1003.0, 4718.666666666667], [1000.0, 4421.0], [1015.0, 4754.0], [1014.0, 4520.0], [1084.0, 4106.0], [1064.0, 4141.0], [1086.0, 4499.0], [1056.0, 4306.0], [1058.0, 4142.0], [1060.0, 4120.0], [1062.0, 4245.0], [1066.0, 4135.0], [1068.0, 4565.0], [1070.0, 4133.0], [1082.0, 4149.0], [1080.0, 4094.5], [1078.0, 4133.0], [1076.0, 4719.0], [1074.0, 4172.0], [1072.0, 4108.0], [1038.0, 4922.5], [1036.0, 4251.0], [1034.0, 4584.0], [1032.0, 4962.0], [1030.0, 4146.0], [1028.0, 4967.0], [1024.0, 4283.0], [1054.0, 4204.0], [1052.0, 4209.0], [1050.0, 4873.0], [1048.0, 4295.0], [1046.0, 4888.0], [1044.0, 4183.0], [1042.0, 4927.0], [1040.0, 4209.0], [1148.0, 3522.0], [1138.0, 3484.0], [1120.0, 3962.0], [1122.0, 3989.0], [1124.0, 3955.0], [1126.0, 3905.0], [1128.0, 4029.0], [1130.0, 3940.0], [1134.0, 3944.0], [1150.0, 3467.5], [1144.0, 4230.0], [1142.0, 4160.0], [1140.0, 3526.0], [1136.0, 4208.0], [1088.0, 4096.0], [1094.0, 4050.0], [1096.0, 4080.5], [1098.0, 4744.0], [1100.0, 4700.0], [1102.0, 4075.0], [1118.0, 3965.0], [1116.0, 4071.0], [1114.0, 4054.0], [1112.0, 4725.0], [1110.0, 4042.0], [1104.0, 4072.0], [1206.0, 3280.0], [1202.0, 3299.0], [1210.0, 3258.0], [1184.0, 3361.0], [1186.0, 3355.0], [1188.0, 3738.0], [1190.0, 3344.5], [1192.0, 3300.0], [1194.0, 3952.0], [1196.0, 3344.0], [1198.0, 3959.0], [1212.0, 3223.0], [1208.0, 3785.0], [1204.0, 3262.0], [1200.0, 3265.0], [1152.0, 3471.0], [1154.0, 3510.0], [1156.0, 3418.0], [1158.0, 3536.0], [1160.0, 3512.0], [1162.0, 3474.0], [1164.0, 3400.0], [1166.0, 3445.0], [1182.0, 3338.0], [1180.0, 3799.0], [1178.0, 3405.0], [1176.0, 3376.0], [1174.0, 3355.0], [1172.0, 3436.0], [1170.0, 4077.0], [1168.0, 3428.0], [1274.0, 2461.0], [1270.0, 2560.0], [1252.0, 2987.0], [1278.0, 3109.0], [1248.0, 3093.0], [1250.0, 3650.0], [1256.0, 2978.0], [1258.0, 3274.0], [1260.0, 3582.0], [1276.0, 2528.0], [1272.0, 2878.5], [1266.0, 2535.0], [1264.0, 2602.3333333333335], [1230.0, 3150.0], [1228.0, 3873.0], [1226.0, 3245.0], [1224.0, 3547.5], [1222.0, 3259.0], [1220.0, 3249.0], [1218.0, 3251.0], [1216.0, 3190.0], [1246.0, 3101.0], [1244.0, 3040.0], [1240.0, 3080.0], [1236.0, 3117.0], [1234.0, 3193.0], [1232.0, 3215.0], [1338.0, 2165.0], [1330.0, 2180.0], [1342.0, 2181.0], [1312.0, 2279.0], [1314.0, 2362.0], [1316.0, 2329.0], [1318.0, 2218.0], [1320.0, 2294.0], [1322.0, 2541.5], [1324.0, 2834.0], [1326.0, 2252.0], [1340.0, 2152.0], [1334.0, 2810.0], [1332.0, 2186.0], [1328.0, 2821.0], [1280.0, 2494.0], [1282.0, 3113.0], [1284.0, 2476.0], [1286.0, 2415.0], [1288.0, 2440.0], [1290.0, 2451.0], [1292.0, 2440.5], [1294.0, 2454.0], [1310.0, 2855.0], [1308.0, 2352.0], [1306.0, 2961.0], [1304.0, 2356.0], [1302.0, 2342.0], [1300.0, 3001.0], [1298.0, 3012.0], [1296.0, 2417.0], [1400.0, 1713.0], [1396.0, 1892.0], [1404.0, 1830.0], [1376.0, 1533.0], [1378.0, 1528.0], [1380.0, 2096.0], [1382.0, 1511.0], [1384.0, 2045.0], [1386.0, 1461.0], [1390.0, 1417.0], [1406.0, 1241.0], [1402.0, 1278.0], [1398.0, 1877.0], [1394.0, 1303.0], [1392.0, 1384.0], [1344.0, 2173.0], [1348.0, 2161.0], [1352.0, 2327.0], [1350.0, 2099.0], [1354.0, 2332.0], [1356.0, 2691.0], [1358.0, 2079.0], [1374.0, 1893.5], [1372.0, 2548.0], [1368.0, 2020.0], [1366.0, 2016.0], [1364.0, 2485.0], [1362.0, 2583.0], [1360.0, 2662.0], [1468.0, 1260.0], [1466.0, 1142.5], [1440.0, 1465.0], [1442.0, 1439.0], [1448.0, 1082.0], [1444.0, 1286.0], [1470.0, 1136.5], [1458.0, 1150.5], [1456.0, 1205.0], [1408.0, 1234.0], [1410.0, 1208.0], [1412.0, 1156.0], [1414.0, 1721.0], [1416.0, 1143.0], [1418.0, 1122.0], [1420.0, 1109.0], [1422.0, 1102.0], [1434.0, 1549.0], [1432.0, 1615.0], [1426.0, 1025.0], [1424.0, 1527.0], [1500.0, 721.0], [1496.0, 1086.9], [1484.0, 1035.5], [1482.0, 1108.6666666666667], [1474.0, 1190.0], [1083.0, 4794.0], [1057.0, 4242.0], [1059.0, 4033.0], [1061.0, 4125.0], [1063.0, 4826.0], [1065.0, 4125.0], [1067.0, 4164.0], [1069.0, 4800.0], [1071.0, 4093.0], [1085.0, 4064.0], [1081.0, 4685.0], [1075.0, 4816.0], [1073.0, 4788.0], [1039.0, 4977.0], [1035.0, 4209.0], [1031.0, 4216.0], [1029.0, 4950.0], [1027.0, 4337.5], [1025.0, 4294.0], [1055.0, 4193.0], [1053.0, 4186.0], [1051.0, 4942.0], [1049.0, 4230.0], [1047.0, 4190.0], [1045.0, 4190.0], [1043.0, 4186.0], [1041.0, 4336.0], [1145.0, 3594.0], [1147.0, 3872.0], [1151.0, 3506.0], [1121.0, 4070.0], [1123.0, 3956.0], [1125.0, 4056.0], [1127.0, 4050.0], [1129.0, 3992.0], [1133.0, 4266.5], [1131.0, 4625.0], [1135.0, 3912.0], [1143.0, 3486.0], [1141.0, 3529.0], [1139.0, 3554.0], [1137.0, 4103.0], [1119.0, 3965.0], [1091.0, 4420.0], [1089.0, 4117.0], [1093.0, 4393.0], [1097.0, 4489.0], [1099.0, 4059.0], [1101.0, 4717.0], [1103.0, 4016.0], [1117.0, 4681.0], [1113.0, 4091.0], [1111.0, 4063.0], [1109.0, 4034.5], [1107.0, 4248.666666666667], [1211.0, 3898.0], [1215.0, 3228.0], [1185.0, 3319.0], [1187.0, 3998.0], [1191.0, 3962.0], [1193.0, 3357.0], [1195.0, 3283.0], [1197.0, 3962.0], [1199.0, 3950.0], [1209.0, 3889.0], [1207.0, 3271.0], [1205.0, 3313.0], [1203.0, 3266.0], [1201.0, 3952.0], [1183.0, 3359.0], [1153.0, 4115.0], [1155.0, 4137.0], [1157.0, 3453.0], [1159.0, 3422.0], [1161.0, 3397.0], [1163.0, 4082.0], [1165.0, 3419.0], [1167.0, 3373.0], [1181.0, 4050.0], [1179.0, 3642.0], [1175.0, 3389.0], [1173.0, 3352.0], [1171.0, 3365.0], [1169.0, 4115.0], [1269.0, 2518.5], [1275.0, 3120.0], [1249.0, 3706.0], [1251.0, 3016.0], [1253.0, 2966.0], [1255.0, 3304.5], [1259.0, 2957.0], [1261.0, 2921.0], [1277.0, 2513.0], [1273.0, 2984.0], [1267.0, 2580.0], [1265.0, 2577.0], [1231.0, 3789.0], [1229.0, 3219.0], [1227.0, 3165.0], [1225.0, 3817.0], [1221.0, 3862.0], [1219.0, 3225.0], [1217.0, 3877.0], [1247.0, 3074.0], [1243.0, 3435.0], [1241.0, 3174.0], [1239.0, 3766.5], [1237.0, 3783.0], [1235.0, 3193.0], [1233.0, 3235.0], [1339.0, 2187.0], [1313.0, 2930.0], [1315.0, 2287.0], [1317.0, 2290.0], [1319.0, 2313.0], [1323.0, 2879.0], [1325.0, 2244.0], [1327.0, 2265.0], [1341.0, 2181.0], [1337.0, 2175.5], [1335.0, 2145.0], [1333.0, 2228.0], [1331.0, 2234.0], [1329.0, 2782.0], [1311.0, 2952.0], [1281.0, 2512.0], [1283.0, 2436.0], [1285.0, 2468.0], [1287.0, 2474.0], [1289.0, 3039.0], [1293.0, 2439.0], [1295.0, 2435.0], [1309.0, 2349.0], [1307.0, 2803.0], [1305.0, 2351.0], [1303.0, 2376.0], [1301.0, 3023.0], [1299.0, 3034.0], [1297.0, 2424.0], [1405.0, 1230.0], [1407.0, 1240.0], [1377.0, 1520.0], [1379.0, 1517.0], [1381.0, 1498.0], [1383.0, 1481.0], [1385.0, 1456.0], [1389.0, 1649.5], [1387.0, 1999.0], [1391.0, 1410.0], [1403.0, 1272.0], [1401.0, 1802.0], [1399.0, 1266.0], [1397.0, 1332.0], [1395.0, 1310.0], [1393.0, 1295.0], [1375.0, 1569.0], [1347.0, 2453.5], [1345.0, 2731.0], [1349.0, 2720.0], [1355.0, 2140.0], [1357.0, 2576.0], [1359.0, 2524.0], [1369.0, 2557.0], [1367.0, 2021.0], [1365.0, 2541.0], [1363.0, 2647.0], [1361.0, 2655.0], [1413.0, 1192.0], [1471.0, 1236.0], [1441.0, 1364.0], [1443.0, 1427.0], [1451.0, 1192.5], [1449.0, 1197.3333333333333], [1463.0, 1159.75], [1461.0, 1291.0], [1439.0, 1454.5], [1409.0, 1172.0], [1411.0, 1169.0], [1415.0, 1146.0], [1417.0, 1135.0], [1419.0, 1568.0], [1421.0, 1123.0], [1423.0, 1074.0], [1437.0, 1569.5], [1435.0, 1559.0], [1433.0, 1465.0], [1431.0, 1580.0], [1429.0, 1073.0], [1427.0, 1635.0], [1425.0, 1617.0], [1455.0, 1249.5], [1453.0, 930.5], [1497.0, 1111.0], [1479.0, 1224.5], [1495.0, 1092.0], [1481.0, 1130.0], [1477.0, 1172.5], [1475.0, 1220.5], [1473.0, 1261.0], [1.0, 21024.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[750.7406666666672, 7092.610666666668]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10717.583333333334, "minX": 1.63046412E12, "maxY": 22037.8, "series": [{"data": [[1.63046412E12, 22037.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63046412E12, 10717.583333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046412E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7092.610666666668, "minX": 1.63046412E12, "maxY": 7092.610666666668, "series": [{"data": [[1.63046412E12, 7092.610666666668]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046412E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7049.543333333332, "minX": 1.63046412E12, "maxY": 7049.543333333332, "series": [{"data": [[1.63046412E12, 7049.543333333332]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046412E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 689.803999999999, "minX": 1.63046412E12, "maxY": 689.803999999999, "series": [{"data": [[1.63046412E12, 689.803999999999]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046412E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 641.0, "minX": 1.63046412E12, "maxY": 14687.0, "series": [{"data": [[1.63046412E12, 14687.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63046412E12, 12151.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63046412E12, 13332.4]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63046412E12, 12521.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63046412E12, 641.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63046412E12, 7101.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046412E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1155.0, "minX": 3.0, "maxY": 21025.0, "series": [{"data": [[151.0, 4797.0], [155.0, 3883.0], [156.0, 7439.0], [165.0, 11941.0], [73.0, 2016.0], [75.0, 12521.0], [81.0, 5623.0], [84.0, 6325.0], [89.0, 1155.0], [98.0, 9621.0], [105.0, 2580.0], [26.0, 13327.0], [117.0, 8542.0], [122.0, 10878.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[155.0, 3486.0], [84.0, 6192.0], [3.0, 21025.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 165.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 13327.0, "series": [{"data": [[151.0, 4797.0], [155.0, 3883.0], [156.0, 7439.0], [165.0, 11941.0], [73.0, 2016.0], [75.0, 12521.0], [81.0, 5622.0], [84.0, 6322.0], [89.0, 1148.0], [98.0, 9615.0], [105.0, 2580.0], [26.0, 13327.0], [117.0, 8542.0], [122.0, 10866.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[155.0, 3486.0], [84.0, 6191.0], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 165.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.63046412E12, "maxY": 25.0, "series": [{"data": [[1.63046412E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046412E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63046412E12, "maxY": 24.916666666666668, "series": [{"data": [[1.63046412E12, 24.916666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63046412E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.63046412E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63046412E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63046412E12, "maxY": 24.916666666666668, "series": [{"data": [[1.63046412E12, 0.08333333333333333]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63046412E12, 24.916666666666668]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046412E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.63046412E12, "maxY": 24.916666666666668, "series": [{"data": [[1.63046412E12, 24.916666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63046412E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63046412E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

