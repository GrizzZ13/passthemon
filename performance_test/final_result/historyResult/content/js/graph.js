/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 49.0, "minX": 0.0, "maxY": 21008.0, "series": [{"data": [[0.0, 49.0], [0.1, 147.0], [0.2, 330.0], [0.3, 441.0], [0.4, 473.0], [0.5, 502.0], [0.6, 585.0], [0.7, 727.0], [0.8, 786.0], [0.9, 854.0], [1.0, 889.0], [1.1, 909.0], [1.2, 938.0], [1.3, 954.0], [1.4, 969.0], [1.5, 1000.0], [1.6, 1015.0], [1.7, 1027.0], [1.8, 1040.0], [1.9, 1049.0], [2.0, 1056.0], [2.1, 1070.0], [2.2, 1081.0], [2.3, 1091.0], [2.4, 1096.0], [2.5, 1121.0], [2.6, 1127.0], [2.7, 1141.0], [2.8, 1150.0], [2.9, 1153.0], [3.0, 1166.0], [3.1, 1169.0], [3.2, 1173.0], [3.3, 1182.0], [3.4, 1190.0], [3.5, 1199.0], [3.6, 1204.0], [3.7, 1217.0], [3.8, 1222.0], [3.9, 1230.0], [4.0, 1234.0], [4.1, 1244.0], [4.2, 1251.0], [4.3, 1257.0], [4.4, 1269.0], [4.5, 1273.0], [4.6, 1287.0], [4.7, 1299.0], [4.8, 1317.0], [4.9, 1339.0], [5.0, 1363.0], [5.1, 1394.0], [5.2, 1417.0], [5.3, 1431.0], [5.4, 1468.0], [5.5, 1478.0], [5.6, 1483.0], [5.7, 1489.0], [5.8, 1513.0], [5.9, 1538.0], [6.0, 1583.0], [6.1, 1599.0], [6.2, 1616.0], [6.3, 1634.0], [6.4, 1660.0], [6.5, 1676.0], [6.6, 1679.0], [6.7, 1681.0], [6.8, 1686.0], [6.9, 1694.0], [7.0, 1710.0], [7.1, 1716.0], [7.2, 1721.0], [7.3, 1727.0], [7.4, 1737.0], [7.5, 1743.0], [7.6, 1747.0], [7.7, 1759.0], [7.8, 1764.0], [7.9, 1768.0], [8.0, 1773.0], [8.1, 1779.0], [8.2, 1781.0], [8.3, 1788.0], [8.4, 1795.0], [8.5, 1805.0], [8.6, 1811.0], [8.7, 1816.0], [8.8, 1824.0], [8.9, 1826.0], [9.0, 1832.0], [9.1, 1834.0], [9.2, 1835.0], [9.3, 1845.0], [9.4, 1846.0], [9.5, 1851.0], [9.6, 1855.0], [9.7, 1858.0], [9.8, 1862.0], [9.9, 1866.0], [10.0, 1872.0], [10.1, 1880.0], [10.2, 1884.0], [10.3, 1891.0], [10.4, 1896.0], [10.5, 1900.0], [10.6, 1905.0], [10.7, 1909.0], [10.8, 1912.0], [10.9, 1915.0], [11.0, 1921.0], [11.1, 1926.0], [11.2, 1929.0], [11.3, 1934.0], [11.4, 1935.0], [11.5, 1937.0], [11.6, 1943.0], [11.7, 1944.0], [11.8, 1946.0], [11.9, 1950.0], [12.0, 1956.0], [12.1, 1959.0], [12.2, 1963.0], [12.3, 1970.0], [12.4, 1975.0], [12.5, 1978.0], [12.6, 1982.0], [12.7, 1985.0], [12.8, 1990.0], [12.9, 1994.0], [13.0, 1998.0], [13.1, 2000.0], [13.2, 2004.0], [13.3, 2014.0], [13.4, 2017.0], [13.5, 2018.0], [13.6, 2023.0], [13.7, 2036.0], [13.8, 2040.0], [13.9, 2052.0], [14.0, 2061.0], [14.1, 2066.0], [14.2, 2076.0], [14.3, 2081.0], [14.4, 2085.0], [14.5, 2089.0], [14.6, 2092.0], [14.7, 2094.0], [14.8, 2100.0], [14.9, 2104.0], [15.0, 2107.0], [15.1, 2111.0], [15.2, 2114.0], [15.3, 2116.0], [15.4, 2125.0], [15.5, 2127.0], [15.6, 2131.0], [15.7, 2135.0], [15.8, 2142.0], [15.9, 2146.0], [16.0, 2150.0], [16.1, 2152.0], [16.2, 2158.0], [16.3, 2160.0], [16.4, 2162.0], [16.5, 2170.0], [16.6, 2173.0], [16.7, 2178.0], [16.8, 2184.0], [16.9, 2197.0], [17.0, 2204.0], [17.1, 2211.0], [17.2, 2212.0], [17.3, 2217.0], [17.4, 2223.0], [17.5, 2226.0], [17.6, 2229.0], [17.7, 2239.0], [17.8, 2242.0], [17.9, 2247.0], [18.0, 2258.0], [18.1, 2261.0], [18.2, 2270.0], [18.3, 2272.0], [18.4, 2276.0], [18.5, 2285.0], [18.6, 2292.0], [18.7, 2296.0], [18.8, 2302.0], [18.9, 2305.0], [19.0, 2313.0], [19.1, 2315.0], [19.2, 2319.0], [19.3, 2320.0], [19.4, 2326.0], [19.5, 2331.0], [19.6, 2337.0], [19.7, 2340.0], [19.8, 2344.0], [19.9, 2346.0], [20.0, 2352.0], [20.1, 2356.0], [20.2, 2364.0], [20.3, 2370.0], [20.4, 2381.0], [20.5, 2385.0], [20.6, 2391.0], [20.7, 2399.0], [20.8, 2404.0], [20.9, 2406.0], [21.0, 2411.0], [21.1, 2418.0], [21.2, 2425.0], [21.3, 2432.0], [21.4, 2440.0], [21.5, 2447.0], [21.6, 2453.0], [21.7, 2460.0], [21.8, 2465.0], [21.9, 2474.0], [22.0, 2480.0], [22.1, 2485.0], [22.2, 2493.0], [22.3, 2496.0], [22.4, 2499.0], [22.5, 2508.0], [22.6, 2520.0], [22.7, 2526.0], [22.8, 2531.0], [22.9, 2538.0], [23.0, 2545.0], [23.1, 2550.0], [23.2, 2556.0], [23.3, 2559.0], [23.4, 2564.0], [23.5, 2572.0], [23.6, 2575.0], [23.7, 2579.0], [23.8, 2586.0], [23.9, 2592.0], [24.0, 2598.0], [24.1, 2601.0], [24.2, 2608.0], [24.3, 2612.0], [24.4, 2622.0], [24.5, 2634.0], [24.6, 2639.0], [24.7, 2646.0], [24.8, 2654.0], [24.9, 2660.0], [25.0, 2664.0], [25.1, 2674.0], [25.2, 2676.0], [25.3, 2684.0], [25.4, 2689.0], [25.5, 2700.0], [25.6, 2704.0], [25.7, 2713.0], [25.8, 2721.0], [25.9, 2724.0], [26.0, 2726.0], [26.1, 2730.0], [26.2, 2735.0], [26.3, 2738.0], [26.4, 2742.0], [26.5, 2747.0], [26.6, 2753.0], [26.7, 2755.0], [26.8, 2765.0], [26.9, 2771.0], [27.0, 2775.0], [27.1, 2779.0], [27.2, 2784.0], [27.3, 2785.0], [27.4, 2789.0], [27.5, 2792.0], [27.6, 2795.0], [27.7, 2802.0], [27.8, 2810.0], [27.9, 2812.0], [28.0, 2816.0], [28.1, 2825.0], [28.2, 2830.0], [28.3, 2835.0], [28.4, 2842.0], [28.5, 2847.0], [28.6, 2856.0], [28.7, 2862.0], [28.8, 2867.0], [28.9, 2875.0], [29.0, 2877.0], [29.1, 2879.0], [29.2, 2887.0], [29.3, 2891.0], [29.4, 2898.0], [29.5, 2902.0], [29.6, 2907.0], [29.7, 2910.0], [29.8, 2917.0], [29.9, 2922.0], [30.0, 2933.0], [30.1, 2937.0], [30.2, 2944.0], [30.3, 2950.0], [30.4, 2954.0], [30.5, 2961.0], [30.6, 2969.0], [30.7, 2977.0], [30.8, 2994.0], [30.9, 3003.0], [31.0, 3014.0], [31.1, 3021.0], [31.2, 3023.0], [31.3, 3040.0], [31.4, 3045.0], [31.5, 3054.0], [31.6, 3061.0], [31.7, 3066.0], [31.8, 3073.0], [31.9, 3079.0], [32.0, 3086.0], [32.1, 3096.0], [32.2, 3098.0], [32.3, 3112.0], [32.4, 3126.0], [32.5, 3132.0], [32.6, 3134.0], [32.7, 3144.0], [32.8, 3149.0], [32.9, 3162.0], [33.0, 3167.0], [33.1, 3173.0], [33.2, 3176.0], [33.3, 3191.0], [33.4, 3200.0], [33.5, 3213.0], [33.6, 3229.0], [33.7, 3234.0], [33.8, 3252.0], [33.9, 3256.0], [34.0, 3258.0], [34.1, 3277.0], [34.2, 3279.0], [34.3, 3285.0], [34.4, 3290.0], [34.5, 3295.0], [34.6, 3305.0], [34.7, 3315.0], [34.8, 3319.0], [34.9, 3326.0], [35.0, 3330.0], [35.1, 3342.0], [35.2, 3348.0], [35.3, 3354.0], [35.4, 3359.0], [35.5, 3365.0], [35.6, 3369.0], [35.7, 3377.0], [35.8, 3384.0], [35.9, 3388.0], [36.0, 3394.0], [36.1, 3400.0], [36.2, 3402.0], [36.3, 3407.0], [36.4, 3416.0], [36.5, 3428.0], [36.6, 3432.0], [36.7, 3437.0], [36.8, 3449.0], [36.9, 3453.0], [37.0, 3456.0], [37.1, 3459.0], [37.2, 3465.0], [37.3, 3473.0], [37.4, 3482.0], [37.5, 3491.0], [37.6, 3497.0], [37.7, 3505.0], [37.8, 3511.0], [37.9, 3522.0], [38.0, 3538.0], [38.1, 3545.0], [38.2, 3550.0], [38.3, 3553.0], [38.4, 3559.0], [38.5, 3562.0], [38.6, 3565.0], [38.7, 3570.0], [38.8, 3576.0], [38.9, 3581.0], [39.0, 3583.0], [39.1, 3586.0], [39.2, 3593.0], [39.3, 3602.0], [39.4, 3610.0], [39.5, 3613.0], [39.6, 3616.0], [39.7, 3620.0], [39.8, 3628.0], [39.9, 3631.0], [40.0, 3637.0], [40.1, 3644.0], [40.2, 3647.0], [40.3, 3650.0], [40.4, 3651.0], [40.5, 3658.0], [40.6, 3663.0], [40.7, 3669.0], [40.8, 3673.0], [40.9, 3676.0], [41.0, 3678.0], [41.1, 3683.0], [41.2, 3687.0], [41.3, 3691.0], [41.4, 3699.0], [41.5, 3706.0], [41.6, 3710.0], [41.7, 3712.0], [41.8, 3716.0], [41.9, 3720.0], [42.0, 3724.0], [42.1, 3735.0], [42.2, 3737.0], [42.3, 3739.0], [42.4, 3742.0], [42.5, 3745.0], [42.6, 3746.0], [42.7, 3751.0], [42.8, 3760.0], [42.9, 3765.0], [43.0, 3769.0], [43.1, 3770.0], [43.2, 3776.0], [43.3, 3777.0], [43.4, 3778.0], [43.5, 3782.0], [43.6, 3786.0], [43.7, 3789.0], [43.8, 3797.0], [43.9, 3798.0], [44.0, 3802.0], [44.1, 3809.0], [44.2, 3812.0], [44.3, 3816.0], [44.4, 3821.0], [44.5, 3826.0], [44.6, 3834.0], [44.7, 3840.0], [44.8, 3851.0], [44.9, 3856.0], [45.0, 3859.0], [45.1, 3862.0], [45.2, 3869.0], [45.3, 3873.0], [45.4, 3875.0], [45.5, 3880.0], [45.6, 3885.0], [45.7, 3887.0], [45.8, 3889.0], [45.9, 3890.0], [46.0, 3892.0], [46.1, 3896.0], [46.2, 3904.0], [46.3, 3908.0], [46.4, 3915.0], [46.5, 3923.0], [46.6, 3931.0], [46.7, 3937.0], [46.8, 3940.0], [46.9, 3950.0], [47.0, 3953.0], [47.1, 3960.0], [47.2, 3965.0], [47.3, 3969.0], [47.4, 3972.0], [47.5, 3975.0], [47.6, 3978.0], [47.7, 3982.0], [47.8, 3991.0], [47.9, 3995.0], [48.0, 4004.0], [48.1, 4009.0], [48.2, 4011.0], [48.3, 4015.0], [48.4, 4018.0], [48.5, 4023.0], [48.6, 4027.0], [48.7, 4031.0], [48.8, 4034.0], [48.9, 4038.0], [49.0, 4041.0], [49.1, 4045.0], [49.2, 4049.0], [49.3, 4053.0], [49.4, 4058.0], [49.5, 4062.0], [49.6, 4064.0], [49.7, 4068.0], [49.8, 4070.0], [49.9, 4075.0], [50.0, 4075.0], [50.1, 4077.0], [50.2, 4079.0], [50.3, 4082.0], [50.4, 4083.0], [50.5, 4085.0], [50.6, 4088.0], [50.7, 4090.0], [50.8, 4093.0], [50.9, 4098.0], [51.0, 4102.0], [51.1, 4105.0], [51.2, 4109.0], [51.3, 4111.0], [51.4, 4113.0], [51.5, 4118.0], [51.6, 4121.0], [51.7, 4125.0], [51.8, 4128.0], [51.9, 4131.0], [52.0, 4132.0], [52.1, 4140.0], [52.2, 4143.0], [52.3, 4144.0], [52.4, 4149.0], [52.5, 4151.0], [52.6, 4152.0], [52.7, 4153.0], [52.8, 4154.0], [52.9, 4159.0], [53.0, 4163.0], [53.1, 4169.0], [53.2, 4174.0], [53.3, 4179.0], [53.4, 4182.0], [53.5, 4187.0], [53.6, 4192.0], [53.7, 4194.0], [53.8, 4199.0], [53.9, 4203.0], [54.0, 4206.0], [54.1, 4212.0], [54.2, 4215.0], [54.3, 4218.0], [54.4, 4226.0], [54.5, 4232.0], [54.6, 4234.0], [54.7, 4239.0], [54.8, 4241.0], [54.9, 4244.0], [55.0, 4249.0], [55.1, 4253.0], [55.2, 4258.0], [55.3, 4262.0], [55.4, 4267.0], [55.5, 4270.0], [55.6, 4272.0], [55.7, 4277.0], [55.8, 4280.0], [55.9, 4281.0], [56.0, 4283.0], [56.1, 4285.0], [56.2, 4293.0], [56.3, 4298.0], [56.4, 4304.0], [56.5, 4308.0], [56.6, 4308.0], [56.7, 4312.0], [56.8, 4316.0], [56.9, 4319.0], [57.0, 4324.0], [57.1, 4328.0], [57.2, 4332.0], [57.3, 4340.0], [57.4, 4348.0], [57.5, 4353.0], [57.6, 4357.0], [57.7, 4365.0], [57.8, 4370.0], [57.9, 4374.0], [58.0, 4380.0], [58.1, 4383.0], [58.2, 4386.0], [58.3, 4393.0], [58.4, 4397.0], [58.5, 4400.0], [58.6, 4408.0], [58.7, 4412.0], [58.8, 4418.0], [58.9, 4423.0], [59.0, 4425.0], [59.1, 4427.0], [59.2, 4432.0], [59.3, 4436.0], [59.4, 4439.0], [59.5, 4442.0], [59.6, 4446.0], [59.7, 4449.0], [59.8, 4458.0], [59.9, 4465.0], [60.0, 4468.0], [60.1, 4475.0], [60.2, 4480.0], [60.3, 4484.0], [60.4, 4489.0], [60.5, 4493.0], [60.6, 4497.0], [60.7, 4499.0], [60.8, 4501.0], [60.9, 4502.0], [61.0, 4506.0], [61.1, 4509.0], [61.2, 4513.0], [61.3, 4518.0], [61.4, 4529.0], [61.5, 4534.0], [61.6, 4537.0], [61.7, 4539.0], [61.8, 4548.0], [61.9, 4552.0], [62.0, 4554.0], [62.1, 4557.0], [62.2, 4559.0], [62.3, 4561.0], [62.4, 4565.0], [62.5, 4571.0], [62.6, 4579.0], [62.7, 4582.0], [62.8, 4587.0], [62.9, 4591.0], [63.0, 4597.0], [63.1, 4600.0], [63.2, 4602.0], [63.3, 4605.0], [63.4, 4608.0], [63.5, 4611.0], [63.6, 4613.0], [63.7, 4616.0], [63.8, 4621.0], [63.9, 4628.0], [64.0, 4636.0], [64.1, 4641.0], [64.2, 4646.0], [64.3, 4651.0], [64.4, 4653.0], [64.5, 4658.0], [64.6, 4663.0], [64.7, 4666.0], [64.8, 4666.0], [64.9, 4670.0], [65.0, 4674.0], [65.1, 4679.0], [65.2, 4681.0], [65.3, 4683.0], [65.4, 4687.0], [65.5, 4693.0], [65.6, 4697.0], [65.7, 4709.0], [65.8, 4712.0], [65.9, 4715.0], [66.0, 4721.0], [66.1, 4727.0], [66.2, 4728.0], [66.3, 4734.0], [66.4, 4739.0], [66.5, 4744.0], [66.6, 4746.0], [66.7, 4749.0], [66.8, 4752.0], [66.9, 4756.0], [67.0, 4758.0], [67.1, 4764.0], [67.2, 4768.0], [67.3, 4773.0], [67.4, 4775.0], [67.5, 4778.0], [67.6, 4786.0], [67.7, 4793.0], [67.8, 4796.0], [67.9, 4800.0], [68.0, 4802.0], [68.1, 4806.0], [68.2, 4811.0], [68.3, 4814.0], [68.4, 4817.0], [68.5, 4822.0], [68.6, 4822.0], [68.7, 4827.0], [68.8, 4829.0], [68.9, 4831.0], [69.0, 4834.0], [69.1, 4837.0], [69.2, 4838.0], [69.3, 4843.0], [69.4, 4846.0], [69.5, 4852.0], [69.6, 4854.0], [69.7, 4856.0], [69.8, 4858.0], [69.9, 4860.0], [70.0, 4862.0], [70.1, 4868.0], [70.2, 4874.0], [70.3, 4879.0], [70.4, 4886.0], [70.5, 4888.0], [70.6, 4895.0], [70.7, 4902.0], [70.8, 4904.0], [70.9, 4915.0], [71.0, 4920.0], [71.1, 4928.0], [71.2, 4933.0], [71.3, 4934.0], [71.4, 4942.0], [71.5, 4944.0], [71.6, 4953.0], [71.7, 4957.0], [71.8, 4963.0], [71.9, 4969.0], [72.0, 4972.0], [72.1, 4975.0], [72.2, 4986.0], [72.3, 4990.0], [72.4, 4994.0], [72.5, 4997.0], [72.6, 5003.0], [72.7, 5006.0], [72.8, 5008.0], [72.9, 5011.0], [73.0, 5013.0], [73.1, 5016.0], [73.2, 5019.0], [73.3, 5023.0], [73.4, 5028.0], [73.5, 5031.0], [73.6, 5036.0], [73.7, 5039.0], [73.8, 5043.0], [73.9, 5045.0], [74.0, 5046.0], [74.1, 5049.0], [74.2, 5052.0], [74.3, 5057.0], [74.4, 5059.0], [74.5, 5064.0], [74.6, 5070.0], [74.7, 5076.0], [74.8, 5081.0], [74.9, 5082.0], [75.0, 5091.0], [75.1, 5100.0], [75.2, 5104.0], [75.3, 5105.0], [75.4, 5109.0], [75.5, 5112.0], [75.6, 5116.0], [75.7, 5120.0], [75.8, 5122.0], [75.9, 5124.0], [76.0, 5134.0], [76.1, 5141.0], [76.2, 5156.0], [76.3, 5162.0], [76.4, 5168.0], [76.5, 5180.0], [76.6, 5201.0], [76.7, 5207.0], [76.8, 5215.0], [76.9, 5218.0], [77.0, 5226.0], [77.1, 5232.0], [77.2, 5236.0], [77.3, 5242.0], [77.4, 5248.0], [77.5, 5255.0], [77.6, 5259.0], [77.7, 5266.0], [77.8, 5277.0], [77.9, 5280.0], [78.0, 5282.0], [78.1, 5283.0], [78.2, 5287.0], [78.3, 5292.0], [78.4, 5295.0], [78.5, 5297.0], [78.6, 5299.0], [78.7, 5303.0], [78.8, 5307.0], [78.9, 5308.0], [79.0, 5311.0], [79.1, 5314.0], [79.2, 5316.0], [79.3, 5319.0], [79.4, 5324.0], [79.5, 5330.0], [79.6, 5335.0], [79.7, 5338.0], [79.8, 5341.0], [79.9, 5345.0], [80.0, 5347.0], [80.1, 5349.0], [80.2, 5352.0], [80.3, 5358.0], [80.4, 5359.0], [80.5, 5367.0], [80.6, 5369.0], [80.7, 5373.0], [80.8, 5376.0], [80.9, 5384.0], [81.0, 5387.0], [81.1, 5402.0], [81.2, 5405.0], [81.3, 5412.0], [81.4, 5418.0], [81.5, 5421.0], [81.6, 5425.0], [81.7, 5429.0], [81.8, 5432.0], [81.9, 5437.0], [82.0, 5440.0], [82.1, 5443.0], [82.2, 5447.0], [82.3, 5451.0], [82.4, 5452.0], [82.5, 5453.0], [82.6, 5458.0], [82.7, 5459.0], [82.8, 5460.0], [82.9, 5463.0], [83.0, 5465.0], [83.1, 5466.0], [83.2, 5469.0], [83.3, 5470.0], [83.4, 5471.0], [83.5, 5473.0], [83.6, 5474.0], [83.7, 5475.0], [83.8, 5477.0], [83.9, 5478.0], [84.0, 5479.0], [84.1, 5480.0], [84.2, 5482.0], [84.3, 5482.0], [84.4, 5483.0], [84.5, 5484.0], [84.6, 5485.0], [84.7, 5486.0], [84.8, 5487.0], [84.9, 5488.0], [85.0, 5490.0], [85.1, 5490.0], [85.2, 5492.0], [85.3, 5493.0], [85.4, 5494.0], [85.5, 5495.0], [85.6, 5495.0], [85.7, 5497.0], [85.8, 5497.0], [85.9, 5499.0], [86.0, 5500.0], [86.1, 5501.0], [86.2, 5501.0], [86.3, 5503.0], [86.4, 5503.0], [86.5, 5505.0], [86.6, 5507.0], [86.7, 5507.0], [86.8, 5510.0], [86.9, 5511.0], [87.0, 5512.0], [87.1, 5513.0], [87.2, 5514.0], [87.3, 5516.0], [87.4, 5518.0], [87.5, 5520.0], [87.6, 5522.0], [87.7, 5522.0], [87.8, 5524.0], [87.9, 5525.0], [88.0, 5526.0], [88.1, 5527.0], [88.2, 5529.0], [88.3, 5530.0], [88.4, 5534.0], [88.5, 5535.0], [88.6, 5536.0], [88.7, 5538.0], [88.8, 5543.0], [88.9, 5547.0], [89.0, 5552.0], [89.1, 5555.0], [89.2, 5560.0], [89.3, 5562.0], [89.4, 5568.0], [89.5, 5574.0], [89.6, 5582.0], [89.7, 5585.0], [89.8, 5590.0], [89.9, 5605.0], [90.0, 5614.0], [90.1, 5620.0], [90.2, 5627.0], [90.3, 5637.0], [90.4, 5643.0], [90.5, 5649.0], [90.6, 5657.0], [90.7, 5671.0], [90.8, 5686.0], [90.9, 5704.0], [91.0, 5711.0], [91.1, 5720.0], [91.2, 5732.0], [91.3, 5742.0], [91.4, 5747.0], [91.5, 5761.0], [91.6, 5767.0], [91.7, 5773.0], [91.8, 5776.0], [91.9, 5783.0], [92.0, 5786.0], [92.1, 5789.0], [92.2, 5800.0], [92.3, 5803.0], [92.4, 5807.0], [92.5, 5811.0], [92.6, 5818.0], [92.7, 5828.0], [92.8, 5838.0], [92.9, 5845.0], [93.0, 5858.0], [93.1, 5862.0], [93.2, 5871.0], [93.3, 5874.0], [93.4, 5874.0], [93.5, 5877.0], [93.6, 5884.0], [93.7, 5887.0], [93.8, 5891.0], [93.9, 5899.0], [94.0, 5902.0], [94.1, 5909.0], [94.2, 5913.0], [94.3, 5918.0], [94.4, 5922.0], [94.5, 5926.0], [94.6, 5929.0], [94.7, 5933.0], [94.8, 5937.0], [94.9, 5947.0], [95.0, 5951.0], [95.1, 5953.0], [95.2, 5959.0], [95.3, 5966.0], [95.4, 5971.0], [95.5, 5974.0], [95.6, 5980.0], [95.7, 5986.0], [95.8, 5995.0], [95.9, 6004.0], [96.0, 6008.0], [96.1, 6011.0], [96.2, 6019.0], [96.3, 6025.0], [96.4, 6029.0], [96.5, 6032.0], [96.6, 6035.0], [96.7, 6041.0], [96.8, 6044.0], [96.9, 6049.0], [97.0, 6051.0], [97.1, 6053.0], [97.2, 6057.0], [97.3, 6059.0], [97.4, 6062.0], [97.5, 6065.0], [97.6, 6067.0], [97.7, 6072.0], [97.8, 6078.0], [97.9, 6080.0], [98.0, 6085.0], [98.1, 6090.0], [98.2, 6093.0], [98.3, 6096.0], [98.4, 6099.0], [98.5, 6102.0], [98.6, 6104.0], [98.7, 6110.0], [98.8, 6114.0], [98.9, 6121.0], [99.0, 6127.0], [99.1, 6133.0], [99.2, 6142.0], [99.3, 6146.0], [99.4, 6170.0], [99.5, 6196.0], [99.6, 6237.0], [99.7, 6303.0], [99.8, 21003.0], [99.9, 21005.0], [100.0, 21008.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 193.0, "series": [{"data": [[0.0, 1.0], [600.0, 3.0], [700.0, 6.0], [800.0, 10.0], [900.0, 17.0], [1000.0, 37.0], [1100.0, 44.0], [1200.0, 48.0], [1300.0, 16.0], [1400.0, 24.0], [1500.0, 15.0], [1600.0, 33.0], [1700.0, 61.0], [1800.0, 80.0], [1900.0, 104.0], [2000.0, 69.0], [2100.0, 85.0], [2200.0, 73.0], [2300.0, 80.0], [2400.0, 68.0], [2500.0, 65.0], [2600.0, 57.0], [2700.0, 89.0], [2800.0, 70.0], [2900.0, 57.0], [3000.0, 54.0], [3100.0, 46.0], [3200.0, 48.0], [3300.0, 61.0], [3400.0, 61.0], [3500.0, 66.0], [3600.0, 86.0], [3700.0, 102.0], [3800.0, 88.0], [3900.0, 70.0], [4000.0, 122.0], [4100.0, 114.0], [4200.0, 101.0], [4300.0, 86.0], [4400.0, 90.0], [4600.0, 102.0], [4500.0, 94.0], [4700.0, 90.0], [4800.0, 111.0], [4900.0, 75.0], [5000.0, 102.0], [5100.0, 58.0], [5300.0, 99.0], [5200.0, 83.0], [5400.0, 193.0], [5500.0, 158.0], [5600.0, 39.0], [5700.0, 53.0], [5800.0, 70.0], [5900.0, 75.0], [6000.0, 104.0], [6100.0, 45.0], [6200.0, 6.0], [6300.0, 2.0], [21000.0, 11.0], [100.0, 4.0], [200.0, 3.0], [300.0, 3.0], [400.0, 8.0], [500.0, 5.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3759.0, "series": [{"data": [[0.0, 19.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 211.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3759.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 932.3185000000016, "minX": 1.63141368E12, "maxY": 1001.3389999999981, "series": [{"data": [[1.63141368E12, 932.3185000000016]], "isOverall": false, "label": "listHistoryByTime", "isController": false}, {"data": [[1.63141368E12, 1001.3389999999981]], "isOverall": false, "label": "listHistory", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63141368E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 269.0, "minX": 1.0, "maxY": 21005.5, "series": [{"data": [[2.0, 5495.0], [3.0, 15840.666666666666], [4.0, 10668.666666666668], [5.0, 5536.0], [9.0, 5510.0], [10.0, 16571.14285714286], [11.0, 21005.5], [12.0, 5691.0], [13.0, 6124.0], [14.0, 6065.0], [15.0, 6056.0], [17.0, 6079.5], [19.0, 6048.5], [20.0, 6100.0], [21.0, 5561.1], [22.0, 5785.0], [24.0, 6077.0], [26.0, 6058.0], [27.0, 5752.0], [28.0, 6100.0], [29.0, 5685.333333333333], [30.0, 5771.0], [31.0, 5583.0], [32.0, 6030.0], [34.0, 6083.0], [36.0, 6034.5], [39.0, 6012.0], [38.0, 6105.0], [41.0, 5591.000000000002], [42.0, 5766.5], [45.0, 5898.75], [44.0, 5519.0], [46.0, 5768.5], [48.0, 5769.2], [49.0, 6002.0], [51.0, 6146.0], [50.0, 6140.0], [52.0, 5707.333333333333], [53.0, 6104.0], [54.0, 5724.333333333333], [55.0, 6142.0], [57.0, 6124.0], [59.0, 5446.0], [58.0, 5610.714285714286], [60.0, 6052.5], [62.0, 5932.0], [66.0, 5505.0], [65.0, 5797.5], [70.0, 6309.0], [69.0, 6120.0], [68.0, 6101.666666666667], [75.0, 5489.166666666666], [73.0, 5928.0], [72.0, 5527.0], [77.0, 5883.0], [79.0, 6102.5], [76.0, 6149.666666666667], [83.0, 5611.0], [81.0, 6012.5], [87.0, 5527.0], [86.0, 5490.5], [85.0, 6067.0], [91.0, 5779.166666666667], [90.0, 5479.0], [88.0, 6072.0], [95.0, 5681.833333333333], [93.0, 6199.0], [99.0, 6011.0], [97.0, 6062.0], [101.0, 5650.000000000001], [102.0, 6086.0], [107.0, 5828.5], [105.0, 5738.333333333333], [106.0, 6023.0], [111.0, 5559.142857142858], [110.0, 5902.0], [109.0, 6196.0], [108.0, 5980.0], [115.0, 6133.0], [114.0, 6043.5], [112.0, 6072.0], [118.0, 5704.0], [117.0, 5601.25], [121.0, 5632.0], [123.0, 5936.5], [120.0, 5961.0], [127.0, 5728.0], [126.0, 5569.333333333333], [125.0, 5925.0], [124.0, 5902.0], [134.0, 5592.571428571428], [128.0, 5708.0], [135.0, 6030.0], [133.0, 6026.333333333333], [130.0, 5991.5], [143.0, 5590.0], [142.0, 5532.5], [141.0, 5911.0], [140.0, 6020.0], [138.0, 5951.5], [136.0, 5972.0], [148.0, 5607.75], [145.0, 5485.0], [146.0, 4038.0], [151.0, 5905.0], [150.0, 6180.0], [149.0, 5937.0], [147.0, 5979.0], [144.0, 5953.0], [159.0, 5578.5], [154.0, 5611.75], [158.0, 5909.0], [157.0, 5953.0], [156.0, 6072.0], [152.0, 5969.0], [167.0, 5829.333333333333], [166.0, 5466.0], [163.0, 5701.142857142857], [165.0, 5805.0], [164.0, 5966.0], [160.0, 6041.0], [175.0, 5731.0], [171.0, 5484.0], [170.0, 5592.25], [172.0, 5940.0], [169.0, 5989.5], [183.0, 5728.5], [178.0, 5492.0], [177.0, 5471.0], [182.0, 6036.0], [180.0, 6068.75], [176.0, 6004.0], [188.0, 5598.333333333333], [186.0, 5879.666666666667], [191.0, 5834.0], [190.0, 5835.0], [187.0, 5981.0], [185.0, 5929.0], [184.0, 5929.0], [197.0, 5742.888888888889], [194.0, 5755.0], [199.0, 5800.0], [198.0, 5891.0], [195.0, 5773.0], [193.0, 6051.0], [192.0, 6128.0], [206.0, 5606.333333333333], [205.0, 5869.333333333333], [207.0, 5971.0], [203.0, 6002.5], [201.0, 5969.5], [215.0, 5661.5], [213.0, 5771.25], [210.0, 3080.0], [212.0, 5846.0], [211.0, 6045.0], [209.0, 5995.5], [223.0, 5677.0], [222.0, 5826.0], [221.0, 5747.0], [220.0, 5828.0], [219.0, 5816.0], [218.0, 5773.0], [217.0, 5773.0], [216.0, 5768.0], [224.0, 5678.625], [229.0, 5728.0], [228.0, 6003.0], [227.0, 5928.0], [225.0, 5842.5], [237.0, 5591.4], [233.0, 5560.2307692307695], [238.0, 5767.0], [236.0, 5735.0], [235.0, 5531.0], [234.0, 5842.0], [241.0, 5609.0], [247.0, 5639.0], [245.0, 5710.0], [244.0, 5630.0], [243.0, 5736.0], [242.0, 5432.0], [240.0, 5668.0], [250.0, 5697.272727272727], [254.0, 5607.0], [253.0, 5671.0], [252.0, 5659.0], [248.0, 5763.0], [271.0, 5639.0], [269.0, 5544.3], [260.0, 5740.181818181819], [262.0, 5623.0], [261.0, 5552.0], [270.0, 5637.0], [268.0, 5632.0], [259.0, 5517.0], [256.0, 5556.5], [263.0, 5560.0], [267.0, 5490.0], [266.0, 5501.0], [265.0, 5577.0], [264.0, 5594.0], [286.0, 5529.0], [280.0, 5656.90909090909], [279.0, 5680.0], [272.0, 5522.0], [275.0, 5516.0], [273.0, 5501.0], [285.0, 5712.0], [284.0, 5471.0], [283.0, 5620.0], [282.0, 5596.0], [281.0, 5590.0], [278.0, 5585.0], [277.0, 5553.0], [303.0, 5536.0], [301.0, 5773.75], [297.0, 5822.777777777777], [296.0, 5525.5], [288.0, 5619.25], [292.0, 2799.0], [294.0, 5504.75], [302.0, 5496.0], [300.0, 5403.0], [289.0, 5493.0], [299.0, 5526.0], [298.0, 5612.0], [316.0, 5773.857142857143], [315.0, 5438.5], [307.0, 5780.833333333333], [306.0, 5499.5], [304.0, 5497.0], [313.0, 3706.0], [319.0, 5510.5], [317.0, 5469.5], [311.0, 5355.0], [310.0, 5524.5], [308.0, 5493.5], [323.0, 5646.0], [326.0, 5584.090909090909], [334.0, 5262.0], [324.0, 5316.0], [333.0, 5464.0], [332.0, 5459.0], [331.0, 5515.333333333333], [328.0, 5524.5], [322.0, 5501.0], [321.0, 5468.5], [348.0, 5429.0], [345.0, 5687.272727272727], [336.0, 4885.666666666667], [337.0, 5482.0], [339.0, 5529.0], [338.0, 5468.0], [350.0, 5416.0], [349.0, 5518.0], [347.0, 5406.5], [343.0, 5436.5], [341.0, 5435.0], [340.0, 5469.0], [354.0, 5549.0], [365.0, 5384.909090909091], [352.0, 5504.333333333333], [353.0, 269.0], [358.0, 365.0], [359.0, 5490.0], [357.0, 2764.0], [356.0, 5314.0], [367.0, 5301.333333333333], [361.0, 5370.0], [364.0, 5256.0], [355.0, 5416.0], [363.0, 5374.0], [362.0, 5291.0], [381.0, 3694.6666666666665], [382.0, 5296.0], [373.0, 5289.875], [372.0, 5351.0], [380.0, 5453.0], [371.0, 5241.0], [370.0, 5334.0], [369.0, 5328.5], [379.0, 5432.0], [378.0, 5277.0], [377.0, 5280.0], [376.0, 5295.5], [374.0, 5212.0], [397.0, 5282.0], [395.0, 5282.0], [394.0, 5224.285714285714], [388.0, 5258.0], [387.0, 5303.5], [386.0, 5305.833333333333], [384.0, 3640.0], [399.0, 5367.5], [393.0, 5281.0], [392.0, 5204.4], [396.0, 5304.0], [414.0, 5214.75], [412.0, 5519.0], [403.0, 5383.0], [409.0, 5438.25], [406.0, 5462.0], [400.0, 5317.833333333333], [410.0, 5207.0], [408.0, 5389.0], [405.0, 5295.0], [404.0, 5540.0], [429.0, 5901.0], [430.0, 5480.0], [428.0, 5929.0], [427.0, 5482.124999999999], [425.0, 5649.0], [424.0, 5294.5], [423.0, 5551.5], [421.0, 5531.5], [420.0, 5218.0], [419.0, 5603.857142857143], [417.0, 5437.0], [416.0, 5339.5], [435.0, 5139.0], [447.0, 5089.5], [444.0, 5103.0], [446.0, 5170.5], [442.0, 5198.5], [443.0, 5236.0], [441.0, 5132.0], [440.0, 5193.0], [439.0, 5112.333333333333], [437.0, 5097.0], [438.0, 5400.666666666667], [436.0, 5104.0], [433.0, 5228.5], [432.0, 5293.6], [434.0, 5307.0], [451.0, 5060.0], [463.0, 5085.2], [456.0, 5291.0], [462.0, 5184.0], [461.0, 5196.5], [459.0, 5122.333333333333], [458.0, 5304.5], [457.0, 5053.333333333333], [454.0, 5081.0], [453.0, 5121.5], [452.0, 5085.0], [450.0, 5013.5], [449.0, 5118.0], [448.0, 5087.5], [455.0, 5155.5], [479.0, 5149.0], [475.0, 5213.4], [471.0, 5023.333333333333], [468.0, 5020.0], [470.0, 5252.0], [464.0, 5243.0], [466.0, 4963.0], [465.0, 5348.0], [478.0, 5165.0], [467.0, 5218.0], [474.0, 5105.0], [473.0, 5244.0], [472.0, 5347.5], [495.0, 5026.0], [492.0, 5001.0], [483.0, 5103.0], [488.0, 5054.0], [489.0, 5044.0], [485.0, 5009.333333333333], [484.0, 5207.0], [486.0, 5142.0], [482.0, 5116.0], [481.0, 5167.571428571428], [480.0, 5345.0], [487.0, 5201.0], [494.0, 5008.0], [491.0, 5051.0], [490.0, 5020.0], [509.0, 4991.0], [505.0, 5040.5], [504.0, 5244.5], [502.0, 5339.0], [500.0, 4350.857142857142], [497.0, 5016.333333333333], [496.0, 5054.0], [507.0, 2664.5], [506.0, 5079.0], [510.0, 5047.0], [508.0, 5060.0], [536.0, 5002.0], [526.0, 5009.0], [542.0, 4890.0], [540.0, 4922.142857142857], [538.0, 2770.0], [518.0, 5056.666666666667], [516.0, 4856.0], [514.0, 3598.6666666666665], [512.0, 4973.4], [534.0, 5123.0], [532.0, 4911.8], [528.0, 4938.0], [530.0, 4982.0], [524.0, 4953.5], [522.0, 4938.0], [520.0, 4914.0], [570.0, 4845.0], [572.0, 3425.6666666666665], [568.0, 4651.0], [550.0, 5101.5], [548.0, 4965.5], [546.0, 5100.0], [544.0, 4970.0], [566.0, 4806.0], [562.0, 4924.8], [564.0, 4771.0], [560.0, 4825.0], [574.0, 4901.0], [558.0, 4894.0], [556.0, 4848.666666666667], [554.0, 4954.0], [552.0, 4982.0], [600.0, 5382.000000000001], [604.0, 4698.0], [580.0, 4863.0], [592.0, 4878.0], [594.0, 4777.0], [596.0, 4983.0], [598.0, 4920.0], [606.0, 4957.0], [586.0, 4725.0], [588.0, 4841.0], [582.0, 5336.25], [578.0, 4880.666666666667], [576.0, 5080.0], [590.0, 4960.0], [632.0, 4636.0], [624.0, 4757.0], [638.0, 4811.0], [614.0, 4793.0], [634.0, 4666.0], [636.0, 4905.0], [610.0, 5009.454545454545], [608.0, 4856.0], [612.0, 4759.0], [628.0, 5783.0], [626.0, 4748.0], [622.0, 4819.5], [620.0, 4918.0], [618.0, 5042.2], [616.0, 4849.0], [666.0, 4523.5], [660.0, 4625.0], [656.0, 4078.4], [658.0, 4586.0], [664.0, 4550.666666666667], [646.0, 5355.0], [644.0, 5186.5], [642.0, 4683.0], [640.0, 4739.0], [654.0, 4646.0], [652.0, 5112.0], [650.0, 5191.5], [648.0, 5711.0], [662.0, 3335.0], [696.0, 4497.5], [698.0, 4372.0], [690.0, 4463.5], [702.0, 4320.0], [688.0, 4484.5], [678.0, 4597.0], [676.0, 4959.333333333333], [674.0, 4919.0], [672.0, 4672.0], [686.0, 4874.333333333333], [684.0, 4659.5], [682.0, 4567.0], [680.0, 4572.0], [694.0, 4919.5], [692.0, 4439.0], [732.0, 4465.0], [734.0, 4503.5], [730.0, 4257.6], [708.0, 4504.0], [706.0, 4560.5], [726.0, 4234.0], [724.0, 4243.2], [720.0, 4542.25], [718.0, 4933.0], [716.0, 4503.0], [714.0, 4456.0], [712.0, 4279.666666666667], [762.0, 4495.0], [764.0, 4881.0], [754.0, 4556.0], [766.0, 4423.0], [760.0, 4100.5], [758.0, 4429.2], [756.0, 4080.0], [736.0, 4479.0], [738.0, 4188.75], [742.0, 4214.0], [740.0, 4317.5], [750.0, 4305.0], [748.0, 4625.5], [746.0, 4420.0], [744.0, 4486.0], [774.0, 4639.0], [796.0, 4502.0], [786.0, 3730.2], [792.0, 4353.187499999999], [768.0, 4474.0], [772.0, 4441.0], [782.0, 4529.0], [778.0, 4604.5], [776.0, 4493.0], [790.0, 4579.166666666667], [788.0, 4421.0], [784.0, 4481.0], [798.0, 4487.0], [830.0, 4332.0], [826.0, 3965.0], [822.0, 4440.0], [820.0, 4343.0], [816.0, 4186.0], [818.0, 4429.0], [802.0, 4619.0], [824.0, 4508.0], [800.0, 4178.25], [814.0, 4408.0], [812.0, 4478.0], [856.0, 4312.5], [838.0, 4117.25], [858.0, 4216.25], [854.0, 4423.0], [848.0, 4118.666666666667], [862.0, 4408.0], [860.0, 4113.0], [844.0, 4275.333333333334], [840.0, 4426.666666666667], [842.0, 4343.0], [836.0, 4462.0], [846.0, 4447.5], [888.0, 4628.5], [890.0, 4260.0], [870.0, 4399.0], [868.0, 4409.0], [886.0, 4256.1], [882.0, 4242.333333333333], [878.0, 4380.0], [866.0, 4530.5], [864.0, 4416.0], [894.0, 4230.333333333333], [924.0, 4204.0], [926.0, 4456.0], [914.0, 4096.0], [912.0, 4466.272727272727], [922.0, 4387.0], [920.0, 4213.0], [898.0, 4251.5], [896.0, 4232.0], [902.0, 4223.333333333333], [908.0, 4151.0], [910.0, 3952.0], [906.0, 4637.0], [904.0, 4239.5], [918.0, 4068.5], [952.0, 4275.25], [934.0, 4450.5], [958.0, 4464.5], [944.0, 4079.0], [956.0, 4168.0], [954.0, 4062.0], [928.0, 4111.5], [930.0, 4249.0], [932.0, 3028.0], [942.0, 4138.5], [948.0, 4195.0], [950.0, 3014.0], [946.0, 4159.5], [940.0, 4320.222222222223], [938.0, 4168.666666666667], [936.0, 3014.0], [988.0, 919.0], [982.0, 4355.875], [984.0, 3731.0], [990.0, 965.0], [976.0, 4034.0], [978.0, 4025.0], [970.0, 4135.0], [968.0, 3668.0], [974.0, 4193.0], [964.0, 4119.0], [962.0, 4176.6], [960.0, 4189.333333333333], [1018.0, 846.0], [1022.0, 4269.714285714286], [1016.0, 3874.0], [1012.0, 4401.0], [1010.0, 3894.0], [1008.0, 4102.2], [1000.0, 4299.166666666667], [1002.0, 3797.0], [1006.0, 4095.5], [1004.0, 4068.5], [998.0, 4447.0], [994.0, 4390.0], [996.0, 3978.5], [992.0, 4303.090909090909], [1080.0, 3896.0], [1072.0, 4020.5], [1068.0, 2941.6666666666665], [1060.0, 3821.0], [1056.0, 3940.0], [1036.0, 3737.0], [1028.0, 3739.0], [1052.0, 3778.0], [1044.0, 3851.0], [1040.0, 2381.0], [1144.0, 3669.0], [1140.0, 1620.6666666666665], [1120.0, 4241.0], [1124.0, 2596.0], [1128.0, 3824.3333333333335], [1132.0, 3754.2], [1148.0, 4156.0], [1100.0, 2312.5], [1136.0, 2306.5], [1092.0, 3975.0], [1088.0, 2590.0], [1096.0, 4240.0], [1116.0, 3506.857142857143], [1104.0, 3875.0], [1112.0, 3444.3333333333335], [1212.0, 2061.3333333333335], [1192.0, 3537.0], [1188.0, 3825.0], [1196.0, 2354.0], [1184.0, 3673.0], [1208.0, 3640.6666666666665], [1204.0, 1106.6666666666667], [1168.0, 3662.0], [1152.0, 2520.0], [1156.0, 3566.0], [1160.0, 3592.0], [1200.0, 2172.3333333333335], [1228.0, 3580.3333333333335], [1272.0, 3552.5], [1264.0, 2727.5], [1268.0, 1970.0], [1220.0, 3088.75], [1216.0, 3672.5], [1240.0, 3643.0], [1244.0, 2750.5], [1232.0, 1016.0], [1260.0, 3678.0], [1252.0, 1173.0], [1292.0, 1730.0], [1336.0, 3077.0], [1340.0, 3167.0], [1312.0, 2753.6666666666665], [1316.0, 3252.0], [1288.0, 3430.1666666666665], [1328.0, 3268.0], [1308.0, 3459.0], [1304.0, 2733.5], [1296.0, 3077.3333333333335], [1324.0, 2633.0], [1376.0, 2449.5], [1356.0, 1548.0], [1348.0, 2559.0], [1352.0, 3022.0], [1344.0, 3427.5], [1388.0, 2936.0], [1384.0, 2666.0], [1380.0, 2485.5], [1404.0, 1190.6666666666667], [1400.0, 1032.0], [1372.0, 3411.0], [1464.0, 2997.5], [1468.0, 2394.0], [1444.0, 2286.3333333333335], [1448.0, 2549.0], [1452.0, 2402.0], [1460.0, 3079.2], [1456.0, 3213.5], [1416.0, 2873.5], [1412.0, 2778.0], [1420.0, 1681.0], [1408.0, 2967.2], [1436.0, 2761.5], [1432.0, 2973.5], [1428.0, 2976.454545454545], [1424.0, 2784.0], [1520.0, 2988.333333333333], [1508.0, 2637.25], [1528.0, 2558.0], [1524.0, 2232.3333333333335], [1532.0, 1290.0], [1484.0, 2835.0], [1472.0, 2853.3333333333335], [1500.0, 2271.3333333333335], [1496.0, 2301.5], [1488.0, 3152.0], [1512.0, 1471.0], [1540.0, 2612.0], [1548.0, 2149.5], [1596.0, 2660.5], [1544.0, 2224.3333333333335], [1536.0, 2417.0], [1564.0, 2154.5], [1556.0, 2232.6666666666665], [1552.0, 2630.5], [1584.0, 2612.5], [1588.0, 2819.0], [1572.0, 2746.0], [1576.0, 2474.5], [1568.0, 2191.0], [1592.0, 1833.5], [1604.0, 2817.5], [1660.0, 2514.5], [1612.0, 2402.5], [1608.0, 3091.0], [1600.0, 2659.0], [1624.0, 2208.0], [1620.0, 2732.0], [1616.0, 2006.5], [1648.0, 2526.6], [1644.0, 1613.0], [1636.0, 2244.0], [1640.0, 1665.0], [1632.0, 2547.0], [1656.0, 2595.5], [1652.0, 1732.0], [1712.0, 2781.0], [1720.0, 2310.3333333333335], [1696.0, 2834.0], [1704.0, 2193.8], [1724.0, 2218.0], [1716.0, 1953.0], [1664.0, 2878.0], [1668.0, 2271.0], [1672.0, 2266.3333333333335], [1692.0, 1975.0], [1688.0, 2045.25], [1684.0, 1054.0], [1680.0, 2159.0], [1708.0, 2611.0], [1780.0, 2444.0], [1788.0, 2268.4], [1760.0, 2273.0], [1768.0, 2556.0], [1776.0, 2275.0], [1728.0, 2790.0], [1732.0, 1965.0], [1736.0, 1730.5], [1740.0, 1478.0], [1756.0, 2197.0], [1752.0, 1916.0], [1748.0, 1960.6], [1744.0, 1776.6666666666667], [1840.0, 2127.5], [1852.0, 2177.3333333333335], [1824.0, 2358.6666666666665], [1848.0, 2237.0], [1916.0, 1890.0], [1908.0, 2079.0], [1856.0, 2149.5], [1864.0, 2160.0], [1880.0, 1994.0], [1872.0, 1986.0], [1928.0, 1845.0], [1944.0, 1794.6666666666667], [1940.0, 1719.0], [1936.0, 1747.0], [1968.0, 1915.0], [1920.0, 1954.25], [1956.0, 1832.0], [1960.0, 1937.0], [1964.0, 1906.0], [1980.0, 1836.0], [1976.0, 1808.6666666666667], [1972.0, 1866.0], [1992.0, 1677.0], [1984.0, 1812.0], [1073.0, 4057.0], [1081.0, 4003.75], [1061.0, 3885.0], [1085.0, 3864.6666666666665], [1037.0, 4143.0], [1065.0, 4123.6], [1069.0, 1977.6666666666665], [1053.0, 4172.5], [1025.0, 3762.5], [1029.0, 1938.6666666666667], [1033.0, 3718.0], [1049.0, 4158.0], [1045.0, 2729.0], [1041.0, 899.0], [1145.0, 3745.5], [1125.0, 1076.0], [1121.0, 3861.5], [1149.0, 3662.0], [1141.0, 3636.5], [1137.0, 3941.5], [1101.0, 3651.0], [1089.0, 3938.0], [1093.0, 3874.0], [1117.0, 3885.0], [1113.0, 3629.0], [1097.0, 2387.3333333333335], [1109.0, 3829.8333333333335], [1105.0, 3926.0], [1205.0, 2438.1666666666665], [1213.0, 2285.8333333333335], [1189.0, 3710.0], [1197.0, 3733.8], [1193.0, 3782.8750000000005], [1209.0, 3616.0], [1165.0, 3767.2999999999997], [1161.0, 3629.0], [1201.0, 1732.0], [1153.0, 3565.0], [1181.0, 3566.5], [1169.0, 3634.0], [1265.0, 3764.6666666666665], [1273.0, 3739.0], [1277.0, 3400.0], [1269.0, 3437.2], [1241.0, 3709.6363636363635], [1237.0, 3237.5], [1233.0, 2835.5], [1245.0, 2262.0], [1225.0, 3727.0], [1229.0, 2290.5], [1217.0, 3644.0], [1221.0, 1737.8333333333333], [1261.0, 3135.833333333333], [1333.0, 2356.0], [1313.0, 2966.0], [1337.0, 2892.25], [1317.0, 3251.8], [1321.0, 2716.25], [1329.0, 2151.0], [1293.0, 1240.0], [1285.0, 3144.5], [1281.0, 2938.5], [1289.0, 2183.5], [1297.0, 3494.5714285714284], [1301.0, 3217.0], [1325.0, 3768.5], [1405.0, 2164.0], [1393.0, 2987.636363636364], [1357.0, 1245.5], [1349.0, 3149.5], [1345.0, 3505.0], [1389.0, 2483.0], [1385.0, 3249.8888888888887], [1377.0, 1472.0], [1401.0, 1405.6666666666665], [1369.0, 2856.6666666666665], [1365.0, 3195.0], [1361.0, 1804.0], [1469.0, 2787.3333333333335], [1453.0, 1779.0], [1449.0, 2903.0], [1441.0, 2547.5], [1465.0, 3044.0], [1461.0, 2734.0], [1457.0, 2636.6666666666665], [1417.0, 2810.0], [1413.0, 2339.0], [1409.0, 3133.375], [1437.0, 2907.0], [1433.0, 2142.0], [1525.0, 2836.5], [1529.0, 2877.5], [1533.0, 2626.25], [1505.0, 2967.5], [1509.0, 3021.0], [1521.0, 2039.0], [1481.0, 2796.5], [1477.0, 2273.0], [1497.0, 1780.0], [1493.0, 2665.8750000000005], [1489.0, 2093.5], [1513.0, 2345.6666666666665], [1517.0, 2247.25], [1541.0, 2113.5], [1545.0, 2802.0], [1573.0, 2213.0], [1549.0, 2500.5], [1537.0, 2627.5], [1565.0, 2154.5], [1557.0, 2228.0], [1561.0, 2338.0], [1553.0, 2668.0], [1585.0, 2212.0], [1577.0, 2354.5], [1581.0, 2054.6666666666665], [1597.0, 3129.0], [1593.0, 2492.5], [1609.0, 1713.3333333333333], [1613.0, 2277.0], [1605.0, 2785.0], [1601.0, 3079.0], [1621.0, 2564.0], [1617.0, 2234.5], [1649.0, 2209.5], [1641.0, 2180.0], [1637.0, 2091.3333333333335], [1633.0, 2382.0], [1645.0, 2540.75], [1661.0, 2290.0], [1653.0, 2454.0], [1669.0, 1592.0], [1721.0, 2457.0], [1697.0, 1817.0], [1717.0, 2363.0], [1665.0, 2248.0], [1677.0, 1645.0], [1673.0, 1040.0], [1693.0, 2447.5], [1689.0, 2880.3333333333335], [1681.0, 1116.0], [1733.0, 2135.0], [1777.0, 2204.0], [1765.0, 2416.0], [1781.0, 2249.0], [1761.0, 1891.5], [1769.0, 2247.0], [1729.0, 1939.0], [1737.0, 2121.8333333333335], [1741.0, 1909.0], [1757.0, 2559.0], [1753.0, 2333.0], [1749.0, 1831.0000000000002], [1745.0, 2332.375], [1773.0, 2215.0], [1821.0, 2185.75], [1805.0, 1896.75], [1817.0, 2116.3333333333335], [1813.0, 2293.5], [1809.0, 2248.0], [1849.0, 2228.0], [1845.0, 2306.25], [1841.0, 2287.0], [1913.0, 2053.5], [1909.0, 1990.0], [1905.0, 2070.1666666666665], [1861.0, 2116.6], [1881.0, 1939.0], [1877.0, 2036.4], [1969.0, 1929.0], [1941.0, 2019.0], [1937.0, 2017.0], [1933.0, 1942.2], [1961.0, 1954.0], [1965.0, 1686.0], [1977.0, 1833.0], [1973.0, 1929.0], [1985.0, 1834.0], [537.0, 5005.0], [541.0, 5123.0], [519.0, 4979.5], [517.0, 5058.5], [515.0, 4975.5], [513.0, 5089.0], [527.0, 5063.0], [535.0, 3825.25], [533.0, 5039.0], [531.0, 4957.0], [523.0, 5165.0], [525.0, 5151.0], [521.0, 4943.5], [569.0, 4854.75], [551.0, 4799.0], [561.0, 5917.0], [573.0, 4780.0], [571.0, 4792.5], [549.0, 4931.5], [547.0, 4843.833333333333], [545.0, 5110.0], [567.0, 4980.0], [565.0, 3424.666666666667], [563.0, 4992.0], [559.0, 4765.0], [557.0, 4903.0], [555.0, 5081.0], [553.0, 4929.5], [603.0, 4824.0], [601.0, 4868.0], [605.0, 4873.0], [607.0, 4885.0], [593.0, 4728.0], [595.0, 4801.0], [597.0, 4725.0], [591.0, 5001.666666666666], [585.0, 4911.666666666667], [587.0, 5087.5], [583.0, 4666.0], [581.0, 4866.0], [579.0, 4887.0], [577.0, 4990.666666666667], [589.0, 2659.5], [633.0, 5117.666666666667], [637.0, 5172.6], [639.0, 5512.0], [615.0, 4620.0], [635.0, 4828.0], [613.0, 5337.75], [609.0, 4773.0], [611.0, 4721.0], [631.0, 5144.8], [629.0, 4834.666666666667], [627.0, 4852.0], [625.0, 5278.5], [623.0, 4757.5], [621.0, 4758.5], [619.0, 4709.0], [617.0, 4928.0], [665.0, 4611.5], [667.0, 5082.5], [671.0, 4595.166666666667], [669.0, 4585.0], [657.0, 4656.5], [659.0, 5240.5], [647.0, 5373.0], [645.0, 4858.0], [643.0, 5154.5], [641.0, 5107.5], [655.0, 2621.5], [653.0, 5256.5], [651.0, 4798.5], [649.0, 5070.0], [663.0, 5337.0], [661.0, 5074.0], [679.0, 4622.0], [703.0, 4600.6], [689.0, 4482.0], [699.0, 4625.25], [677.0, 5069.5], [675.0, 4556.0], [673.0, 4672.5], [687.0, 4797.5], [685.0, 5023.0], [683.0, 2570.5], [681.0, 4551.0], [695.0, 473.0], [693.0, 4511.0], [729.0, 4566.5], [733.0, 4327.0], [735.0, 4261.666666666667], [711.0, 4524.0], [731.0, 2301.0], [709.0, 4242.0], [707.0, 4208.0], [705.0, 4323.0], [725.0, 4831.0], [727.0, 4675.0], [723.0, 4554.333333333333], [717.0, 4372.0], [715.0, 4276.5], [713.0, 4404.0], [765.0, 4511.0], [763.0, 4448.666666666667], [767.0, 4652.0], [761.0, 4083.0], [759.0, 4518.0], [757.0, 4075.0], [755.0, 4252.5], [751.0, 4945.0], [737.0, 2713.5], [739.0, 4553.5], [741.0, 4508.0], [743.0, 4537.0], [749.0, 4209.25], [745.0, 4222.75], [795.0, 4430.4], [783.0, 4576.5], [771.0, 4556.5], [769.0, 4587.0], [789.0, 4577.5], [787.0, 4233.333333333333], [799.0, 4426.0], [797.0, 4414.0], [829.0, 4342.5], [827.0, 4290.0], [831.0, 4142.833333333334], [825.0, 4492.0], [823.0, 4586.0], [821.0, 4411.0], [819.0, 4118.0], [817.0, 4410.0], [811.0, 4288.999999999999], [805.0, 4433.5], [803.0, 4532.333333333333], [807.0, 4579.5], [801.0, 4076.3333333333335], [815.0, 4215.0], [813.0, 4308.0], [809.0, 4306.75], [849.0, 4376.5], [839.0, 4404.0], [857.0, 4426.0], [855.0, 4504.0], [853.0, 4298.0], [851.0, 4375.5], [863.0, 4383.0], [859.0, 4367.0], [845.0, 3887.0], [841.0, 4317.0], [835.0, 4247.285714285715], [837.0, 4263.0], [833.0, 3972.0], [847.0, 4471.0], [867.0, 4448.444444444444], [893.0, 4367.6], [871.0, 4376.0], [889.0, 4306.5], [885.0, 4318.0], [887.0, 4193.0], [877.0, 4536.833333333332], [875.0, 4228.5], [873.0, 4198.0], [865.0, 4346.0], [879.0, 4278.0], [895.0, 4192.0], [891.0, 4365.0], [923.0, 4318.0], [921.0, 4709.0], [927.0, 4508.5], [917.0, 4459.2], [915.0, 4029.0], [913.0, 4295.0], [925.0, 4461.0], [903.0, 4065.5], [899.0, 4353.333333333333], [911.0, 4518.5], [909.0, 4050.6666666666665], [907.0, 4145.0], [905.0, 4017.5], [919.0, 4251.5], [957.0, 4084.0], [959.0, 4830.0], [955.0, 4289.0], [935.0, 4184.0], [929.0, 4161.0], [931.0, 4223.0], [943.0, 3042.0], [949.0, 4238.428571428572], [951.0, 3995.0], [947.0, 4510.0], [945.0, 4030.0], [939.0, 4355.0], [937.0, 4040.0], [985.0, 4092.0], [963.0, 4170.0], [987.0, 4154.5], [989.0, 4045.5], [991.0, 3590.5], [977.0, 4053.0], [981.0, 4074.0], [975.0, 4229.6], [971.0, 4185.4], [973.0, 3950.5], [967.0, 4629.666666666667], [965.0, 4044.0], [961.0, 799.0], [983.0, 964.0], [1019.0, 3908.3333333333335], [1021.0, 4211.8], [1017.0, 3868.0], [1011.0, 4174.0], [1015.0, 3970.5], [1013.0, 3557.0], [1009.0, 4279.857142857143], [1023.0, 4015.0], [1001.0, 3759.0], [993.0, 3995.0], [997.0, 3978.0], [1058.0, 3777.0], [1070.0, 938.0], [1066.0, 4164.5], [1062.0, 4076.4999999999995], [1082.0, 3888.0], [1078.0, 3868.25], [1074.0, 3777.0], [1026.0, 4222.4], [1038.0, 4178.0], [1030.0, 3939.0], [1050.0, 4183.428571428571], [1054.0, 3775.0], [1046.0, 2338.5], [1042.0, 3923.0], [1146.0, 3604.0], [1150.0, 3877.0], [1122.0, 3060.6666666666665], [1126.0, 3189.5], [1130.0, 3850.5], [1134.0, 4074.5], [1142.0, 3892.3333333333335], [1138.0, 3768.0], [1090.0, 4341.777777777777], [1094.0, 3937.0], [1118.0, 3882.0], [1106.0, 3697.777777777778], [1114.0, 3795.0], [1214.0, 2389.75], [1186.0, 3217.5], [1194.0, 3097.0], [1198.0, 3456.0], [1210.0, 1475.3333333333333], [1206.0, 2361.0000000000005], [1202.0, 3684.0], [1174.0, 3922.833333333334], [1182.0, 3522.0], [1154.0, 3561.0], [1158.0, 3072.0], [1178.0, 3524.0], [1270.0, 2175.0], [1274.0, 3815.0], [1278.0, 3636.2], [1250.0, 3228.0], [1230.0, 3365.5], [1226.0, 3597.0], [1222.0, 1085.0], [1218.0, 2826.6666666666665], [1234.0, 3036.0], [1238.0, 2127.5], [1242.0, 3650.0], [1246.0, 3534.0], [1262.0, 3466.0], [1258.0, 3715.0], [1254.0, 3003.6666666666665], [1334.0, 3550.6], [1338.0, 3515.0], [1318.0, 3737.0], [1314.0, 3315.0], [1322.0, 3309.0], [1330.0, 2967.75], [1286.0, 1868.0], [1290.0, 1159.0], [1294.0, 2992.5], [1310.0, 3059.909090909091], [1302.0, 3295.0], [1306.0, 2399.0], [1326.0, 3720.0], [1354.0, 2707.7777777777774], [1358.0, 1969.9333333333334], [1346.0, 3006.6250000000005], [1350.0, 3054.0], [1382.0, 2817.3333333333335], [1406.0, 2922.0], [1378.0, 1676.0], [1402.0, 1444.0], [1394.0, 2942.0], [1370.0, 2097.0], [1374.0, 2734.5], [1366.0, 3352.0], [1362.0, 2342.0], [1466.0, 2949.0], [1462.0, 3277.0], [1470.0, 3016.0], [1446.0, 3157.5], [1450.0, 2785.0], [1454.0, 2345.0], [1458.0, 2845.0], [1418.0, 3311.4444444444443], [1414.0, 2825.0], [1422.0, 2470.5], [1438.0, 3025.0], [1434.0, 1900.0], [1430.0, 1659.0], [1426.0, 2559.6666666666665], [1522.0, 2734.5], [1482.0, 2892.0], [1534.0, 1982.5], [1506.0, 2447.75], [1510.0, 2610.6666666666665], [1530.0, 2646.0], [1526.0, 2320.0], [1486.0, 2748.5], [1478.0, 2955.75], [1474.0, 2489.25], [1502.0, 2506.0], [1498.0, 3056.0], [1494.0, 2540.0], [1490.0, 2499.0], [1514.0, 2784.0], [1518.0, 2634.0], [1542.0, 2531.0], [1590.0, 2054.8], [1550.0, 1253.3333333333333], [1546.0, 2525.0], [1538.0, 2767.0], [1558.0, 2611.5], [1562.0, 1788.0], [1554.0, 2358.0], [1586.0, 2572.0], [1570.0, 2600.0], [1574.0, 2554.0], [1578.0, 1894.5], [1582.0, 2516.5], [1598.0, 2128.0], [1594.0, 2003.5], [1610.0, 2305.5], [1614.0, 1704.0], [1606.0, 1963.0], [1602.0, 2036.3333333333333], [1626.0, 2428.0], [1622.0, 2498.0], [1646.0, 2491.0], [1642.0, 2773.0], [1634.0, 2057.25], [1638.0, 2310.0], [1662.0, 2036.0], [1654.0, 2219.0], [1650.0, 2520.5], [1722.0, 842.0], [1702.0, 1895.0], [1698.0, 1680.0], [1726.0, 1858.75], [1714.0, 2168.0], [1666.0, 1971.0], [1674.0, 1974.0], [1694.0, 2654.0], [1690.0, 2372.1250000000005], [1686.0, 2038.5], [1710.0, 2228.4], [1742.0, 1644.2222222222222], [1782.0, 2240.0], [1766.0, 2532.0], [1778.0, 2432.0], [1730.0, 2254.3333333333335], [1758.0, 1889.0], [1734.0, 1905.8333333333333], [1738.0, 1834.5714285714284], [1754.0, 2105.3333333333335], [1746.0, 1817.4], [1750.0, 1687.625], [1774.0, 2493.0], [1814.0, 2131.0], [1794.0, 2388.8333333333335], [1810.0, 2320.0], [1826.0, 2198.0], [1806.0, 2157.0], [1838.0, 2183.1249999999995], [1830.0, 2278.5], [1866.0, 2130.0], [1890.0, 2025.7142857142856], [1898.0, 2015.0], [1926.0, 1840.75], [1946.0, 1615.0], [1934.0, 1869.0], [1922.0, 1991.5], [1970.0, 1936.0], [1962.0, 1909.0], [1982.0, 1704.5], [1978.0, 1863.0], [1079.0, 3992.5], [1035.0, 4133.090909090909], [1087.0, 3179.5], [1059.0, 3851.0], [1063.0, 2722.0], [1039.0, 3719.0], [1071.0, 2628.0], [1051.0, 3968.0], [1055.0, 3741.0], [1027.0, 1565.3333333333335], [1031.0, 2932.0], [1043.0, 4038.4285714285716], [1047.0, 4077.0], [1151.0, 3517.0], [1127.0, 4064.0], [1123.0, 3693.6666666666665], [1131.0, 4075.0], [1135.0, 3150.2], [1147.0, 3769.6666666666665], [1143.0, 3758.5], [1139.0, 3711.0], [1103.0, 3057.5], [1119.0, 3693.25], [1091.0, 3778.5], [1115.0, 3879.0], [1095.0, 4279.333333333334], [1099.0, 3555.8], [1111.0, 4112.5], [1211.0, 3327.0], [1215.0, 2449.25], [1187.0, 2108.0], [1191.0, 2913.5], [1195.0, 2270.0], [1199.0, 1152.0], [1207.0, 1531.2], [1163.0, 3604.0], [1167.0, 2873.0], [1203.0, 2312.0], [1155.0, 3572.666666666667], [1183.0, 3722.25], [1179.0, 3501.0], [1175.0, 3570.0], [1171.0, 3085.5], [1227.0, 2352.0], [1231.0, 3582.5], [1267.0, 2452.0], [1271.0, 3604.0], [1275.0, 2626.3333333333335], [1239.0, 3443.0], [1235.0, 3576.0], [1223.0, 3393.0], [1219.0, 1576.6666666666667], [1251.0, 3611.5555555555557], [1255.0, 3362.0], [1279.0, 2101.0], [1335.0, 3678.0], [1343.0, 3064.3333333333335], [1339.0, 2344.5], [1319.0, 2925.6666666666665], [1311.0, 3510.0], [1295.0, 3785.0], [1331.0, 2956.0], [1291.0, 2881.0], [1287.0, 1323.0], [1283.0, 3341.0], [1299.0, 3386.5], [1307.0, 3483.0], [1327.0, 3190.75], [1323.0, 3709.0], [1395.0, 3179.3333333333335], [1399.0, 2817.8888888888887], [1359.0, 1167.0], [1355.0, 1338.0], [1351.0, 3054.0], [1391.0, 3256.0], [1387.0, 2905.0], [1383.0, 2836.5], [1403.0, 2115.0], [1375.0, 3194.3333333333335], [1371.0, 2451.4285714285716], [1367.0, 1550.8], [1363.0, 2885.285714285714], [1471.0, 2211.0], [1467.0, 3331.0], [1455.0, 3069.3333333333335], [1451.0, 1946.0], [1447.0, 3084.222222222222], [1463.0, 2525.6666666666665], [1459.0, 2312.0], [1423.0, 2904.0], [1419.0, 2882.5], [1411.0, 2410.0], [1439.0, 3197.4], [1487.0, 2663.0], [1531.0, 1479.0], [1535.0, 1025.0], [1507.0, 2721.0], [1511.0, 2185.0], [1483.0, 2474.0], [1479.0, 2626.0], [1503.0, 2662.0], [1475.0, 2501.0], [1499.0, 2460.0], [1495.0, 3053.0], [1519.0, 1531.0], [1543.0, 2756.6666666666665], [1547.0, 2678.5], [1539.0, 2532.3333333333335], [1551.0, 2561.75], [1567.0, 2633.5], [1563.0, 2494.6], [1559.0, 1974.3333333333333], [1555.0, 2724.0], [1599.0, 2348.0], [1571.0, 1709.0], [1575.0, 2384.6666666666665], [1583.0, 2547.0], [1595.0, 2164.5], [1587.0, 2126.6666666666665], [1611.0, 2589.0], [1615.0, 2366.0], [1607.0, 2432.0], [1631.0, 2227.5], [1627.0, 2052.5], [1623.0, 1666.3333333333333], [1619.0, 2398.5], [1639.0, 2597.5], [1635.0, 2380.0], [1643.0, 2165.0], [1663.0, 2773.0], [1659.0, 1756.0], [1655.0, 2651.6666666666665], [1651.0, 2408.0], [1723.0, 2281.6666666666665], [1727.0, 2572.75], [1699.0, 2490.75], [1707.0, 2319.0], [1703.0, 1937.0], [1695.0, 2224.0], [1667.0, 2099.0], [1679.0, 2735.142857142857], [1675.0, 954.0], [1715.0, 1917.0], [1683.0, 1898.0], [1691.0, 2182.0], [1783.0, 2190.0], [1763.0, 2290.0], [1767.0, 2496.0], [1771.0, 2300.5], [1759.0, 2500.0], [1731.0, 2245.3333333333335], [1739.0, 1971.0], [1743.0, 1651.7272727272727], [1755.0, 1866.0], [1751.0, 2227.75], [1747.0, 2185.0], [1799.0, 2326.4], [1847.0, 1987.5], [1803.0, 2268.0], [1915.0, 1982.0], [1911.0, 1909.5], [1895.0, 2045.4], [1907.0, 1986.5], [1883.0, 2130.5], [1863.0, 2059.5], [1899.0, 2104.0], [1935.0, 1960.0], [1979.0, 1846.0], [1939.0, 1833.0], [1951.0, 1910.4285714285716], [1983.0, 1846.0], [1959.0, 1862.3333333333333], [1963.0, 1946.0], [1967.0, 1657.5], [1971.0, 1842.0], [1991.0, 1591.0], [1987.0, 1773.5], [1.0, 21004.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[966.8287499999979, 3915.9662500000004]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1992.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 30111.8, "minX": 1.63141368E12, "maxY": 246371.53333333333, "series": [{"data": [[1.63141368E12, 246371.53333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63141368E12, 30111.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63141368E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3915.9662500000004, "minX": 1.63141368E12, "maxY": 3915.9662500000004, "series": [{"data": [[1.63141368E12, 3915.9662500000004]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63141368E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3858.099500000001, "minX": 1.63141368E12, "maxY": 3858.099500000001, "series": [{"data": [[1.63141368E12, 3858.099500000001]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63141368E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 78.74599999999995, "minX": 1.63141368E12, "maxY": 78.74599999999995, "series": [{"data": [[1.63141368E12, 78.74599999999995]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63141368E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 49.0, "minX": 1.63141368E12, "maxY": 6309.0, "series": [{"data": [[1.63141368E12, 6309.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63141368E12, 5585.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63141368E12, 6113.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63141368E12, 5936.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63141368E12, 49.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63141368E12, 4071.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63141368E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 575.0, "minX": 11.0, "maxY": 21005.0, "series": [{"data": [[519.0, 5480.0], [586.0, 4089.5], [155.0, 1939.0], [39.0, 575.0], [205.0, 4827.0], [237.0, 1276.0], [245.0, 3174.0], [241.0, 2061.0], [290.0, 2505.0], [289.0, 3431.0], [301.0, 4511.0], [300.0, 5227.0], [293.0, 5967.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 21005.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 586.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 11.0, "maxY": 5967.0, "series": [{"data": [[519.0, 5480.0], [586.0, 4089.5], [155.0, 1939.0], [39.0, 575.0], [205.0, 4827.0], [237.0, 1276.0], [245.0, 3174.0], [241.0, 2061.0], [290.0, 2505.0], [289.0, 3431.0], [301.0, 4511.0], [300.0, 5227.0], [293.0, 5967.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 586.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 66.66666666666667, "minX": 1.63141368E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63141368E12, 66.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63141368E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.63141368E12, "maxY": 66.48333333333333, "series": [{"data": [[1.63141368E12, 66.48333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63141368E12, 0.18333333333333332]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63141368E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.63141368E12, "maxY": 66.48333333333333, "series": [{"data": [[1.63141368E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63141368E12, 66.48333333333333]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63141368E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.63141368E12, "maxY": 66.48333333333333, "series": [{"data": [[1.63141368E12, 66.48333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63141368E12, 0.18333333333333332]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63141368E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

