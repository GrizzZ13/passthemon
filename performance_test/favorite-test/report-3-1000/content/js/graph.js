/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 83.0, "minX": 0.0, "maxY": 111498.0, "series": [{"data": [[0.0, 83.0], [0.1, 188.0], [0.2, 194.0], [0.3, 245.0], [0.4, 249.0], [0.5, 255.0], [0.6, 258.0], [0.7, 263.0], [0.8, 265.0], [0.9, 430.0], [1.0, 435.0], [1.1, 440.0], [1.2, 444.0], [1.3, 451.0], [1.4, 454.0], [1.5, 466.0], [1.6, 472.0], [1.7, 489.0], [1.8, 624.0], [1.9, 701.0], [2.0, 723.0], [2.1, 910.0], [2.2, 912.0], [2.3, 920.0], [2.4, 934.0], [2.5, 1028.0], [2.6, 1032.0], [2.7, 1036.0], [2.8, 1041.0], [2.9, 1044.0], [3.0, 1048.0], [3.1, 1051.0], [3.2, 1056.0], [3.3, 1060.0], [3.4, 1545.0], [3.5, 1565.0], [3.6, 1687.0], [3.7, 1694.0], [3.8, 1739.0], [3.9, 1773.0], [4.0, 1864.0], [4.1, 1900.0], [4.2, 1907.0], [4.3, 1910.0], [4.4, 1927.0], [4.5, 1933.0], [4.6, 1938.0], [4.7, 1940.0], [4.8, 1943.0], [4.9, 1949.0], [5.0, 1953.0], [5.1, 1959.0], [5.2, 1963.0], [5.3, 1969.0], [5.4, 1980.0], [5.5, 1988.0], [5.6, 1993.0], [5.7, 1998.0], [5.8, 1999.0], [5.9, 2002.0], [6.0, 2004.0], [6.1, 2014.0], [6.2, 2025.0], [6.3, 2030.0], [6.4, 2044.0], [6.5, 2047.0], [6.6, 2049.0], [6.7, 2060.0], [6.8, 2064.0], [6.9, 2069.0], [7.0, 2072.0], [7.1, 2082.0], [7.2, 2087.0], [7.3, 2096.0], [7.4, 2105.0], [7.5, 2110.0], [7.6, 2114.0], [7.7, 2116.0], [7.8, 2117.0], [7.9, 2120.0], [8.0, 2125.0], [8.1, 2130.0], [8.2, 2132.0], [8.3, 2135.0], [8.4, 2139.0], [8.5, 2141.0], [8.6, 2154.0], [8.7, 2166.0], [8.8, 2172.0], [8.9, 2174.0], [9.0, 2179.0], [9.1, 2182.0], [9.2, 2184.0], [9.3, 2187.0], [9.4, 2191.0], [9.5, 2194.0], [9.6, 2196.0], [9.7, 2198.0], [9.8, 2205.0], [9.9, 2209.0], [10.0, 2211.0], [10.1, 2213.0], [10.2, 2215.0], [10.3, 2217.0], [10.4, 2219.0], [10.5, 2220.0], [10.6, 2221.0], [10.7, 2224.0], [10.8, 2224.0], [10.9, 2227.0], [11.0, 2227.0], [11.1, 2230.0], [11.2, 2231.0], [11.3, 2232.0], [11.4, 2233.0], [11.5, 2234.0], [11.6, 2235.0], [11.7, 2236.0], [11.8, 2238.0], [11.9, 2239.0], [12.0, 2240.0], [12.1, 2240.0], [12.2, 2241.0], [12.3, 2242.0], [12.4, 2243.0], [12.5, 2243.0], [12.6, 2244.0], [12.7, 2245.0], [12.8, 2246.0], [12.9, 2247.0], [13.0, 2248.0], [13.1, 2249.0], [13.2, 2250.0], [13.3, 2251.0], [13.4, 2253.0], [13.5, 2254.0], [13.6, 2255.0], [13.7, 2257.0], [13.8, 2259.0], [13.9, 2260.0], [14.0, 2261.0], [14.1, 2262.0], [14.2, 2263.0], [14.3, 2264.0], [14.4, 2265.0], [14.5, 2266.0], [14.6, 2267.0], [14.7, 2268.0], [14.8, 2268.0], [14.9, 2269.0], [15.0, 2269.0], [15.1, 2270.0], [15.2, 2271.0], [15.3, 2272.0], [15.4, 2273.0], [15.5, 2273.0], [15.6, 2274.0], [15.7, 2275.0], [15.8, 2276.0], [15.9, 2277.0], [16.0, 2277.0], [16.1, 2279.0], [16.2, 2280.0], [16.3, 2282.0], [16.4, 2284.0], [16.5, 2285.0], [16.6, 2286.0], [16.7, 2287.0], [16.8, 2289.0], [16.9, 2290.0], [17.0, 2291.0], [17.1, 2292.0], [17.2, 2293.0], [17.3, 2295.0], [17.4, 2295.0], [17.5, 2297.0], [17.6, 2298.0], [17.7, 2299.0], [17.8, 2300.0], [17.9, 2301.0], [18.0, 2303.0], [18.1, 2304.0], [18.2, 2307.0], [18.3, 2310.0], [18.4, 2312.0], [18.5, 2316.0], [18.6, 2316.0], [18.7, 2320.0], [18.8, 2321.0], [18.9, 2325.0], [19.0, 2326.0], [19.1, 2329.0], [19.2, 2330.0], [19.3, 2331.0], [19.4, 2333.0], [19.5, 2335.0], [19.6, 2337.0], [19.7, 2338.0], [19.8, 2340.0], [19.9, 2341.0], [20.0, 2342.0], [20.1, 2345.0], [20.2, 2346.0], [20.3, 2347.0], [20.4, 2348.0], [20.5, 2351.0], [20.6, 2353.0], [20.7, 2354.0], [20.8, 2356.0], [20.9, 2356.0], [21.0, 2358.0], [21.1, 2360.0], [21.2, 2362.0], [21.3, 2363.0], [21.4, 2364.0], [21.5, 2367.0], [21.6, 2367.0], [21.7, 2369.0], [21.8, 2371.0], [21.9, 2373.0], [22.0, 2376.0], [22.1, 2377.0], [22.2, 2378.0], [22.3, 2381.0], [22.4, 2383.0], [22.5, 2387.0], [22.6, 2390.0], [22.7, 2392.0], [22.8, 2395.0], [22.9, 2398.0], [23.0, 2400.0], [23.1, 2403.0], [23.2, 2406.0], [23.3, 2407.0], [23.4, 2409.0], [23.5, 2411.0], [23.6, 2413.0], [23.7, 2414.0], [23.8, 2416.0], [23.9, 2417.0], [24.0, 2421.0], [24.1, 2423.0], [24.2, 2424.0], [24.3, 2425.0], [24.4, 2426.0], [24.5, 2427.0], [24.6, 2430.0], [24.7, 2430.0], [24.8, 2431.0], [24.9, 2434.0], [25.0, 2436.0], [25.1, 2438.0], [25.2, 2440.0], [25.3, 2443.0], [25.4, 2445.0], [25.5, 2446.0], [25.6, 2447.0], [25.7, 2449.0], [25.8, 2452.0], [25.9, 2455.0], [26.0, 2457.0], [26.1, 2458.0], [26.2, 2461.0], [26.3, 2462.0], [26.4, 2463.0], [26.5, 2465.0], [26.6, 2466.0], [26.7, 2467.0], [26.8, 2468.0], [26.9, 2469.0], [27.0, 2471.0], [27.1, 2472.0], [27.2, 2473.0], [27.3, 2474.0], [27.4, 2475.0], [27.5, 2476.0], [27.6, 2478.0], [27.7, 2480.0], [27.8, 2481.0], [27.9, 2482.0], [28.0, 2483.0], [28.1, 2485.0], [28.2, 2487.0], [28.3, 2488.0], [28.4, 2488.0], [28.5, 2490.0], [28.6, 2491.0], [28.7, 2492.0], [28.8, 2493.0], [28.9, 2494.0], [29.0, 2496.0], [29.1, 2497.0], [29.2, 2499.0], [29.3, 2499.0], [29.4, 2501.0], [29.5, 2503.0], [29.6, 2504.0], [29.7, 2505.0], [29.8, 2506.0], [29.9, 2507.0], [30.0, 2508.0], [30.1, 2509.0], [30.2, 2511.0], [30.3, 2512.0], [30.4, 2512.0], [30.5, 2513.0], [30.6, 2515.0], [30.7, 2516.0], [30.8, 2519.0], [30.9, 2520.0], [31.0, 2522.0], [31.1, 2524.0], [31.2, 2526.0], [31.3, 2528.0], [31.4, 2530.0], [31.5, 2533.0], [31.6, 2535.0], [31.7, 2535.0], [31.8, 2538.0], [31.9, 2539.0], [32.0, 2540.0], [32.1, 2541.0], [32.2, 2543.0], [32.3, 2543.0], [32.4, 2544.0], [32.5, 2545.0], [32.6, 2546.0], [32.7, 2548.0], [32.8, 2549.0], [32.9, 2550.0], [33.0, 2552.0], [33.1, 2553.0], [33.2, 2555.0], [33.3, 2556.0], [33.4, 2558.0], [33.5, 2558.0], [33.6, 2560.0], [33.7, 2562.0], [33.8, 2563.0], [33.9, 2565.0], [34.0, 2567.0], [34.1, 2569.0], [34.2, 2570.0], [34.3, 2572.0], [34.4, 2574.0], [34.5, 2576.0], [34.6, 2578.0], [34.7, 2580.0], [34.8, 2582.0], [34.9, 2584.0], [35.0, 2585.0], [35.1, 2588.0], [35.2, 2590.0], [35.3, 2591.0], [35.4, 2595.0], [35.5, 2596.0], [35.6, 2598.0], [35.7, 2601.0], [35.8, 2602.0], [35.9, 2603.0], [36.0, 2607.0], [36.1, 2610.0], [36.2, 2612.0], [36.3, 2614.0], [36.4, 2615.0], [36.5, 2618.0], [36.6, 2618.0], [36.7, 2619.0], [36.8, 2624.0], [36.9, 2625.0], [37.0, 2626.0], [37.1, 2628.0], [37.2, 2629.0], [37.3, 2632.0], [37.4, 2634.0], [37.5, 2636.0], [37.6, 2637.0], [37.7, 2639.0], [37.8, 2641.0], [37.9, 2643.0], [38.0, 2647.0], [38.1, 2653.0], [38.2, 2658.0], [38.3, 2658.0], [38.4, 2662.0], [38.5, 2663.0], [38.6, 2666.0], [38.7, 2667.0], [38.8, 2670.0], [38.9, 2671.0], [39.0, 2673.0], [39.1, 2674.0], [39.2, 2677.0], [39.3, 2678.0], [39.4, 2679.0], [39.5, 2680.0], [39.6, 2682.0], [39.7, 2683.0], [39.8, 2684.0], [39.9, 2685.0], [40.0, 2686.0], [40.1, 2688.0], [40.2, 2690.0], [40.3, 2690.0], [40.4, 2692.0], [40.5, 2694.0], [40.6, 2695.0], [40.7, 2699.0], [40.8, 2700.0], [40.9, 2702.0], [41.0, 2705.0], [41.1, 2708.0], [41.2, 2709.0], [41.3, 2714.0], [41.4, 2718.0], [41.5, 2720.0], [41.6, 2727.0], [41.7, 2733.0], [41.8, 2739.0], [41.9, 2741.0], [42.0, 2746.0], [42.1, 2749.0], [42.2, 2751.0], [42.3, 2752.0], [42.4, 2755.0], [42.5, 2757.0], [42.6, 2761.0], [42.7, 2765.0], [42.8, 2769.0], [42.9, 2773.0], [43.0, 2776.0], [43.1, 2778.0], [43.2, 2782.0], [43.3, 2785.0], [43.4, 2788.0], [43.5, 2792.0], [43.6, 2795.0], [43.7, 2797.0], [43.8, 2800.0], [43.9, 2802.0], [44.0, 2804.0], [44.1, 2806.0], [44.2, 2808.0], [44.3, 2809.0], [44.4, 2811.0], [44.5, 2817.0], [44.6, 2820.0], [44.7, 2824.0], [44.8, 2828.0], [44.9, 2831.0], [45.0, 2834.0], [45.1, 2843.0], [45.2, 2849.0], [45.3, 2857.0], [45.4, 2868.0], [45.5, 2874.0], [45.6, 2886.0], [45.7, 2906.0], [45.8, 2916.0], [45.9, 2935.0], [46.0, 2941.0], [46.1, 2946.0], [46.2, 2952.0], [46.3, 2968.0], [46.4, 2976.0], [46.5, 2980.0], [46.6, 2985.0], [46.7, 2986.0], [46.8, 3000.0], [46.9, 3014.0], [47.0, 3024.0], [47.1, 3028.0], [47.2, 3031.0], [47.3, 3032.0], [47.4, 3034.0], [47.5, 3036.0], [47.6, 3037.0], [47.7, 3039.0], [47.8, 3040.0], [47.9, 3043.0], [48.0, 3045.0], [48.1, 3046.0], [48.2, 3046.0], [48.3, 3048.0], [48.4, 3050.0], [48.5, 3052.0], [48.6, 3054.0], [48.7, 3056.0], [48.8, 3057.0], [48.9, 3060.0], [49.0, 3061.0], [49.1, 3063.0], [49.2, 3063.0], [49.3, 3065.0], [49.4, 3066.0], [49.5, 3068.0], [49.6, 3069.0], [49.7, 3069.0], [49.8, 3071.0], [49.9, 3072.0], [50.0, 3073.0], [50.1, 3075.0], [50.2, 3077.0], [50.3, 3080.0], [50.4, 3082.0], [50.5, 3084.0], [50.6, 3085.0], [50.7, 3087.0], [50.8, 3088.0], [50.9, 3089.0], [51.0, 3089.0], [51.1, 3091.0], [51.2, 3093.0], [51.3, 3096.0], [51.4, 3098.0], [51.5, 3099.0], [51.6, 3101.0], [51.7, 3104.0], [51.8, 3106.0], [51.9, 3109.0], [52.0, 3109.0], [52.1, 3110.0], [52.2, 3113.0], [52.3, 3116.0], [52.4, 3123.0], [52.5, 3131.0], [52.6, 3134.0], [52.7, 3138.0], [52.8, 3143.0], [52.9, 3147.0], [53.0, 3152.0], [53.1, 3156.0], [53.2, 3157.0], [53.3, 3164.0], [53.4, 3170.0], [53.5, 3174.0], [53.6, 3180.0], [53.7, 3182.0], [53.8, 3185.0], [53.9, 3192.0], [54.0, 3194.0], [54.1, 3198.0], [54.2, 3202.0], [54.3, 3207.0], [54.4, 3211.0], [54.5, 3215.0], [54.6, 3219.0], [54.7, 3221.0], [54.8, 3223.0], [54.9, 3226.0], [55.0, 3227.0], [55.1, 3227.0], [55.2, 3228.0], [55.3, 3230.0], [55.4, 3239.0], [55.5, 3248.0], [55.6, 3253.0], [55.7, 3255.0], [55.8, 3262.0], [55.9, 3264.0], [56.0, 3267.0], [56.1, 3273.0], [56.2, 3278.0], [56.3, 3282.0], [56.4, 3283.0], [56.5, 3291.0], [56.6, 3294.0], [56.7, 3301.0], [56.8, 3307.0], [56.9, 3311.0], [57.0, 3313.0], [57.1, 3317.0], [57.2, 3319.0], [57.3, 3320.0], [57.4, 3328.0], [57.5, 3332.0], [57.6, 3334.0], [57.7, 3338.0], [57.8, 3343.0], [57.9, 3348.0], [58.0, 3349.0], [58.1, 3351.0], [58.2, 3352.0], [58.3, 3355.0], [58.4, 3358.0], [58.5, 3361.0], [58.6, 3366.0], [58.7, 3368.0], [58.8, 3370.0], [58.9, 3372.0], [59.0, 3377.0], [59.1, 3381.0], [59.2, 3384.0], [59.3, 3387.0], [59.4, 3391.0], [59.5, 3397.0], [59.6, 3405.0], [59.7, 3409.0], [59.8, 3413.0], [59.9, 3421.0], [60.0, 3424.0], [60.1, 3427.0], [60.2, 3429.0], [60.3, 3431.0], [60.4, 3432.0], [60.5, 3435.0], [60.6, 3436.0], [60.7, 3460.0], [60.8, 3469.0], [60.9, 3475.0], [61.0, 3480.0], [61.1, 3483.0], [61.2, 3490.0], [61.3, 3506.0], [61.4, 3528.0], [61.5, 3536.0], [61.6, 3561.0], [61.7, 3597.0], [61.8, 3635.0], [61.9, 3660.0], [62.0, 3672.0], [62.1, 3702.0], [62.2, 3723.0], [62.3, 3736.0], [62.4, 3749.0], [62.5, 3764.0], [62.6, 3794.0], [62.7, 3830.0], [62.8, 3840.0], [62.9, 3866.0], [63.0, 3886.0], [63.1, 3905.0], [63.2, 3913.0], [63.3, 3928.0], [63.4, 3942.0], [63.5, 3965.0], [63.6, 3971.0], [63.7, 3982.0], [63.8, 3993.0], [63.9, 4002.0], [64.0, 4007.0], [64.1, 4010.0], [64.2, 4024.0], [64.3, 4026.0], [64.4, 4030.0], [64.5, 4032.0], [64.6, 4039.0], [64.7, 4043.0], [64.8, 4050.0], [64.9, 4052.0], [65.0, 4054.0], [65.1, 4058.0], [65.2, 4062.0], [65.3, 4068.0], [65.4, 4071.0], [65.5, 4074.0], [65.6, 4076.0], [65.7, 4081.0], [65.8, 4086.0], [65.9, 4090.0], [66.0, 4092.0], [66.1, 4095.0], [66.2, 4097.0], [66.3, 4099.0], [66.4, 4104.0], [66.5, 4106.0], [66.6, 4108.0], [66.7, 4110.0], [66.8, 4112.0], [66.9, 4114.0], [67.0, 4117.0], [67.1, 4119.0], [67.2, 4122.0], [67.3, 4124.0], [67.4, 4127.0], [67.5, 4128.0], [67.6, 4130.0], [67.7, 4131.0], [67.8, 4132.0], [67.9, 4136.0], [68.0, 4138.0], [68.1, 4141.0], [68.2, 4144.0], [68.3, 4145.0], [68.4, 4149.0], [68.5, 4152.0], [68.6, 4155.0], [68.7, 4160.0], [68.8, 4164.0], [68.9, 4171.0], [69.0, 4183.0], [69.1, 4200.0], [69.2, 4220.0], [69.3, 4248.0], [69.4, 4268.0], [69.5, 4272.0], [69.6, 4277.0], [69.7, 4279.0], [69.8, 4282.0], [69.9, 4284.0], [70.0, 4289.0], [70.1, 4293.0], [70.2, 4296.0], [70.3, 4315.0], [70.4, 4335.0], [70.5, 4345.0], [70.6, 4375.0], [70.7, 4402.0], [70.8, 4445.0], [70.9, 4491.0], [71.0, 4504.0], [71.1, 4521.0], [71.2, 4534.0], [71.3, 4556.0], [71.4, 4562.0], [71.5, 4594.0], [71.6, 4600.0], [71.7, 4629.0], [71.8, 4650.0], [71.9, 4682.0], [72.0, 4693.0], [72.1, 4723.0], [72.2, 4739.0], [72.3, 4759.0], [72.4, 4766.0], [72.5, 4775.0], [72.6, 4786.0], [72.7, 4810.0], [72.8, 4830.0], [72.9, 4860.0], [73.0, 4882.0], [73.1, 4906.0], [73.2, 4913.0], [73.3, 4928.0], [73.4, 4950.0], [73.5, 4971.0], [73.6, 5008.0], [73.7, 5032.0], [73.8, 5068.0], [73.9, 5097.0], [74.0, 5126.0], [74.1, 5142.0], [74.2, 5165.0], [74.3, 5190.0], [74.4, 5202.0], [74.5, 5209.0], [74.6, 5237.0], [74.7, 5250.0], [74.8, 5263.0], [74.9, 5270.0], [75.0, 5282.0], [75.1, 5304.0], [75.2, 5341.0], [75.3, 5354.0], [75.4, 5379.0], [75.5, 5382.0], [75.6, 5390.0], [75.7, 5400.0], [75.8, 5408.0], [75.9, 5423.0], [76.0, 5444.0], [76.1, 5468.0], [76.2, 5487.0], [76.3, 5510.0], [76.4, 5515.0], [76.5, 5520.0], [76.6, 5527.0], [76.7, 5544.0], [76.8, 5553.0], [76.9, 5565.0], [77.0, 5579.0], [77.1, 5592.0], [77.2, 5597.0], [77.3, 5603.0], [77.4, 5607.0], [77.5, 5610.0], [77.6, 5617.0], [77.7, 5620.0], [77.8, 5624.0], [77.9, 5627.0], [78.0, 5632.0], [78.1, 5635.0], [78.2, 5646.0], [78.3, 5649.0], [78.4, 5656.0], [78.5, 5667.0], [78.6, 5681.0], [78.7, 5740.0], [78.8, 5758.0], [78.9, 5774.0], [79.0, 5785.0], [79.1, 5805.0], [79.2, 5827.0], [79.3, 5845.0], [79.4, 5887.0], [79.5, 5942.0], [79.6, 5985.0], [79.7, 6093.0], [79.8, 6144.0], [79.9, 6229.0], [80.0, 6308.0], [80.1, 6453.0], [80.2, 6529.0], [80.3, 6690.0], [80.4, 9482.0], [80.5, 10125.0], [80.6, 12936.0], [80.7, 13346.0], [80.8, 15986.0], [80.9, 16706.0], [81.0, 19542.0], [81.1, 19930.0], [81.2, 22875.0], [81.3, 23234.0], [81.4, 26140.0], [81.5, 26784.0], [81.6, 29510.0], [81.7, 30327.0], [81.8, 30396.0], [81.9, 30796.0], [82.0, 30822.0], [82.1, 30850.0], [82.2, 30897.0], [82.3, 30921.0], [82.4, 30952.0], [82.5, 30966.0], [82.6, 30973.0], [82.7, 30994.0], [82.8, 31850.0], [82.9, 31869.0], [83.0, 31882.0], [83.1, 31908.0], [83.2, 31956.0], [83.3, 32004.0], [83.4, 32023.0], [83.5, 32044.0], [83.6, 32066.0], [83.7, 32985.0], [83.8, 33391.0], [83.9, 33541.0], [84.0, 34150.0], [84.1, 36388.0], [84.2, 37011.0], [84.3, 37482.0], [84.4, 39566.0], [84.5, 40038.0], [84.6, 40167.0], [84.7, 40690.0], [84.8, 42921.0], [84.9, 43219.0], [85.0, 43877.0], [85.1, 45602.0], [85.2, 46298.0], [85.3, 46788.0], [85.4, 46973.0], [85.5, 48276.0], [85.6, 49466.0], [85.7, 49538.0], [85.8, 49722.0], [85.9, 50925.0], [86.0, 51733.0], [86.1, 52375.0], [86.2, 52824.0], [86.3, 53541.0], [86.4, 54330.0], [86.5, 55162.0], [86.6, 55498.0], [86.7, 56633.0], [86.8, 56888.0], [86.9, 58147.0], [87.0, 59043.0], [87.1, 59846.0], [87.2, 60144.0], [87.3, 60652.0], [87.4, 60681.0], [87.5, 60766.0], [87.6, 60773.0], [87.7, 60795.0], [87.8, 61076.0], [87.9, 61297.0], [88.0, 61691.0], [88.1, 61726.0], [88.2, 61791.0], [88.3, 61820.0], [88.4, 61836.0], [88.5, 61875.0], [88.6, 62770.0], [88.7, 63202.0], [88.8, 63385.0], [88.9, 63817.0], [89.0, 64143.0], [89.1, 65740.0], [89.2, 66216.0], [89.3, 66503.0], [89.4, 67064.0], [89.5, 68156.0], [89.6, 68818.0], [89.7, 69399.0], [89.8, 70150.0], [89.9, 71142.0], [90.0, 71625.0], [90.1, 72183.0], [90.2, 72693.0], [90.3, 73022.0], [90.4, 73164.0], [90.5, 73885.0], [90.6, 74067.0], [90.7, 74372.0], [90.8, 75268.0], [90.9, 75853.0], [91.0, 76654.0], [91.1, 77096.0], [91.2, 77318.0], [91.3, 77483.0], [91.4, 78205.0], [91.5, 78565.0], [91.6, 78712.0], [91.7, 79282.0], [91.8, 80141.0], [91.9, 80686.0], [92.0, 81082.0], [92.1, 81369.0], [92.2, 81514.0], [92.3, 82068.0], [92.4, 83025.0], [92.5, 83598.0], [92.6, 84089.0], [92.7, 84176.0], [92.8, 84264.0], [92.9, 84858.0], [93.0, 85868.0], [93.1, 86631.0], [93.2, 87113.0], [93.3, 87360.0], [93.4, 87507.0], [93.5, 87629.0], [93.6, 88298.0], [93.7, 89045.0], [93.8, 89161.0], [93.9, 89820.0], [94.0, 90001.0], [94.1, 90383.0], [94.2, 90532.0], [94.3, 90634.0], [94.4, 90802.0], [94.5, 91042.0], [94.6, 91519.0], [94.7, 91594.0], [94.8, 92137.0], [94.9, 92373.0], [95.0, 92575.0], [95.1, 93069.0], [95.2, 93474.0], [95.3, 93787.0], [95.4, 94170.0], [95.5, 95012.0], [95.6, 95140.0], [95.7, 95354.0], [95.8, 95607.0], [95.9, 96680.0], [96.0, 97105.0], [96.1, 97543.0], [96.2, 98238.0], [96.3, 98293.0], [96.4, 98538.0], [96.5, 98662.0], [96.6, 98878.0], [96.7, 99079.0], [96.8, 99148.0], [96.9, 99355.0], [97.0, 100007.0], [97.1, 101036.0], [97.2, 101264.0], [97.3, 101403.0], [97.4, 102114.0], [97.5, 102358.0], [97.6, 102523.0], [97.7, 102727.0], [97.8, 102879.0], [97.9, 104039.0], [98.0, 104133.0], [98.1, 104258.0], [98.2, 104740.0], [98.3, 105115.0], [98.4, 105202.0], [98.5, 105793.0], [98.6, 106955.0], [98.7, 107112.0], [98.8, 107180.0], [98.9, 107201.0], [99.0, 107517.0], [99.1, 107778.0], [99.2, 108101.0], [99.3, 108686.0], [99.4, 109666.0], [99.5, 109743.0], [99.6, 109982.0], [99.7, 110203.0], [99.8, 110373.0], [99.9, 111184.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 400.0, "series": [{"data": [[0.0, 2.0], [69900.0, 2.0], [73100.0, 2.0], [76300.0, 1.0], [79500.0, 2.0], [81100.0, 2.0], [87500.0, 5.0], [89100.0, 2.0], [90700.0, 4.0], [92300.0, 1.0], [95500.0, 4.0], [97100.0, 2.0], [98700.0, 1.0], [100300.0, 1.0], [101900.0, 2.0], [105100.0, 5.0], [109900.0, 3.0], [100.0, 9.0], [32900.0, 1.0], [33700.0, 1.0], [34500.0, 1.0], [36100.0, 1.0], [39300.0, 2.0], [40100.0, 4.0], [43300.0, 1.0], [46500.0, 1.0], [49700.0, 1.0], [200.0, 31.0], [52100.0, 1.0], [55300.0, 1.0], [56900.0, 2.0], [60100.0, 5.0], [60900.0, 1.0], [61700.0, 10.0], [62500.0, 2.0], [63300.0, 3.0], [64100.0, 1.0], [65800.0, 1.0], [69000.0, 1.0], [72200.0, 1.0], [73800.0, 4.0], [75400.0, 1.0], [77000.0, 2.0], [78600.0, 2.0], [80200.0, 1.0], [85000.0, 1.0], [86600.0, 2.0], [88200.0, 2.0], [89800.0, 3.0], [91400.0, 1.0], [93000.0, 1.0], [96200.0, 2.0], [99400.0, 1.0], [101000.0, 2.0], [400.0, 47.0], [104200.0, 4.0], [107400.0, 2.0], [110600.0, 1.0], [600.0, 5.0], [700.0, 8.0], [800.0, 2.0], [900.0, 16.0], [1000.0, 49.0], [1500.0, 7.0], [1600.0, 10.0], [1700.0, 13.0], [1800.0, 5.0], [1900.0, 87.0], [2000.0, 76.0], [2100.0, 120.0], [2200.0, 400.0], [2300.0, 261.0], [2400.0, 318.0], [2500.0, 315.0], [2600.0, 256.0], [2700.0, 152.0], [2800.0, 93.0], [2900.0, 56.0], [3000.0, 237.0], [3100.0, 133.0], [3200.0, 124.0], [3300.0, 145.0], [3400.0, 87.0], [3500.0, 21.0], [3600.0, 19.0], [3700.0, 28.0], [3800.0, 20.0], [3900.0, 40.0], [4000.0, 126.0], [4100.0, 136.0], [4200.0, 58.0], [4300.0, 21.0], [66500.0, 2.0], [68100.0, 1.0], [4400.0, 14.0], [4500.0, 30.0], [4600.0, 23.0], [69700.0, 1.0], [72900.0, 2.0], [4700.0, 31.0], [4800.0, 22.0], [4900.0, 25.0], [5000.0, 17.0], [5100.0, 22.0], [5200.0, 36.0], [5300.0, 31.0], [84100.0, 5.0], [5400.0, 28.0], [5500.0, 49.0], [5600.0, 70.0], [87300.0, 4.0], [5700.0, 22.0], [5800.0, 17.0], [90500.0, 8.0], [92100.0, 1.0], [93700.0, 4.0], [5900.0, 10.0], [6100.0, 7.0], [6000.0, 7.0], [95300.0, 5.0], [96900.0, 3.0], [6200.0, 5.0], [6300.0, 3.0], [98500.0, 5.0], [100100.0, 1.0], [6400.0, 6.0], [6500.0, 4.0], [6600.0, 5.0], [6700.0, 1.0], [6800.0, 1.0], [108100.0, 4.0], [109700.0, 7.0], [7100.0, 1.0], [111300.0, 2.0], [9400.0, 1.0], [9800.0, 1.0], [10000.0, 1.0], [10200.0, 1.0], [13200.0, 1.0], [13600.0, 2.0], [16400.0, 2.0], [19600.0, 1.0], [21600.0, 1.0], [22800.0, 1.0], [23200.0, 3.0], [26800.0, 1.0], [30000.0, 1.0], [30400.0, 1.0], [30800.0, 15.0], [32000.0, 19.0], [32800.0, 1.0], [36000.0, 1.0], [39200.0, 1.0], [40000.0, 4.0], [42400.0, 1.0], [43200.0, 2.0], [44000.0, 1.0], [45600.0, 1.0], [48000.0, 1.0], [48800.0, 1.0], [49600.0, 2.0], [52800.0, 2.0], [55200.0, 2.0], [56000.0, 1.0], [56800.0, 2.0], [58400.0, 2.0], [60000.0, 2.0], [60800.0, 1.0], [61600.0, 6.0], [63200.0, 3.0], [64000.0, 1.0], [68800.0, 1.0], [72000.0, 2.0], [75200.0, 3.0], [76800.0, 2.0], [78400.0, 3.0], [81600.0, 1.0], [84800.0, 3.0], [86400.0, 2.0], [91200.0, 1.0], [92800.0, 1.0], [96000.0, 1.0], [99200.0, 2.0], [102400.0, 2.0], [104000.0, 5.0], [107200.0, 3.0], [110400.0, 1.0], [67100.0, 2.0], [70300.0, 1.0], [75100.0, 1.0], [81500.0, 3.0], [84700.0, 1.0], [86300.0, 1.0], [87900.0, 2.0], [89500.0, 1.0], [91100.0, 1.0], [92700.0, 1.0], [94300.0, 1.0], [97500.0, 1.0], [99100.0, 6.0], [102300.0, 5.0], [105500.0, 1.0], [107100.0, 11.0], [108700.0, 1.0], [110300.0, 2.0], [36300.0, 1.0], [39500.0, 1.0], [40300.0, 2.0], [45100.0, 1.0], [46700.0, 1.0], [47500.0, 1.0], [52300.0, 1.0], [53100.0, 1.0], [54700.0, 1.0], [59500.0, 1.0], [61100.0, 4.0], [62700.0, 1.0], [63500.0, 2.0], [65100.0, 1.0], [66200.0, 3.0], [71000.0, 1.0], [72600.0, 2.0], [74200.0, 1.0], [75800.0, 3.0], [77400.0, 5.0], [80600.0, 1.0], [83800.0, 2.0], [85400.0, 1.0], [87000.0, 2.0], [90200.0, 1.0], [93400.0, 3.0], [95000.0, 3.0], [96600.0, 1.0], [98200.0, 7.0], [101400.0, 1.0], [103000.0, 1.0], [107800.0, 1.0], [68500.0, 1.0], [70100.0, 1.0], [81300.0, 3.0], [84500.0, 1.0], [89300.0, 2.0], [90900.0, 1.0], [92500.0, 4.0], [94100.0, 4.0], [98900.0, 1.0], [102100.0, 1.0], [106900.0, 7.0], [108500.0, 1.0], [110100.0, 2.0], [16500.0, 1.0], [16900.0, 1.0], [22900.0, 1.0], [25300.0, 1.0], [26100.0, 1.0], [26900.0, 2.0], [30100.0, 2.0], [30900.0, 26.0], [33000.0, 1.0], [33800.0, 1.0], [37000.0, 3.0], [40200.0, 1.0], [45800.0, 1.0], [46600.0, 2.0], [48200.0, 1.0], [49800.0, 4.0], [52200.0, 2.0], [53000.0, 1.0], [54600.0, 2.0], [55400.0, 2.0], [56200.0, 1.0], [61000.0, 2.0], [61800.0, 15.0], [62600.0, 1.0], [63400.0, 1.0], [64200.0, 1.0], [74000.0, 2.0], [77200.0, 1.0], [78800.0, 2.0], [80400.0, 1.0], [82000.0, 2.0], [90000.0, 3.0], [91600.0, 2.0], [101200.0, 2.0], [102800.0, 3.0], [65900.0, 1.0], [72300.0, 1.0], [73900.0, 3.0], [77100.0, 3.0], [78700.0, 3.0], [80300.0, 1.0], [81900.0, 1.0], [83500.0, 2.0], [85100.0, 1.0], [89900.0, 2.0], [91500.0, 7.0], [101100.0, 3.0], [102700.0, 4.0], [107500.0, 3.0], [110700.0, 2.0], [33300.0, 3.0], [34100.0, 1.0], [38900.0, 1.0], [39700.0, 1.0], [42100.0, 1.0], [42900.0, 2.0], [46900.0, 3.0], [50900.0, 1.0], [51700.0, 2.0], [52500.0, 1.0], [54100.0, 2.0], [56500.0, 1.0], [58100.0, 2.0], [59700.0, 2.0], [62900.0, 1.0], [64500.0, 1.0], [68200.0, 1.0], [71400.0, 1.0], [73000.0, 5.0], [76200.0, 1.0], [81000.0, 3.0], [82600.0, 1.0], [84200.0, 5.0], [85800.0, 1.0], [87400.0, 3.0], [89000.0, 8.0], [90600.0, 1.0], [92200.0, 4.0], [93800.0, 2.0], [98600.0, 2.0], [105000.0, 1.0], [109800.0, 1.0], [111400.0, 2.0], [65700.0, 2.0], [67300.0, 1.0], [68900.0, 2.0], [72100.0, 2.0], [76900.0, 1.0], [78500.0, 4.0], [80100.0, 1.0], [83300.0, 3.0], [86500.0, 1.0], [88100.0, 1.0], [92900.0, 1.0], [99300.0, 3.0], [100900.0, 2.0], [102500.0, 6.0], [104100.0, 4.0], [105700.0, 1.0], [9700.0, 1.0], [9900.0, 1.0], [10100.0, 2.0], [10300.0, 2.0], [12900.0, 2.0], [13100.0, 1.0], [13300.0, 3.0], [13900.0, 1.0], [15900.0, 1.0], [16300.0, 1.0], [19800.0, 2.0], [26200.0, 1.0], [26600.0, 1.0], [29800.0, 1.0], [30600.0, 1.0], [31000.0, 1.0], [31800.0, 16.0], [33200.0, 1.0], [34000.0, 2.0], [36400.0, 2.0], [42800.0, 1.0], [43600.0, 2.0], [45200.0, 1.0], [46800.0, 3.0], [48400.0, 1.0], [49200.0, 1.0], [52400.0, 2.0], [53200.0, 1.0], [55600.0, 1.0], [57200.0, 1.0], [58000.0, 1.0], [61200.0, 1.0], [63600.0, 1.0], [66400.0, 1.0], [71200.0, 3.0], [72800.0, 2.0], [76000.0, 1.0], [77600.0, 1.0], [79200.0, 2.0], [84000.0, 2.0], [87200.0, 2.0], [90400.0, 1.0], [98400.0, 1.0], [100000.0, 1.0], [101600.0, 1.0], [104800.0, 3.0], [108000.0, 2.0], [109600.0, 4.0], [66300.0, 2.0], [71100.0, 1.0], [74300.0, 3.0], [80700.0, 2.0], [83900.0, 1.0], [87100.0, 1.0], [90300.0, 2.0], [91900.0, 1.0], [93500.0, 2.0], [95100.0, 3.0], [96700.0, 1.0], [98300.0, 3.0], [104700.0, 3.0], [107900.0, 1.0], [111100.0, 1.0], [33500.0, 3.0], [35900.0, 1.0], [39900.0, 1.0], [43100.0, 2.0], [45500.0, 1.0], [46300.0, 1.0], [49500.0, 7.0], [51100.0, 1.0], [53500.0, 2.0], [54300.0, 2.0], [55100.0, 1.0], [56700.0, 1.0], [58300.0, 1.0], [59900.0, 1.0], [60700.0, 16.0], [63100.0, 2.0], [63900.0, 1.0], [67000.0, 4.0], [68600.0, 1.0], [70200.0, 1.0], [71800.0, 1.0], [76600.0, 1.0], [78200.0, 1.0], [81400.0, 4.0], [83000.0, 1.0], [89400.0, 1.0], [91000.0, 4.0], [92600.0, 1.0], [97400.0, 3.0], [99000.0, 2.0], [103800.0, 1.0], [105400.0, 1.0], [107000.0, 1.0], [108600.0, 1.0], [110200.0, 4.0], [66100.0, 1.0], [69300.0, 2.0], [70900.0, 1.0], [74100.0, 2.0], [75700.0, 1.0], [77300.0, 2.0], [80500.0, 1.0], [85300.0, 1.0], [86900.0, 1.0], [93300.0, 2.0], [98100.0, 3.0], [99700.0, 2.0], [101300.0, 3.0], [102900.0, 1.0], [104500.0, 1.0], [107700.0, 3.0], [16700.0, 3.0], [17500.0, 1.0], [19500.0, 2.0], [19900.0, 3.0], [20300.0, 1.0], [23100.0, 2.0], [23500.0, 2.0], [26300.0, 1.0], [26700.0, 2.0], [28700.0, 1.0], [29500.0, 1.0], [30300.0, 6.0], [30700.0, 3.0], [31900.0, 11.0], [33400.0, 2.0], [36600.0, 2.0], [37400.0, 3.0], [39800.0, 1.0], [40600.0, 1.0], [43000.0, 2.0], [43800.0, 1.0], [46200.0, 4.0], [47800.0, 1.0], [49400.0, 2.0], [51000.0, 3.0], [52600.0, 1.0], [55000.0, 1.0], [56600.0, 3.0], [59000.0, 1.0], [59800.0, 3.0], [60600.0, 6.0], [63000.0, 1.0], [63800.0, 3.0], [66800.0, 1.0], [68400.0, 1.0], [70000.0, 1.0], [71600.0, 2.0], [74800.0, 1.0], [78000.0, 2.0], [79600.0, 1.0], [82800.0, 2.0], [87600.0, 1.0], [90800.0, 2.0], [92400.0, 1.0], [94000.0, 1.0], [95600.0, 2.0], [98800.0, 5.0], [102000.0, 1.0], [105200.0, 3.0], [110000.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 111400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 80.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4447.0, "series": [{"data": [[0.0, 89.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 80.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4447.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 384.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 234.53846153846143, "minX": 1.63090398E12, "maxY": 980.5, "series": [{"data": [[1.63090398E12, 462.0779999999997]], "isOverall": false, "label": "addFavorite", "isController": false}, {"data": [[1.63090398E12, 501.401]], "isOverall": false, "label": "listFavoriteByPage", "isController": false}, {"data": [[1.63090398E12, 501.80099999999896]], "isOverall": false, "label": "deleteFavorite", "isController": false}, {"data": [[1.63090404E12, 714.5487804878045], [1.6309041E12, 234.53846153846143], [1.63090398E12, 980.5]], "isOverall": false, "label": "deleteAllFavorite", "isController": false}, {"data": [[1.6309041E12, 485.28199999999947]], "isOverall": false, "label": "checkFavorite", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309041E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1259.5, "minX": 1.0, "maxY": 111407.0, "series": [{"data": [[2.0, 41019.666666666664], [3.0, 21639.999999999996], [4.0, 57355.0], [5.0, 31496.0], [6.0, 25271.4], [7.0, 30688.25], [8.0, 39912.333333333336], [9.0, 16907.625], [10.0, 58045.5], [11.0, 40037.0], [12.0, 3725.5], [13.0, 46555.8], [14.0, 21631.0], [15.0, 57935.0], [16.0, 21509.166666666664], [17.0, 39563.666666666664], [18.0, 58149.5], [19.0, 21062.833333333332], [20.0, 109754.0], [21.0, 3150.3333333333335], [22.0, 5375.666666666667], [23.0, 67976.8], [24.0, 17770.249999999996], [25.0, 31644.75], [26.0, 12080.142857142855], [27.0, 57669.5], [28.0, 40411.0], [29.0, 21739.5], [30.0, 4205.666666666667], [31.0, 4629.5], [33.0, 88901.0], [32.0, 4985.75], [35.0, 12291.785714285714], [34.0, 13776.909090909092], [37.0, 4330.0], [36.0, 17632.999999999996], [39.0, 56848.0], [38.0, 34031.42857142857], [40.0, 30172.75], [41.0, 24290.6], [43.0, 46523.0], [42.0, 4356.5], [44.0, 4243.0], [45.0, 72961.33333333333], [47.0, 29816.75], [46.0, 39626.666666666664], [48.0, 12273.461538461539], [49.0, 24998.2], [51.0, 31001.750000000004], [50.0, 21863.5], [53.0, 21002.666666666668], [52.0, 24392.6], [55.0, 30402.25], [54.0, 25336.8], [57.0, 25598.6], [56.0, 19149.85714285714], [59.0, 30066.0], [58.0, 39367.33333333333], [61.0, 30443.5], [60.0, 30454.5], [63.0, 13437.23076923077], [62.0, 38841.33333333333], [66.0, 21011.0], [65.0, 56290.5], [64.0, 12855.454545454546], [67.0, 3361.0], [71.0, 21660.666666666668], [69.0, 38628.333333333336], [68.0, 45960.6], [70.0, 55262.5], [75.0, 38903.66666666667], [74.0, 38644.0], [73.0, 14304.199999999999], [72.0, 21631.833333333332], [79.0, 38264.0], [78.0, 24358.0], [77.0, 12564.076923076922], [76.0, 24162.4], [81.0, 29508.25], [80.0, 20914.333333333332], [83.0, 14722.333333333334], [82.0, 37186.333333333336], [87.0, 19779.5], [86.0, 38004.0], [85.0, 16469.249999999996], [84.0, 30719.5], [91.0, 29089.75], [90.0, 37824.333333333336], [89.0, 29163.75], [88.0, 16148.75], [95.0, 29451.75], [94.0, 24036.2], [93.0, 13936.6], [92.0, 24281.4], [98.0, 29450.250000000004], [97.0, 37610.666666666664], [96.0, 24146.2], [99.0, 15900.0], [103.0, 29376.5], [102.0, 18205.285714285714], [101.0, 28954.25], [100.0, 24615.0], [107.0, 71192.0], [106.0, 5189.0], [105.0, 16016.500000000002], [104.0, 104041.0], [111.0, 17900.0], [110.0, 23634.8], [109.0, 37634.33333333333], [108.0, 13667.5], [115.0, 20569.833333333332], [114.0, 23728.2], [113.0, 28728.75], [112.0, 29051.500000000004], [119.0, 18079.14285714286], [118.0, 28545.5], [117.0, 20353.166666666664], [116.0, 28611.25], [123.0, 29293.75], [121.0, 20686.0], [122.0, 17094.0], [120.0, 52819.5], [127.0, 23830.600000000002], [126.0, 20670.666666666664], [124.0, 28491.5], [125.0, 20043.5], [135.0, 20314.5], [133.0, 23650.8], [132.0, 37111.33333333333], [131.0, 17878.0], [130.0, 23951.2], [128.0, 20293.5], [129.0, 36480.333333333336], [134.0, 52360.5], [143.0, 16300.999999999998], [141.0, 14649.111111111115], [140.0, 20116.333333333332], [139.0, 37697.66666666667], [137.0, 18536.285714285714], [136.0, 19576.166666666668], [142.0, 52051.0], [138.0, 35824.66666666667], [150.0, 20518.166666666668], [147.0, 16228.0], [145.0, 23145.2], [144.0, 28582.0], [151.0, 22724.8], [148.0, 35554.33333333333], [146.0, 35895.66666666667], [149.0, 27742.75], [158.0, 15442.25], [157.0, 28070.500000000004], [156.0, 36206.66666666667], [155.0, 35904.0], [154.0, 20126.999999999996], [153.0, 22994.0], [152.0, 23333.0], [159.0, 19765.666666666668], [167.0, 27870.75], [165.0, 28091.75], [163.0, 27756.0], [162.0, 35703.66666666667], [161.0, 15724.250000000002], [160.0, 28489.5], [166.0, 27621.5], [164.0, 22862.4], [175.0, 35837.0], [174.0, 15897.249999999996], [173.0, 19949.333333333336], [171.0, 27805.75], [170.0, 27562.25], [169.0, 11600.416666666666], [168.0, 27845.500000000004], [172.0, 51115.0], [183.0, 27445.0], [182.0, 14877.111111111111], [178.0, 27707.500000000004], [177.0, 17736.571428571428], [180.0, 35147.0], [179.0, 16869.714285714286], [176.0, 26913.75], [181.0, 27099.749999999996], [191.0, 15074.555555555555], [189.0, 22886.600000000002], [184.0, 28013.5], [190.0, 17670.666666666668], [188.0, 34866.33333333333], [187.0, 19285.333333333336], [186.0, 27044.0], [185.0, 27111.750000000004], [194.0, 28681.75], [199.0, 13894.666666666666], [195.0, 16650.714285714286], [198.0, 50241.5], [197.0, 50289.0], [196.0, 15349.875], [192.0, 19045.5], [193.0, 19777.6], [207.0, 26884.25], [206.0, 13734.6], [200.0, 16631.625], [205.0, 15238.375], [202.0, 22129.0], [204.0, 26518.5], [201.0, 27014.75], [203.0, 96680.0], [215.0, 34417.66666666667], [214.0, 17179.571428571428], [212.0, 34791.33333333333], [211.0, 22296.2], [210.0, 19308.833333333332], [208.0, 22401.800000000003], [213.0, 26137.75], [209.0, 21769.8], [223.0, 26509.5], [222.0, 26656.75], [221.0, 18993.833333333336], [220.0, 19349.333333333332], [218.0, 15336.375000000002], [217.0, 26737.5], [216.0, 18818.5], [219.0, 33840.33333333333], [231.0, 13498.555555555555], [229.0, 26052.25], [228.0, 16845.285714285717], [227.0, 33900.33333333333], [226.0, 26392.5], [225.0, 22452.6], [224.0, 22004.0], [230.0, 94170.0], [239.0, 25907.75], [238.0, 26095.25], [237.0, 23053.6], [233.0, 26332.5], [232.0, 49454.5], [235.0, 17829.333333333332], [234.0, 13740.888888888889], [236.0, 48288.0], [247.0, 33501.33333333333], [246.0, 33407.33333333333], [245.0, 48757.0], [244.0, 21176.6], [243.0, 22252.4], [242.0, 49328.0], [241.0, 16213.714285714286], [240.0, 13795.555555555558], [254.0, 48618.5], [253.0, 3594.7931034482763], [252.0, 24468.5], [251.0, 21934.6], [250.0, 48607.0], [249.0, 9214.92857142857], [248.0, 16875.857142857145], [255.0, 8811.5], [268.0, 20744.2], [270.0, 33663.333333333336], [271.0, 15707.42857142857], [269.0, 33670.666666666664], [267.0, 15266.625], [266.0, 47042.0], [265.0, 11769.7], [264.0, 18841.166666666664], [261.0, 20900.8], [260.0, 12183.181818181818], [259.0, 48503.5], [258.0, 15020.875], [257.0, 32473.0], [256.0, 91986.0], [263.0, 91614.0], [262.0, 91627.0], [286.0, 25695.5], [287.0, 25164.5], [284.0, 33404.333333333336], [285.0, 20067.6], [283.0, 20971.4], [282.0, 21099.4], [281.0, 19351.18181818182], [279.0, 11243.666666666668], [278.0, 11148.090909090908], [276.0, 46762.5], [277.0, 90753.0], [275.0, 20570.2], [274.0, 13986.0], [273.0, 20818.2], [272.0, 25644.750000000004], [302.0, 13706.222222222224], [303.0, 24804.75], [300.0, 47589.5], [301.0, 24762.75], [291.0, 13991.777777777777], [289.0, 47815.5], [290.0, 31796.333333333332], [288.0, 25462.5], [299.0, 15625.999999999998], [298.0, 14144.0], [297.0, 21239.6], [296.0, 20955.8], [295.0, 11215.727272727272], [294.0, 32928.66666666667], [293.0, 47539.0], [292.0, 47568.0], [319.0, 25773.25], [316.0, 20276.8], [318.0, 20909.6], [317.0, 24858.75], [307.0, 12974.222222222223], [306.0, 12923.666666666668], [305.0, 47155.5], [304.0, 47539.0], [315.0, 17812.166666666668], [314.0, 46765.5], [313.0, 17523.333333333332], [312.0, 17900.0], [311.0, 25620.25], [310.0, 20275.2], [309.0, 14616.499999999998], [308.0, 45731.0], [334.0, 19899.4], [335.0, 45846.5], [333.0, 17262.833333333336], [332.0, 32046.666666666664], [331.0, 20318.4], [330.0, 15945.714285714284], [329.0, 20374.0], [328.0, 19468.4], [327.0, 20617.0], [326.0, 3351.1081081081084], [321.0, 24359.25], [320.0, 46664.0], [323.0, 15554.285714285714], [322.0, 32486.333333333336], [325.0, 24733.5], [324.0, 20869.0], [351.0, 45163.0], [350.0, 20448.8], [348.0, 16513.5], [349.0, 44471.5], [339.0, 13288.999999999998], [337.0, 17573.166666666664], [338.0, 23662.25], [336.0, 20062.0], [347.0, 45781.0], [346.0, 15634.714285714286], [345.0, 19761.8], [344.0, 19626.2], [343.0, 45975.5], [342.0, 15078.0], [341.0, 17900.833333333332], [340.0, 30896.333333333332], [366.0, 19704.0], [367.0, 14396.857142857145], [365.0, 19810.2], [364.0, 14365.857142857143], [355.0, 30542.0], [354.0, 12170.444444444445], [352.0, 23783.25], [353.0, 85099.0], [363.0, 19792.8], [362.0, 30402.333333333332], [361.0, 12283.444444444445], [360.0, 23538.25], [359.0, 14478.142857142855], [358.0, 44025.0], [357.0, 3147.0], [356.0, 19333.4], [370.0, 30511.666666666668], [381.0, 23171.25], [382.0, 43417.0], [383.0, 18447.8], [377.0, 16060.5], [376.0, 42966.0], [380.0, 43879.0], [371.0, 11470.699999999999], [369.0, 23630.75], [368.0, 16663.833333333336], [379.0, 14246.0], [378.0, 24359.75], [375.0, 11882.222222222223], [374.0, 44032.5], [373.0, 44475.5], [372.0, 16703.166666666668], [387.0, 43080.0], [392.0, 29516.333333333332], [397.0, 10525.545454545456], [396.0, 29063.0], [398.0, 8994.923076923076], [399.0, 41810.5], [393.0, 13916.142857142855], [394.0, 22281.0], [395.0, 81314.0], [391.0, 29636.333333333332], [390.0, 18724.8], [389.0, 12083.444444444445], [388.0, 7917.941176470588], [386.0, 43399.5], [385.0, 19701.4], [384.0, 22276.25], [414.0, 18641.6], [415.0, 41702.5], [412.0, 15865.666666666666], [413.0, 79525.0], [403.0, 22069.75], [411.0, 7866.294117647058], [410.0, 42619.0], [409.0, 22421.75], [408.0, 9478.076923076922], [402.0, 13607.0], [405.0, 28601.666666666668], [401.0, 22275.25], [400.0, 41903.5], [407.0, 80141.0], [406.0, 80446.0], [404.0, 28480.0], [424.0, 40969.25], [430.0, 18760.4], [429.0, 27935.0], [428.0, 78712.0], [431.0, 27108.0], [419.0, 8438.461538461537], [418.0, 28545.333333333332], [417.0, 22462.75], [416.0, 78587.0], [427.0, 21907.75], [426.0, 41409.0], [425.0, 22085.25], [423.0, 2766.0], [422.0, 41354.0], [421.0, 41548.0], [420.0, 28378.333333333332], [446.0, 12691.142857142857], [447.0, 13689.857142857143], [444.0, 9138.099999999999], [445.0, 14948.833333333334], [435.0, 10834.699999999999], [433.0, 21228.5], [432.0, 39266.0], [434.0, 13608.833333333332], [442.0, 18204.2], [441.0, 39844.0], [443.0, 14321.166666666666], [440.0, 40931.5], [439.0, 11023.555555555555], [438.0, 13519.714285714286], [437.0, 14194.500000000002], [436.0, 27911.0], [460.0, 21063.75], [462.0, 15226.333333333334], [463.0, 17436.6], [457.0, 9834.3], [456.0, 27170.666666666664], [461.0, 9199.500000000002], [459.0, 15105.333333333334], [458.0, 15565.166666666666], [455.0, 17852.4], [448.0, 15351.166666666666], [451.0, 17817.4], [450.0, 15154.5], [449.0, 17956.6], [454.0, 21493.25], [453.0, 17727.8], [452.0, 13531.285714285716], [478.0, 17141.0], [479.0, 7141.38888888889], [477.0, 17528.0], [476.0, 14446.0], [467.0, 20932.0], [466.0, 14785.0], [465.0, 39109.0], [464.0, 10913.333333333334], [475.0, 21052.75], [474.0, 17431.2], [473.0, 17290.0], [472.0, 10581.666666666666], [471.0, 20968.5], [470.0, 14951.166666666666], [469.0, 17380.2], [468.0, 26923.0], [483.0, 11153.555555555555], [495.0, 14753.833333333332], [493.0, 15141.833333333332], [492.0, 25821.666666666668], [494.0, 37050.5], [489.0, 17214.2], [488.0, 11732.375], [487.0, 27081.333333333332], [485.0, 38377.0], [486.0, 14168.0], [484.0, 26487.0], [480.0, 16896.0], [482.0, 25900.0], [481.0, 16646.8], [490.0, 14277.5], [491.0, 72608.0], [510.0, 16246.2], [511.0, 25446.0], [509.0, 25834.333333333332], [507.0, 8920.727272727274], [506.0, 20451.25], [504.0, 16545.4], [505.0, 7572.857142857143], [503.0, 14653.833333333334], [500.0, 8814.083333333334], [502.0, 25394.666666666668], [501.0, 71469.0], [497.0, 26773.0], [499.0, 19642.25], [498.0, 71625.0], [496.0, 19962.75], [508.0, 13895.5], [536.0, 34996.5], [541.0, 18790.25], [542.0, 15405.6], [543.0, 33983.5], [529.0, 19058.0], [528.0, 9941.111111111111], [540.0, 18972.0], [539.0, 15280.8], [538.0, 34982.5], [537.0, 9688.0], [527.0, 11125.75], [526.0, 34745.5], [525.0, 35194.5], [512.0, 14106.833333333332], [513.0, 16440.6], [515.0, 36028.5], [514.0, 24699.333333333332], [519.0, 20321.5], [518.0, 19011.75], [517.0, 11826.285714285714], [516.0, 14352.166666666668], [524.0, 12204.42857142857], [522.0, 25552.333333333332], [523.0, 9169.9], [520.0, 36501.0], [521.0, 19005.75], [535.0, 11849.857142857143], [534.0, 15158.0], [533.0, 11943.285714285714], [531.0, 18934.5], [532.0, 34792.0], [530.0, 15795.0], [569.0, 5204.666666666668], [574.0, 22659.333333333332], [575.0, 3046.0], [560.0, 22728.0], [562.0, 22836.0], [561.0, 12790.0], [564.0, 18085.0], [565.0, 14324.8], [563.0, 33479.0], [573.0, 12854.833333333334], [572.0, 17268.25], [571.0, 22797.333333333332], [570.0, 12587.666666666666], [568.0, 26868.6], [551.0, 23243.0], [550.0, 23351.0], [549.0, 23486.333333333332], [548.0, 23562.0], [547.0, 23681.333333333332], [546.0, 6658.400000000001], [544.0, 18748.5], [545.0, 13026.166666666666], [559.0, 11536.142857142857], [558.0, 11188.57142857143], [557.0, 14830.8], [556.0, 23054.166666666668], [555.0, 2874.5], [553.0, 23487.0], [554.0, 17794.0], [552.0, 14885.8], [567.0, 2738.3333333333335], [566.0, 18201.75], [604.0, 22474.666666666668], [607.0, 17199.0], [593.0, 2564.25], [592.0, 2992.0], [595.0, 32575.5], [594.0, 27989.14285714286], [597.0, 22492.333333333332], [596.0, 22637.666666666668], [606.0, 9189.555555555555], [605.0, 22228.333333333332], [603.0, 14380.6], [602.0, 7414.833333333333], [601.0, 22514.0], [600.0, 14366.6], [589.0, 17466.25], [591.0, 14292.8], [576.0, 22169.5], [590.0, 32075.5], [578.0, 22517.333333333332], [577.0, 8627.7], [580.0, 2441.8], [581.0, 1990.0], [579.0, 22530.333333333332], [583.0, 12425.333333333334], [582.0, 32421.166666666668], [588.0, 9753.375], [587.0, 6629.357142857143], [586.0, 12522.166666666668], [585.0, 22882.333333333332], [584.0, 17240.0], [599.0, 9945.375], [598.0, 11006.000000000002], [633.0, 21906.666666666668], [638.0, 6235.562499999999], [639.0, 9801.125], [624.0, 14301.2], [626.0, 32021.0], [625.0, 14363.6], [628.0, 17012.75], [629.0, 21804.333333333336], [627.0, 2690.3333333333335], [637.0, 12175.5], [636.0, 17169.0], [634.0, 22028.666666666668], [635.0, 60652.0], [632.0, 14151.2], [615.0, 14119.6], [614.0, 17227.25], [613.0, 22293.0], [612.0, 14408.0], [611.0, 22139.666666666668], [610.0, 9974.0], [609.0, 17326.0], [608.0, 14346.0], [623.0, 17304.25], [622.0, 14442.8], [621.0, 14304.2], [620.0, 32144.0], [619.0, 32052.0], [618.0, 8632.3], [616.0, 11041.142857142859], [617.0, 31550.0], [631.0, 31865.5], [630.0, 22506.0], [668.0, 20528.333333333336], [671.0, 20404.333333333332], [657.0, 16489.75], [656.0, 14030.2], [659.0, 11869.833333333334], [658.0, 9280.25], [661.0, 9258.374999999998], [660.0, 29958.0], [670.0, 20283.666666666668], [669.0, 13079.0], [667.0, 7495.363636363638], [666.0, 20637.0], [665.0, 13366.8], [664.0, 11652.666666666668], [654.0, 21409.333333333332], [655.0, 13638.8], [641.0, 14136.4], [640.0, 21856.0], [643.0, 12360.333333333334], [644.0, 16697.25], [642.0, 21851.0], [647.0, 12247.0], [646.0, 11993.333333333332], [645.0, 12190.833333333334], [653.0, 9538.125], [651.0, 9554.5], [652.0, 58445.0], [650.0, 16813.0], [649.0, 17065.25], [648.0, 9730.125], [663.0, 20737.666666666664], [662.0, 9291.875], [700.0, 14796.5], [703.0, 9357.999999999998], [688.0, 11000.666666666668], [690.0, 12488.4], [689.0, 27886.0], [692.0, 15043.75], [691.0, 10784.833333333334], [702.0, 18829.0], [701.0, 10526.333333333334], [699.0, 14763.0], [698.0, 18899.0], [697.0, 10745.0], [696.0, 15242.5], [686.0, 7690.099999999999], [687.0, 12503.8], [672.0, 28566.5], [674.0, 6586.076923076923], [675.0, 15344.0], [673.0, 11599.5], [677.0, 15502.0], [676.0, 20411.0], [679.0, 15557.5], [678.0, 11158.5], [685.0, 10818.833333333334], [684.0, 15349.000000000002], [683.0, 13622.0], [682.0, 2918.5], [681.0, 11275.666666666668], [680.0, 28274.5], [694.0, 8651.250000000002], [695.0, 14748.5], [693.0, 10804.166666666666], [734.0, 7355.555555555556], [724.0, 7609.888888888889], [735.0, 17177.333333333336], [720.0, 9265.714285714286], [723.0, 10276.0], [722.0, 25996.75], [721.0, 2683.6666666666665], [732.0, 13555.25], [733.0, 17126.333333333336], [731.0, 8863.285714285714], [730.0, 13732.5], [729.0, 13601.25], [728.0, 13713.250000000002], [711.0, 18077.0], [710.0, 10318.166666666666], [709.0, 7685.111111111111], [708.0, 9211.142857142857], [707.0, 11801.0], [706.0, 26329.0], [705.0, 18837.666666666664], [704.0, 9388.42857142857], [719.0, 18115.333333333336], [718.0, 14309.5], [717.0, 8311.125], [716.0, 12291.8], [712.0, 8449.500000000002], [713.0, 49722.0], [715.0, 7625.333333333333], [714.0, 25914.5], [727.0, 25311.0], [726.0, 11526.2], [725.0, 17791.0], [761.0, 12651.5], [766.0, 21488.5], [767.0, 7248.5], [752.0, 23088.0], [754.0, 15962.333333333334], [753.0, 8184.285714285714], [756.0, 23009.0], [757.0, 15939.0], [755.0, 9471.833333333334], [765.0, 10145.6], [764.0, 22376.0], [763.0, 12438.75], [762.0, 15882.0], [760.0, 6828.111111111111], [743.0, 13379.75], [742.0, 5988.230769230769], [741.0, 11340.8], [740.0, 8817.714285714286], [739.0, 11188.4], [738.0, 24849.0], [737.0, 17221.333333333336], [736.0, 17272.666666666664], [751.0, 8514.142857142857], [750.0, 16243.666666666666], [749.0, 9378.5], [748.0, 16614.333333333336], [747.0, 10908.4], [746.0, 6833.200000000001], [745.0, 16853.0], [744.0, 11142.4], [759.0, 7246.333333333333], [758.0, 9296.166666666668], [793.0, 8238.166666666666], [798.0, 13480.333333333334], [799.0, 7864.833333333333], [786.0, 5747.090909090909], [787.0, 37401.0], [785.0, 14087.0], [784.0, 8407.5], [789.0, 7365.428571428572], [788.0, 9432.6], [797.0, 9188.2], [796.0, 5868.5], [794.0, 13652.0], [795.0, 19495.0], [792.0, 5728.0], [775.0, 10009.4], [772.0, 15113.333333333332], [774.0, 39946.0], [773.0, 40038.0], [771.0, 15138.333333333332], [770.0, 21477.5], [769.0, 12052.25], [768.0, 15128.666666666668], [783.0, 39253.0], [782.0, 8609.166666666666], [780.0, 14880.0], [781.0, 11845.25], [779.0, 5175.7692307692305], [778.0, 5590.083333333334], [777.0, 11999.75], [776.0, 6094.454545454546], [791.0, 9362.6], [790.0, 19718.0], [824.0, 6509.142857142857], [829.0, 4726.583333333333], [830.0, 8302.8], [816.0, 17553.5], [831.0, 6461.75], [818.0, 17134.5], [817.0, 9680.25], [828.0, 12143.333333333334], [827.0, 17116.5], [826.0, 8367.8], [825.0, 17436.5], [815.0, 9930.0], [801.0, 10223.25], [800.0, 7768.833333333334], [803.0, 8867.2], [802.0, 12880.666666666666], [805.0, 10194.0], [804.0, 7639.333333333334], [807.0, 12668.333333333334], [806.0, 9954.5], [814.0, 17646.0], [813.0, 17784.0], [812.0, 7439.833333333334], [811.0, 8826.6], [810.0, 4391.875], [809.0, 17890.0], [808.0, 8625.0], [823.0, 12049.666666666666], [822.0, 7339.333333333333], [821.0, 12187.333333333334], [820.0, 4748.928571428571], [819.0, 5991.875], [837.0, 17036.0], [861.0, 8251.2], [862.0, 16955.5], [863.0, 7075.333333333334], [858.0, 6534.714285714285], [859.0, 6509.142857142857], [860.0, 12155.333333333334], [857.0, 8333.8], [854.0, 16988.5], [855.0, 2277.5], [853.0, 6482.571428571428], [850.0, 12014.0], [849.0, 17089.0], [852.0, 5360.6], [851.0, 31867.0], [848.0, 3957.5263157894733], [846.0, 6057.5], [845.0, 12141.666666666666], [844.0, 17075.0], [832.0, 6631.142857142857], [847.0, 31902.0], [834.0, 12145.333333333334], [833.0, 17253.5], [836.0, 12140.0], [835.0, 8189.2], [838.0, 8331.6], [856.0, 31854.0], [843.0, 8139.2], [841.0, 17026.5], [842.0, 5296.727272727272], [840.0, 9774.25], [871.0, 2280.5], [864.0, 11780.0], [880.0, 21378.0], [882.0, 7930.0], [881.0, 2503.4], [884.0, 2456.0], [883.0, 9616.25], [887.0, 11817.666666666666], [886.0, 16704.5], [885.0, 9521.75], [877.0, 5932.25], [879.0, 2362.5], [878.0, 11989.0], [876.0, 11869.666666666666], [875.0, 8132.8], [874.0, 6967.333333333333], [873.0, 8065.466666666666], [872.0, 2519.0], [868.0, 6996.0], [867.0, 4906.090909090909], [866.0, 11973.666666666668], [865.0, 30984.0], [870.0, 16631.0], [869.0, 2515.7], [888.0, 11896.666666666668], [890.0, 16712.5], [889.0, 5331.4], [892.0, 11894.0], [893.0, 7230.666666666666], [891.0, 9491.25], [895.0, 9518.5], [894.0, 16559.0], [920.0, 3891.411764705883], [913.0, 9265.25], [927.0, 6594.0], [925.0, 4850.8], [926.0, 26742.0], [924.0, 4334.666666666667], [923.0, 9939.333333333334], [922.0, 6412.0], [921.0, 10644.0], [911.0, 3762.235294117647], [910.0, 7881.6], [909.0, 16413.0], [898.0, 5266.2], [897.0, 16546.5], [896.0, 30835.0], [899.0, 2446.0], [902.0, 5426.333333333333], [903.0, 30835.0], [901.0, 16524.0], [900.0, 13711.0], [908.0, 6354.857142857143], [906.0, 8091.6], [907.0, 5938.500000000001], [905.0, 8044.2], [917.0, 7964.8], [916.0, 16298.0], [919.0, 8468.25], [918.0, 11164.333333333334], [915.0, 7910.6], [914.0, 6322.142857142858], [912.0, 5196.200000000001], [954.0, 1259.5], [958.0, 5452.0], [959.0, 5132.5], [945.0, 5951.8], [944.0, 10486.5], [957.0, 4223.5], [956.0, 5048.2], [955.0, 11782.333333333334], [943.0, 4526.833333333333], [942.0, 20309.0], [930.0, 10080.0], [931.0, 4070.375], [929.0, 10233.333333333332], [928.0, 4061.4], [933.0, 12746.5], [934.0, 6572.6], [953.0, 9602.0], [952.0, 5071.2], [935.0, 12146.5], [932.0, 4279.90909090909], [941.0, 4436.0], [939.0, 4369.111111111111], [938.0, 12091.5], [940.0, 4676.5], [937.0, 5435.0], [936.0, 5747.166666666666], [950.0, 7554.333333333334], [951.0, 6560.333333333334], [949.0, 10762.0], [948.0, 5145.5], [947.0, 5754.5], [946.0, 6456.0], [967.0, 7568.0], [989.0, 3577.0], [988.0, 6632.0], [987.0, 6618.0], [990.0, 6250.0], [977.0, 4212.0], [976.0, 10090.0], [979.0, 9873.0], [978.0, 9934.0], [981.0, 7167.0], [980.0, 9482.0], [991.0, 3837.0], [986.0, 3353.666666666667], [985.0, 2356.0], [984.0, 3783.0], [983.0, 2258.375], [982.0, 2872.714285714286], [970.0, 4707.0], [969.0, 5020.333333333333], [968.0, 7127.0], [971.0, 10346.0], [973.0, 10213.0], [972.0, 10309.0], [966.0, 2929.714285714286], [965.0, 3335.7], [961.0, 3413.0], [962.0, 13635.0], [964.0, 13386.0], [963.0, 13611.0], [960.0, 5827.0], [975.0, 10125.0], [974.0, 3131.0], [998.0, 1662.6666666666665], [1000.0, 1827.0], [999.0, 1394.25], [997.0, 2171.5], [994.0, 1678.0], [993.0, 1342.6], [996.0, 3561.0], [995.0, 3638.0], [992.0, 3840.0], [1.0, 111407.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[490.2187999999991, 16014.074799999982]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2754.4, "minX": 1.63090398E12, "maxY": 67536.65, "series": [{"data": [[1.63090404E12, 2754.4], [1.6309041E12, 7846.866666666667], [1.63090398E12, 67536.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63090404E12, 3404.7], [1.6309041E12, 10286.4], [1.63090398E12, 20905.116666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309041E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3048.345394736843, "minX": 1.63090398E12, "maxY": 48143.957317073175, "series": [{"data": [[1.63090404E12, 48143.957317073175], [1.6309041E12, 32095.76089918246], [1.63090398E12, 3048.345394736843]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309041E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2978.7940789473714, "minX": 1.63090398E12, "maxY": 48139.412601626034, "series": [{"data": [[1.63090404E12, 48139.412601626034], [1.6309041E12, 32085.313351498648], [1.63090398E12, 2978.7940789473714]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309041E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1376.5609756097567, "minX": 1.63090398E12, "maxY": 2225.523841961854, "series": [{"data": [[1.63090404E12, 1376.5609756097567], [1.6309041E12, 2225.523841961854], [1.63090398E12, 1734.97302631579]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309041E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 83.0, "minX": 1.63090398E12, "maxY": 111498.0, "series": [{"data": [[1.63090404E12, 74269.0], [1.6309041E12, 111498.0], [1.63090398E12, 13979.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63090404E12, 71678.6], [1.6309041E12, 101036.4], [1.63090398E12, 4933.800000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63090404E12, 74026.08], [1.6309041E12, 110206.02], [1.63090398E12, 6540.340000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63090404E12, 73050.3], [1.6309041E12, 106918.0], [1.63090398E12, 5550.299999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63090404E12, 15986.0], [1.6309041E12, 83.0], [1.63090398E12, 125.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63090404E12, 52162.0], [1.6309041E12, 4037.5], [1.63090398E12, 2654.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309041E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 914.5, "minX": 1.0, "maxY": 110090.0, "series": [{"data": [[2.0, 45181.0], [32.0, 61454.5], [702.0, 2588.0], [3.0, 58099.5], [4.0, 39253.0], [70.0, 1035.5], [77.0, 5399.5], [5.0, 58147.0], [94.0, 2462.5], [6.0, 26824.0], [7.0, 34045.0], [8.0, 69399.0], [142.0, 3266.0], [9.0, 71357.5], [10.0, 75769.0], [176.0, 2113.5], [177.0, 2770.0], [179.0, 3334.0], [11.0, 46810.0], [185.0, 3759.0], [188.0, 3081.5], [13.0, 30094.5], [210.0, 4651.5], [220.0, 5522.0], [14.0, 78676.0], [15.0, 67075.0], [1.0, 21669.0], [16.0, 914.5], [269.0, 4108.0], [17.0, 95079.0], [18.0, 104039.0], [19.0, 81236.0], [20.0, 98852.0], [348.0, 2267.0], [21.0, 84799.0], [22.0, 98316.5], [23.0, 110090.0], [24.0, 102513.0], [414.0, 2471.5], [432.0, 2541.0], [30.0, 61106.0], [31.0, 107180.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 61797.5], [2.0, 85360.5], [702.0, 2371.0], [45.0, 30921.0], [46.0, 31961.0], [3.0, 88211.0], [4.0, 76810.0], [5.0, 79525.0], [7.0, 46298.0], [8.0, 69959.0], [9.0, 62599.5], [10.0, 43032.0], [11.0, 33536.0], [13.0, 30409.0], [14.0, 60157.0], [15.0, 63867.0], [17.0, 49528.0], [18.0, 89888.0], [19.0, 90532.0], [20.0, 87971.0], [21.0, 91582.0], [22.0, 98722.5], [23.0, 109702.0], [24.0, 102040.0], [30.0, 60767.0], [31.0, 107442.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 702.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 110090.0, "series": [{"data": [[2.0, 45181.0], [32.0, 61454.5], [702.0, 2556.0], [3.0, 58069.0], [4.0, 39253.0], [70.0, 1035.5], [77.0, 5399.5], [5.0, 58147.0], [94.0, 2462.5], [6.0, 26824.0], [7.0, 34045.0], [8.0, 69399.0], [142.0, 3266.0], [9.0, 71357.5], [10.0, 75769.0], [176.0, 2113.5], [177.0, 2769.0], [179.0, 3334.0], [11.0, 46810.0], [185.0, 3752.0], [188.0, 3081.0], [13.0, 30094.5], [210.0, 4650.0], [220.0, 5519.5], [14.0, 78676.0], [15.0, 67075.0], [1.0, 21669.0], [16.0, 914.5], [269.0, 4107.0], [17.0, 95079.0], [18.0, 104039.0], [19.0, 81236.0], [20.0, 98852.0], [348.0, 2263.0], [21.0, 84799.0], [22.0, 98316.5], [23.0, 110090.0], [24.0, 102513.0], [414.0, 2468.0], [432.0, 2519.5], [30.0, 61106.0], [31.0, 107180.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 61797.5], [2.0, 85360.0], [702.0, 0.0], [45.0, 30915.0], [46.0, 31943.5], [3.0, 88210.5], [4.0, 76810.0], [5.0, 79525.0], [7.0, 46298.0], [8.0, 69959.0], [9.0, 62599.0], [10.0, 43032.0], [11.0, 33530.5], [13.0, 30409.0], [14.0, 60157.0], [15.0, 63867.0], [17.0, 49527.5], [18.0, 89888.0], [19.0, 90531.0], [20.0, 87971.0], [21.0, 91582.0], [22.0, 98722.0], [23.0, 109702.0], [24.0, 102040.0], [30.0, 60766.0], [31.0, 107442.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 702.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.63090398E12, "maxY": 66.66666666666667, "series": [{"data": [[1.6309041E12, 16.666666666666668], [1.63090398E12, 66.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309041E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1666666666666667, "minX": 1.63090398E12, "maxY": 49.28333333333333, "series": [{"data": [[1.63090404E12, 4.35], [1.6309041E12, 23.3], [1.63090398E12, 49.28333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63090404E12, 3.85], [1.6309041E12, 1.1666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.63090398E12, 1.3833333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6309041E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1666666666666667, "minX": 1.63090398E12, "maxY": 49.28333333333333, "series": [{"data": [[1.63090404E12, 3.85], [1.6309041E12, 1.1666666666666667], [1.63090398E12, 1.3833333333333333]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63090404E12, 4.35], [1.6309041E12, 23.3], [1.63090398E12, 49.28333333333333]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309041E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1666666666666667, "minX": 1.63090398E12, "maxY": 49.28333333333333, "series": [{"data": [[1.63090404E12, 4.35], [1.6309041E12, 23.3], [1.63090398E12, 49.28333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63090404E12, 3.85], [1.6309041E12, 1.1666666666666667], [1.63090398E12, 1.3833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6309041E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

