/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 72660.0, "series": [{"data": [[0.0, 18.0], [0.1, 19.0], [0.2, 19.0], [0.3, 19.0], [0.4, 19.0], [0.5, 20.0], [0.6, 20.0], [0.7, 20.0], [0.8, 20.0], [0.9, 20.0], [1.0, 20.0], [1.1, 20.0], [1.2, 21.0], [1.3, 21.0], [1.4, 21.0], [1.5, 21.0], [1.6, 21.0], [1.7, 21.0], [1.8, 21.0], [1.9, 21.0], [2.0, 21.0], [2.1, 21.0], [2.2, 21.0], [2.3, 21.0], [2.4, 21.0], [2.5, 21.0], [2.6, 22.0], [2.7, 22.0], [2.8, 22.0], [2.9, 22.0], [3.0, 22.0], [3.1, 22.0], [3.2, 22.0], [3.3, 22.0], [3.4, 22.0], [3.5, 22.0], [3.6, 22.0], [3.7, 22.0], [3.8, 22.0], [3.9, 23.0], [4.0, 23.0], [4.1, 23.0], [4.2, 23.0], [4.3, 23.0], [4.4, 23.0], [4.5, 23.0], [4.6, 23.0], [4.7, 23.0], [4.8, 23.0], [4.9, 23.0], [5.0, 23.0], [5.1, 23.0], [5.2, 23.0], [5.3, 23.0], [5.4, 24.0], [5.5, 24.0], [5.6, 24.0], [5.7, 24.0], [5.8, 24.0], [5.9, 24.0], [6.0, 24.0], [6.1, 24.0], [6.2, 24.0], [6.3, 24.0], [6.4, 24.0], [6.5, 24.0], [6.6, 24.0], [6.7, 24.0], [6.8, 24.0], [6.9, 25.0], [7.0, 25.0], [7.1, 25.0], [7.2, 25.0], [7.3, 25.0], [7.4, 25.0], [7.5, 25.0], [7.6, 25.0], [7.7, 25.0], [7.8, 25.0], [7.9, 25.0], [8.0, 26.0], [8.1, 26.0], [8.2, 26.0], [8.3, 26.0], [8.4, 26.0], [8.5, 26.0], [8.6, 26.0], [8.7, 26.0], [8.8, 27.0], [8.9, 27.0], [9.0, 27.0], [9.1, 27.0], [9.2, 27.0], [9.3, 27.0], [9.4, 27.0], [9.5, 27.0], [9.6, 27.0], [9.7, 27.0], [9.8, 27.0], [9.9, 27.0], [10.0, 28.0], [10.1, 28.0], [10.2, 28.0], [10.3, 28.0], [10.4, 28.0], [10.5, 28.0], [10.6, 28.0], [10.7, 28.0], [10.8, 28.0], [10.9, 28.0], [11.0, 28.0], [11.1, 29.0], [11.2, 29.0], [11.3, 29.0], [11.4, 29.0], [11.5, 29.0], [11.6, 29.0], [11.7, 29.0], [11.8, 29.0], [11.9, 30.0], [12.0, 30.0], [12.1, 30.0], [12.2, 30.0], [12.3, 30.0], [12.4, 30.0], [12.5, 30.0], [12.6, 30.0], [12.7, 31.0], [12.8, 31.0], [12.9, 31.0], [13.0, 31.0], [13.1, 31.0], [13.2, 31.0], [13.3, 31.0], [13.4, 32.0], [13.5, 32.0], [13.6, 32.0], [13.7, 32.0], [13.8, 32.0], [13.9, 32.0], [14.0, 32.0], [14.1, 32.0], [14.2, 33.0], [14.3, 33.0], [14.4, 33.0], [14.5, 33.0], [14.6, 34.0], [14.7, 34.0], [14.8, 34.0], [14.9, 34.0], [15.0, 34.0], [15.1, 35.0], [15.2, 35.0], [15.3, 35.0], [15.4, 35.0], [15.5, 36.0], [15.6, 36.0], [15.7, 36.0], [15.8, 36.0], [15.9, 36.0], [16.0, 36.0], [16.1, 36.0], [16.2, 37.0], [16.3, 37.0], [16.4, 37.0], [16.5, 37.0], [16.6, 37.0], [16.7, 37.0], [16.8, 38.0], [16.9, 38.0], [17.0, 39.0], [17.1, 39.0], [17.2, 39.0], [17.3, 39.0], [17.4, 39.0], [17.5, 40.0], [17.6, 40.0], [17.7, 40.0], [17.8, 40.0], [17.9, 40.0], [18.0, 41.0], [18.1, 41.0], [18.2, 41.0], [18.3, 41.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 43.0], [18.9, 43.0], [19.0, 43.0], [19.1, 43.0], [19.2, 44.0], [19.3, 44.0], [19.4, 44.0], [19.5, 45.0], [19.6, 45.0], [19.7, 45.0], [19.8, 46.0], [19.9, 46.0], [20.0, 46.0], [20.1, 46.0], [20.2, 46.0], [20.3, 46.0], [20.4, 47.0], [20.5, 47.0], [20.6, 47.0], [20.7, 47.0], [20.8, 48.0], [20.9, 48.0], [21.0, 48.0], [21.1, 48.0], [21.2, 49.0], [21.3, 49.0], [21.4, 49.0], [21.5, 49.0], [21.6, 50.0], [21.7, 50.0], [21.8, 50.0], [21.9, 50.0], [22.0, 50.0], [22.1, 51.0], [22.2, 51.0], [22.3, 51.0], [22.4, 51.0], [22.5, 51.0], [22.6, 52.0], [22.7, 52.0], [22.8, 52.0], [22.9, 53.0], [23.0, 53.0], [23.1, 53.0], [23.2, 53.0], [23.3, 53.0], [23.4, 54.0], [23.5, 54.0], [23.6, 54.0], [23.7, 54.0], [23.8, 55.0], [23.9, 55.0], [24.0, 55.0], [24.1, 56.0], [24.2, 56.0], [24.3, 56.0], [24.4, 56.0], [24.5, 57.0], [24.6, 58.0], [24.7, 58.0], [24.8, 58.0], [24.9, 58.0], [25.0, 59.0], [25.1, 59.0], [25.2, 60.0], [25.3, 60.0], [25.4, 61.0], [25.5, 61.0], [25.6, 62.0], [25.7, 62.0], [25.8, 62.0], [25.9, 63.0], [26.0, 63.0], [26.1, 64.0], [26.2, 64.0], [26.3, 64.0], [26.4, 65.0], [26.5, 65.0], [26.6, 65.0], [26.7, 65.0], [26.8, 66.0], [26.9, 66.0], [27.0, 66.0], [27.1, 66.0], [27.2, 67.0], [27.3, 67.0], [27.4, 67.0], [27.5, 67.0], [27.6, 68.0], [27.7, 68.0], [27.8, 68.0], [27.9, 69.0], [28.0, 69.0], [28.1, 69.0], [28.2, 70.0], [28.3, 70.0], [28.4, 70.0], [28.5, 71.0], [28.6, 72.0], [28.7, 72.0], [28.8, 73.0], [28.9, 73.0], [29.0, 73.0], [29.1, 73.0], [29.2, 73.0], [29.3, 74.0], [29.4, 74.0], [29.5, 74.0], [29.6, 75.0], [29.7, 75.0], [29.8, 76.0], [29.9, 76.0], [30.0, 76.0], [30.1, 77.0], [30.2, 77.0], [30.3, 77.0], [30.4, 78.0], [30.5, 78.0], [30.6, 78.0], [30.7, 78.0], [30.8, 79.0], [30.9, 80.0], [31.0, 80.0], [31.1, 80.0], [31.2, 81.0], [31.3, 81.0], [31.4, 81.0], [31.5, 82.0], [31.6, 82.0], [31.7, 83.0], [31.8, 83.0], [31.9, 84.0], [32.0, 84.0], [32.1, 85.0], [32.2, 85.0], [32.3, 86.0], [32.4, 86.0], [32.5, 87.0], [32.6, 87.0], [32.7, 88.0], [32.8, 88.0], [32.9, 89.0], [33.0, 89.0], [33.1, 89.0], [33.2, 90.0], [33.3, 90.0], [33.4, 91.0], [33.5, 91.0], [33.6, 92.0], [33.7, 93.0], [33.8, 94.0], [33.9, 94.0], [34.0, 95.0], [34.1, 95.0], [34.2, 96.0], [34.3, 97.0], [34.4, 98.0], [34.5, 98.0], [34.6, 98.0], [34.7, 99.0], [34.8, 100.0], [34.9, 101.0], [35.0, 101.0], [35.1, 102.0], [35.2, 105.0], [35.3, 105.0], [35.4, 107.0], [35.5, 107.0], [35.6, 108.0], [35.7, 109.0], [35.8, 111.0], [35.9, 112.0], [36.0, 112.0], [36.1, 113.0], [36.2, 114.0], [36.3, 115.0], [36.4, 115.0], [36.5, 117.0], [36.6, 118.0], [36.7, 118.0], [36.8, 119.0], [36.9, 119.0], [37.0, 120.0], [37.1, 122.0], [37.2, 123.0], [37.3, 124.0], [37.4, 125.0], [37.5, 126.0], [37.6, 127.0], [37.7, 128.0], [37.8, 129.0], [37.9, 129.0], [38.0, 132.0], [38.1, 134.0], [38.2, 135.0], [38.3, 135.0], [38.4, 137.0], [38.5, 137.0], [38.6, 140.0], [38.7, 141.0], [38.8, 144.0], [38.9, 147.0], [39.0, 152.0], [39.1, 154.0], [39.2, 155.0], [39.3, 157.0], [39.4, 159.0], [39.5, 160.0], [39.6, 161.0], [39.7, 165.0], [39.8, 171.0], [39.9, 173.0], [40.0, 184.0], [40.1, 186.0], [40.2, 189.0], [40.3, 192.0], [40.4, 198.0], [40.5, 200.0], [40.6, 205.0], [40.7, 208.0], [40.8, 210.0], [40.9, 218.0], [41.0, 222.0], [41.1, 224.0], [41.2, 228.0], [41.3, 236.0], [41.4, 250.0], [41.5, 251.0], [41.6, 256.0], [41.7, 261.0], [41.8, 267.0], [41.9, 273.0], [42.0, 278.0], [42.1, 278.0], [42.2, 286.0], [42.3, 293.0], [42.4, 298.0], [42.5, 302.0], [42.6, 305.0], [42.7, 318.0], [42.8, 327.0], [42.9, 338.0], [43.0, 342.0], [43.1, 344.0], [43.2, 350.0], [43.3, 354.0], [43.4, 360.0], [43.5, 362.0], [43.6, 364.0], [43.7, 370.0], [43.8, 374.0], [43.9, 377.0], [44.0, 380.0], [44.1, 385.0], [44.2, 394.0], [44.3, 398.0], [44.4, 403.0], [44.5, 403.0], [44.6, 406.0], [44.7, 407.0], [44.8, 411.0], [44.9, 412.0], [45.0, 415.0], [45.1, 424.0], [45.2, 426.0], [45.3, 427.0], [45.4, 432.0], [45.5, 434.0], [45.6, 439.0], [45.7, 441.0], [45.8, 444.0], [45.9, 444.0], [46.0, 447.0], [46.1, 457.0], [46.2, 462.0], [46.3, 463.0], [46.4, 466.0], [46.5, 471.0], [46.6, 474.0], [46.7, 477.0], [46.8, 486.0], [46.9, 489.0], [47.0, 492.0], [47.1, 492.0], [47.2, 496.0], [47.3, 501.0], [47.4, 510.0], [47.5, 513.0], [47.6, 522.0], [47.7, 525.0], [47.8, 540.0], [47.9, 543.0], [48.0, 545.0], [48.1, 547.0], [48.2, 550.0], [48.3, 550.0], [48.4, 553.0], [48.5, 555.0], [48.6, 559.0], [48.7, 566.0], [48.8, 575.0], [48.9, 577.0], [49.0, 582.0], [49.1, 586.0], [49.2, 591.0], [49.3, 591.0], [49.4, 597.0], [49.5, 600.0], [49.6, 603.0], [49.7, 605.0], [49.8, 608.0], [49.9, 609.0], [50.0, 610.0], [50.1, 610.0], [50.2, 612.0], [50.3, 614.0], [50.4, 615.0], [50.5, 617.0], [50.6, 624.0], [50.7, 624.0], [50.8, 624.0], [50.9, 626.0], [51.0, 629.0], [51.1, 630.0], [51.2, 633.0], [51.3, 634.0], [51.4, 636.0], [51.5, 637.0], [51.6, 641.0], [51.7, 644.0], [51.8, 650.0], [51.9, 652.0], [52.0, 659.0], [52.1, 663.0], [52.2, 669.0], [52.3, 671.0], [52.4, 676.0], [52.5, 677.0], [52.6, 684.0], [52.7, 685.0], [52.8, 686.0], [52.9, 688.0], [53.0, 690.0], [53.1, 692.0], [53.2, 704.0], [53.3, 709.0], [53.4, 711.0], [53.5, 713.0], [53.6, 714.0], [53.7, 715.0], [53.8, 719.0], [53.9, 719.0], [54.0, 721.0], [54.1, 722.0], [54.2, 725.0], [54.3, 727.0], [54.4, 728.0], [54.5, 728.0], [54.6, 729.0], [54.7, 732.0], [54.8, 735.0], [54.9, 740.0], [55.0, 743.0], [55.1, 745.0], [55.2, 748.0], [55.3, 749.0], [55.4, 752.0], [55.5, 752.0], [55.6, 764.0], [55.7, 769.0], [55.8, 783.0], [55.9, 785.0], [56.0, 790.0], [56.1, 793.0], [56.2, 802.0], [56.3, 804.0], [56.4, 807.0], [56.5, 810.0], [56.6, 812.0], [56.7, 816.0], [56.8, 824.0], [56.9, 829.0], [57.0, 836.0], [57.1, 839.0], [57.2, 843.0], [57.3, 844.0], [57.4, 849.0], [57.5, 852.0], [57.6, 855.0], [57.7, 855.0], [57.8, 860.0], [57.9, 863.0], [58.0, 865.0], [58.1, 867.0], [58.2, 872.0], [58.3, 873.0], [58.4, 875.0], [58.5, 877.0], [58.6, 881.0], [58.7, 884.0], [58.8, 885.0], [58.9, 887.0], [59.0, 892.0], [59.1, 896.0], [59.2, 901.0], [59.3, 903.0], [59.4, 909.0], [59.5, 911.0], [59.6, 920.0], [59.7, 921.0], [59.8, 929.0], [59.9, 930.0], [60.0, 937.0], [60.1, 938.0], [60.2, 940.0], [60.3, 943.0], [60.4, 947.0], [60.5, 947.0], [60.6, 950.0], [60.7, 952.0], [60.8, 954.0], [60.9, 961.0], [61.0, 965.0], [61.1, 966.0], [61.2, 968.0], [61.3, 970.0], [61.4, 972.0], [61.5, 974.0], [61.6, 979.0], [61.7, 980.0], [61.8, 982.0], [61.9, 987.0], [62.0, 990.0], [62.1, 995.0], [62.2, 1006.0], [62.3, 1008.0], [62.4, 1011.0], [62.5, 1014.0], [62.6, 1016.0], [62.7, 1021.0], [62.8, 1027.0], [62.9, 1030.0], [63.0, 1037.0], [63.1, 1038.0], [63.2, 1043.0], [63.3, 1044.0], [63.4, 1054.0], [63.5, 1061.0], [63.6, 1079.0], [63.7, 1080.0], [63.8, 1088.0], [63.9, 1092.0], [64.0, 1103.0], [64.1, 1108.0], [64.2, 1118.0], [64.3, 1120.0], [64.4, 1126.0], [64.5, 1128.0], [64.6, 1136.0], [64.7, 1137.0], [64.8, 1151.0], [64.9, 1159.0], [65.0, 1168.0], [65.1, 1177.0], [65.2, 1182.0], [65.3, 1192.0], [65.4, 1206.0], [65.5, 1207.0], [65.6, 1220.0], [65.7, 1233.0], [65.8, 1237.0], [65.9, 1250.0], [66.0, 1270.0], [66.1, 1281.0], [66.2, 1293.0], [66.3, 1294.0], [66.4, 1315.0], [66.5, 1341.0], [66.6, 1350.0], [66.7, 1357.0], [66.8, 1370.0], [66.9, 1372.0], [67.0, 1396.0], [67.1, 1406.0], [67.2, 1418.0], [67.3, 1449.0], [67.4, 1492.0], [67.5, 1514.0], [67.6, 1544.0], [67.7, 1547.0], [67.8, 1601.0], [67.9, 1639.0], [68.0, 1664.0], [68.1, 1689.0], [68.2, 1706.0], [68.3, 1715.0], [68.4, 1725.0], [68.5, 1730.0], [68.6, 1739.0], [68.7, 1741.0], [68.8, 1767.0], [68.9, 1777.0], [69.0, 1806.0], [69.1, 1821.0], [69.2, 1826.0], [69.3, 1839.0], [69.4, 1852.0], [69.5, 1868.0], [69.6, 1876.0], [69.7, 1882.0], [69.8, 1892.0], [69.9, 1918.0], [70.0, 1919.0], [70.1, 1966.0], [70.2, 1969.0], [70.3, 1974.0], [70.4, 1985.0], [70.5, 1989.0], [70.6, 1997.0], [70.7, 2005.0], [70.8, 2011.0], [70.9, 2043.0], [71.0, 2069.0], [71.1, 2076.0], [71.2, 2080.0], [71.3, 2087.0], [71.4, 2093.0], [71.5, 2135.0], [71.6, 2142.0], [71.7, 2151.0], [71.8, 2158.0], [71.9, 2190.0], [72.0, 2199.0], [72.1, 2228.0], [72.2, 2237.0], [72.3, 2253.0], [72.4, 2258.0], [72.5, 2269.0], [72.6, 2272.0], [72.7, 2278.0], [72.8, 2280.0], [72.9, 2289.0], [73.0, 2297.0], [73.1, 2304.0], [73.2, 2313.0], [73.3, 2324.0], [73.4, 2335.0], [73.5, 2365.0], [73.6, 2368.0], [73.7, 2383.0], [73.8, 2395.0], [73.9, 2400.0], [74.0, 2419.0], [74.1, 2432.0], [74.2, 2454.0], [74.3, 2491.0], [74.4, 2501.0], [74.5, 2518.0], [74.6, 2527.0], [74.7, 2553.0], [74.8, 2564.0], [74.9, 2573.0], [75.0, 2579.0], [75.1, 2586.0], [75.2, 2609.0], [75.3, 2616.0], [75.4, 2619.0], [75.5, 2632.0], [75.6, 2634.0], [75.7, 2641.0], [75.8, 2651.0], [75.9, 2665.0], [76.0, 2667.0], [76.1, 2700.0], [76.2, 2715.0], [76.3, 2725.0], [76.4, 2732.0], [76.5, 2757.0], [76.6, 2767.0], [76.7, 2785.0], [76.8, 2795.0], [76.9, 2807.0], [77.0, 2809.0], [77.1, 2812.0], [77.2, 2822.0], [77.3, 2842.0], [77.4, 2853.0], [77.5, 2867.0], [77.6, 2876.0], [77.7, 2886.0], [77.8, 2919.0], [77.9, 2944.0], [78.0, 2947.0], [78.1, 2967.0], [78.2, 2990.0], [78.3, 3040.0], [78.4, 3058.0], [78.5, 3077.0], [78.6, 3081.0], [78.7, 3095.0], [78.8, 3129.0], [78.9, 3155.0], [79.0, 3178.0], [79.1, 3226.0], [79.2, 3330.0], [79.3, 3374.0], [79.4, 3401.0], [79.5, 3465.0], [79.6, 3547.0], [79.7, 3603.0], [79.8, 3689.0], [79.9, 3772.0], [80.0, 3784.0], [80.1, 4100.0], [80.2, 4304.0], [80.3, 4364.0], [80.4, 4440.0], [80.5, 8022.0], [80.6, 8387.0], [80.7, 8557.0], [80.8, 8766.0], [80.9, 11983.0], [81.0, 12245.0], [81.1, 12597.0], [81.2, 13113.0], [81.3, 15640.0], [81.4, 15822.0], [81.5, 16225.0], [81.6, 16735.0], [81.7, 18461.0], [81.8, 18847.0], [81.9, 19194.0], [82.0, 20225.0], [82.1, 22010.0], [82.2, 22125.0], [82.3, 22259.0], [82.4, 23514.0], [82.5, 24840.0], [82.6, 25327.0], [82.7, 25646.0], [82.8, 26616.0], [82.9, 28029.0], [83.0, 28365.0], [83.1, 28655.0], [83.2, 29577.0], [83.3, 30096.0], [83.4, 30149.0], [83.5, 30213.0], [83.6, 30226.0], [83.7, 30278.0], [83.8, 30293.0], [83.9, 30325.0], [84.0, 30340.0], [84.1, 30389.0], [84.2, 30398.0], [84.3, 30404.0], [84.4, 30404.0], [84.5, 30419.0], [84.6, 30427.0], [84.7, 30432.0], [84.8, 30438.0], [84.9, 30449.0], [85.0, 30453.0], [85.1, 30462.0], [85.2, 30468.0], [85.3, 30475.0], [85.4, 30478.0], [85.5, 30484.0], [85.6, 30487.0], [85.7, 30491.0], [85.8, 30498.0], [85.9, 30507.0], [86.0, 30512.0], [86.1, 30521.0], [86.2, 30524.0], [86.3, 30530.0], [86.4, 30547.0], [86.5, 30560.0], [86.6, 30561.0], [86.7, 30565.0], [86.8, 30570.0], [86.9, 30580.0], [87.0, 30581.0], [87.1, 30591.0], [87.2, 30595.0], [87.3, 30606.0], [87.4, 30613.0], [87.5, 30621.0], [87.6, 30633.0], [87.7, 30712.0], [87.8, 31606.0], [87.9, 32144.0], [88.0, 32468.0], [88.1, 33013.0], [88.2, 33516.0], [88.3, 33942.0], [88.4, 34711.0], [88.5, 35371.0], [88.6, 35589.0], [88.7, 36430.0], [88.8, 36621.0], [88.9, 37865.0], [89.0, 37924.0], [89.1, 38383.0], [89.2, 38519.0], [89.3, 39411.0], [89.4, 40014.0], [89.5, 40756.0], [89.6, 41437.0], [89.7, 41665.0], [89.8, 42062.0], [89.9, 42198.0], [90.0, 42692.0], [90.1, 43641.0], [90.2, 44265.0], [90.3, 44534.0], [90.4, 44600.0], [90.5, 44862.0], [90.6, 45181.0], [90.7, 45434.0], [90.8, 46331.0], [90.9, 46393.0], [91.0, 46686.0], [91.1, 47514.0], [91.2, 47668.0], [91.3, 48050.0], [91.4, 48152.0], [91.5, 48364.0], [91.6, 48392.0], [91.7, 49174.0], [91.8, 49331.0], [91.9, 50277.0], [92.0, 50449.0], [92.1, 50706.0], [92.2, 50799.0], [92.3, 51617.0], [92.4, 51752.0], [92.5, 52406.0], [92.6, 52978.0], [92.7, 53513.0], [92.8, 54052.0], [92.9, 54246.0], [93.0, 54802.0], [93.1, 55112.0], [93.2, 55180.0], [93.3, 55585.0], [93.4, 55900.0], [93.5, 56497.0], [93.6, 56710.0], [93.7, 57098.0], [93.8, 58017.0], [93.9, 59013.0], [94.0, 59190.0], [94.1, 59391.0], [94.2, 59398.0], [94.3, 59584.0], [94.4, 59720.0], [94.5, 59753.0], [94.6, 59779.0], [94.7, 59882.0], [94.8, 59896.0], [94.9, 59914.0], [95.0, 59916.0], [95.1, 59922.0], [95.2, 59927.0], [95.3, 59930.0], [95.4, 59931.0], [95.5, 59933.0], [95.6, 59939.0], [95.7, 59943.0], [95.8, 59945.0], [95.9, 59947.0], [96.0, 59955.0], [96.1, 59965.0], [96.2, 59972.0], [96.3, 59976.0], [96.4, 59978.0], [96.5, 59987.0], [96.6, 59991.0], [96.7, 59999.0], [96.8, 60003.0], [96.9, 60033.0], [97.0, 60035.0], [97.1, 60191.0], [97.2, 61505.0], [97.3, 61602.0], [97.4, 61738.0], [97.5, 62333.0], [97.6, 62635.0], [97.7, 62942.0], [97.8, 63107.0], [97.9, 63663.0], [98.0, 64553.0], [98.1, 64668.0], [98.2, 64943.0], [98.3, 65321.0], [98.4, 66128.0], [98.5, 66681.0], [98.6, 66713.0], [98.7, 67313.0], [98.8, 67356.0], [98.9, 68057.0], [99.0, 68157.0], [99.1, 68232.0], [99.2, 68389.0], [99.3, 69822.0], [99.4, 70191.0], [99.5, 70953.0], [99.6, 71017.0], [99.7, 71448.0], [99.8, 72475.0], [99.9, 72603.0], [100.0, 72660.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 869.0, "series": [{"data": [[0.0, 869.0], [66700.0, 3.0], [68300.0, 1.0], [70700.0, 1.0], [100.0, 143.0], [33300.0, 1.0], [35300.0, 1.0], [38500.0, 1.0], [39300.0, 1.0], [41300.0, 1.0], [42100.0, 3.0], [42500.0, 1.0], [44500.0, 3.0], [44900.0, 1.0], [45300.0, 1.0], [48500.0, 1.0], [48100.0, 2.0], [49300.0, 1.0], [50500.0, 1.0], [50900.0, 1.0], [200.0, 49.0], [51700.0, 1.0], [52100.0, 1.0], [52900.0, 1.0], [53300.0, 1.0], [54100.0, 1.0], [54900.0, 1.0], [55300.0, 1.0], [56100.0, 2.0], [56500.0, 1.0], [59300.0, 4.0], [59700.0, 8.0], [60100.0, 1.0], [61700.0, 2.0], [62500.0, 1.0], [62900.0, 2.0], [63300.0, 1.0], [64500.0, 1.0], [64900.0, 1.0], [65300.0, 3.0], [66600.0, 1.0], [68200.0, 4.0], [69800.0, 2.0], [71400.0, 1.0], [300.0, 48.0], [400.0, 72.0], [500.0, 55.0], [600.0, 94.0], [700.0, 75.0], [800.0, 74.0], [900.0, 75.0], [1000.0, 46.0], [1100.0, 34.0], [1200.0, 24.0], [1300.0, 19.0], [1400.0, 9.0], [1500.0, 9.0], [1600.0, 8.0], [1700.0, 20.0], [1800.0, 22.0], [1900.0, 20.0], [2000.0, 20.0], [2100.0, 15.0], [2200.0, 26.0], [2300.0, 21.0], [2400.0, 11.0], [2500.0, 20.0], [2600.0, 24.0], [2700.0, 18.0], [2800.0, 24.0], [2900.0, 12.0], [3000.0, 12.0], [3100.0, 7.0], [3200.0, 4.0], [3300.0, 5.0], [3400.0, 5.0], [3500.0, 3.0], [3600.0, 3.0], [3700.0, 5.0], [4000.0, 2.0], [4100.0, 1.0], [4200.0, 1.0], [4300.0, 5.0], [67300.0, 3.0], [68100.0, 1.0], [68900.0, 1.0], [4400.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8300.0, 2.0], [8400.0, 1.0], [8500.0, 2.0], [8600.0, 1.0], [8700.0, 1.0], [10900.0, 1.0], [11400.0, 1.0], [11900.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12300.0, 1.0], [12500.0, 2.0], [12800.0, 1.0], [13100.0, 1.0], [14600.0, 1.0], [15400.0, 1.0], [15600.0, 1.0], [15700.0, 1.0], [15800.0, 2.0], [16200.0, 3.0], [17800.0, 1.0], [18400.0, 1.0], [18800.0, 2.0], [19000.0, 1.0], [20200.0, 1.0], [20600.0, 1.0], [22000.0, 2.0], [22200.0, 2.0], [25200.0, 1.0], [24800.0, 1.0], [25600.0, 2.0], [26600.0, 1.0], [28000.0, 1.0], [28600.0, 1.0], [28800.0, 1.0], [30000.0, 4.0], [30200.0, 9.0], [30400.0, 41.0], [30600.0, 12.0], [31600.0, 1.0], [32400.0, 2.0], [33600.0, 2.0], [35200.0, 1.0], [36000.0, 1.0], [36400.0, 2.0], [37200.0, 1.0], [38400.0, 1.0], [40000.0, 2.0], [39600.0, 1.0], [41600.0, 3.0], [42000.0, 2.0], [43200.0, 1.0], [43600.0, 1.0], [44800.0, 1.0], [46400.0, 1.0], [47200.0, 1.0], [47600.0, 2.0], [48000.0, 1.0], [49200.0, 1.0], [50400.0, 1.0], [51600.0, 2.0], [52400.0, 2.0], [54000.0, 1.0], [54800.0, 2.0], [55200.0, 1.0], [56400.0, 1.0], [57200.0, 1.0], [58000.0, 2.0], [59200.0, 1.0], [59600.0, 1.0], [60000.0, 9.0], [61600.0, 1.0], [62000.0, 2.0], [63600.0, 1.0], [64800.0, 1.0], [68000.0, 3.0], [71200.0, 1.0], [72000.0, 1.0], [67900.0, 1.0], [69500.0, 1.0], [33500.0, 1.0], [33900.0, 1.0], [34300.0, 1.0], [34700.0, 2.0], [35500.0, 2.0], [37500.0, 1.0], [38300.0, 2.0], [37900.0, 1.0], [38700.0, 1.0], [40700.0, 2.0], [43500.0, 1.0], [44300.0, 1.0], [45100.0, 1.0], [46300.0, 4.0], [46700.0, 1.0], [47500.0, 1.0], [47900.0, 1.0], [48300.0, 6.0], [49100.0, 1.0], [49500.0, 1.0], [50300.0, 1.0], [50700.0, 3.0], [51100.0, 1.0], [51900.0, 1.0], [53500.0, 2.0], [54700.0, 1.0], [55100.0, 3.0], [55500.0, 1.0], [55900.0, 1.0], [56700.0, 1.0], [58300.0, 1.0], [59100.0, 1.0], [59500.0, 2.0], [59900.0, 48.0], [61500.0, 3.0], [62300.0, 1.0], [62700.0, 1.0], [63100.0, 2.0], [64300.0, 1.0], [65100.0, 1.0], [66200.0, 1.0], [67000.0, 1.0], [71000.0, 2.0], [72600.0, 3.0], [66100.0, 2.0], [70100.0, 1.0], [70900.0, 3.0], [72500.0, 2.0], [16700.0, 1.0], [17900.0, 1.0], [18900.0, 1.0], [19100.0, 1.0], [19900.0, 1.0], [21500.0, 1.0], [22100.0, 2.0], [22700.0, 1.0], [23500.0, 1.0], [24500.0, 1.0], [24700.0, 1.0], [25300.0, 2.0], [25900.0, 1.0], [27900.0, 2.0], [28300.0, 1.0], [28500.0, 2.0], [28100.0, 1.0], [29500.0, 1.0], [30300.0, 9.0], [30100.0, 3.0], [30700.0, 1.0], [30500.0, 34.0], [30900.0, 1.0], [31700.0, 1.0], [32100.0, 1.0], [31900.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [33000.0, 1.0], [35800.0, 1.0], [36600.0, 1.0], [37800.0, 2.0], [38200.0, 1.0], [39400.0, 1.0], [41400.0, 1.0], [42600.0, 1.0], [44600.0, 3.0], [44200.0, 2.0], [45400.0, 2.0], [45800.0, 1.0], [46600.0, 1.0], [47800.0, 1.0], [49400.0, 1.0], [50200.0, 1.0], [50600.0, 1.0], [53000.0, 1.0], [54200.0, 2.0], [55800.0, 1.0], [57000.0, 3.0], [59000.0, 2.0], [59400.0, 1.0], [59800.0, 3.0], [60600.0, 1.0], [62600.0, 2.0], [64600.0, 3.0], [72400.0, 1.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 72600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 225.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1181.0, "series": [{"data": [[0.0, 1181.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 505.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 589.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 225.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 31.049999999999986, "minX": 1.63089576E12, "maxY": 330.0263929618767, "series": [{"data": [[1.63089576E12, 221.24489795918356], [1.63089582E12, 79.48407643312106]], "isOverall": false, "label": "addFavorite", "isController": false}, {"data": [[1.63089576E12, 254.25400000000016]], "isOverall": false, "label": "listFavoriteByPage", "isController": false}, {"data": [[1.63089582E12, 38.67599999999997]], "isOverall": false, "label": "deleteFavorite", "isController": false}, {"data": [[1.63089582E12, 330.0263929618767], [1.63089588E12, 80.32704402515719]], "isOverall": false, "label": "deleteAllFavorite", "isController": false}, {"data": [[1.63089588E12, 31.049999999999986]], "isOverall": false, "label": "checkFavorite", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089588E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 204.14285714285714, "minX": 1.0, "maxY": 59978.0, "series": [{"data": [[2.0, 12797.166666666666], [3.0, 9359.75], [4.0, 9513.499999999998], [5.0, 8531.666666666666], [6.0, 4977.588235294118], [7.0, 9036.125], [8.0, 4431.166666666666], [9.0, 7936.333333333333], [10.0, 4757.933333333333], [11.0, 1683.9199999999994], [12.0, 1298.0847457627117], [13.0, 1544.8400000000001], [14.0, 1580.4166666666665], [15.0, 3103.4166666666656], [16.0, 2090.2162162162163], [17.0, 4630.312499999999], [18.0, 3401.3809523809523], [19.0, 3372.4782608695637], [20.0, 5419.846153846154], [21.0, 3742.3], [22.0, 2652.892857142858], [23.0, 4540.062499999999], [24.0, 5187.571428571429], [25.0, 14228.4], [26.0, 5163.357142857142], [27.0, 4429.1875], [28.0, 4781.375], [29.0, 7252.1], [30.0, 4539.125000000001], [31.0, 7172.5], [33.0, 11951.5], [32.0, 7328.799999999999], [35.0, 4969.133333333333], [34.0, 5726.916666666666], [37.0, 11803.5], [36.0, 8880.875], [39.0, 658.4999999999999], [38.0, 5944.999999999999], [41.0, 8285.92], [40.0, 247.6], [43.0, 3453.949999999999], [42.0, 5813.249999999999], [44.0, 3550.2000000000007], [45.0, 3751.166666666666], [47.0, 3529.55], [46.0, 3039.875000000001], [48.0, 2800.68], [49.0, 3481.7894736842104], [51.0, 4938.071428571429], [50.0, 5244.357142857143], [53.0, 16591.75], [52.0, 5439.333333333332], [55.0, 4256.1875], [54.0, 5170.285714285714], [57.0, 1987.0294117647059], [56.0, 9444.142857142857], [59.0, 9563.857142857143], [58.0, 4534.266666666666], [61.0, 4002.35294117647], [60.0, 5092.923076923077], [63.0, 5675.083333333334], [62.0, 7618.222222222223], [67.0, 4760.5714285714275], [66.0, 6085.818181818181], [65.0, 13173.2], [64.0, 3813.8888888888887], [71.0, 6726.099999999999], [70.0, 4435.125000000001], [69.0, 7865.0], [68.0, 5735.363636363637], [75.0, 695.8333333333333], [74.0, 9247.42857142857], [73.0, 4748.928571428572], [72.0, 21156.666666666668], [78.0, 843.0], [77.0, 844.1250000000001], [79.0, 30436.0], [76.0, 204.14285714285714], [83.0, 13088.0], [82.0, 7885.875], [81.0, 23139.5], [87.0, 894.8], [86.0, 16052.0], [85.0, 17643.285714285714], [84.0, 3433.0], [91.0, 8339.5], [90.0, 9360.142857142857], [88.0, 24737.6], [89.0, 59978.0], [93.0, 1335.5], [92.0, 1191.0], [94.0, 30447.5], [99.0, 2446.285714285714], [98.0, 15688.25], [97.0, 30408.5], [96.0, 59953.0], [103.0, 31249.0], [102.0, 31155.5], [101.0, 36779.4], [100.0, 1668.0], [107.0, 21022.0], [106.0, 15981.5], [105.0, 31670.0], [104.0, 12995.8], [111.0, 1683.0], [110.0, 1673.75], [108.0, 21088.0], [115.0, 1227.3333333333333], [114.0, 902.1111111111112], [112.0, 36616.6], [113.0, 59971.0], [119.0, 1464.0], [118.0, 31543.5], [117.0, 34946.71428571428], [116.0, 2272.0], [123.0, 21132.0], [122.0, 30785.833333333336], [121.0, 2602.0], [120.0, 21198.333333333332], [127.0, 21011.333333333332], [126.0, 21129.666666666668], [125.0, 10783.166666666666], [124.0, 31553.5], [135.0, 1664.5], [134.0, 30554.833333333332], [133.0, 3041.0], [132.0, 1635.0], [131.0, 16343.0], [129.0, 31218.5], [128.0, 21366.333333333332], [130.0, 20644.333333333332], [143.0, 15566.75], [142.0, 13766.6], [139.0, 16028.75], [138.0, 21098.666666666668], [137.0, 16009.5], [136.0, 40571.0], [141.0, 20231.333333333332], [140.0, 30288.0], [151.0, 20645.666666666668], [150.0, 30560.5], [149.0, 15865.5], [148.0, 30742.5], [147.0, 20855.666666666668], [146.0, 20812.666666666668], [145.0, 20925.0], [144.0, 15817.75], [157.0, 15471.75], [156.0, 15497.0], [155.0, 30258.5], [154.0, 20432.666666666668], [153.0, 15645.0], [152.0, 20831.0], [158.0, 19387.666666666668], [159.0, 28981.5], [167.0, 19524.666666666668], [166.0, 19432.0], [165.0, 19935.666666666668], [164.0, 14919.25], [163.0, 19808.666666666668], [162.0, 20081.333333333332], [161.0, 8814.142857142857], [160.0, 11059.166666666668], [175.0, 6586.333333333333], [174.0, 3874.0625], [173.0, 11895.8], [172.0, 28995.5], [171.0, 8644.857142857143], [170.0, 28951.5], [169.0, 15142.25], [168.0, 28498.0], [182.0, 28122.5], [181.0, 10114.833333333332], [179.0, 11481.0], [178.0, 19128.0], [177.0, 19028.666666666668], [176.0, 8266.714285714286], [180.0, 9420.0], [183.0, 11201.4], [191.0, 8209.285714285714], [190.0, 11226.0], [189.0, 11106.0], [188.0, 11454.0], [187.0, 14399.0], [185.0, 27825.5], [184.0, 19184.666666666668], [186.0, 11172.6], [199.0, 17743.0], [198.0, 10850.4], [197.0, 17751.333333333332], [196.0, 13537.25], [195.0, 9164.0], [194.0, 2372.4444444444443], [193.0, 13735.75], [192.0, 5358.363636363637], [207.0, 13706.5], [205.0, 10666.4], [204.0, 10766.0], [203.0, 13383.5], [202.0, 7936.000000000001], [201.0, 6974.875], [200.0, 17915.333333333336], [206.0, 25022.5], [215.0, 17254.0], [214.0, 16941.333333333336], [213.0, 8846.0], [212.0, 11316.0], [209.0, 17280.333333333336], [208.0, 17096.333333333336], [211.0, 24446.0], [210.0, 24555.0], [223.0, 16921.333333333336], [222.0, 10346.0], [221.0, 25059.5], [220.0, 12994.5], [219.0, 13556.5], [216.0, 16989.666666666664], [218.0, 24367.0], [217.0, 24555.5], [230.0, 24107.0], [229.0, 7487.25], [224.0, 16777.666666666664], [227.0, 15895.666666666666], [231.0, 23530.0], [228.0, 23581.0], [226.0, 23687.0], [225.0, 23645.5], [238.0, 9903.0], [236.0, 23322.5], [235.0, 16085.0], [234.0, 9058.333333333334], [239.0, 22631.0], [237.0, 11822.25], [233.0, 12000.75], [232.0, 45805.0], [247.0, 15562.666666666666], [246.0, 15527.666666666666], [245.0, 15576.666666666666], [244.0, 9716.2], [243.0, 6419.75], [241.0, 15877.0], [240.0, 10014.2], [242.0, 15085.666666666666], [249.0, 22953.5], [248.0, 9548.2], [251.0, 14455.666666666666], [253.0, 14688.333333333334], [255.0, 14411.333333333334], [254.0, 21599.5], [252.0, 21386.5], [250.0, 14828.333333333334], [270.0, 10449.75], [271.0, 13761.333333333334], [269.0, 13792.0], [268.0, 7322.833333333334], [267.0, 11259.25], [266.0, 13650.666666666666], [265.0, 14002.333333333334], [264.0, 6517.428571428571], [263.0, 10961.75], [256.0, 8854.4], [259.0, 11575.0], [258.0, 14226.333333333334], [257.0, 4422.857142857143], [262.0, 8981.8], [261.0, 14608.0], [260.0, 14669.666666666666], [285.0, 18647.5], [286.0, 9752.5], [287.0, 12290.666666666666], [284.0, 12993.0], [275.0, 10434.0], [273.0, 7084.0], [274.0, 19556.0], [272.0, 8294.4], [283.0, 9791.5], [282.0, 13061.333333333334], [281.0, 6752.333333333334], [280.0, 8107.4], [279.0, 5996.4285714285725], [278.0, 19979.0], [277.0, 13532.666666666666], [276.0, 10252.75], [291.0, 18035.0], [301.0, 11656.333333333334], [300.0, 8939.75], [290.0, 18632.5], [289.0, 12292.0], [288.0, 9782.25], [299.0, 7463.0], [298.0, 16836.0], [297.0, 11881.0], [296.0, 6314.000000000001], [303.0, 8468.25], [302.0, 16524.0], [295.0, 17474.0], [294.0, 9147.25], [293.0, 12247.666666666666], [292.0, 7662.2], [319.0, 11219.333333333334], [317.0, 11074.0], [318.0, 30514.0], [307.0, 8300.75], [316.0, 30521.0], [306.0, 10986.333333333334], [305.0, 4452.555555555556], [304.0, 32144.0], [315.0, 15938.5], [314.0, 15900.5], [313.0, 16209.0], [312.0, 15976.5], [311.0, 16201.5], [310.0, 16194.0], [309.0, 12730.0], [308.0, 1236.75], [334.0, 11087.0], [335.0, 15999.0], [332.0, 15969.5], [333.0, 30559.0], [323.0, 16148.5], [322.0, 16200.0], [321.0, 16111.5], [320.0, 16142.0], [331.0, 20833.333333333332], [330.0, 1293.0], [329.0, 23269.25], [328.0, 1730.0], [327.0, 1521.0], [325.0, 15971.0], [326.0, 30613.0], [324.0, 16048.5], [349.0, 16052.5], [348.0, 15889.5], [339.0, 15788.5], [338.0, 10954.0], [336.0, 15947.5], [337.0, 30530.0], [347.0, 20743.333333333332], [346.0, 1211.0], [345.0, 15907.5], [344.0, 15875.0], [351.0, 30475.0], [350.0, 30438.0], [343.0, 15880.5], [342.0, 15775.0], [341.0, 15858.0], [340.0, 16092.5], [366.0, 15812.5], [367.0, 15930.0], [365.0, 15786.0], [364.0, 15792.5], [363.0, 15820.5], [362.0, 20788.333333333332], [361.0, 1312.5], [360.0, 30487.0], [359.0, 15870.0], [353.0, 15727.5], [352.0, 8573.0], [355.0, 16033.0], [354.0, 15775.0], [358.0, 10991.666666666666], [356.0, 15813.5], [357.0, 30480.0], [380.0, 10849.0], [382.0, 15719.5], [383.0, 15849.0], [376.0, 30712.0], [381.0, 15785.0], [378.0, 15661.5], [379.0, 30453.0], [377.0, 10883.0], [375.0, 15755.0], [369.0, 1352.0], [368.0, 15770.5], [371.0, 15691.0], [370.0, 20674.333333333332], [374.0, 15648.0], [373.0, 15805.0], [372.0, 15887.0], [397.0, 15580.0], [398.0, 15501.0], [396.0, 10765.0], [387.0, 15841.5], [386.0, 15719.5], [385.0, 15729.5], [384.0, 15769.5], [394.0, 15796.0], [395.0, 30606.0], [393.0, 15689.5], [392.0, 15834.0], [399.0, 30272.0], [391.0, 15862.0], [390.0, 15817.5], [389.0, 15814.0], [388.0, 15700.0], [414.0, 15407.5], [415.0, 15501.5], [413.0, 10615.333333333334], [412.0, 30340.0], [403.0, 20470.0], [402.0, 1143.0], [401.0, 15558.5], [400.0, 10702.333333333334], [411.0, 15590.0], [410.0, 15678.0], [409.0, 10559.333333333334], [408.0, 30087.0], [407.0, 15637.5], [406.0, 15426.0], [405.0, 10801.333333333334], [404.0, 30098.0], [429.0, 27926.0], [431.0, 13608.0], [426.0, 9993.666666666666], [425.0, 28591.0], [424.0, 28127.0], [419.0, 15363.0], [418.0, 15515.0], [416.0, 15475.0], [417.0, 30227.0], [423.0, 28803.0], [422.0, 28655.0], [421.0, 29577.0], [420.0, 30062.0], [430.0, 27924.0], [428.0, 28365.0], [427.0, 28029.0], [445.0, 11398.0], [444.0, 11437.0], [435.0, 25374.0], [434.0, 25602.0], [433.0, 25646.0], [432.0, 25963.0], [442.0, 11686.0], [441.0, 12065.5], [439.0, 12663.5], [438.0, 25259.0], [437.0, 24840.0], [436.0, 25327.0], [447.0, 22125.0], [446.0, 22190.0], [443.0, 22046.0], [440.0, 24572.0], [450.0, 10606.0], [457.0, 9531.5], [456.0, 18956.0], [459.0, 17947.0], [458.0, 18847.0], [454.0, 9961.5], [452.0, 10236.0], [453.0, 18832.0], [449.0, 11217.0], [448.0, 11459.5], [455.0, 19012.0], [463.0, 16265.0], [462.0, 16217.0], [461.0, 16735.0], [460.0, 17871.0], [451.0, 20225.0], [479.0, 5998.5], [476.0, 2925.6], [475.0, 4655.0], [474.0, 6592.5], [473.0, 6547.5], [472.0, 6741.5], [466.0, 5662.0], [465.0, 15865.0], [464.0, 16225.0], [467.0, 15793.0], [471.0, 13113.0], [470.0, 14646.0], [469.0, 15437.0], [468.0, 15640.0], [478.0, 11983.0], [477.0, 12070.0], [494.0, 1006.0], [495.0, 1295.75], [488.0, 8022.0], [493.0, 2332.0], [489.0, 2128.5], [491.0, 4440.0], [490.0, 7657.0], [487.0, 803.6], [486.0, 3124.0], [485.0, 3179.6666666666665], [484.0, 8532.0], [481.0, 2644.5], [480.0, 10948.0], [483.0, 8557.0], [482.0, 8677.0], [492.0, 4395.0], [500.0, 1130.25], [499.0, 536.1666666666666], [498.0, 2154.0], [496.0, 1272.5], [497.0, 4251.0], [1.0, 25609.333333333336]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[150.2691999999998, 9110.002800000006]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3568.6666666666665, "minX": 1.63089576E12, "maxY": 25603.983333333334, "series": [{"data": [[1.63089576E12, 25603.983333333334], [1.63089582E12, 8467.533333333333], [1.63089588E12, 3568.6666666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63089576E12, 5969.95], [1.63089582E12, 6995.066666666667], [1.63089588E12, 4623.016666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089588E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1314.911032028471, "minX": 1.63089576E12, "maxY": 15216.61608497726, "series": [{"data": [[1.63089576E12, 1314.911032028471], [1.63089582E12, 11662.111222444895], [1.63089588E12, 15216.61608497726]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089588E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1307.4270462633456, "minX": 1.63089576E12, "maxY": 15214.907435508323, "series": [{"data": [[1.63089576E12, 1307.4270462633456], [1.63089582E12, 11660.220440881756], [1.63089588E12, 15214.907435508323]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089588E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 15.368737474949903, "minX": 1.63089576E12, "maxY": 102.77342823250305, "series": [{"data": [[1.63089576E12, 102.77342823250305], [1.63089582E12, 15.368737474949903], [1.63089588E12, 23.837632776934772]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089588E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.63089576E12, "maxY": 72660.0, "series": [{"data": [[1.63089576E12, 3784.0], [1.63089582E12, 57061.0], [1.63089588E12, 72660.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63089576E12, 2780.8], [1.63089582E12, 39307.0], [1.63089588E12, 62648.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63089576E12, 3584.5199999999977], [1.63089582E12, 55582.0], [1.63089588E12, 72483.95999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63089576E12, 3040.8], [1.63089582E12, 48092.0], [1.63089588E12, 68038.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63089576E12, 98.0], [1.63089582E12, 20.0], [1.63089588E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63089576E12, 855.0], [1.63089582E12, 87.0], [1.63089588E12, 54.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089588E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 24.0, "minX": 1.0, "maxY": 68204.0, "series": [{"data": [[2.0, 16755.5], [8.0, 41643.0], [142.0, 1740.5], [141.0, 2400.0], [9.0, 24352.0], [164.0, 462.5], [40.0, 24.0], [11.0, 68204.0], [3.0, 38451.0], [12.0, 48229.5], [55.0, 59311.0], [250.0, 640.5], [1.0, 19609.0], [4.0, 49331.0], [298.0, 761.5], [5.0, 47601.0], [359.0, 60.0], [6.0, 45078.0], [26.0, 243.0], [7.0, 54109.0], [462.0, 48.0], [120.0, 722.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 34392.0], [8.0, 42005.0], [5.0, 51752.0], [3.0, 41377.0], [6.0, 49928.5], [12.0, 48451.5], [26.0, 59992.0], [55.0, 59930.0], [113.0, 30480.0], [7.0, 54183.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 462.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 24.0, "minX": 1.0, "maxY": 68204.0, "series": [{"data": [[2.0, 16755.5], [8.0, 41642.0], [142.0, 1734.0], [141.0, 2399.0], [9.0, 24346.5], [164.0, 459.5], [40.0, 24.0], [11.0, 68204.0], [3.0, 38446.5], [12.0, 48229.5], [55.0, 59311.0], [250.0, 637.0], [1.0, 19609.0], [4.0, 49331.0], [298.0, 758.5], [5.0, 47601.0], [359.0, 58.0], [6.0, 45077.5], [26.0, 243.0], [7.0, 54109.0], [462.0, 47.5], [120.0, 720.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 34355.0], [8.0, 42004.0], [5.0, 51752.0], [3.0, 41377.0], [6.0, 49928.5], [12.0, 48451.5], [26.0, 59992.0], [55.0, 59928.0], [113.0, 30478.0], [7.0, 54180.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 462.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.63089576E12, "maxY": 16.666666666666668, "series": [{"data": [[1.63089576E12, 16.666666666666668], [1.63089582E12, 16.666666666666668], [1.63089588E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089588E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.2666666666666666, "minX": 1.63089576E12, "maxY": 14.15, "series": [{"data": [[1.63089576E12, 14.05], [1.63089582E12, 14.15], [1.63089588E12, 9.716666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63089582E12, 2.4833333333333334], [1.63089588E12, 1.2666666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63089588E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.2666666666666666, "minX": 1.63089576E12, "maxY": 14.15, "series": [{"data": [[1.63089582E12, 2.4833333333333334], [1.63089588E12, 1.2666666666666666]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63089576E12, 14.05], [1.63089582E12, 14.15], [1.63089588E12, 9.716666666666667]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089588E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.2666666666666666, "minX": 1.63089576E12, "maxY": 14.15, "series": [{"data": [[1.63089576E12, 14.05], [1.63089582E12, 14.15], [1.63089588E12, 9.716666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63089582E12, 2.4833333333333334], [1.63089588E12, 1.2666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63089588E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

