/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 128072.0, "series": [{"data": [[0.0, 29.0], [0.1, 34.0], [0.2, 41.0], [0.3, 64.0], [0.4, 74.0], [0.5, 86.0], [0.6, 104.0], [0.7, 110.0], [0.8, 113.0], [0.9, 118.0], [1.0, 145.0], [1.1, 156.0], [1.2, 170.0], [1.3, 177.0], [1.4, 192.0], [1.5, 214.0], [1.6, 216.0], [1.7, 230.0], [1.8, 241.0], [1.9, 280.0], [2.0, 303.0], [2.1, 316.0], [2.2, 321.0], [2.3, 327.0], [2.4, 338.0], [2.5, 345.0], [2.6, 362.0], [2.7, 390.0], [2.8, 478.0], [2.9, 517.0], [3.0, 518.0], [3.1, 522.0], [3.2, 526.0], [3.3, 533.0], [3.4, 541.0], [3.5, 550.0], [3.6, 577.0], [3.7, 633.0], [3.8, 654.0], [3.9, 681.0], [4.0, 688.0], [4.1, 696.0], [4.2, 706.0], [4.3, 728.0], [4.4, 798.0], [4.5, 833.0], [4.6, 841.0], [4.7, 845.0], [4.8, 855.0], [4.9, 873.0], [5.0, 902.0], [5.1, 930.0], [5.2, 941.0], [5.3, 979.0], [5.4, 1028.0], [5.5, 1075.0], [5.6, 1103.0], [5.7, 1169.0], [5.8, 1187.0], [5.9, 1214.0], [6.0, 1260.0], [6.1, 1274.0], [6.2, 1311.0], [6.3, 1350.0], [6.4, 1390.0], [6.5, 1442.0], [6.6, 1507.0], [6.7, 1549.0], [6.8, 1605.0], [6.9, 1623.0], [7.0, 1627.0], [7.1, 1632.0], [7.2, 1638.0], [7.3, 1666.0], [7.4, 1682.0], [7.5, 1749.0], [7.6, 1948.0], [7.7, 1987.0], [7.8, 2053.0], [7.9, 2143.0], [8.0, 2230.0], [8.1, 2239.0], [8.2, 2258.0], [8.3, 2268.0], [8.4, 2276.0], [8.5, 2294.0], [8.6, 2362.0], [8.7, 2434.0], [8.8, 2477.0], [8.9, 2484.0], [9.0, 2488.0], [9.1, 2494.0], [9.2, 2496.0], [9.3, 2501.0], [9.4, 2506.0], [9.5, 2512.0], [9.6, 2524.0], [9.7, 2533.0], [9.8, 2542.0], [9.9, 2548.0], [10.0, 2558.0], [10.1, 2561.0], [10.2, 2567.0], [10.3, 2599.0], [10.4, 2605.0], [10.5, 2615.0], [10.6, 2630.0], [10.7, 2635.0], [10.8, 2637.0], [10.9, 2639.0], [11.0, 2642.0], [11.1, 2645.0], [11.2, 2646.0], [11.3, 2651.0], [11.4, 2654.0], [11.5, 2656.0], [11.6, 2658.0], [11.7, 2660.0], [11.8, 2661.0], [11.9, 2664.0], [12.0, 2665.0], [12.1, 2669.0], [12.2, 2672.0], [12.3, 2675.0], [12.4, 2679.0], [12.5, 2682.0], [12.6, 2686.0], [12.7, 2688.0], [12.8, 2691.0], [12.9, 2694.0], [13.0, 2697.0], [13.1, 2702.0], [13.2, 2717.0], [13.3, 2725.0], [13.4, 2739.0], [13.5, 2765.0], [13.6, 2784.0], [13.7, 2806.0], [13.8, 2820.0], [13.9, 2836.0], [14.0, 2870.0], [14.1, 2901.0], [14.2, 2912.0], [14.3, 2935.0], [14.4, 2962.0], [14.5, 2989.0], [14.6, 3003.0], [14.7, 3010.0], [14.8, 3013.0], [14.9, 3017.0], [15.0, 3020.0], [15.1, 3023.0], [15.2, 3028.0], [15.3, 3033.0], [15.4, 3038.0], [15.5, 3042.0], [15.6, 3052.0], [15.7, 3057.0], [15.8, 3068.0], [15.9, 3076.0], [16.0, 3080.0], [16.1, 3086.0], [16.2, 3089.0], [16.3, 3094.0], [16.4, 3098.0], [16.5, 3105.0], [16.6, 3110.0], [16.7, 3116.0], [16.8, 3129.0], [16.9, 3152.0], [17.0, 3158.0], [17.1, 3162.0], [17.2, 3166.0], [17.3, 3169.0], [17.4, 3171.0], [17.5, 3175.0], [17.6, 3179.0], [17.7, 3183.0], [17.8, 3185.0], [17.9, 3189.0], [18.0, 3192.0], [18.1, 3208.0], [18.2, 3214.0], [18.3, 3218.0], [18.4, 3224.0], [18.5, 3228.0], [18.6, 3232.0], [18.7, 3236.0], [18.8, 3242.0], [18.9, 3245.0], [19.0, 3256.0], [19.1, 3264.0], [19.2, 3289.0], [19.3, 3302.0], [19.4, 3330.0], [19.5, 3341.0], [19.6, 3353.0], [19.7, 3358.0], [19.8, 3363.0], [19.9, 3366.0], [20.0, 3370.0], [20.1, 3376.0], [20.2, 3380.0], [20.3, 3385.0], [20.4, 3388.0], [20.5, 3391.0], [20.6, 3394.0], [20.7, 3397.0], [20.8, 3400.0], [20.9, 3403.0], [21.0, 3408.0], [21.1, 3410.0], [21.2, 3413.0], [21.3, 3417.0], [21.4, 3419.0], [21.5, 3423.0], [21.6, 3428.0], [21.7, 3433.0], [21.8, 3446.0], [21.9, 3456.0], [22.0, 3466.0], [22.1, 3472.0], [22.2, 3481.0], [22.3, 3489.0], [22.4, 3499.0], [22.5, 3508.0], [22.6, 3517.0], [22.7, 3526.0], [22.8, 3530.0], [22.9, 3533.0], [23.0, 3536.0], [23.1, 3541.0], [23.2, 3544.0], [23.3, 3551.0], [23.4, 3554.0], [23.5, 3559.0], [23.6, 3569.0], [23.7, 3582.0], [23.8, 3585.0], [23.9, 3593.0], [24.0, 3619.0], [24.1, 3632.0], [24.2, 3646.0], [24.3, 3667.0], [24.4, 3701.0], [24.5, 3740.0], [24.6, 3792.0], [24.7, 3814.0], [24.8, 3833.0], [24.9, 3876.0], [25.0, 3895.0], [25.1, 3928.0], [25.2, 3934.0], [25.3, 3937.0], [25.4, 3941.0], [25.5, 3945.0], [25.6, 3948.0], [25.7, 3952.0], [25.8, 3957.0], [25.9, 3966.0], [26.0, 3999.0], [26.1, 4017.0], [26.2, 4035.0], [26.3, 4053.0], [26.4, 4104.0], [26.5, 4141.0], [26.6, 4162.0], [26.7, 4196.0], [26.8, 4250.0], [26.9, 4266.0], [27.0, 4269.0], [27.1, 4272.0], [27.2, 4275.0], [27.3, 4277.0], [27.4, 4280.0], [27.5, 4284.0], [27.6, 4289.0], [27.7, 4294.0], [27.8, 4299.0], [27.9, 4308.0], [28.0, 4314.0], [28.1, 4321.0], [28.2, 4337.0], [28.3, 4350.0], [28.4, 4461.0], [28.5, 4494.0], [28.6, 4533.0], [28.7, 4573.0], [28.8, 4586.0], [28.9, 4601.0], [29.0, 4623.0], [29.1, 4629.0], [29.2, 4637.0], [29.3, 4661.0], [29.4, 4678.0], [29.5, 4711.0], [29.6, 4732.0], [29.7, 4764.0], [29.8, 4776.0], [29.9, 4785.0], [30.0, 4804.0], [30.1, 4837.0], [30.2, 4852.0], [30.3, 4861.0], [30.4, 4866.0], [30.5, 4876.0], [30.6, 4895.0], [30.7, 4914.0], [30.8, 4936.0], [30.9, 4949.0], [31.0, 4955.0], [31.1, 4964.0], [31.2, 4972.0], [31.3, 4985.0], [31.4, 5003.0], [31.5, 5022.0], [31.6, 5141.0], [31.7, 5152.0], [31.8, 5159.0], [31.9, 5179.0], [32.0, 5587.0], [32.1, 5620.0], [32.2, 5749.0], [32.3, 5802.0], [32.4, 5920.0], [32.5, 5968.0], [32.6, 6114.0], [32.7, 6124.0], [32.8, 6130.0], [32.9, 6137.0], [33.0, 6141.0], [33.1, 6144.0], [33.2, 6149.0], [33.3, 6156.0], [33.4, 6163.0], [33.5, 6170.0], [33.6, 6177.0], [33.7, 6182.0], [33.8, 6187.0], [33.9, 6191.0], [34.0, 6195.0], [34.1, 6199.0], [34.2, 6204.0], [34.3, 6218.0], [34.4, 6235.0], [34.5, 6380.0], [34.6, 6463.0], [34.7, 6477.0], [34.8, 6483.0], [34.9, 6490.0], [35.0, 6505.0], [35.1, 6547.0], [35.2, 6597.0], [35.3, 6684.0], [35.4, 6774.0], [35.5, 6860.0], [35.6, 6904.0], [35.7, 7033.0], [35.8, 7062.0], [35.9, 7120.0], [36.0, 7190.0], [36.1, 7216.0], [36.2, 7237.0], [36.3, 7257.0], [36.4, 7279.0], [36.5, 7352.0], [36.6, 7364.0], [36.7, 7380.0], [36.8, 7398.0], [36.9, 7545.0], [37.0, 7811.0], [37.1, 7826.0], [37.2, 7835.0], [37.3, 7840.0], [37.4, 7848.0], [37.5, 7854.0], [37.6, 7862.0], [37.7, 7873.0], [37.8, 7922.0], [37.9, 7937.0], [38.0, 7943.0], [38.1, 7952.0], [38.2, 7957.0], [38.3, 7960.0], [38.4, 7964.0], [38.5, 7972.0], [38.6, 7977.0], [38.7, 7982.0], [38.8, 7985.0], [38.9, 7989.0], [39.0, 7994.0], [39.1, 8005.0], [39.2, 8012.0], [39.3, 8019.0], [39.4, 8035.0], [39.5, 8046.0], [39.6, 8060.0], [39.7, 8126.0], [39.8, 8182.0], [39.9, 8205.0], [40.0, 8229.0], [40.1, 8240.0], [40.2, 8248.0], [40.3, 8255.0], [40.4, 8258.0], [40.5, 8263.0], [40.6, 8268.0], [40.7, 8272.0], [40.8, 8277.0], [40.9, 8285.0], [41.0, 8290.0], [41.1, 8300.0], [41.2, 8310.0], [41.3, 8315.0], [41.4, 8326.0], [41.5, 8349.0], [41.6, 8490.0], [41.7, 8498.0], [41.8, 8503.0], [41.9, 8507.0], [42.0, 8510.0], [42.1, 8514.0], [42.2, 8518.0], [42.3, 8521.0], [42.4, 8524.0], [42.5, 8531.0], [42.6, 8534.0], [42.7, 8537.0], [42.8, 8544.0], [42.9, 8547.0], [43.0, 8550.0], [43.1, 8556.0], [43.2, 8559.0], [43.3, 8562.0], [43.4, 8566.0], [43.5, 8569.0], [43.6, 8572.0], [43.7, 8576.0], [43.8, 8580.0], [43.9, 8586.0], [44.0, 8592.0], [44.1, 8596.0], [44.2, 8599.0], [44.3, 8601.0], [44.4, 8603.0], [44.5, 8603.0], [44.6, 8604.0], [44.7, 8606.0], [44.8, 8606.0], [44.9, 8608.0], [45.0, 8608.0], [45.1, 8610.0], [45.2, 8611.0], [45.3, 8613.0], [45.4, 8614.0], [45.5, 8616.0], [45.6, 8619.0], [45.7, 8622.0], [45.8, 8628.0], [45.9, 8635.0], [46.0, 8646.0], [46.1, 8653.0], [46.2, 8659.0], [46.3, 8665.0], [46.4, 8671.0], [46.5, 8675.0], [46.6, 8705.0], [46.7, 8722.0], [46.8, 8751.0], [46.9, 8761.0], [47.0, 8773.0], [47.1, 8850.0], [47.2, 8896.0], [47.3, 8901.0], [47.4, 8905.0], [47.5, 8911.0], [47.6, 8915.0], [47.7, 8918.0], [47.8, 8922.0], [47.9, 8926.0], [48.0, 8929.0], [48.1, 8933.0], [48.2, 8940.0], [48.3, 8944.0], [48.4, 8946.0], [48.5, 8947.0], [48.6, 8948.0], [48.7, 8949.0], [48.8, 8950.0], [48.9, 8951.0], [49.0, 8952.0], [49.1, 8953.0], [49.2, 8955.0], [49.3, 8956.0], [49.4, 8958.0], [49.5, 8962.0], [49.6, 8967.0], [49.7, 8972.0], [49.8, 8979.0], [49.9, 8988.0], [50.0, 8994.0], [50.1, 9036.0], [50.2, 9049.0], [50.3, 9057.0], [50.4, 9062.0], [50.5, 9075.0], [50.6, 9085.0], [50.7, 9132.0], [50.8, 9148.0], [50.9, 9155.0], [51.0, 9162.0], [51.1, 9218.0], [51.2, 9227.0], [51.3, 9233.0], [51.4, 9243.0], [51.5, 9250.0], [51.6, 9257.0], [51.7, 9267.0], [51.8, 9273.0], [51.9, 9282.0], [52.0, 9291.0], [52.1, 9298.0], [52.2, 9303.0], [52.3, 9306.0], [52.4, 9310.0], [52.5, 9316.0], [52.6, 9321.0], [52.7, 9325.0], [52.8, 9331.0], [52.9, 9333.0], [53.0, 9336.0], [53.1, 9344.0], [53.2, 9350.0], [53.3, 9356.0], [53.4, 9361.0], [53.5, 9374.0], [53.6, 9378.0], [53.7, 9384.0], [53.8, 9388.0], [53.9, 9394.0], [54.0, 9398.0], [54.1, 9406.0], [54.2, 9415.0], [54.3, 9423.0], [54.4, 9433.0], [54.5, 9444.0], [54.6, 9448.0], [54.7, 9451.0], [54.8, 9454.0], [54.9, 9457.0], [55.0, 9459.0], [55.1, 9463.0], [55.2, 9468.0], [55.3, 9480.0], [55.4, 9490.0], [55.5, 9499.0], [55.6, 9503.0], [55.7, 9512.0], [55.8, 9519.0], [55.9, 9527.0], [56.0, 9531.0], [56.1, 9533.0], [56.2, 9538.0], [56.3, 9543.0], [56.4, 9547.0], [56.5, 9551.0], [56.6, 9554.0], [56.7, 9555.0], [56.8, 9558.0], [56.9, 9563.0], [57.0, 9566.0], [57.1, 9571.0], [57.2, 9577.0], [57.3, 9586.0], [57.4, 9609.0], [57.5, 9641.0], [57.6, 9668.0], [57.7, 9687.0], [57.8, 9705.0], [57.9, 9710.0], [58.0, 9721.0], [58.1, 9731.0], [58.2, 9748.0], [58.3, 9761.0], [58.4, 9764.0], [58.5, 9767.0], [58.6, 9770.0], [58.7, 9773.0], [58.8, 9775.0], [58.9, 9782.0], [59.0, 9784.0], [59.1, 9787.0], [59.2, 9794.0], [59.3, 9799.0], [59.4, 9808.0], [59.5, 9818.0], [59.6, 9824.0], [59.7, 9828.0], [59.8, 9830.0], [59.9, 9837.0], [60.0, 9865.0], [60.1, 9908.0], [60.2, 9920.0], [60.3, 9935.0], [60.4, 9955.0], [60.5, 9963.0], [60.6, 10005.0], [60.7, 10049.0], [60.8, 10068.0], [60.9, 10078.0], [61.0, 10083.0], [61.1, 10089.0], [61.2, 10095.0], [61.3, 10099.0], [61.4, 10103.0], [61.5, 10106.0], [61.6, 10110.0], [61.7, 10113.0], [61.8, 10117.0], [61.9, 10121.0], [62.0, 10124.0], [62.1, 10127.0], [62.2, 10128.0], [62.3, 10132.0], [62.4, 10138.0], [62.5, 10146.0], [62.6, 10157.0], [62.7, 10162.0], [62.8, 10168.0], [62.9, 10172.0], [63.0, 10175.0], [63.1, 10181.0], [63.2, 10186.0], [63.3, 10192.0], [63.4, 10196.0], [63.5, 10200.0], [63.6, 10204.0], [63.7, 10209.0], [63.8, 10213.0], [63.9, 10217.0], [64.0, 10222.0], [64.1, 10226.0], [64.2, 10238.0], [64.3, 10244.0], [64.4, 10246.0], [64.5, 10247.0], [64.6, 10251.0], [64.7, 10255.0], [64.8, 10258.0], [64.9, 10261.0], [65.0, 10264.0], [65.1, 10265.0], [65.2, 10269.0], [65.3, 10273.0], [65.4, 10278.0], [65.5, 10282.0], [65.6, 10285.0], [65.7, 10288.0], [65.8, 10289.0], [65.9, 10293.0], [66.0, 10295.0], [66.1, 10297.0], [66.2, 10299.0], [66.3, 10301.0], [66.4, 10302.0], [66.5, 10304.0], [66.6, 10305.0], [66.7, 10307.0], [66.8, 10310.0], [66.9, 10312.0], [67.0, 10316.0], [67.1, 10317.0], [67.2, 10322.0], [67.3, 10327.0], [67.4, 10331.0], [67.5, 10336.0], [67.6, 10340.0], [67.7, 10347.0], [67.8, 10353.0], [67.9, 10361.0], [68.0, 10365.0], [68.1, 10369.0], [68.2, 10375.0], [68.3, 10379.0], [68.4, 10384.0], [68.5, 10389.0], [68.6, 10394.0], [68.7, 10401.0], [68.8, 10406.0], [68.9, 10414.0], [69.0, 10418.0], [69.1, 10422.0], [69.2, 10426.0], [69.3, 10432.0], [69.4, 10436.0], [69.5, 10443.0], [69.6, 10448.0], [69.7, 10455.0], [69.8, 10464.0], [69.9, 10478.0], [70.0, 10485.0], [70.1, 10492.0], [70.2, 10496.0], [70.3, 10502.0], [70.4, 10505.0], [70.5, 10509.0], [70.6, 10512.0], [70.7, 10516.0], [70.8, 10521.0], [70.9, 10525.0], [71.0, 10528.0], [71.1, 10535.0], [71.2, 10539.0], [71.3, 10542.0], [71.4, 10549.0], [71.5, 10558.0], [71.6, 10568.0], [71.7, 10576.0], [71.8, 10587.0], [71.9, 10599.0], [72.0, 10616.0], [72.1, 10624.0], [72.2, 10631.0], [72.3, 10643.0], [72.4, 10652.0], [72.5, 10656.0], [72.6, 10661.0], [72.7, 10666.0], [72.8, 10669.0], [72.9, 10675.0], [73.0, 10678.0], [73.1, 10684.0], [73.2, 10690.0], [73.3, 10697.0], [73.4, 10704.0], [73.5, 10708.0], [73.6, 10713.0], [73.7, 10722.0], [73.8, 10731.0], [73.9, 10751.0], [74.0, 10786.0], [74.1, 11239.0], [74.2, 11248.0], [74.3, 11835.0], [74.4, 11843.0], [74.5, 11869.0], [74.6, 11882.0], [74.7, 12982.0], [74.8, 15168.0], [74.9, 15180.0], [75.0, 15190.0], [75.1, 15201.0], [75.2, 15420.0], [75.3, 16419.0], [75.4, 17583.0], [75.5, 17598.0], [75.6, 17608.0], [75.7, 17618.0], [75.8, 17629.0], [75.9, 17644.0], [76.0, 18771.0], [76.1, 18786.0], [76.2, 18796.0], [76.3, 18807.0], [76.4, 19478.0], [76.5, 19488.0], [76.6, 19658.0], [76.7, 19667.0], [76.8, 19685.0], [76.9, 19694.0], [77.0, 19892.0], [77.1, 20135.0], [77.2, 20154.0], [77.3, 20162.0], [77.4, 20171.0], [77.5, 20180.0], [77.6, 20184.0], [77.7, 20189.0], [77.8, 20199.0], [77.9, 20210.0], [78.0, 20214.0], [78.1, 20228.0], [78.2, 20236.0], [78.3, 20244.0], [78.4, 20257.0], [78.5, 20267.0], [78.6, 20279.0], [78.7, 20289.0], [78.8, 20304.0], [78.9, 20317.0], [79.0, 20327.0], [79.1, 20339.0], [79.2, 20351.0], [79.3, 20397.0], [79.4, 20422.0], [79.5, 20440.0], [79.6, 20452.0], [79.7, 20883.0], [79.8, 20894.0], [79.9, 20906.0], [80.0, 21030.0], [80.1, 21051.0], [80.2, 22266.0], [80.3, 24392.0], [80.4, 24403.0], [80.5, 24412.0], [80.6, 24422.0], [80.7, 24432.0], [80.8, 27155.0], [80.9, 29276.0], [81.0, 30576.0], [81.1, 31171.0], [81.2, 31185.0], [81.3, 31203.0], [81.4, 31220.0], [81.5, 31229.0], [81.6, 31235.0], [81.7, 31239.0], [81.8, 31256.0], [81.9, 31275.0], [82.0, 31328.0], [82.1, 31960.0], [82.2, 33006.0], [82.3, 33037.0], [82.4, 33048.0], [82.5, 33059.0], [82.6, 33069.0], [82.7, 33091.0], [82.8, 33108.0], [82.9, 33139.0], [83.0, 34385.0], [83.1, 35283.0], [83.2, 35305.0], [83.3, 35333.0], [83.4, 35374.0], [83.5, 35407.0], [83.6, 35467.0], [83.7, 35477.0], [83.8, 35495.0], [83.9, 35516.0], [84.0, 35538.0], [84.1, 36381.0], [84.2, 38487.0], [84.3, 41036.0], [84.4, 42268.0], [84.5, 45688.0], [84.6, 47255.0], [84.7, 48579.0], [84.8, 50487.0], [84.9, 50611.0], [85.0, 50740.0], [85.1, 52267.0], [85.2, 53498.0], [85.3, 55286.0], [85.4, 56922.0], [85.5, 58662.0], [85.6, 60702.0], [85.7, 60940.0], [85.8, 60992.0], [85.9, 61011.0], [86.0, 61029.0], [86.1, 61045.0], [86.2, 61077.0], [86.3, 61538.0], [86.4, 62482.0], [86.5, 62681.0], [86.6, 62715.0], [86.7, 62721.0], [86.8, 62725.0], [86.9, 62731.0], [87.0, 62765.0], [87.1, 63762.0], [87.2, 64005.0], [87.3, 64428.0], [87.4, 64504.0], [87.5, 64548.0], [87.6, 64575.0], [87.7, 64611.0], [87.8, 64736.0], [87.9, 64776.0], [88.0, 64900.0], [88.1, 65220.0], [88.2, 65665.0], [88.3, 65703.0], [88.4, 65712.0], [88.5, 65720.0], [88.6, 65741.0], [88.7, 65842.0], [88.8, 65871.0], [88.9, 65901.0], [89.0, 65920.0], [89.1, 65933.0], [89.2, 65941.0], [89.3, 65987.0], [89.4, 66000.0], [89.5, 66004.0], [89.6, 66009.0], [89.7, 66014.0], [89.8, 66020.0], [89.9, 66026.0], [90.0, 66031.0], [90.1, 66034.0], [90.2, 66040.0], [90.3, 66043.0], [90.4, 66057.0], [90.5, 66069.0], [90.6, 66079.0], [90.7, 66123.0], [90.8, 66133.0], [90.9, 66141.0], [91.0, 66147.0], [91.1, 66161.0], [91.2, 66170.0], [91.3, 66183.0], [91.4, 66199.0], [91.5, 66213.0], [91.6, 66230.0], [91.7, 66236.0], [91.8, 66239.0], [91.9, 66242.0], [92.0, 66250.0], [92.1, 66258.0], [92.2, 66275.0], [92.3, 66280.0], [92.4, 66286.0], [92.5, 66290.0], [92.6, 66296.0], [92.7, 66301.0], [92.8, 66307.0], [92.9, 66313.0], [93.0, 66320.0], [93.1, 66325.0], [93.2, 66359.0], [93.3, 66369.0], [93.4, 66380.0], [93.5, 66390.0], [93.6, 66436.0], [93.7, 66596.0], [93.8, 66604.0], [93.9, 66612.0], [94.0, 66622.0], [94.1, 68388.0], [94.2, 68400.0], [94.3, 68409.0], [94.4, 68416.0], [94.5, 68421.0], [94.6, 68426.0], [94.7, 68443.0], [94.8, 68508.0], [94.9, 68519.0], [95.0, 68528.0], [95.1, 68537.0], [95.2, 68548.0], [95.3, 68558.0], [95.4, 68568.0], [95.5, 68577.0], [95.6, 68585.0], [95.7, 68593.0], [95.8, 68602.0], [95.9, 68614.0], [96.0, 68619.0], [96.1, 68624.0], [96.2, 68629.0], [96.3, 68635.0], [96.4, 68640.0], [96.5, 68644.0], [96.6, 68648.0], [96.7, 68653.0], [96.8, 68660.0], [96.9, 68666.0], [97.0, 68671.0], [97.1, 68678.0], [97.2, 68687.0], [97.3, 68698.0], [97.4, 68948.0], [97.5, 68958.0], [97.6, 68964.0], [97.7, 68969.0], [97.8, 68976.0], [97.9, 68983.0], [98.0, 68993.0], [98.1, 69006.0], [98.2, 69409.0], [98.3, 69422.0], [98.4, 69433.0], [98.5, 69440.0], [98.6, 69444.0], [98.7, 69448.0], [98.8, 69453.0], [98.9, 69458.0], [99.0, 69463.0], [99.1, 69468.0], [99.2, 96754.0], [99.3, 125310.0], [99.4, 125393.0], [99.5, 125405.0], [99.6, 125484.0], [99.7, 125551.0], [99.8, 125624.0], [99.9, 125754.0], [100.0, 128072.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 279.0, "series": [{"data": [[0.0, 56.0], [65900.0, 48.0], [68300.0, 13.0], [99500.0, 1.0], [104300.0, 2.0], [125900.0, 1.0], [100.0, 85.0], [32900.0, 6.0], [33300.0, 1.0], [34900.0, 1.0], [35300.0, 32.0], [39700.0, 1.0], [39300.0, 1.0], [40900.0, 2.0], [41700.0, 1.0], [42100.0, 1.0], [42500.0, 1.0], [48500.0, 2.0], [49300.0, 1.0], [49700.0, 2.0], [50500.0, 8.0], [200.0, 58.0], [52900.0, 1.0], [53700.0, 4.0], [53300.0, 1.0], [54900.0, 2.0], [56100.0, 1.0], [56500.0, 2.0], [56900.0, 1.0], [58500.0, 1.0], [60500.0, 1.0], [60900.0, 20.0], [62900.0, 1.0], [63700.0, 9.0], [64500.0, 30.0], [64900.0, 9.0], [65300.0, 2.0], [65800.0, 25.0], [66600.0, 35.0], [69000.0, 13.0], [300.0, 72.0], [96200.0, 1.0], [400.0, 17.0], [126600.0, 1.0], [500.0, 73.0], [600.0, 55.0], [700.0, 25.0], [800.0, 57.0], [900.0, 34.0], [1000.0, 26.0], [1100.0, 24.0], [1200.0, 36.0], [1300.0, 28.0], [1400.0, 14.0], [1500.0, 20.0], [1600.0, 65.0], [1700.0, 9.0], [1800.0, 2.0], [1900.0, 16.0], [2000.0, 15.0], [2100.0, 11.0], [2300.0, 13.0], [2200.0, 55.0], [2400.0, 61.0], [2500.0, 106.0], [2600.0, 276.0], [2700.0, 59.0], [2800.0, 42.0], [2900.0, 48.0], [3000.0, 184.0], [3100.0, 165.0], [3200.0, 119.0], [3300.0, 152.0], [3400.0, 163.0], [3500.0, 150.0], [3600.0, 47.0], [3700.0, 31.0], [3800.0, 33.0], [3900.0, 98.0], [4000.0, 38.0], [4100.0, 32.0], [4200.0, 110.0], [4300.0, 56.0], [65700.0, 37.0], [66500.0, 10.0], [68900.0, 68.0], [4600.0, 60.0], [4400.0, 16.0], [4500.0, 36.0], [4700.0, 51.0], [4800.0, 62.0], [5000.0, 21.0], [4900.0, 77.0], [5100.0, 32.0], [5200.0, 2.0], [5300.0, 3.0], [5500.0, 10.0], [5600.0, 11.0], [5800.0, 11.0], [5700.0, 11.0], [5900.0, 14.0], [6000.0, 5.0], [6100.0, 153.0], [96900.0, 1.0], [6300.0, 9.0], [6200.0, 33.0], [6400.0, 44.0], [6600.0, 14.0], [6500.0, 23.0], [6900.0, 10.0], [6800.0, 15.0], [6700.0, 9.0], [7100.0, 17.0], [7000.0, 16.0], [7400.0, 5.0], [7300.0, 39.0], [7200.0, 41.0], [7500.0, 4.0], [7800.0, 80.0], [7700.0, 2.0], [7900.0, 134.0], [125700.0, 9.0], [126500.0, 1.0], [8100.0, 27.0], [8000.0, 56.0], [8200.0, 120.0], [8500.0, 250.0], [8300.0, 45.0], [8400.0, 17.0], [8600.0, 237.0], [8700.0, 48.0], [8900.0, 276.0], [8800.0, 18.0], [9000.0, 63.0], [9200.0, 113.0], [9100.0, 39.0], [9500.0, 188.0], [9700.0, 154.0], [9600.0, 39.0], [9300.0, 187.0], [9400.0, 148.0], [10000.0, 74.0], [9900.0, 51.0], [10100.0, 216.0], [10200.0, 279.0], [9800.0, 75.0], [10400.0, 157.0], [10500.0, 164.0], [10600.0, 142.0], [10700.0, 69.0], [10300.0, 243.0], [10800.0, 2.0], [11000.0, 1.0], [11100.0, 1.0], [11200.0, 18.0], [11300.0, 4.0], [11400.0, 2.0], [11800.0, 34.0], [11900.0, 2.0], [12000.0, 1.0], [12100.0, 1.0], [12200.0, 1.0], [12300.0, 1.0], [12900.0, 1.0], [14300.0, 3.0], [14400.0, 2.0], [15100.0, 32.0], [15200.0, 12.0], [15400.0, 3.0], [15500.0, 1.0], [15600.0, 2.0], [15700.0, 1.0], [16000.0, 2.0], [16300.0, 1.0], [16400.0, 3.0], [16800.0, 2.0], [17400.0, 1.0], [18000.0, 1.0], [18200.0, 1.0], [17600.0, 42.0], [18800.0, 8.0], [19200.0, 4.0], [19400.0, 19.0], [19600.0, 34.0], [19800.0, 16.0], [20200.0, 98.0], [20400.0, 32.0], [20800.0, 24.0], [21000.0, 23.0], [22000.0, 1.0], [22200.0, 2.0], [22400.0, 1.0], [22800.0, 1.0], [23800.0, 1.0], [24400.0, 39.0], [25800.0, 1.0], [26000.0, 2.0], [27200.0, 1.0], [27400.0, 2.0], [27600.0, 1.0], [28000.0, 1.0], [27800.0, 1.0], [28600.0, 1.0], [29200.0, 1.0], [29800.0, 2.0], [30600.0, 1.0], [31200.0, 66.0], [31400.0, 1.0], [31600.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [34800.0, 1.0], [35200.0, 13.0], [35600.0, 1.0], [36400.0, 1.0], [38400.0, 2.0], [40800.0, 1.0], [41200.0, 1.0], [41600.0, 2.0], [43200.0, 2.0], [44000.0, 1.0], [44400.0, 1.0], [44800.0, 1.0], [45600.0, 1.0], [46800.0, 2.0], [47200.0, 1.0], [47600.0, 2.0], [48400.0, 1.0], [50400.0, 6.0], [50800.0, 1.0], [51200.0, 1.0], [51600.0, 1.0], [52400.0, 2.0], [54800.0, 1.0], [55200.0, 1.0], [56000.0, 1.0], [57200.0, 3.0], [57600.0, 1.0], [58800.0, 1.0], [60800.0, 1.0], [61600.0, 1.0], [62400.0, 10.0], [64000.0, 3.0], [64400.0, 8.0], [64800.0, 8.0], [65200.0, 5.0], [65600.0, 12.0], [66400.0, 5.0], [102400.0, 1.0], [125600.0, 8.0], [128000.0, 1.0], [66300.0, 90.0], [68700.0, 5.0], [69500.0, 2.0], [96700.0, 1.0], [98300.0, 1.0], [125500.0, 14.0], [33100.0, 17.0], [34300.0, 2.0], [35500.0, 22.0], [35900.0, 3.0], [36300.0, 2.0], [36700.0, 1.0], [38300.0, 1.0], [37900.0, 1.0], [39100.0, 1.0], [39900.0, 1.0], [40300.0, 1.0], [41100.0, 1.0], [41500.0, 1.0], [41900.0, 1.0], [42700.0, 1.0], [45500.0, 1.0], [45900.0, 1.0], [46300.0, 1.0], [47100.0, 1.0], [46700.0, 1.0], [47500.0, 1.0], [50700.0, 4.0], [51100.0, 3.0], [51500.0, 1.0], [51900.0, 1.0], [52300.0, 1.0], [55500.0, 1.0], [56700.0, 2.0], [58300.0, 2.0], [58700.0, 1.0], [60700.0, 3.0], [61100.0, 2.0], [61500.0, 2.0], [62700.0, 50.0], [63100.0, 1.0], [63900.0, 4.0], [64700.0, 16.0], [64300.0, 5.0], [66200.0, 124.0], [68600.0, 155.0], [69400.0, 98.0], [125400.0, 17.0], [126200.0, 2.0], [66100.0, 80.0], [68500.0, 100.0], [125300.0, 15.0], [16700.0, 1.0], [16900.0, 2.0], [17300.0, 1.0], [17900.0, 1.0], [18300.0, 1.0], [17500.0, 12.0], [18700.0, 27.0], [19100.0, 1.0], [19900.0, 3.0], [20100.0, 71.0], [20300.0, 53.0], [20700.0, 1.0], [21300.0, 1.0], [21500.0, 1.0], [20500.0, 1.0], [20900.0, 1.0], [21700.0, 2.0], [22900.0, 2.0], [23300.0, 1.0], [23700.0, 2.0], [24300.0, 7.0], [26100.0, 1.0], [26500.0, 1.0], [27100.0, 2.0], [28500.0, 1.0], [29700.0, 1.0], [30300.0, 2.0], [30500.0, 5.0], [31100.0, 27.0], [31300.0, 13.0], [31900.0, 1.0], [32500.0, 1.0], [33000.0, 60.0], [34200.0, 1.0], [35400.0, 34.0], [35800.0, 1.0], [36600.0, 3.0], [37000.0, 1.0], [38600.0, 1.0], [41000.0, 1.0], [41800.0, 1.0], [42200.0, 1.0], [46200.0, 1.0], [45400.0, 1.0], [46600.0, 2.0], [47800.0, 4.0], [49800.0, 1.0], [50600.0, 8.0], [51800.0, 1.0], [52200.0, 2.0], [52600.0, 1.0], [53400.0, 3.0], [53800.0, 2.0], [55800.0, 1.0], [56600.0, 1.0], [57800.0, 1.0], [58200.0, 1.0], [58600.0, 1.0], [60200.0, 3.0], [60600.0, 3.0], [61000.0, 43.0], [62200.0, 1.0], [62600.0, 9.0], [63800.0, 2.0], [64200.0, 3.0], [64600.0, 8.0], [66000.0, 125.0], [68400.0, 58.0], [125200.0, 3.0], [126000.0, 2.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 128000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 285.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7355.0, "series": [{"data": [[0.0, 285.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 356.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7355.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2004.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.8333333333333335, "minX": 1.63133256E12, "maxY": 1767.5085106382978, "series": [{"data": [[1.6313328E12, 3.8333333333333335], [1.63133274E12, 1001.8505516549643]], "isOverall": false, "label": "addFavorite", "isController": false}, {"data": [[1.63133256E12, 869.549999999998]], "isOverall": false, "label": "listFavoriteByPage", "isController": false}, {"data": [[1.6313328E12, 1008.8940000000008]], "isOverall": false, "label": "deleteFavorite", "isController": false}, {"data": [[1.63133268E12, 811.3640109890106], [1.63133262E12, 1767.5085106382978], [1.63133274E12, 37.85135135135134]], "isOverall": false, "label": "deleteAllFavorite", "isController": false}, {"data": [[1.63133256E12, 956.859906604403], [1.63133262E12, 262.9341317365268]], "isOverall": false, "label": "checkFavorite", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6313328E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 83.0, "minX": 1.0, "maxY": 125772.0, "series": [{"data": [[2.0, 46655.0], [3.0, 45936.125], [4.0, 12666.5], [5.0, 36948.0], [6.0, 106561.5], [7.0, 38984.5], [8.0, 68012.5], [9.0, 125760.0], [10.0, 125754.0], [11.0, 38901.5], [12.0, 125330.0], [13.0, 125314.0], [14.0, 125320.0], [15.0, 16597.94736842105], [16.0, 125318.0], [17.0, 125310.0], [18.0, 125297.0], [19.0, 125564.0], [20.0, 29215.333333333336], [21.0, 67839.5], [22.0, 29177.277777777777], [23.0, 67785.0], [24.0, 125772.0], [25.0, 48515.666666666664], [26.0, 125738.0], [27.0, 35209.8], [28.0, 70368.5], [29.0, 29457.285714285714], [30.0, 125711.0], [31.0, 70456.0], [33.0, 25119.666666666668], [32.0, 32859.16666666667], [34.0, 15666.839999999997], [35.0, 14561.583333333332], [37.0, 17975.0], [36.0, 125624.0], [39.0, 34508.99999999999], [38.0, 44641.6], [41.0, 25584.125], [40.0, 48314.0], [42.0, 26007.666666666664], [43.0, 38988.0], [44.0, 17899.69230769231], [45.0, 50467.33333333333], [46.0, 28997.166666666664], [47.0, 20988.894736842107], [49.0, 28204.0], [48.0, 74944.5], [50.0, 49467.666666666664], [51.0, 37034.75], [52.0, 34661.2], [53.0, 125416.0], [55.0, 7995.235294117647], [54.0, 11978.0], [57.0, 9436.5], [56.0, 20888.0], [59.0, 12415.0], [58.0, 15868.0], [60.0, 92783.40000000001], [61.0, 41820.8], [63.0, 33624.2], [62.0, 68036.5], [67.0, 38714.75], [66.0, 13536.076923076924], [65.0, 125403.0], [64.0, 125399.0], [70.0, 37681.0], [68.0, 31436.000000000004], [69.0, 47017.5], [75.0, 20965.1], [72.0, 21394.29411764706], [74.0, 24415.090909090908], [73.0, 47056.75], [76.0, 33503.25], [78.0, 49800.5], [79.0, 98391.0], [77.0, 48078.333333333336], [83.0, 85.0], [80.0, 32386.0], [82.0, 16295.736842105263], [81.0, 96754.0], [87.0, 32068.875000000004], [84.0, 20581.800000000003], [86.0, 83.0], [85.0, 7154.4], [91.0, 17325.714285714286], [89.0, 9002.333333333334], [88.0, 8026.8125], [90.0, 20996.75], [94.0, 14274.0], [93.0, 17624.25], [92.0, 7545.0], [99.0, 7187.0], [98.0, 7220.25], [97.0, 4136.476190476191], [96.0, 20936.833333333332], [100.0, 7125.0], [102.0, 95.0], [101.0, 9080.388888888889], [107.0, 7163.142857142858], [111.0, 8613.666666666666], [109.0, 10664.25], [114.0, 5354.400000000001], [113.0, 7898.25], [115.0, 4332.066666666667], [112.0, 8621.5], [119.0, 53808.0], [118.0, 8690.285714285716], [116.0, 4036.3846153846152], [123.0, 38188.5], [122.0, 59036.0], [121.0, 38262.5], [120.0, 48649.666666666664], [127.0, 38249.0], [126.0, 60513.42857142857], [125.0, 7072.5], [124.0, 69428.0], [133.0, 17079.714285714286], [132.0, 8992.0], [130.0, 7047.0], [129.0, 32584.0], [134.0, 23819.75], [135.0, 69443.25], [128.0, 16008.636363636366], [143.0, 10917.692307692307], [142.0, 13662.5], [141.0, 13765.0], [140.0, 49627.92592592592], [138.0, 38240.0], [136.0, 19673.090909090904], [137.0, 69440.33333333333], [149.0, 12350.81818181818], [144.0, 15964.363636363638], [151.0, 13626.666666666666], [150.0, 10380.333333333334], [148.0, 16312.2], [147.0, 15311.545454545454], [145.0, 8593.5], [146.0, 20432.0], [159.0, 60870.77272727273], [156.0, 10403.636363636364], [155.0, 4305.307692307692], [153.0, 3505.3333333333335], [152.0, 140.5], [157.0, 8047.333333333334], [158.0, 18998.68181818182], [154.0, 16385.800000000003], [165.0, 6484.166666666667], [164.0, 8511.0], [163.0, 8517.0], [162.0, 8046.4], [167.0, 20245.833333333332], [172.0, 2277.333333333333], [171.0, 9098.315789473685], [175.0, 171.33333333333334], [174.0, 6258.4], [170.0, 6430.5], [168.0, 13605.333333333334], [181.0, 10680.583333333334], [183.0, 9293.3], [180.0, 23263.333333333332], [182.0, 69450.83333333333], [179.0, 69442.0], [178.0, 69453.0], [187.0, 5166.75], [188.0, 183.0], [186.0, 173.0], [184.0, 183.0], [199.0, 6411.5], [198.0, 4914.5], [203.0, 9027.2], [201.0, 14119.111111111111], [200.0, 6547.0], [207.0, 32421.5], [206.0, 20221.666666666668], [205.0, 20256.14285714286], [204.0, 20206.4], [214.0, 42744.95], [212.0, 34170.307692307695], [215.0, 10029.5], [211.0, 68971.0], [209.0, 44567.0], [208.0, 68950.33333333333], [213.0, 20235.0], [210.0, 20208.714285714286], [223.0, 8391.818181818182], [222.0, 8210.166666666666], [218.0, 8382.75], [217.0, 9950.699999999999], [221.0, 8577.0], [220.0, 8554.0], [219.0, 8551.0], [216.0, 9020.75], [229.0, 7958.5], [228.0, 7984.9375], [226.0, 7966.5], [224.0, 7882.583333333334], [231.0, 8577.0], [230.0, 8562.0], [227.0, 8586.0], [225.0, 8544.25], [239.0, 4729.5], [236.0, 24136.142857142855], [234.0, 7223.333333333333], [235.0, 23139.866666666665], [237.0, 46066.166666666664], [238.0, 55229.6], [233.0, 240.0], [232.0, 8563.25], [242.0, 222.46153846153848], [241.0, 6176.95238095238], [240.0, 49194.5], [246.0, 20251.125], [245.0, 20273.0], [244.0, 20229.571428571428], [254.0, 28767.85714285714], [252.0, 6773.0], [250.0, 6222.0], [248.0, 6231.0], [255.0, 68993.0], [253.0, 68978.0], [258.0, 7306.5], [269.0, 9925.125], [268.0, 10567.75], [259.0, 20273.75], [264.0, 15419.875], [271.0, 20219.0], [270.0, 20141.0], [261.0, 7337.5], [260.0, 40819.16666666667], [256.0, 53550.625], [257.0, 68974.66666666667], [266.0, 40952.28571428572], [265.0, 20333.0], [267.0, 20261.0], [263.0, 34875.3], [262.0, 9460.388888888889], [285.0, 22133.0], [287.0, 22948.25], [286.0, 68643.70000000001], [284.0, 8119.666666666667], [275.0, 8528.0], [274.0, 20259.363636363636], [283.0, 7382.666666666667], [282.0, 8845.0], [276.0, 7259.0], [277.0, 8544.5], [278.0, 68627.0], [273.0, 13804.5], [272.0, 9905.6], [279.0, 18543.166666666664], [281.0, 10046.285714285716], [280.0, 8532.5], [291.0, 8585.4], [301.0, 13648.25], [302.0, 6861.0], [300.0, 9964.2], [295.0, 25795.0625], [294.0, 7390.0], [288.0, 8265.2], [290.0, 8540.5], [289.0, 8547.0], [298.0, 17229.25], [299.0, 20194.5], [297.0, 8200.0], [292.0, 8558.636363636362], [318.0, 7238.666666666667], [319.0, 7369.0], [316.0, 7994.428571428572], [306.0, 61089.61538461538], [307.0, 20215.333333333332], [317.0, 8162.0], [314.0, 7242.0], [315.0, 9469.6], [313.0, 17924.71428571429], [312.0, 10556.0], [311.0, 12067.380952380954], [308.0, 12253.166666666668], [310.0, 20271.5], [309.0, 20181.5], [305.0, 15953.666666666666], [304.0, 7739.375], [322.0, 5336.5], [333.0, 13797.260869565218], [328.0, 16963.75], [330.0, 20177.0], [327.0, 7366.5], [324.0, 2661.666666666667], [325.0, 10261.666666666666], [323.0, 820.0714285714286], [321.0, 9615.25], [335.0, 8015.0], [332.0, 20184.0], [338.0, 8570.416666666666], [351.0, 11795.42857142857], [350.0, 6696.666666666666], [343.0, 47767.5], [337.0, 333.75], [336.0, 8021.61111111111], [342.0, 26362.666666666668], [341.0, 18289.9], [340.0, 25552.125], [349.0, 35523.8], [348.0, 23073.0], [339.0, 343.0], [347.0, 23066.333333333332], [346.0, 33952.0], [345.0, 32225.0], [344.0, 23066.0], [353.0, 7728.142857142857], [366.0, 40045.0], [363.0, 6336.0], [367.0, 62801.41176470588], [360.0, 19892.333333333332], [362.0, 19891.5], [359.0, 6149.0], [358.0, 6292.0], [357.0, 8662.0], [356.0, 12677.75], [354.0, 13391.0], [352.0, 6173.058823529413], [365.0, 23985.083333333332], [355.0, 19893.0], [371.0, 6350.2], [383.0, 9898.857142857141], [377.0, 10273.42857142857], [382.0, 14831.666666666668], [381.0, 5336.0], [378.0, 8342.0], [379.0, 10283.909090909092], [374.0, 6462.0], [373.0, 6396.5], [375.0, 6198.142857142857], [368.0, 9764.25], [369.0, 68555.14285714284], [396.0, 37294.0], [391.0, 7214.333333333333], [385.0, 19671.25], [387.0, 19664.0], [386.0, 19660.0], [395.0, 10965.615384615387], [399.0, 27806.333333333332], [398.0, 20663.15384615385], [397.0, 68380.0], [392.0, 19938.0], [390.0, 19660.5], [388.0, 11986.363636363636], [389.0, 10250.0], [403.0, 68400.0], [411.0, 5678.833333333333], [409.0, 6971.333333333333], [408.0, 5465.666666666667], [415.0, 10204.666666666666], [407.0, 5305.666666666667], [406.0, 46055.78571428572], [404.0, 37713.700000000004], [402.0, 68399.0], [400.0, 68400.66666666667], [431.0, 5919.0], [430.0, 36774.0], [429.0, 65784.16666666667], [428.0, 14169.875], [427.0, 9327.090909090908], [426.0, 4945.0], [418.0, 6593.0], [423.0, 19483.294117647063], [446.0, 15315.75], [447.0, 4952.0], [445.0, 11852.0], [439.0, 5270.111111111111], [438.0, 11545.0], [437.0, 10424.2], [432.0, 5269.125], [442.0, 11202.0], [440.0, 6172.0], [441.0, 14582.666666666666], [435.0, 6182.0], [434.0, 6182.333333333333], [433.0, 6172.0], [455.0, 10899.25], [463.0, 12813.076923076922], [461.0, 10464.2], [460.0, 18803.0], [451.0, 18789.0], [450.0, 12489.0], [449.0, 6192.5], [448.0, 18771.0], [458.0, 5912.96551724138], [459.0, 18792.5], [457.0, 11076.846153846156], [453.0, 12197.0], [452.0, 12053.833333333332], [456.0, 6149.666666666667], [454.0, 6170.0], [467.0, 9832.2], [478.0, 16708.363636363636], [471.0, 4958.0], [468.0, 4895.0], [466.0, 4889.0], [479.0, 6132.0], [473.0, 68593.0], [472.0, 68594.33333333333], [477.0, 37355.0], [476.0, 68582.28571428572], [475.0, 68580.25], [474.0, 68581.57142857143], [492.0, 5344.090909090909], [482.0, 11467.833333333332], [486.0, 6141.999999999999], [480.0, 58614.07999999999], [483.0, 17626.07142857143], [491.0, 10722.0], [484.0, 11077.64705882353], [505.0, 4740.0], [507.0, 4769.0], [504.0, 5920.0], [503.0, 4750.0], [502.0, 4885.5], [500.0, 4767.0], [501.0, 6137.4], [499.0, 7668.857142857143], [511.0, 5587.0], [506.0, 5690.0], [526.0, 26268.454545454548], [536.0, 5452.0], [530.0, 18698.428571428572], [528.0, 68621.5], [532.0, 23579.545454545456], [520.0, 4803.666666666667], [522.0, 68590.0], [524.0, 68630.5], [516.0, 13753.0], [514.0, 17613.5], [512.0, 10973.714285714286], [534.0, 528.1538461538462], [548.0, 4980.333333333333], [568.0, 4771.0], [546.0, 4920.666666666667], [544.0, 10356.916666666666], [564.0, 30240.1], [566.0, 68685.59999999999], [562.0, 49610.0], [558.0, 9375.941176470587], [556.0, 4940.0], [554.0, 4699.666666666667], [552.0, 533.5], [550.0, 528.3333333333334], [602.0, 4896.0], [606.0, 3704.0], [592.0, 49245.666666666664], [604.0, 4984.75], [600.0, 5311.875], [594.0, 54984.5], [590.0, 18563.85714285714], [588.0, 5849.0], [586.0, 6040.0], [612.0, 19715.5], [610.0, 35003.0], [614.0, 7326.363636363636], [632.0, 8893.25], [636.0, 9760.555555555555], [634.0, 10429.0], [608.0, 4866.0], [618.0, 8031.0], [616.0, 10237.25], [622.0, 7561.818181818182], [620.0, 10340.0], [626.0, 38429.50000000001], [628.0, 20350.38888888889], [630.0, 10467.777777777777], [624.0, 16325.320000000002], [638.0, 10525.0], [646.0, 9121.5], [666.0, 34652.75], [670.0, 10312.625], [644.0, 6587.333333333333], [642.0, 8628.0], [662.0, 57029.52631578947], [660.0, 36818.75], [656.0, 4030.0], [658.0, 28080.333333333336], [654.0, 5565.2], [640.0, 10491.0], [652.0, 10672.75], [650.0, 8892.0], [648.0, 6615.611111111111], [688.0, 4277.6], [698.0, 18104.7], [692.0, 27326.666666666664], [694.0, 38137.33333333333], [690.0, 2582.5], [678.0, 50700.125], [672.0, 4252.5], [686.0, 66129.33333333333], [706.0, 6693.428571428572], [728.0, 496.5], [704.0, 39386.181818181816], [708.0, 32761.9], [710.0, 5482.0], [718.0, 3864.0], [714.0, 6925.111111111111], [716.0, 6562.5], [726.0, 20637.307692307695], [720.0, 3951.142857142857], [734.0, 35174.5], [732.0, 41417.8], [730.0, 21941.714285714286], [724.0, 6894.454545454545], [722.0, 10437.0], [742.0, 4303.0], [764.0, 5794.0], [762.0, 4192.0], [760.0, 3413.375], [740.0, 4338.666666666667], [736.0, 66017.8], [738.0, 66033.57142857143], [750.0, 66041.5], [748.0, 45448.666666666664], [744.0, 4655.0], [758.0, 4215.0], [756.0, 4253.75], [754.0, 8490.333333333334], [752.0, 8226.333333333332], [792.0, 36284.75], [798.0, 4118.0], [796.0, 66190.0], [794.0, 4145.0], [780.0, 4141.0], [782.0, 9582.0], [772.0, 4148.0], [776.0, 51431.705882352944], [790.0, 3984.5], [788.0, 8003.428571428572], [786.0, 4132.0], [830.0, 3908.666666666667], [816.0, 66301.0], [826.0, 44939.05263157895], [828.0, 10190.5], [806.0, 4856.545454545454], [824.0, 9971.857142857143], [804.0, 3624.6], [822.0, 7297.5], [820.0, 29055.8], [818.0, 19004.0], [814.0, 4197.0], [812.0, 4049.0], [810.0, 4072.0], [808.0, 3231.35], [858.0, 9448.545454545454], [856.0, 3548.0], [860.0, 3871.3333333333335], [850.0, 66293.33333333333], [854.0, 55491.142857142855], [852.0, 66304.0], [848.0, 24725.333333333332], [846.0, 3256.0], [834.0, 9789.499999999998], [832.0, 3291.0], [838.0, 4269.0], [836.0, 10265.999999999998], [842.0, 3269.5], [844.0, 66291.66666666667], [840.0, 3259.333333333333], [892.0, 3757.166666666667], [890.0, 57551.21428571428], [884.0, 7591.0], [886.0, 10416.222222222223], [882.0, 9155.555555555555], [874.0, 4710.666666666667], [876.0, 9529.272727272728], [878.0, 66310.29166666667], [888.0, 9997.833333333332], [898.0, 3818.0], [896.0, 645.2], [908.0, 642.0], [906.0, 603.75], [900.0, 9500.0], [902.0, 3821.0], [922.0, 3058.6], [926.0, 6754.444444444444], [924.0, 5083.0], [916.0, 685.0], [914.0, 2878.1111111111113], [904.0, 1945.5], [958.0, 3480.5], [940.0, 9406.0], [936.0, 10081.0], [950.0, 17521.666666666668], [948.0, 3318.421052631579], [946.0, 2284.0], [944.0, 21340.285714285714], [942.0, 7442.688524590163], [930.0, 47811.66666666667], [928.0, 15400.0], [934.0, 6011.933333333333], [952.0, 46717.0], [956.0, 65719.93333333333], [954.0, 28794.0], [932.0, 3176.0], [984.0, 3568.0], [990.0, 5472.666666666667], [976.0, 9047.0], [988.0, 9567.714285714286], [960.0, 9748.0], [966.0, 9745.0], [986.0, 3576.5555555555557], [982.0, 3556.0], [978.0, 3555.1428571428573], [970.0, 41509.217391304344], [968.0, 3460.5], [992.0, 7280.571428571429], [996.0, 3667.0], [1006.0, 19555.181818181816], [994.0, 7843.700000000001], [1004.0, 8625.545454545454], [1002.0, 4802.333333333334], [1000.0, 3043.4], [1016.0, 3488.5], [1020.0, 3418.166666666667], [1022.0, 8091.249999999999], [1012.0, 42002.0], [1008.0, 22584.272727272728], [1010.0, 65913.0], [998.0, 1625.3333333333335], [1080.0, 2949.0], [1072.0, 1617.0], [1052.0, 5461.6], [1040.0, 3522.2727272727275], [1044.0, 5849.5], [1048.0, 3178.0], [1056.0, 28651.299999999996], [1060.0, 6056.5], [1064.0, 57135.71428571428], [1084.0, 3153.25], [1076.0, 6896.500000000001], [1036.0, 9651.0], [1028.0, 3179.75], [1024.0, 36784.833333333336], [1068.0, 8649.0], [1144.0, 48792.399999999994], [1128.0, 1708.0], [1132.0, 22700.666666666664], [1120.0, 3233.25], [1148.0, 10490.5], [1140.0, 5369.428571428572], [1136.0, 9906.25], [1100.0, 9976.636363636364], [1092.0, 52652.999999999985], [1088.0, 3854.333333333333], [1116.0, 66237.0], [1104.0, 9103.8], [1108.0, 7917.6], [1212.0, 3006.0], [1164.0, 34523.5], [1192.0, 44772.666666666664], [1196.0, 15286.4], [1184.0, 10821.428571428572], [1188.0, 37727.5], [1180.0, 65753.0], [1176.0, 23703.0], [1172.0, 3942.5], [1204.0, 9410.0], [1200.0, 16045.166666666666], [1160.0, 16923.0], [1156.0, 7573.636363636363], [1152.0, 5398.333333333334], [1208.0, 9422.666666666666], [1224.0, 10424.42857142857], [1220.0, 26772.0], [1272.0, 18182.5], [1264.0, 14094.923076923078], [1216.0, 64610.0], [1244.0, 2884.0], [1236.0, 2782.5], [1232.0, 23448.285714285714], [1248.0, 3650.090909090909], [1276.0, 64588.666666666664], [1252.0, 7674.333333333333], [1256.0, 64749.0], [1260.0, 64756.0], [1268.0, 64286.0], [1292.0, 14625.4], [1304.0, 8718.0], [1332.0, 12995.666666666668], [1296.0, 5243.238095238095], [1300.0, 6318.5], [1312.0, 13480.333333333334], [1316.0, 17585.6], [1320.0, 6340.833333333334], [1324.0, 4909.0], [1340.0, 22618.333333333332], [1288.0, 33289.5], [1284.0, 43844.333333333336], [1308.0, 5590.555555555556], [1280.0, 63983.0], [1348.0, 6167.4], [1380.0, 6846.818181818181], [1344.0, 2577.0], [1392.0, 8099.0], [1400.0, 15763.625000000002], [1376.0, 27034.625000000004], [1372.0, 10980.57142857143], [1364.0, 14800.6], [1368.0, 61538.0], [1360.0, 22105.18181818182], [1384.0, 4557.133333333334], [1388.0, 4162.333333333333], [1468.0, 56041.0], [1424.0, 60992.0], [1428.0, 60954.75], [1432.0, 25462.800000000003], [1440.0, 7312.312499999999], [1444.0, 10632.272727272728], [1448.0, 11359.166666666668], [1452.0, 13275.777777777777], [1456.0, 21426.75], [1460.0, 13706.636363636364], [1464.0, 56651.0], [1412.0, 2535.166666666667], [1420.0, 17938.416666666664], [1416.0, 9457.333333333334], [1408.0, 3391.0], [1480.0, 28178.0], [1476.0, 15400.75], [1512.0, 10758.333333333332], [1520.0, 2439.5], [1484.0, 52285.0], [1472.0, 10006.285714285714], [1496.0, 9458.0], [1492.0, 51830.0], [1500.0, 50725.0], [1488.0, 13221.0], [1528.0, 15034.857142857145], [1524.0, 15097.5], [1516.0, 11735.714285714286], [1508.0, 18618.333333333336], [1504.0, 50688.0], [1532.0, 25983.0], [1588.0, 18986.5], [1592.0, 9722.09090909091], [1584.0, 36642.0], [1576.0, 10648.000000000002], [1572.0, 24333.0], [1568.0, 40855.0], [1596.0, 12278.375], [1548.0, 12863.25], [1544.0, 16858.333333333336], [1540.0, 46805.0], [1536.0, 13559.833333333334], [1556.0, 25529.0], [1552.0, 42534.0], [1560.0, 19935.666666666668], [1564.0, 12149.8], [1580.0, 14675.333333333334], [1632.0, 1549.8], [1608.0, 8691.875], [1628.0, 3218.0], [1604.0, 6043.3], [1640.0, 8577.25], [1644.0, 35444.0], [1636.0, 2843.5], [1660.0, 35368.0], [1656.0, 8569.0], [1652.0, 35392.2], [1648.0, 8611.0], [1612.0, 14227.4], [1624.0, 3427.25], [1616.0, 8908.0], [1620.0, 17775.333333333332], [1668.0, 7778.75], [1676.0, 2286.142857142857], [1664.0, 13286.0], [1692.0, 35452.0], [1684.0, 35285.333333333336], [1688.0, 8598.714285714284], [1720.0, 33110.0], [1724.0, 8045.666666666667], [1696.0, 34340.0], [1716.0, 14776.25], [1712.0, 33139.9], [1704.0, 8534.25], [1784.0, 32538.0], [1760.0, 24866.666666666668], [1740.0, 7975.5], [1736.0, 8605.5], [1756.0, 7962.0], [1744.0, 7980.0], [1776.0, 7942.0], [1764.0, 7958.0], [1812.0, 31246.5], [1828.0, 31229.5], [1808.0, 9407.96153846154], [1840.0, 7960.25], [1844.0, 8250.944444444443], [1848.0, 8083.333333333333], [1852.0, 8275.666666666666], [1800.0, 23475.666666666668], [1804.0, 8507.0], [1912.0, 27493.0], [1888.0, 7825.75], [1892.0, 9271.64705882353], [1916.0, 12512.5], [1908.0, 27807.0], [1904.0, 29783.0], [1856.0, 7986.0], [1860.0, 31233.0], [1868.0, 31203.666666666668], [1880.0, 31215.75], [1876.0, 31228.5], [1900.0, 30576.0], [1896.0, 8236.0], [1976.0, 3651.625], [1980.0, 3327.090909090909], [1952.0, 6108.25], [1956.0, 16084.0], [1960.0, 15575.0], [1968.0, 11412.0], [1972.0, 2545.6666666666665], [1932.0, 22222.0], [1928.0, 22835.0], [1924.0, 23728.0], [1920.0, 9656.0], [1948.0, 8110.75], [1944.0, 17990.0], [1940.0, 20784.0], [1936.0, 21321.0], [1964.0, 12048.0], [2000.0, 5786.0], [1992.0, 5829.0], [1988.0, 3130.5], [1984.0, 6250.0], [1025.0, 65874.0], [1073.0, 900.6666666666666], [1057.0, 9721.0], [1081.0, 3537.166666666667], [1045.0, 9028.538461538463], [1049.0, 3487.0], [1053.0, 8597.866666666667], [1061.0, 6048.0], [1065.0, 3431.0], [1077.0, 879.0], [1033.0, 8659.0], [1037.0, 8652.5], [1029.0, 17386.88888888889], [1069.0, 957.0], [1121.0, 3224.0], [1129.0, 36295.0], [1133.0, 3854.75], [1125.0, 9155.0], [1145.0, 6760.5], [1149.0, 10117.0], [1141.0, 5651.666666666666], [1137.0, 45071.87500000001], [1101.0, 9759.42857142857], [1097.0, 7397.857142857143], [1093.0, 66296.0], [1089.0, 23832.333333333332], [1117.0, 3460.5], [1113.0, 8906.0], [1109.0, 7896.0], [1105.0, 15147.357142857145], [1201.0, 5441.071428571428], [1193.0, 11188.5], [1189.0, 65655.0], [1185.0, 34238.0], [1197.0, 64438.0], [1169.0, 65851.5], [1177.0, 23992.75], [1181.0, 28230.333333333336], [1157.0, 10539.25], [1153.0, 9890.75], [1173.0, 44949.0], [1205.0, 7158.0], [1165.0, 34496.5], [1161.0, 22219.0], [1213.0, 12745.806451612907], [1209.0, 24617.666666666664], [1217.0, 64595.0], [1225.0, 64883.0], [1221.0, 10195.642857142859], [1245.0, 64605.0], [1265.0, 25620.0], [1241.0, 3060.8], [1237.0, 2957.0], [1233.0, 64900.0], [1249.0, 64533.5], [1253.0, 64716.5], [1257.0, 2775.25], [1261.0, 8564.818181818182], [1277.0, 64017.0], [1273.0, 33668.0], [1269.0, 8407.818181818182], [1329.0, 8597.633333333333], [1293.0, 17639.333333333332], [1305.0, 4306.833333333333], [1301.0, 7151.0], [1297.0, 14890.0], [1333.0, 7006.533333333333], [1337.0, 2558.0], [1341.0, 42690.666666666664], [1313.0, 27690.0], [1321.0, 10112.0], [1325.0, 10084.5], [1317.0, 4685.416666666666], [1289.0, 17248.75], [1285.0, 20608.2], [1281.0, 5318.105263157894], [1309.0, 6439.25], [1393.0, 9204.5], [1381.0, 2045.0], [1377.0, 2128.0], [1349.0, 4362.25], [1345.0, 9771.692307692307], [1357.0, 12325.166666666668], [1353.0, 44840.66666666667], [1401.0, 61012.0], [1405.0, 2975.0], [1373.0, 11791.0], [1369.0, 17785.25], [1365.0, 2645.0], [1361.0, 22456.333333333332], [1385.0, 9343.363636363638], [1465.0, 56551.0], [1457.0, 23096.333333333332], [1425.0, 1951.5], [1433.0, 19648.8], [1441.0, 60896.83333333333], [1445.0, 60749.0], [1469.0, 14041.4], [1449.0, 20523.666666666668], [1453.0, 9615.5], [1461.0, 16144.25], [1417.0, 31830.25], [1421.0, 3415.4166666666674], [1409.0, 3405.2608695652175], [1477.0, 28215.5], [1473.0, 54990.0], [1481.0, 53702.0], [1489.0, 7084.75], [1501.0, 17561.2], [1497.0, 9314.0], [1493.0, 51932.0], [1521.0, 34549.333333333336], [1485.0, 20055.0], [1525.0, 17373.2], [1529.0, 19176.5], [1517.0, 13647.5], [1513.0, 14703.25], [1505.0, 50679.0], [1533.0, 16871.4], [1509.0, 27012.0], [1597.0, 18769.5], [1593.0, 7606.285714285715], [1569.0, 40334.0], [1573.0, 12707.999999999998], [1577.0, 14602.333333333334], [1581.0, 5067.523809523809], [1589.0, 8299.263157894737], [1585.0, 10045.857142857143], [1549.0, 43272.0], [1545.0, 10026.833333333334], [1541.0, 46685.0], [1537.0, 28123.0], [1565.0, 9945.2], [1561.0, 10336.400000000001], [1553.0, 13127.25], [1613.0, 35462.0], [1657.0, 35339.333333333336], [1661.0, 8563.666666666666], [1653.0, 35397.0], [1605.0, 26618.0], [1609.0, 8948.57142857143], [1633.0, 21940.4], [1629.0, 1619.5], [1637.0, 1389.0], [1625.0, 5357.90909090909], [1621.0, 10318.071428571428], [1617.0, 35500.5], [1641.0, 35452.75], [1645.0, 35407.0], [1673.0, 35357.0], [1717.0, 33107.0], [1669.0, 8465.375], [1677.0, 35282.5], [1665.0, 6981.428571428572], [1693.0, 34918.0], [1681.0, 35297.0], [1697.0, 34242.0], [1701.0, 33129.5], [1705.0, 8505.0], [1721.0, 16763.333333333332], [1713.0, 9698.954545454546], [1741.0, 7975.0], [1785.0, 31960.0], [1789.0, 31358.0], [1777.0, 7948.0], [1765.0, 7937.0], [1745.0, 23310.833333333336], [1737.0, 33097.0], [1733.0, 15588.642857142859], [1729.0, 33075.28571428572], [1805.0, 7983.176470588236], [1797.0, 23522.0], [1825.0, 31238.0], [1817.0, 31248.2], [1809.0, 31238.0], [1801.0, 31238.0], [1793.0, 31341.0], [1853.0, 8165.333333333333], [1849.0, 8149.0], [1845.0, 8241.0], [1841.0, 7951.0], [1913.0, 27230.0], [1889.0, 17164.0], [1893.0, 15913.666666666666], [1897.0, 23122.0], [1917.0, 26150.0], [1909.0, 28077.0], [1905.0, 29276.0], [1857.0, 14098.368421052632], [1885.0, 31185.5], [1901.0, 29887.0], [1977.0, 5253.333333333333], [1953.0, 3637.928571428572], [1957.0, 15758.0], [1961.0, 12378.0], [1981.0, 3553.75], [1973.0, 5452.5], [1969.0, 11385.0], [1921.0, 10271.875], [1925.0, 9255.583333333336], [1929.0, 22464.0], [1933.0, 22051.0], [1949.0, 7401.333333333334], [1945.0, 7741.0], [1941.0, 18313.0], [1937.0, 21064.0], [1997.0, 5784.0], [1993.0, 5817.0], [1985.0, 6166.0], [527.0, 68619.5], [537.0, 5015.692307692308], [529.0, 22980.0], [531.0, 521.0], [521.0, 68611.0], [523.0, 68619.5], [525.0, 58933.16666666667], [517.0, 12155.761904761905], [515.0, 13418.0], [513.0, 17615.75], [533.0, 64868.61111111111], [545.0, 4963.555555555556], [559.0, 2525.5], [569.0, 4764.0], [567.0, 4716.625], [563.0, 68656.33333333333], [565.0, 68674.66666666667], [557.0, 4691.333333333333], [553.0, 1622.4705882352944], [549.0, 3089.5], [551.0, 4734.6], [605.0, 320.5], [607.0, 2079.625], [601.0, 8993.857142857143], [599.0, 5329.0], [595.0, 10145.190476190479], [593.0, 6524.750000000001], [591.0, 34195.333333333336], [589.0, 55890.6], [587.0, 5891.5], [585.0, 4710.142857142858], [635.0, 50314.333333333336], [637.0, 5038.235294117648], [611.0, 21842.833333333332], [613.0, 8857.57142857143], [615.0, 9299.6], [633.0, 10536.0], [623.0, 7744.333333333333], [617.0, 7773.615384615386], [619.0, 10331.25], [621.0, 10437.0], [625.0, 25617.0], [627.0, 51410.833333333336], [631.0, 8422.5], [629.0, 10607.5], [609.0, 236.5], [639.0, 7616.5], [667.0, 5545.666666666667], [671.0, 398.16666666666674], [657.0, 10606.8], [665.0, 6773.428571428572], [645.0, 9635.5], [641.0, 9546.733333333332], [661.0, 37308.166666666664], [663.0, 10421.5], [659.0, 24170.86666666666], [655.0, 7655.5], [649.0, 6913.2], [651.0, 10675.5], [699.0, 3933.0], [697.0, 8868.875], [693.0, 19718.75], [691.0, 10020.666666666666], [695.0, 8537.833333333334], [689.0, 2322.0], [701.0, 37593.5], [683.0, 48450.28571428572], [681.0, 4161.333333333333], [677.0, 4016.0], [675.0, 10348.0], [673.0, 4260.590909090909], [685.0, 3021.75], [707.0, 9647.6], [735.0, 9656.285714285714], [719.0, 3303.6], [709.0, 24291.75], [705.0, 8122.0], [711.0, 9281.0], [715.0, 3759.0], [713.0, 9265.375], [717.0, 7556.7], [727.0, 11081.625], [725.0, 10122.125], [721.0, 1543.3333333333335], [733.0, 35175.5], [729.0, 4312.0], [731.0, 4295.0], [723.0, 7558.333333333333], [743.0, 3669.0], [767.0, 6562.333333333333], [763.0, 51892.18750000001], [761.0, 3603.0], [737.0, 24889.666666666668], [751.0, 55267.909090909096], [749.0, 4286.333333333333], [747.0, 4241.8], [759.0, 9265.0], [757.0, 7557.666666666667], [755.0, 9283.0], [753.0, 7689.571428571428], [795.0, 53637.0], [799.0, 35069.5], [785.0, 4064.6], [797.0, 66171.5], [793.0, 35093.0], [781.0, 9554.375], [783.0, 9557.0], [773.0, 9426.833333333334], [771.0, 4164.25], [769.0, 10189.2], [779.0, 4158.0], [777.0, 3079.0], [791.0, 27370.666666666668], [825.0, 10084.0], [805.0, 39333.857142857145], [831.0, 4275.0], [829.0, 8980.4], [827.0, 3852.4210526315796], [801.0, 35963.13043478261], [803.0, 7384.333333333333], [823.0, 7959.666666666667], [821.0, 10313.428571428572], [817.0, 24774.333333333332], [815.0, 53826.4], [813.0, 9562.428571428572], [811.0, 4078.0], [809.0, 4081.0], [837.0, 4565.166666666666], [863.0, 3683.3333333333335], [857.0, 3913.0], [849.0, 15729.777777777777], [851.0, 841.6], [835.0, 5045.636363636364], [833.0, 10266.5], [839.0, 7471.333333333333], [845.0, 3670.0], [843.0, 17648.571428571428], [893.0, 9484.5], [895.0, 623.0], [891.0, 9496.25], [889.0, 9912.8], [869.0, 3555.0], [867.0, 3254.5], [865.0, 3242.0], [887.0, 9864.0], [885.0, 10128.0], [883.0, 9142.666666666666], [881.0, 3883.0], [879.0, 3495.2], [875.0, 9376.333333333332], [877.0, 9494.0], [899.0, 3581.1666666666665], [903.0, 3184.5], [909.0, 631.25], [907.0, 7657.4], [905.0, 652.5], [897.0, 32546.6875], [901.0, 45683.5], [921.0, 3795.0], [923.0, 720.0], [925.0, 5715.538461538462], [927.0, 11343.903225806453], [915.0, 634.9], [917.0, 3379.3333333333335], [911.0, 683.75], [945.0, 16452.142857142855], [939.0, 2522.5555555555557], [937.0, 8764.333333333334], [959.0, 5471.272727272727], [951.0, 5954.0], [949.0, 4490.142857142857], [947.0, 2455.5], [943.0, 28731.699999999997], [929.0, 15587.88888888889], [931.0, 46013.45454545455], [935.0, 10127.2], [953.0, 50268.875], [955.0, 4715.892857142859], [941.0, 35021.5], [985.0, 6281.75], [987.0, 792.3333333333334], [989.0, 9851.0], [973.0, 9732.5], [963.0, 9632.666666666666], [965.0, 9245.0], [967.0, 9755.0], [983.0, 6030.000000000001], [979.0, 3183.0], [977.0, 3697.0], [991.0, 10011.5], [999.0, 3054.166666666667], [1005.0, 844.6], [997.0, 3152.0], [995.0, 9896.961538461537], [1007.0, 24309.0], [1003.0, 704.0], [1001.0, 2179.75], [1019.0, 3445.7692307692305], [1021.0, 57016.28571428571], [1015.0, 54155.0], [1013.0, 46843.66666666667], [1011.0, 21014.5], [1023.0, 3542.8], [1038.0, 30808.6875], [1042.0, 868.0], [1050.0, 3510.2], [1058.0, 17100.545454545456], [1066.0, 22359.0], [1078.0, 6161.25], [1030.0, 22967.75], [1054.0, 9840.428571428572], [1034.0, 8652.0], [1074.0, 28830.0], [1070.0, 2066.0], [1150.0, 5717.75], [1134.0, 4839.8], [1130.0, 24104.333333333332], [1146.0, 38210.0], [1126.0, 41844.28571428572], [1122.0, 37593.375], [1142.0, 5632.285714285715], [1138.0, 5456.833333333334], [1102.0, 38174.23529411764], [1098.0, 6119.0], [1090.0, 66029.0], [1114.0, 7629.0], [1110.0, 42210.28571428572], [1118.0, 28189.333333333332], [1106.0, 7818.000000000001], [1206.0, 23795.727272727276], [1194.0, 9682.888888888889], [1186.0, 65690.0], [1190.0, 38061.5], [1182.0, 11166.454545454546], [1178.0, 65779.0], [1174.0, 8866.75], [1170.0, 3171.0], [1202.0, 16563.25], [1166.0, 10139.333333333332], [1162.0, 2841.0], [1158.0, 7793.5], [1154.0, 10280.75], [1210.0, 17500.5], [1266.0, 2704.714285714286], [1226.0, 2940.5], [1222.0, 64911.5], [1230.0, 2933.6666666666665], [1218.0, 22191.666666666668], [1234.0, 23502.666666666668], [1278.0, 64005.0], [1262.0, 64736.0], [1250.0, 9893.541666666666], [1270.0, 64552.0], [1274.0, 9863.777777777777], [1330.0, 2660.0], [1302.0, 7187.666666666666], [1298.0, 12187.0], [1294.0, 32476.5], [1314.0, 14217.777777777777], [1318.0, 9916.666666666666], [1326.0, 10157.0], [1322.0, 8769.0], [1338.0, 62722.0], [1342.0, 62718.0], [1334.0, 32869.5], [1286.0, 63950.0], [1290.0, 63799.0], [1282.0, 27219.8], [1306.0, 9882.76923076923], [1358.0, 3358.285714285714], [1402.0, 2542.0], [1382.0, 28619.357142857145], [1378.0, 3079.4285714285716], [1346.0, 9692.111111111111], [1350.0, 3014.6666666666665], [1354.0, 9132.8], [1406.0, 3389.0], [1370.0, 32913.0], [1366.0, 20329.714285714286], [1362.0, 16194.857142857143], [1374.0, 8058.461538461537], [1386.0, 1263.0], [1470.0, 32388.0], [1422.0, 19306.142857142855], [1434.0, 5239.142857142858], [1426.0, 8266.416666666668], [1430.0, 1432.0], [1442.0, 60931.0], [1446.0, 4939.571428571428], [1450.0, 30530.5], [1454.0, 58543.0], [1466.0, 2600.4], [1458.0, 16335.6], [1462.0, 56795.0], [1438.0, 2557.8], [1410.0, 35157.166666666664], [1414.0, 60995.5], [1418.0, 61020.0], [1474.0, 28798.5], [1478.0, 53880.0], [1482.0, 53498.0], [1486.0, 9614.75], [1494.0, 51606.0], [1498.0, 51173.0], [1502.0, 16159.833333333334], [1490.0, 19473.333333333332], [1522.0, 7316.4], [1530.0, 9452.939393939396], [1526.0, 10386.727272727274], [1514.0, 10353.307692307691], [1518.0, 15052.6], [1510.0, 10019.285714285714], [1506.0, 10934.0], [1534.0, 11642.0], [1586.0, 36381.0], [1550.0, 10207.0], [1590.0, 11591.5], [1574.0, 38617.0], [1570.0, 39387.0], [1598.0, 15561.0], [1594.0, 8925.0], [1546.0, 12633.399999999998], [1542.0, 17426.0], [1538.0, 25313.0], [1566.0, 15251.75], [1558.0, 10971.0], [1554.0, 43244.0], [1562.0, 15677.6], [1582.0, 8984.111111111111], [1578.0, 7815.777777777778], [1634.0, 3684.4500000000003], [1630.0, 12230.692307692307], [1602.0, 16217.699999999997], [1638.0, 1610.8], [1642.0, 12919.0], [1646.0, 10981.846153846152], [1662.0, 21972.25], [1658.0, 17525.0], [1654.0, 12430.857142857143], [1650.0, 8571.333333333334], [1622.0, 18453.0], [1618.0, 6587.714285714285], [1678.0, 8563.125], [1718.0, 16803.0], [1714.0, 8601.0], [1674.0, 35305.0], [1670.0, 17476.333333333332], [1666.0, 13277.333333333334], [1694.0, 34830.0], [1690.0, 35267.666666666664], [1682.0, 8614.263157894737], [1726.0, 7975.0], [1702.0, 33114.0], [1698.0, 10885.181818181818], [1786.0, 31610.0], [1790.0, 31356.0], [1782.0, 32999.5], [1758.0, 29713.533333333336], [1742.0, 8004.0], [1750.0, 7988.0], [1746.0, 8551.272727272728], [1778.0, 7902.0], [1774.0, 7954.75], [1766.0, 7928.5], [1826.0, 31241.0], [1834.0, 31218.5], [1838.0, 7959.0], [1830.0, 31249.5], [1822.0, 31246.4], [1798.0, 15730.0], [1810.0, 31281.0], [1802.0, 31343.0], [1842.0, 7967.0], [1806.0, 8506.666666666666], [1846.0, 8158.6], [1854.0, 7991.0], [1850.0, 8308.0], [1914.0, 11707.6], [1918.0, 16943.5], [1890.0, 12770.6], [1894.0, 13823.0], [1910.0, 27662.0], [1906.0, 28625.0], [1886.0, 31179.0], [1858.0, 7904.0], [1870.0, 7832.181818181818], [1862.0, 31219.888888888894], [1874.0, 31202.166666666668], [1902.0, 30378.0], [1974.0, 4661.25], [1970.0, 4088.5], [1982.0, 3490.5], [1954.0, 16397.0], [1958.0, 15639.0], [1962.0, 12267.0], [1978.0, 5212.0], [1934.0, 21508.0], [1930.0, 21796.0], [1926.0, 11110.2], [1922.0, 9561.3], [1950.0, 16892.0], [1946.0, 7392.333333333334], [1942.0, 18279.0], [1938.0, 21030.0], [1966.0, 11613.0], [1990.0, 5950.5], [1986.0, 4337.5], [1079.0, 9479.0], [1087.0, 7458.636363636363], [1047.0, 6071.0], [1043.0, 65934.6], [1051.0, 66044.25], [1059.0, 8648.333333333334], [1063.0, 3445.0], [1067.0, 3419.0], [1055.0, 7713.0], [1027.0, 32078.8], [1075.0, 3021.8], [1039.0, 3535.0], [1031.0, 65871.0], [1071.0, 19130.5], [1139.0, 6377.4], [1123.0, 3404.75], [1143.0, 4275.3076923076915], [1151.0, 9849.666666666666], [1147.0, 9670.0], [1131.0, 9148.5], [1135.0, 9595.833333333332], [1127.0, 4455.4], [1103.0, 17739.714285714286], [1095.0, 3218.0], [1091.0, 66036.0], [1119.0, 3080.0], [1115.0, 31168.88888888889], [1111.0, 66236.0], [1107.0, 8402.75], [1207.0, 11951.0], [1187.0, 7119.7], [1191.0, 10493.0], [1195.0, 33763.5], [1199.0, 27530.4], [1183.0, 15265.555555555555], [1171.0, 34695.5], [1175.0, 7427.882352941177], [1179.0, 37633.0], [1203.0, 17118.285714285714], [1167.0, 65262.5], [1163.0, 30882.0], [1159.0, 58853.20000000001], [1155.0, 10396.0], [1211.0, 21110.6], [1223.0, 8658.923076923078], [1227.0, 2972.0], [1219.0, 2956.1], [1247.0, 37109.25], [1267.0, 64307.0], [1243.0, 2711.0], [1239.0, 52241.4], [1235.0, 64586.0], [1279.0, 14965.2], [1251.0, 23491.5], [1263.0, 23441.666666666668], [1259.0, 64649.0], [1275.0, 2594.0], [1271.0, 64537.0], [1295.0, 17949.5], [1303.0, 5345.0], [1307.0, 10179.5], [1299.0, 36642.5], [1335.0, 62721.0], [1331.0, 50766.8], [1343.0, 62722.0], [1315.0, 27491.333333333336], [1319.0, 7583.666666666667], [1323.0, 9909.90909090909], [1327.0, 58340.41666666667], [1291.0, 63745.0], [1287.0, 17938.25], [1283.0, 2798.0], [1311.0, 40005.19047619047], [1395.0, 2633.0], [1379.0, 6413.5], [1375.0, 1182.3333333333333], [1347.0, 42819.833333333336], [1355.0, 44921.0], [1351.0, 62723.5], [1359.0, 3362.6666666666665], [1399.0, 37300.53333333334], [1403.0, 60999.0], [1407.0, 22258.300000000007], [1371.0, 61534.0], [1367.0, 23145.0], [1363.0, 18760.8], [1383.0, 6750.0], [1391.0, 2587.0], [1387.0, 2427.0833333333335], [1471.0, 55286.0], [1427.0, 2515.0], [1431.0, 2661.0], [1443.0, 24318.333333333332], [1467.0, 18661.7], [1463.0, 56922.0], [1447.0, 8547.363636363638], [1451.0, 58350.0], [1455.0, 15438.625000000002], [1459.0, 14191.285714285714], [1423.0, 61005.0], [1415.0, 17173.5], [1411.0, 2481.0], [1439.0, 9337.0], [1435.0, 41462.333333333336], [1475.0, 53362.0], [1483.0, 10897.833333333332], [1531.0, 9145.57142857143], [1479.0, 13873.2], [1503.0, 8573.375], [1491.0, 5506.652173913044], [1499.0, 51180.0], [1495.0, 51527.0], [1487.0, 15789.5], [1527.0, 12077.625], [1523.0, 9187.22222222222], [1519.0, 50503.0], [1515.0, 26919.5], [1511.0, 10685.666666666668], [1535.0, 17928.666666666664], [1507.0, 50652.0], [1599.0, 7478.0], [1595.0, 26657.333333333336], [1575.0, 14666.333333333334], [1571.0, 9905.727272727272], [1583.0, 35474.0], [1579.0, 20053.0], [1591.0, 35821.0], [1587.0, 14269.0], [1551.0, 12734.25], [1547.0, 27264.5], [1543.0, 7210.636363636363], [1539.0, 11330.8], [1567.0, 21511.5], [1563.0, 10634.380952380952], [1559.0, 41833.0], [1555.0, 12709.0], [1611.0, 10125.249999999998], [1631.0, 4547.666666666666], [1615.0, 11647.444444444443], [1603.0, 35521.0], [1635.0, 8897.6], [1663.0, 10014.999999999998], [1627.0, 16524.166666666668], [1623.0, 8905.2], [1619.0, 18543.0], [1639.0, 2990.0], [1643.0, 1628.6470588235295], [1647.0, 11558.888888888889], [1671.0, 35361.0], [1675.0, 35305.0], [1667.0, 2255.0], [1695.0, 34385.0], [1691.0, 35466.0], [1687.0, 15235.250000000002], [1723.0, 16767.0], [1727.0, 7977.5], [1707.0, 8514.0], [1699.0, 33152.0], [1719.0, 13528.0], [1715.0, 24920.0], [1739.0, 7976.0], [1787.0, 31477.0], [1791.0, 31316.0], [1783.0, 27580.173913043476], [1763.0, 33006.333333333336], [1759.0, 8474.6], [1751.0, 7987.5], [1755.0, 8607.555555555555], [1731.0, 7983.25], [1735.0, 8603.0], [1807.0, 17274.46153846154], [1839.0, 7942.0], [1799.0, 7946.5], [1803.0, 8499.333333333334], [1795.0, 31321.5], [1855.0, 7958.0], [1851.0, 8198.5], [1847.0, 8088.2], [1843.0, 8025.0], [1915.0, 27155.0], [1919.0, 13903.666666666666], [1891.0, 15909.666666666666], [1895.0, 9626.117647058823], [1899.0, 30577.0], [1911.0, 27454.0], [1907.0, 28597.0], [1887.0, 31145.0], [1859.0, 23469.666666666668], [1867.0, 8298.142857142857], [1883.0, 31213.333333333332], [1903.0, 29802.0], [1979.0, 4136.6], [1983.0, 4426.5], [1955.0, 16419.0], [1959.0, 15631.0], [1975.0, 3560.6666666666665], [1971.0, 4293.8], [1951.0, 4630.285714285715], [1923.0, 12149.25], [1927.0, 9479.916666666666], [1931.0, 22266.0], [1935.0, 21750.0], [1947.0, 9395.75], [1943.0, 18057.0], [1939.0, 20843.0], [1967.0, 11430.0], [1963.0, 12102.0], [1999.0, 5781.5], [1995.0, 5780.0], [1991.0, 5897.0], [1987.0, 6098.0], [1.0, 52363.66666666667]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[933.5513000000022, 17897.46899999999]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5587.5, "minX": 1.63133256E12, "maxY": 75723.23333333334, "series": [{"data": [[1.63133256E12, 75723.23333333334], [1.63133268E12, 7932.2], [1.6313328E12, 10645.2], [1.63133262E12, 5587.5], [1.63133274E12, 15219.883333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63133256E12, 24799.383333333335], [1.63133268E12, 10049.216666666667], [1.6313328E12, 14168.75], [1.63133262E12, 6777.433333333333], [1.63133274E12, 14123.05]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6313328E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3372.891397542158, "minX": 1.63133256E12, "maxY": 65963.65384615397, "series": [{"data": [[1.63133256E12, 3372.891397542158], [1.63133268E12, 65963.65384615397], [1.6313328E12, 9723.393818544377], [1.63133262E12, 19417.872296601436], [1.63133274E12, 15846.219052224358]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6313328E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3248.035152900828, "minX": 1.63133256E12, "maxY": 65963.63667582427, "series": [{"data": [[1.63133256E12, 3248.035152900828], [1.63133268E12, 65963.63667582427], [1.6313328E12, 9715.39631106681], [1.63133262E12, 19417.86714727085], [1.63133274E12, 15348.259187620893]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6313328E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1331.286653329521, "minX": 1.63133256E12, "maxY": 6103.4531405782745, "series": [{"data": [[1.63133256E12, 1331.286653329521], [1.63133268E12, 4483.226648351652], [1.6313328E12, 6103.4531405782745], [1.63133262E12, 2826.40164778579], [1.63133274E12, 5734.2393617021335]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6313328E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.63133256E12, "maxY": 125772.0, "series": [{"data": [[1.63133256E12, 12982.0], [1.63133268E12, 104392.0], [1.6313328E12, 47838.0], [1.63133262E12, 48579.0], [1.63133274E12, 125772.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63133256E12, 6204.0], [1.63133268E12, 65851.7], [1.6313328E12, 10633.2], [1.63133262E12, 31418.20000000002], [1.63133274E12, 20421.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63133256E12, 9706.0], [1.63133268E12, 104352.58], [1.6313328E12, 11239.0], [1.63133262E12, 47347.67999999999], [1.63133274E12, 125602.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63133256E12, 7208.0], [1.63133268E12, 76669.79999999983], [1.6313328E12, 10694.0], [1.63133262E12, 40927.399999999994], [1.63133274E12, 24403.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63133256E12, 29.0], [1.63133268E12, 49382.0], [1.6313328E12, 196.0], [1.63133262E12, 5773.0], [1.63133274E12, 7908.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63133256E12, 3240.0], [1.63133268E12, 61536.0], [1.6313328E12, 10086.0], [1.63133262E12, 8579.0], [1.63133274E12, 9502.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6313328E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 168.0, "minX": 1.0, "maxY": 126596.0, "series": [{"data": [[2.0, 42466.0], [587.0, 9282.0], [620.0, 3385.0], [3.0, 47255.0], [976.0, 10246.5], [4.0, 34242.0], [5.0, 27230.0], [6.0, 41749.0], [7.0, 36730.0], [10.0, 11360.5], [11.0, 53820.0], [13.0, 63754.5], [18.0, 694.0], [20.0, 8180.5], [21.0, 35185.0], [24.0, 64307.0], [28.0, 9705.0], [29.0, 8624.0], [35.0, 11868.0], [37.0, 2268.0], [38.0, 1629.0], [40.0, 2552.0], [42.0, 8306.5], [43.0, 6137.0], [45.0, 22721.0], [47.0, 15189.0], [48.0, 8007.0], [53.0, 4971.0], [54.0, 17613.0], [59.0, 125537.0], [60.0, 534.0], [71.0, 19487.0], [74.0, 60664.5], [79.0, 19900.0], [86.0, 33186.0], [88.0, 36341.0], [93.0, 6174.0], [102.0, 65721.0], [108.0, 31150.0], [139.0, 4985.0], [161.0, 9456.0], [176.0, 1398.0], [190.0, 66078.5], [189.0, 8291.0], [201.0, 8546.0], [204.0, 8914.0], [208.0, 7970.0], [217.0, 20272.0], [227.0, 168.0], [239.0, 688.0], [244.0, 6775.5], [256.0, 2504.5], [262.0, 4664.0], [1.0, 98391.0], [275.0, 3701.0], [290.0, 2906.5], [300.0, 8949.0], [321.0, 10365.0], [410.0, 9567.0], [465.0, 3556.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 126596.0], [587.0, 10131.0], [3.0, 58604.5], [55.0, 2656.0], [59.0, 125400.5], [4.0, 260.0], [71.0, 62483.0], [74.0, 61016.5], [79.0, 19938.5], [86.0, 33060.5], [88.0, 35473.0], [6.0, 41601.0], [102.0, 64616.0], [100.0, 69447.0], [108.0, 31232.5], [7.0, 40930.0], [10.0, 30565.5], [11.0, 126072.0], [190.0, 66198.5], [187.0, 68641.0], [204.0, 8531.0], [13.0, 63153.0], [208.0, 7851.0], [225.0, 68618.0], [1.0, 70629.0], [16.0, 842.0], [21.0, 35293.0], [376.0, 66171.5], [24.0, 64946.0], [410.0, 10231.0], [28.0, 50828.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 976.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 126596.0, "series": [{"data": [[2.0, 42466.0], [587.0, 9282.0], [620.0, 3385.0], [3.0, 47255.0], [976.0, 10246.5], [4.0, 34241.0], [5.0, 27230.0], [6.0, 41749.0], [7.0, 36730.0], [10.0, 11360.5], [11.0, 53820.0], [13.0, 63754.5], [18.0, 694.0], [20.0, 6381.5], [21.0, 35185.0], [24.0, 64307.0], [28.0, 7208.0], [29.0, 8624.0], [35.0, 11868.0], [37.0, 2268.0], [38.0, 1629.0], [40.0, 2552.0], [42.0, 6587.0], [43.0, 6137.0], [45.0, 22721.0], [47.0, 15189.0], [48.0, 8007.0], [53.0, 4970.0], [54.0, 17613.0], [59.0, 125537.0], [60.0, 534.0], [71.0, 19487.0], [74.0, 60664.5], [79.0, 19900.0], [86.0, 33186.0], [88.0, 36341.0], [93.0, 6174.0], [102.0, 65721.0], [108.0, 31150.0], [139.0, 4909.0], [161.0, 9456.0], [176.0, 1388.5], [190.0, 66078.5], [189.0, 8291.0], [201.0, 8546.0], [204.0, 8914.0], [208.0, 7970.0], [217.0, 20272.0], [227.0, 168.0], [239.0, 688.0], [244.0, 6232.0], [256.0, 2501.0], [262.0, 4488.5], [1.0, 98391.0], [275.0, 3613.0], [290.0, 2903.0], [300.0, 8949.0], [321.0, 10365.0], [410.0, 9567.0], [465.0, 3556.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 126596.0], [587.0, 10131.0], [3.0, 58604.5], [55.0, 2656.0], [59.0, 125400.5], [4.0, 260.0], [71.0, 62483.0], [74.0, 61016.5], [79.0, 0.0], [86.0, 33060.5], [88.0, 35473.0], [6.0, 41601.0], [102.0, 64616.0], [100.0, 69447.0], [108.0, 31232.5], [7.0, 40930.0], [10.0, 30565.5], [11.0, 126072.0], [190.0, 66198.5], [187.0, 68641.0], [204.0, 8531.0], [13.0, 63153.0], [208.0, 7851.0], [225.0, 68617.0], [1.0, 62610.5], [16.0, 842.0], [21.0, 35293.0], [376.0, 66171.5], [24.0, 64946.0], [410.0, 10231.0], [28.0, 50828.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 976.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63133256E12, "maxY": 66.66666666666667, "series": [{"data": [[1.63133256E12, 66.66666666666667], [1.6313328E12, 33.333333333333336], [1.63133262E12, 33.333333333333336], [1.63133274E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6313328E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63133256E12, "maxY": 58.31666666666667, "series": [{"data": [[1.63133256E12, 58.31666666666667], [1.63133268E12, 2.8666666666666667], [1.6313328E12, 33.416666666666664], [1.63133262E12, 11.183333333333334], [1.63133274E12, 27.483333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63133268E12, 3.533333333333333], [1.63133262E12, 5.0], [1.63133274E12, 0.21666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.63133268E12, 17.866666666666667], [1.63133274E12, 5.666666666666667]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.63133274E12, 0.2]], "isOverall": false, "label": "504", "isController": false}, {"data": [[1.6313328E12, 0.016666666666666666], [1.63133274E12, 0.9]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6313328E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63133256E12, "maxY": 58.31666666666667, "series": [{"data": [[1.63133268E12, 21.4], [1.6313328E12, 0.016666666666666666], [1.63133262E12, 5.0], [1.63133274E12, 6.983333333333333]], "isOverall": false, "label": "HTTP请求-failure", "isController": false}, {"data": [[1.63133256E12, 58.31666666666667], [1.63133268E12, 2.8666666666666667], [1.6313328E12, 33.416666666666664], [1.63133262E12, 11.183333333333334], [1.63133274E12, 27.483333333333334]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6313328E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63133256E12, "maxY": 58.31666666666667, "series": [{"data": [[1.63133256E12, 58.31666666666667], [1.63133268E12, 2.8666666666666667], [1.6313328E12, 33.416666666666664], [1.63133262E12, 11.183333333333334], [1.63133274E12, 27.483333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63133268E12, 21.4], [1.6313328E12, 0.016666666666666666], [1.63133262E12, 5.0], [1.63133274E12, 6.983333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6313328E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

